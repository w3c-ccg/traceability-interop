{
  "collection": {
    "info": {
      "_postman_id": "e9c7f21a-ef69-4217-8f40-0424834c0fdc",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "167b2d1d-e6f6-4f30-a910-069a836f6357",
        "name": "Clear Cache",
        "item": [
          {
            "id": "700eedb8-6ee5-4f61-b7c1-4ca8d5f74c3a",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "849dd1b5-316a-4a19-a361-a7558b22ec42",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7366d44a-e335-4caa-8e63-a3d0ecac31b9"
                }
              }
            ]
          },
          {
            "id": "2779ec15-a464-4e41-9c59-8baa685cc008",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "67273df8-1e40-4df1-acbf-163cda6f6419",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "12a6d238-8fa9-43e0-9d98-92d74860c178"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d9aba9e1-0be8-4f66-a95d-3ab27b712e4b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "114e431c-785d-4335-9c8e-f2510ec1864c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7268eafa-cdc4-4f59-a3f8-06ad2e0c790b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9e866ac4-f167-46b4-9ad0-3a674c5d67ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e399af5a-cc05-4a96-9990-8803b4803452"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "49d0125f-1172-46c6-84fe-2f34dceea6dc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1791526d-6ee2-41d5-8508-f4bef37623e7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0a40b202-6fe3-458c-a927-3e404d323997",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "20662e01-afa3-4cd7-9321-d1f39f031247"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "54bd78e3-39eb-4143-85c7-805cbde87424",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "73c222fe-b993-4533-ba34-6dd85dc5cf72"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bbdaddd4-5217-4475-bfe6-4a95226f491d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a73da2de-1fd7-4b32-8c1e-5431037314c8"
            }
          }
        ]
      },
      {
        "id": "8df07507-a4f1-430d-af55-b9804e053dda",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4f122086-a722-4ef5-80d1-2a2d5b360da5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b4ef7479-2105-4376-b773-3028fad06e17",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d11afcaa-ddb3-47c0-acff-d14440290e02",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ed31627-be52-406a-bff4-ee3c7f9aeed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "656a37c1-e215-4b2d-b107-fd0bc3801ce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c446900-ccc2-4342-bb9f-466bec2cb067",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e7a07f3-6669-4a9b-9558-a8c22dade989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "77883e3e-bfcf-4574-bd44-4278930b450e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "237cd413-ff25-4ab7-9610-e9ff2376bba3",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69c63968-3f52-496c-a93b-5b51881c276c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d1a4f03d-63e0-4105-8a3e-c0653234d3b9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f9668dbe-fa94-4398-bec9-c10b77b4bf8a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6bffd3b1-7453-46ee-9a46-ade0804f9f5c",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8da39436-25f1-4479-b7ec-caa5753344f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a47500b8-5e3f-4bab-b0a4-42494cd47e08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac115d09-9238-4460-9127-deabc08f309a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a0a995b-51fa-44cf-b6ae-07942bd7f454"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8e39d788-e4d4-4ea0-beca-4a546e4693d8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d560ed72-bfc9-4aa3-848b-93dbca2ce004",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a632b0c2-ce12-4655-9d43-a1380896effe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "158e516c-81fa-45c7-b4f6-d15fae4c8507"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5964e1eb-4c34-48ab-b635-caa05226bad0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "29491c75-c5ca-47fb-b60b-d6e4b8ef3846"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2ec357c6-95d2-4b75-b45d-95e16c748c7a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d4e141d5-dc25-4250-b4f7-c36cd4220ab8"
            }
          }
        ]
      },
      {
        "id": "24ac5ca1-ad8e-4eb4-9fd7-99ae32c505c6",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "89d2baae-161b-4afe-b5b4-6f7418d771c9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4788c3e1-5808-4344-81bf-be7eede5c7e6",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "fd736190-4263-463d-978f-405a4bacb73b",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23986035-6294-45a2-bd06-e014e1ad6127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c21d3e92-6683-4212-a8e1-eeb703bcf272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb388b6-5db1-444e-be80-5274630adde7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c0d3f04b-c345-42b2-8a19-6db18790acf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f9df08-3606-4bca-a2e0-bc721ebd0a95",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcff4884-96dd-4835-8174-1852561dfe9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59429e76-c990-42f0-8360-304ac9bde615"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "627f7a35-3b04-4bc4-87f4-a734e2cae454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f590d3a-11b5-4e15-aa05-09b08703baa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e0d7d1f-517d-47dc-b9ef-473a224e184e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de0f0fd-ef21-44ce-8ce4-a13370ffa353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "920e3a2a-85f4-41e8-a839-ceeaff2b06bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cd607e7-6ea3-440a-b8b8-67df44741f8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc9496e5-32d7-4e33-8ab2-1345d04c4a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef52c6b-3f60-4619-a8a9-66fbd9ce0179",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1dc7a30-71ad-486d-a4c8-9add32873f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12407b8a-1cf4-4ff1-9316-25e6101e591d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "246d938d-7da9-4e4c-b277-c155e2fd3aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd64231e-d0d5-4997-bc87-54e6d504255f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e36ca2-c297-4fc8-8b86-47ff5a5d2354",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03ef9c31-dc77-4fbd-bea0-570d5c0afbaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee884588-7ebe-4acb-9982-ff74e64dc393"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "732e8632-9fea-42f0-8cf1-703918bdfb5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f060779-d577-4f61-897b-27b889c02f3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c094648a-0d7e-44e8-b445-48469dc0aea7",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf273b4-47b5-4966-bb2e-8e69ecc4932c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acedc957-1e5b-45a2-8e28-7ac9ba082b3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8469a3f-807e-454a-9d66-b6a121967df4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "42770f98-604a-4b6f-a265-20e166612146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c51c393-60e4-4af2-a961-12467691f0fb",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62d82ced-1f62-4e6b-be0f-dd431b850b82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bb9be0d-8853-4ff5-80de-4371ed6aca04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccb94f2c-5c2c-4f10-bcc3-43908430a4a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6125b147-726c-4020-bfa9-86fbbcf82d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fb62807-8862-4898-950f-d9244aaac6da",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f42ae2b5-1971-4309-a429-2338eabf38a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71820b9d-9144-475e-ab8a-5fc81b013485"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6cf3f56-dfb5-4ba6-816e-216095578aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "88158fde-0880-4f15-aad5-e2cfc7f76a1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dc9d37d-6491-455b-b18e-51967a99b4c2",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f692487-c7c9-46dd-bdd8-952790df90ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0687e213-fa8a-4060-af5b-00d98a1e16de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f21b365-9ce7-491f-b700-f6495bbacf62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6cda98cb-9b35-4dfb-81bc-9bfc6fa263b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fee8490-2b08-493e-bbac-5167c67b4f4d",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9008db45-9251-4b46-b339-7626f806650c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af5331df-7227-438a-a982-ccd02f1f6945"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcf1f4a4-acde-4296-90fe-11f4f5600bf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d044c2dd-cab7-4957-ada8-b54615b6bbef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "140aa14f-3ee2-4a11-8cf1-6c20c4fc7e42",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a184205e-aa7b-429c-be72-bf5a2d3cd20d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "397ca56e-0bb5-4586-bae7-eca80295ab48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ccb429-15e0-4479-a948-27288f0a2cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8becf1e1-2ecd-45fa-8f00-5053875d6b6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dfc29d0-a704-4dc9-bb22-f0aff6347c90",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9feda774-037a-472d-9c2f-2055c8378097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57725d99-8d81-4933-9d8a-71cd1a1c76db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b6eebbf-cf83-45e4-a698-eb4bcd621529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8abbbf91-7fe7-47e0-bd76-51bf228357fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e33ef6a-c9ca-4305-9098-8eb22cd453d8",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd05bbc-f7d9-4e63-96b8-98cd9f963a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ffab772-3e27-4941-91b9-91fd00d1a77e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21581050-a520-400c-9b47-4ec5516d76bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8929534d-505f-4f78-84f2-6e6c1e448a90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbcad28e-977e-4c44-bd89-28708e16df9f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c9bec80-1754-4d0f-b11e-e71290d09bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8ffba09-4567-4b09-8c01-a0a121abb5f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37974af8-8c25-49f1-aa90-890d2b5feb38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e66896b2-33de-4e94-a21f-d527e35483ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42674833-0207-4e33-b6a2-8381e7585bcc",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b3df2c7-cfc8-4012-834a-758d0b36d25b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7038f32a-1d9c-4371-b55c-854b46459e4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71db5afb-ed9f-4184-8641-c4cf3b9914e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62c733cc-89bb-4c5e-809f-af61e0ced03f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5110c3fd-f03a-4afb-84c3-0c727e142a7e",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b22fe71e-13ff-436c-a4c8-795cdd7de29b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fa75524-6606-4935-ac15-a37e11f445a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da3af261-dd0e-4ab8-a032-95fc8081919c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2429607e-c496-4774-a88d-ab5b7567b34f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9555f36-c626-4696-b746-25cd81982a3e",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1f8785b-642a-4148-944a-1d3556196228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed1ea12b-a435-4035-93f7-559a70e35f9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ba552e1-5ff1-4bc1-88e4-b887f6876faa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "71cd2f7a-b932-4c31-a267-349bec2120c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ec1bcbd-e4a9-4214-a4fa-9828fa78bcf3",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d563e48b-a8da-43e7-bb79-43c2ce225ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c0dbc81-4fc2-4533-a5b1-b8935ce34369"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3def8fbd-1bc4-4875-800c-f5b64f8d8ffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bb1bf09-0c6e-4f89-a759-2431018cb377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd624627-f5c6-44ea-af97-4c40f487fb04",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d946259-e062-4c3f-b304-3e1573e0bdf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdc1be71-5885-4d34-aaef-b3ef86274752"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d81f7239-55a4-4535-a788-b325d9d0580c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d1dffab-d89f-414b-aa15-0d1de9e50691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44e3c6d2-8223-49fa-b5c6-6054c56af5f2",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3af6e98-390e-4aeb-b0ff-1a943a3a6acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cba49676-cc9f-4d21-9955-767679886515"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ca362a2-36f8-48b5-a2a7-502448645286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9aa8bb9f-5bd3-42ac-950e-137490b2357a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f8972cc-8cd2-4fd4-88e2-737731cfcfec",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "234e4dce-0572-4c9b-bb8a-0261c54d2f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5893e06-fda5-49a9-a274-18d5d83c60bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ddc51ef-dc71-4e34-a432-e64504e4b1bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a17823ba-5fb1-4e82-800d-bc49a29b0b33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b633dc43-ecee-45ca-9e6d-14bfece7b6f5",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c4fd526-4729-42d4-81f9-53c9b5fb83f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b633f0ba-b717-4e35-8c5e-ca72236ee885"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cc193ac-e6fd-4a9a-ba70-a2f7a33b5517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a51ee5b-edcd-4903-87ee-1b8f52b2128f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc24f56-3491-43a4-b99d-b8af12277706",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cd59bc9-438f-4140-9809-b4f55a2bb73f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b0704ba-b02b-4779-b2b5-cc0eabcd4925"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1eac224-9f56-4cb3-94aa-2a9b66754eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c13c87d7-0152-4d25-91af-40a058f4051d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d66c94e8-8c54-4820-888f-7aec9a25afc1",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4468b63-8fad-4f7b-8ec8-868e6b2fc3ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f64ceeea-e977-4329-81af-226f7a46b691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c82cc10-f2cc-4613-9932-3043fb3c30e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "21e1507e-c2fd-4f7c-b780-09fa2b7af720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ce7ebd3-c5bd-4584-8288-e9599aca6543",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7cd9ed5-fff2-4d4a-b00f-6c84a9f5e771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "849e95d4-23ed-4730-9ea6-b0dc1f27983e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3554fed8-b334-49e3-9ecb-52e9ad0ebe84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d39aac68-5314-424c-9d1d-98427f5ef3fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aa8db8e-fc21-48fe-b233-4405152dd08f",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faefb76c-e16b-4b78-a019-deead2e3d071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a62c376e-2995-4766-a821-ea44446f4682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "107c4f36-aa2f-42c1-b003-77ba99a2f9da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cdb71c3-346c-41be-976b-d73b13f4b237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f270d32-8d03-41b8-af8c-0c214ba5cef1",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f10d35bb-cb7d-4531-a401-096efbcb9f79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e85ae74b-ee7b-4f36-8268-127ac1d23b46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eeee3b0-f481-4439-b492-6919d0533c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7871d906-785a-4a48-8dc0-8064918e9229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a6c4f58-fcaf-4573-845d-bd6d61e60007",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a161070d-538a-42f7-bc8b-a4ee7796659d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecf2e7aa-a508-438a-b9a0-a9af2c580561"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9fe4377-ea6c-4fb9-b502-5b1637e5e898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "208b7937-705c-4aa1-abeb-b405f410c259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "707bac4f-bb6e-4356-b6b6-2af98c277351",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4fe5a17-e875-4a94-8cf8-09d66ada7ce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6bee83f-9031-4a13-985b-663a7305c61d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcfc2b42-cb3b-489b-a5d5-eb3cef5b5eaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cfbbdf4-6c52-4ecd-8f50-e927343f4995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "785e395d-37e4-41af-916b-fd94501eefbd",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70f5a4ad-42ad-4e92-bec6-7f48ae8adae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a77481e-3427-4229-9cec-986388b5b72d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cba4b4b5-65de-41c3-925d-922173a6a14a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "96ade086-32fa-4f25-af07-bcdfede613ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eca78a0-f111-439e-b80c-9710757f97ef",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c27bc5d2-71f8-4677-9257-2d69602658f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cfca925-719c-4dce-ac81-4c8ce3c92b45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47772957-447a-4f4b-90a8-5d1bf987980f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "560e78a9-c245-4a54-a241-6942b41d09cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae1936a-4044-420b-bff4-ea7d5730651b",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b34d85f6-fb45-4130-b076-588478b3c3a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "341f49a7-43d3-4210-b3c7-ef453ea5aaea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53d17f96-bbe0-4c34-bb7f-1ecb7a006047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d15db6af-a7c1-4fee-8dcd-2626b1aa2882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6da85297-dba0-4b75-acee-1cbb023d1e3f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc4361ee-6d53-42e7-bf5c-fa470ee23776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0137d79d-8d11-4e79-8d6f-94282774ab86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17fbbc6e-008d-466e-bf82-22043f6b7be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ed9838c-0283-4c3f-99a9-83d4533b1db9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e5c0032-c3d8-4cb9-869f-704df8ac772b",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd446c96-3ad9-44e0-bb91-c728797061c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a844b2b-2b20-4e16-96bc-57091efc8f7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "105f1cb2-07ba-465e-aa17-f1671f2761c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf9cd35a-c6c4-4713-838a-10a3acd47ee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7f54938-e38d-4cc0-a1aa-c52b76e4ff20",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb0a1198-f463-4c6c-9fec-7167d3683f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "201a831a-8554-44f9-98bf-f19a6f7ba6a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd9c0e8-f7eb-428b-b0dd-c5cf32641b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "9fe95145-3253-4294-a266-ea5394187984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60c13d9a-e288-4a4d-a68b-4cc23af678d1",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a2cc44f-b11b-492c-8dcd-426fc06002c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d6bf7cdf-161e-4a84-9819-dee5c21f0d89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3a77dc3-c5ed-4ca9-885b-a21e2abc653e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f4b4700b-b3bb-499a-af09-067974a16163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a4181b4-c33a-460a-a51e-29bb4a34ab36",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c14e7984-265a-43b5-85a3-d0b37eb27303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf88d7a1-4026-4eba-b0a4-53adf43a7149"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73217bec-1e5a-419e-a9c1-b840157714ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e55324fb-81cc-4f8f-b044-712022582da1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de45c9ea-6014-4ca6-9d5a-c98e5f3998b9",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14e72229-05ef-4309-8ebb-c4fec535508d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dc9a446-97f7-4470-a420-e6b04a081216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "979e47b7-2ba0-458f-b281-14acae84f352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "33613e1e-2fd6-4426-8854-d343be77fac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cccbd3bc-7684-415b-8faa-d482d46bd181",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b9fa72-38d5-4e12-839b-09d37368b36c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6a25a33-be02-4941-b4af-9f6a7a471256"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "847ae0b6-5337-431d-b5eb-1afdb8eca95f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "985d82a7-8816-4168-a862-e77e74fcb84e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "784fa1fb-ac43-48c0-9c0e-8a4de02cbe79",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfdb18e1-65e1-476a-be4a-29caea30243a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "392b8233-0b4d-4fbc-83e6-39b4653fb5f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "710d4db4-a4d1-45ec-aaa1-b5a2fdeab069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d000209-2e1c-43a7-8676-c7e5bbd498cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c0319ad-5986-4adc-971d-7be7c8ae6e64",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6325a4e1-9df8-4062-8ce9-865692270731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8513a52c-7d0c-4ed6-bcdf-077964173bbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b034e3-cc57-48a8-9ffd-8134fe93a284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "16fae284-7912-4cb0-8f64-48bc2d472b1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20394307-2953-470c-96bf-686d7ea73193",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57d4d972-1352-4cf2-b6f5-2ed5299597cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8920801c-5a37-45fc-a9b2-c1edf5af9629"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17521fdf-e2aa-4e73-8cd9-af91469aae69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b073e82b-bba4-4364-bcb8-d68b9eea61e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e6f8a60-4d60-4d92-af6d-eb77cdea28f2",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17dd1f92-16a6-408b-be5f-7e4819fa7a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf1cbbae-6052-4661-b24a-fdb9c67b412e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2143537-b9b9-4560-9c49-6196ae5e7b94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "562fa0a1-4324-425a-a9ef-12a1781ee708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "866f819d-b505-4e50-8573-eadb8d88d15a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "232d8336-0f0b-46f6-b6a7-e08f46759f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1594fda6-d57d-4d75-bbef-502c6d8bab86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2083e357-553f-41ca-a00d-19ed39bd7ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "857c58f5-0d9d-4b08-acce-07dede8a04de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30a0a965-854e-4a93-941b-6ff6a17ce012",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16dd04e9-4962-49c5-b927-be84a48656da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "105b85a3-a027-420b-9eb2-0c8ed45bb6fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc16c760-ac0a-41b8-885e-e9d5790864b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6776b8bf-0da8-47e1-8dd5-3a28521c4591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15855f28-d4d5-4196-b235-bca3a3314ecd",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e3d5bb-6a25-4d15-8311-7cddaed95a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "736521ef-3418-4142-a29d-19bd28246850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7190d17-746d-40b9-ae2e-11fe6d586a09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e73748e-48fb-4709-9a38-cfc17a6e2c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "290e6f9d-4377-496f-a252-e5829f2072cf",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19ffc8b3-08d8-4e80-93af-8516c2fb5fd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02d4318c-926b-4d96-adb7-f77ba247fdbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "955d0be0-fef6-4373-86ff-27d53d9df2f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "da6f30b4-62dc-4875-973c-e494f61fded6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c9955ec-121e-44b6-903b-7e2221bf939a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff63278-0333-43a5-a794-ec0a1ab047ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72e1558f-798f-45c2-aa3e-d58dfb471169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc7c331b-c5ed-41a2-b07a-a98e80500c67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d816ad7-fc46-4eb0-adf0-fe8bba013f2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f2a7e5f-ecf9-49ea-9874-e3a9f273d546",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "612427e2-d115-4ae3-97a9-72a37d6dbad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0954e31-d337-46a3-9145-d162d9fdce68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9a79c26-2d3f-4c89-ab4c-b19c08a1a8c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c210d31-aac0-4fa9-bda5-17402e52b959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4698e305-de5c-4b75-825d-268a0f964545",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "061b1a41-c4f2-4774-ad4a-1ab1a411c480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43c58363-cca6-4c00-bad6-0a914d2b3fa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ebefb1-37e6-4068-bae1-c3a4211bfe98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b33ba3b6-47eb-4508-b0a1-18b3707d660c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "311fc284-f7eb-43b8-b45c-5686479fee4b",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7456efe-6291-4b53-bca2-f37e71a3ce4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20f44fdc-596d-47ff-886e-d545ff31d06f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc8f555c-0ce7-4e41-95c1-158cdddede8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bb17b12-0444-4a76-a246-3aab2cab7f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee572e4-dc15-4bd1-aa9e-85346ae0d59e",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b355d38-447d-4964-a51a-537b578cfc36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc30bcf9-f93f-4a23-8e74-4859e761b573"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b5076f-42d4-4bbe-ace0-909e82b85073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe7a8144-66bc-48e4-a499-6f40340e9e7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48dda455-9594-4374-94bb-493973157dd6",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46b4db54-ac2c-4dad-b8d4-14b3c61f48e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72c3fa8e-95ca-4dfb-9681-83ee2f531759"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a87c77-83f8-4f6d-91ae-ec39ab65053e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "851e07c2-7cbe-4256-ab93-95a3d431d67a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e95797-f178-4977-8baa-13f419565fc8",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "424fa9a0-f2de-4912-825e-858a01be371f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e41161d8-d88b-4e47-8526-b5089264ef1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ad1bb8d-93d0-4b6b-8db6-920c16464ce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0adeb1f-92c6-44fb-b6f6-e05aa5fdc961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccabea86-e804-4292-9473-fb0dc123a9f2",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "874804fd-ca12-44f4-a113-0b9b2f32d6e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a43af529-9b6d-4ef4-82b8-d3bbc299c141"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceb42f42-0648-4aeb-ab95-864045029cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "42bfa4f1-7a94-4fca-9654-47f0e9928d98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34335e22-b236-443f-9a11-ddc3d6e99858",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa077e10-c449-49eb-b1c4-0bac4e0f4fa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bc1e266-5fcc-4e68-8970-b7d06ec6fc1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b917271-c2bf-45b9-92d6-cd4262ba6db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d9fecc6c-8733-4505-be22-1f1d8434471b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "504039ba-5151-492a-97d0-1cdf1ace2afd",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc25530-db00-4a35-85cc-6ca77d9ff200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64b828df-ae1a-455d-a728-5ef37d71ad5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c9c136-905b-45da-9dc4-bc5da5bd4269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ac4e9d0-8b4e-49e1-b88f-20906ea031b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e592daf6-57db-4738-8329-f72f1dbcd639",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "692c60e8-3925-49fd-a999-14a8b7f882b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f274dd1-d0f0-43ea-81af-b99eb1ec7b71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3739cfd-013c-4b21-b2e2-d065cf50227d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1c20c46-e5a3-4b3f-a9ed-b8b68ac34825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15568cd1-7542-40d8-b4a0-34cc16b8f2ca",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5648a02-4c1f-44fd-aa49-06a348ad20f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28c7594b-187a-4ea1-bc3e-fadbb9e5a23a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad6cd38a-5f8e-406c-bbf5-2a6a1ee0beff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ca44d87-e2d9-49c0-9ab3-4befa64a5a98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a2be32b-0dbc-4aa3-ba9e-73b876b2ea26",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28d74606-3d42-4edc-9c14-8ee7e8aea28c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfab54a6-92ca-4c3d-9ba3-84fc068a1c52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0055557c-05b4-4aea-8b04-7c5e2748f814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f249082-1d79-42a9-9d43-5001b702f309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "089c0059-b6da-48c4-bef9-2aa3d0890a2b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bed0e95-dd00-4aa9-ae3a-7b8fb5c07eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc2d4864-ba1f-403f-a260-307024ae686e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb3901f0-cc43-49bb-8741-1cdcc67196ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6eff685f-cb63-424e-b405-0f92491af20b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "498e215a-050d-45bf-9bc2-2af2a176efce",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8763cfda-f611-4e70-bd99-220892cb8d36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20a9c92d-87a4-44ff-8ee3-bdff315daf17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6536925-b3b8-4b9e-9056-2940637064cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "2329936e-9efa-46e3-b6b5-4ceed1696966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b970efd0-8090-4eb6-b5c9-c973ff917e82",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45dc16e1-2278-4343-9fa0-d401fce7f62e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00e7236c-a7fb-446d-80cb-2baa7f3614d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ffd5db1-1552-4155-b3af-9b6c145aaecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9fc2ffa-b971-45f2-9fc0-6fdb854c995f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e81ee07-94fc-489f-8833-81d7f5e56438",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6263111d-7fb2-4d6b-9332-dd77bdfa7610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27473a40-0eaa-48cb-a724-d43f088b915c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3388cde6-9569-4d2c-8046-a752e5781e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdb37bc5-22a3-4046-b27b-70cd08fd7e51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30009df1-e2c3-4221-ac21-faf0472e1ade",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e2d19c8-1cb1-43db-9b84-8c9010e478c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02ceb679-f117-4b11-86ed-1aa1706a0c8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c1ae4c5-3800-4945-b09e-5524b9ad0c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8230856-ab4b-4fdc-8ea9-63b8ecc3522f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a576cf8c-eebc-4a3a-b282-3d72b782e69d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2054c27-9cae-406d-9945-9219dd4b4543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ce7d29b-a16d-4237-b53d-adbb9cb11538"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d36a4568-378c-4afe-bbcd-d3eb9604a5af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e89423e-409c-4f7b-859f-38c18ed8a048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ddf604-0d68-488c-b8ae-ebaa686db382",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c0021af-0b53-439d-9506-0760bc21b343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "768fc3c9-c6b4-4baf-8fb5-1eca220949f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "410262f7-84b1-46de-8c97-ef86368fe31f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "787b834f-f2ca-4ccb-90cb-9da4fe857e6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b5aa836-f8bd-440e-a80b-4e3f0b1ba863",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd7c5639-b071-4487-8739-3f5182789dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46b39f14-3c45-485a-ac69-ed96e3376d58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3241960-df18-4c63-b74b-e0433943e4e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0826d9bb-9138-40a1-9af9-97473030e7ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ba36bbb-dbd2-438f-a946-b81be0227dec",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c25a04c-f70e-43b2-9851-03a38fe8a961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09c733d2-f3c3-47da-a33d-091b00d2304d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f249f82-5dab-4d9f-b6e0-cb28acbe969a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7b00747-8c88-43b7-b26c-444ffbb2b308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a9ce253-3f9c-4a6e-9c9a-d90a559c7f4e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe0c721f-8f80-4b76-9494-c8bf9d3129db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02679f36-0d74-49d7-855a-fc2c2f678f91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9764e302-aa3c-4df3-9ca5-bdda1a747671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae9168a4-7f28-42d7-8707-1323290bec0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f917894b-0d1d-4e3a-88d7-03f359ccaf75",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9175d042-b918-4314-90f3-02e322f16b91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceb2dce8-81af-4bb6-a78f-e8bd0bd86e4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c3210ce-b2e9-443c-a3d1-c44b361904cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e92befb-eee0-4b66-b3d8-f74f7d2313bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e64ca9f-9afc-4813-92e3-6008fc7a6bcb",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9924a732-e721-4ef2-8377-7f97205c9c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b18b368f-bff5-4efe-9533-6121013574bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43b72ae5-dc1d-40cd-9c0e-832898096a47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fb19868-7d94-4899-ba79-c48ae8e06024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc2799a6-5cbf-4350-a879-2dc96502e206",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb6f90f-7fdf-4732-b975-0de432f21287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c60d9c6-d40b-4e79-a35a-2b338426254c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cf44661-65ab-450e-bedd-36d608dfbb33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a485e70b-ca4b-47ce-9f32-7ce59d57bb26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7abed974-22ae-4308-a233-a76d3ddc2a81",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0736babb-ef2a-4d7f-ab78-285dcbf29dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03f6f922-8715-408c-80fb-dd2d974fe1e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a89f679d-314e-4942-b6e0-6def3015b005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ac382cff-a72f-4615-94e0-29a8bde5aff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ca3a270-7631-49ec-9555-df88806bc93e",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9610054-85e6-4609-9600-5b688f341964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d99227b-1a48-474a-9ed6-efa7895efac6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa35609b-594e-424e-99b8-3d206b244182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdd5f3e0-fcc7-4890-b26c-5ecfd2ba0f4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95d3a22b-1207-4e6b-8207-78d97c02308a",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edbb6769-bb4d-42c8-84b2-4f933360f314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d50a1ee3-b1fc-4d32-ad2e-ebf38adb0773"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe469700-938c-454d-839e-58a9be2957d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1fc37122-02fd-465e-acf9-4e4b2740366e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3bb649d-e252-44b8-8c38-c42c625ade58",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a87fc8-8cbe-423a-9346-136ed3df910c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5efbb7d-f3b3-4f74-8726-6c63ab8d77ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "249b23f2-e585-449e-b2e7-15a34917d3bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "291101f5-eed1-47b0-a02b-823412fdf8ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc3b2eca-dc28-4da3-ab8b-0c911f35ddd2",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a20f3133-a663-4586-b022-62d211a26c3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd05510e-fb2b-4f0b-88c4-98d25231f083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e67adca-908c-4968-ae8d-91f98131e411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6da198ca-1a66-49a5-9ac0-2639459e0c36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e53b0888-b009-4a72-973a-0c5baa03de99",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a78cac-87e4-41be-a46f-a2ee9d1a1145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaa6e552-280f-4f87-8b11-6b5118183ada"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad8ec3bc-8080-474c-9d4f-398eb4615fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3de068d4-130b-4df0-8568-012fc77c184c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eeffac4-24a1-40bf-9543-7cc2c8e0e08c",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8b8818-f934-45e0-9135-1f10e4a626f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4137871c-91e9-45f6-8108-c4b957af10f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a5acc4d-3092-4c65-8d23-570862553e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4d817355-9e7e-4f2f-b98b-536fc803d5c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54d4a23c-6843-481f-880b-8183b3066534",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceeb7c56-7572-4b14-aac6-cfe6e0b8565a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5414e039-a9bd-4dec-9ae0-1cb5b054e5f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0bba347-5bb0-4b84-b389-6787e68dcc12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8d99ac9-427c-4ffe-9ed1-91ddd9fde343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74357b76-a8fa-4aef-a6cc-61d279fa7d87",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deef51d2-4df9-4851-8b8c-9efc209abe9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e4d8ba3-4345-4581-9a17-86b7a1b7c89f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f26d4f47-2f51-4a36-8e03-b91e33a8151a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "46ab6d65-cd57-4d78-a07d-b6596718c5b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d2c4b1d-e27a-4f33-8fa5-8bcf9a2ff2f3",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "605f4f7f-3542-45b7-97e2-bbca9b53ef97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84ffb91f-2c7c-4db2-b19b-133e98b3a890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aca39cc4-695b-4888-9bbe-7b0500997d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a8bf372-f596-468e-9ff4-79d6f9d89e69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96eadd9d-dbe1-4bf1-8702-18a7328f46e9",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0158c9c-c9de-4bc0-9578-0bc04687bab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c013479-d198-441c-96ff-d8d1a20ad64e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c2b491-4100-4052-b824-ecc72af43d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "69f21d3c-db0d-4008-aab1-8b5e1aae6537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de1571c7-b8de-4a41-8214-5d93776862fb",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09830203-7e5a-4973-9884-a83cca108b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03f7986a-47db-4e3e-a1c7-3a8c1df15c66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a5e72f9-cdb7-4395-90de-ec74ae71b8c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d9f1191a-1542-4fde-89e2-17119e5c8ee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aad72f7b-2469-4b64-8f9d-80274423732b",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4feea828-1ef1-404e-9e45-6c56a4d226f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f862512-8f8c-45b9-ba01-134a11f1c095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddc6ea66-3d92-4a12-8f0e-7af278d738f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "872b6b7b-f068-4c78-82b2-47089c17b9bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f6cdf4e-8a47-4a22-a21b-4a32fd3fbc39",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a01eb4bf-b8c0-4a44-9031-48b26cc59b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea14a505-6861-43b1-aa7c-321e315d8db9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58fdbff1-97f2-4161-ab8c-25282a7adec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "464dd7f4-f8a8-4212-979d-cc72aac856d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e7bd98-6115-4e4d-bfc1-648406231e38",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "443c2519-4007-4003-af1a-eb2f302e4c22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "890f660b-6135-4aca-a1fc-c3f7a14ee624"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fff0b45-602c-4475-8c0b-0e693ed230a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "34703e9e-dbfb-4a3d-9b83-ef0a382a859c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "976c8757-e9e7-459b-abfd-3a738d53f39e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d9ef17d-ba48-4173-956c-aa87db8752ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6060649-13bf-4ea8-996d-ace595c77592"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41b55d65-9e24-4d73-b0c7-5c42ba80be40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7c9f606-7040-42a1-8797-a66cd9bdba92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9edf7784-7185-44b1-97ca-5a4085db7efc",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed56eed-4703-435b-b22b-6913882670da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c11a77cd-3347-4225-abc5-da6c87dcc36e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d189f2-24c9-4e46-a992-d7395cd4f604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7fb0e4d4-f316-4f00-8836-fcdbb6eba167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "282aaf43-ba79-4860-bbe8-ebef7148e667",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76db0b80-efd9-4b6c-8121-a3ce72d9eb7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d7a0405-7690-403c-891b-ab9acf2c27b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "612a0e26-dc25-4173-ac86-632b0c5a6ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf902cdd-0548-4b5b-ac0e-93574e5f6866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "636b94ad-c1a7-4a67-ba1f-bea338dd8246",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c0795c2-866e-4a1b-95d9-cb7d967adce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0cab74b6-c6bd-47fa-a8fa-63fbaad28ca6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "002dcce7-9adf-4c69-93e5-b61b688a158f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2846b50e-a003-420f-a7c3-d384ec93c056"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "837d63f7-ce9b-41f8-8b76-17cd185c514a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4843f7a4-0c03-46f7-b662-3ff219be2ffa",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "452e6b62-e7fa-4f8f-87f1-3d285481e5f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a983b7dd-eab3-4464-919a-26194bb44681"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf67590-486c-4d1f-8c42-3a693b97d038",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b7c934d2-88a9-4b86-925e-84600ef85603"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e529f617-e684-42dd-90cb-4d00fa923884",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aa1070ea-8009-453a-8457-fa6ae3123f66"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ddd5bef0-2753-4448-8190-ce2a5fda64bb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9965b719-8d0f-488c-bcab-425adc9bc218"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c95f5ca1-58f9-4615-8873-23d978d2d451",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "35f26f2c-3a70-41ed-9ebc-1bbb26ec7867"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2a10e13b-d694-406b-941e-5ba15e055732",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4043a30e-f67a-470c-9982-3f158ab404cd"
                }
              }
            ]
          },
          {
            "id": "c505c5ef-c4fe-4c5e-8650-c6d9d43595ee",
            "name": "Positive Testing",
            "item": [
              {
                "id": "aa9fc1ea-7cfb-4637-9026-7c1c86e68288",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "79f5f427-5787-4ffe-8184-4229b906cbd6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9514ab3b-24cf-4192-8866-a8033ae53f91"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd0a3f96-0d5a-4005-a4d4-1c82b80613ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2034c60d-fd1e-43d5-95c8-817c57ed12b9"
                    }
                  }
                ]
              },
              {
                "id": "c23c9aea-3013-4a5b-8e96-0195f56b8bb6",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0bc5851a-4b38-4289-87b5-919708e51e5e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bc8161b5-960d-49fb-82f3-33921bc9ff01"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ddecd8ca-f0a2-4790-a040-36f53dfc5311",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c854d349-aba4-4fa2-96ad-c4cf5c170887"
                    }
                  }
                ]
              },
              {
                "id": "671ad45f-1437-4b48-b150-196f48f38135",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "38b8708e-2329-4e04-a930-e46af9b48bff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ee6795a2-7849-48df-af42-dfa082911a06"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2e5eadf4-3350-41cb-be01-fafbcc07b171",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ce3c028e-2a7f-4b32-9571-ce929b5a551b"
                    }
                  }
                ]
              },
              {
                "id": "fad3cc9a-8316-46cf-aee8-169d6e397b36",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9dd4b07b-80c1-4493-8b56-c6184cc8bd17",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7d34a013-d221-492a-b184-1f624e35c188"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e5d5e726-b42d-47ac-8161-45b70d83e2cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "a64485bc-3cdd-4ad2-b5ce-7d82df6b699e"
                    }
                  }
                ]
              },
              {
                "id": "811e5286-bc0f-4e5f-b812-c822a4945498",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0270bcf6-98d3-448a-be42-4e862ce22c2f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "62b07196-9f61-4ae9-ade5-c3c67472f895"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f45e8ac-87ad-4252-80e7-352e6877cc75",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "ac92a76e-a294-46ac-aaf4-089abc7ba662"
                    }
                  }
                ]
              },
              {
                "id": "0bb57029-33cf-4ffd-8b96-67639e44fdf0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "be8cb0df-c80b-455b-be0d-5721732ff0d5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f2e33894-1202-4f2c-a6f3-dcd3edd1803f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b84eab40-ce51-440e-8ae6-b387ff158994",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "561e1777-3307-4c37-aa7a-2a5a59b3a286"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c14c7d27-4942-4a26-8895-8a7938a80091",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3cea21b4-fb59-4436-a9a3-1e9452b7a352"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "230f5aba-ea8b-40dc-b449-0b4d0a488d1e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f4a10387-03db-4814-bec6-e8fc91305dbb"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b0745874-3c6a-4728-abcc-4b4b6f9439bc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "04921c24-5ecd-49ae-97b3-8a1584e2d010"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cf30adef-26c1-4c49-9d3a-5c624ef44e7b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9f736a9f-2baa-4c48-89b4-865d4d3d1e00"
            }
          }
        ]
      },
      {
        "id": "a65fc46a-ad6a-433c-a338-6e7dfa01c095",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "01bf75fb-b994-4d16-9fa8-cbe377151e32",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f14fb835-8ed7-413e-b81f-a78424e74f37",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9a65b160-7f06-4555-9244-b395e9783d89",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d5fabb-20f6-4eec-a505-699b03106545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6970f18-cc65-4e6c-9c90-71fc5b31097a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9aa53fb-2685-4526-b19a-a2106d815b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "62a17877-c3d1-4c92-8829-3f6d8238a9bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f7f6ae7-cfd8-43af-b7ab-a2b54fe2cfb5",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7125e28-5760-4593-98c4-b8cc0a05f419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7768cee9-c211-485c-85bd-f8ba6f967e52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d40c37ea-347b-45e8-8e27-cfc008538766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee187c86-bac4-4ca7-b77c-051b3594afea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12b42435-42b7-47dc-acc2-97ad2e6796bd",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c653106-f039-4da2-8031-c06a88762174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b4a988a-4840-4506-98e9-465cb05b2f2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33320a4d-f661-419b-a808-90d943066aba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe3d1225-e30c-42b3-977d-ea30a68008c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fc6be68-7df8-4b9d-afa4-dca58f18400d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae90e84-6119-4c33-96dc-bc3255c25b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4a015fc-16c4-4bdc-bd05-6638f243a272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67ba6ed1-cde4-48e2-8353-6ebce18936f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9de225bd-585a-4a73-93d1-0da709ca2529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0475422f-434a-413d-b4df-e1ecc01a7539",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "742c0d01-84bc-480c-8551-f58a46832ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0ed09f0-7271-4523-9157-6ec9dae25a65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12d1b11e-17d9-45d3-b165-c98cd707c3db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d8bb94f-b4cc-4df1-81c6-f86a14060f1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0b1b6db-1e39-4864-92fb-5d0754aef705",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54d9d9f3-8211-4fe0-895d-e19099d69f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a49df90-4c9b-41e2-bc57-73db17859931"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37b8de90-0b4b-4edb-9f3d-ea7c1bfed3a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fe23aa4-67c9-4f09-a7ba-84776bbff904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e49374c-c36f-4de9-b6ef-d55cdca6c27c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e94023dc-e410-4313-afd8-b64d04003e78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35164c6e-ed59-4af2-9d12-a35fbb49b6b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d537fc1-5c77-4e23-ac15-2aa05e97e078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "65cb104c-19dd-4745-9670-070a41eb8e3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f4d9c62-cafb-423b-9143-56be744aacd4",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b29d60f-d3c5-4727-8137-222f445e462e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "735effdd-a07c-4c9c-9157-9e30b0b7d638"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bbe5afd-3267-4fa3-bb4b-0a23e7d15b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "33df1d78-255d-40cd-b674-718543c28f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4ed96ef-18ec-4775-8197-4dbfa90fa4e4",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e97066-51fb-48d4-baa1-0cf3307f4cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54cf8e9d-4b98-4f8b-a27f-a8bc78900b28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0651b7e2-37fc-4217-b736-4d352e6c29ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "29347ba4-285e-426c-b87e-afbea50d6826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b06110ca-eca1-4e53-a26a-e967fff0a1de",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e6e6c16-b0d3-4dd7-bc57-7ae9c67caa69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c21a9176-5541-45ad-94f7-b6fea251f8a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33da2e86-ea5b-40f7-8a56-bc987d928b62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4d3d2df-d2e9-440a-ab4c-fb3eada75c4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "343d3930-49a6-4606-a9ff-45a4dc549ce9",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cdb063b-f568-4c49-b1d4-82f5e6d559d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b622094-5a88-4e6a-8dad-c12bcfca8f93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ceaad30-2928-4091-8343-2cf3495c4ce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a0d40b77-615d-4b48-b30c-53271707df89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d4fea09-a2ac-4be8-9d1c-65d714aa7ddf",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d00dad3-13d4-4570-9d25-612df6757cac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b3c3c4a-6045-49e9-ac64-c08ee9c346e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aae755fa-2078-4bb3-8422-b8de665efc43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1386cb96-b708-4884-aa78-2f95adf256e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "412d5631-0a1b-459b-a719-0f76dcb243a6",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a570df5-a7e1-4fc5-bef6-fdc1ef041b12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c167481-5ffe-4196-9840-05c5f2619817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e163e52-0d09-42fd-ac44-0d4e2c81488c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "912d484a-6d60-4cc0-970b-6151c4ef2ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca9bf290-8649-4628-b859-82c221a52336",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b6fd81-c3be-4a36-b96c-a109e34bcf15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ebb0ab6-0fe6-44e4-ae02-e5820c25564a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b212d00-4132-4425-a68c-df64b6aafa29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "b05a04c9-453d-44f5-aa95-433a061006d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cd4acf8-49d1-4d2e-998b-e1e8273ca984",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d98e6d6-10d5-4a79-a20e-4f38ebb32925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "560cb8ef-06e8-4999-8c9c-fa18ba92f7ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a26562e-a9fe-45c1-8ec8-569d1734071f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0464adc4-fb06-4f90-80ad-44fc89b5d237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80cb9408-a0c7-4fd8-9567-0c35cf045b66",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "785c88fe-de20-4b00-84ad-38a7b85d9169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99defb24-5458-41c6-a57a-7ea942be07fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6664e13e-3161-4f88-a59a-b366da5a087e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4452230-94bb-4b9f-8bd9-de6a7158b319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f29f25f7-92e1-446c-ad09-b69f93e2ba5f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c5920b-805f-4337-81e4-631ec243ff80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcabd4be-7d15-4b6f-8c7b-49f2ba00ada5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f24e313-aff6-4962-af44-0303735df17b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "07c84aa4-3105-4755-9612-87b1fc2e277c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9617df1-9ee8-4294-a085-bdce7b153a11",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "114018e1-3af0-41f4-9e19-43af6d3cae27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2359272-e8ef-458a-901a-c9eee73dac5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7661cbef-57b9-44a8-8d62-bbc48bcb1ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab2b3cd5-ef86-41e7-a5d9-ccbe42ee83b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0439a7b-4039-4c24-bd5d-2176183cba1a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52fd6941-774a-4a49-a816-2f341addbf84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72fb17b3-94f1-44be-91ba-93fcf55b3cff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "256a3fd5-484b-49cb-9430-28692f055eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c76e645b-d1a8-48b7-824a-4292b84c0551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c72c06ba-ad6d-40cc-ae21-725e4b190cd6",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "add7894a-0a05-4cc8-ba51-7822b219c5c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f43d7a16-8e03-4755-bf4e-47d1cdbf1b55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d871cc56-b6c2-4ffc-82f8-f06232ac3711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8c67cd8-15d5-4ccd-94b2-5c16ff9bb204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2f6ceae-a387-410c-9f16-0682309c0aeb",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ce03b7-7d2d-4253-aa60-c7398275b5bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c47364d4-877b-4f53-82b5-7d99c736c9e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d3557e0-5334-46bc-8ef3-e51461450729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41c8b287-8854-448a-9655-bf827fd22ced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "343b5849-ed10-4577-90b9-8900bcac2cd2",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d1dd7a-5287-46d3-ae86-287d215133f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b48efba7-2cc7-4d27-be6f-4787e2498ba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcffb7c2-8bf3-486a-bb9b-76e47f991571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3615bb15-90da-4601-9c8d-b3bcf03efa0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78afc4be-dd9c-4341-bde2-bd5353c515f7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c38f7b7-b276-4912-b7c6-afb5c4040630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75e28f80-7326-44ce-a399-90a4488bca25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18c57a12-5f56-4a7c-9223-52de41b90f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6894c82d-278a-4b55-a61f-0b6efd683483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e6e930d-e120-40d8-bb5f-250527bdb509",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3d37148-bf5e-4a18-b93d-c1a4ec310231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76fa469c-392d-47a2-a2d5-cef9e1fb4829"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7553b32-e9cc-4a3f-a8d2-37ec52663785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f560693-5219-4608-914f-f44ebe118f5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "768fb2b6-8a5b-4f4a-9748-160c7a9bd54d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "650f0fa0-c3ef-4cd4-a58c-8a654f81339b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45f877ae-0127-4544-bf05-a12ec6bfdddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fe24711-0d7d-4899-a266-2893775c8267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc76c2ac-8ae4-41cd-85ca-fae49b2a748b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08224ce5-142e-49c5-8f55-b8a7ed7004f8",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f8d7442-f39c-47a7-88dc-ba49bf4415c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12f7c07f-cb61-4ae7-9852-6c46dafb344d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "833856b3-1544-463a-852e-0333b277b932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "215c62b1-d54e-4209-99df-705f4d2b83cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69bd7c8c-8142-4d48-b2fc-abe86a6af6dc",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82431b21-ba6b-4b7b-b2d5-45945a3f4497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1ac0a00-d099-4559-a061-e436e9952afa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da728c39-a236-497b-93c8-315522d30096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a25bb246-c2aa-4dfd-81aa-ef7951a911e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e44f451-62cd-48f5-a577-35a9b97c158d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee481719-6606-488c-a919-8904aa4a11ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45fdb9ac-1254-40a8-9cea-b56b5c9c5ea3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04064342-ab6c-42a4-a06d-43d738c076c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26ef8f1f-38b5-491e-a8f2-8b3897ef63ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2755d17f-48c1-4dcb-92d1-fd336c0f30f8",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a7b665-6ddb-4abb-b59c-30c1f53f1e18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5be458ba-2c60-4abb-84ef-6381c343164e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea74e55-a83b-444b-b56a-cf9067df736f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef06fb64-1ef5-4073-b849-10dc78b4519a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30d58924-b9b2-4c23-a72b-c129fc85c603",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d193c2c-adbb-4b57-bf2f-1f93d85fc0e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91423796-f9af-4600-af94-2717d13a95b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20fc2fda-3019-4072-a901-32a281e8237c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3eaa26eb-3872-47ba-a30b-1f110adcac2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca3e4d11-5970-418e-a96f-7e5049c4efb5",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2005e84f-1a60-489f-bb03-bb2c6baa6e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "940a9b28-8e4d-454b-b4e3-7802f1eaa568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dfed21e-3fa8-450f-af01-c0c25bd7154f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f64991e6-3705-4bb3-8eaf-230b91e44aca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9514833e-0acd-4def-b7b5-5a4c03841a75",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c91a333a-fbf2-4811-8fb1-72adb54d9505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c99ad76c-1c25-4324-8d05-722953b17118"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b703be0-53d4-4d3c-8ba8-864612d0f08a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cea31e5-252e-4432-8476-51c686df254c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a12b2636-7c82-422a-be7b-71c81fd8bf3f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "23bc830f-caba-42d0-8b59-c11039f82f91",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e64a612-4e85-4656-afd7-7c895521b171",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "820fe1f8-f11d-436a-bd52-9c132fdfbc93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d415f0f4-736d-4a57-8b60-4b71629f6892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bb90016b-9a19-440e-bb91-889cd3f8bc81"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a4ed9a11-4efe-483a-b07d-c32d5057eb1b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da064f47-4863-4ccb-ad8a-0460d2e05f81"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "83d78edb-83b8-4ac1-8d93-d01e49a06494",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7adf6ae-5676-4df5-8d79-2b9120d1a6ae"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "087dfcd9-038a-4579-8ed7-901c15247859",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0f78f80a-a541-4621-b6ef-804f5d8bcf98"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9a7e813d-5e0a-4ab5-91a1-4fd1e69db21f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "de9b023f-2d19-4430-b9b4-e05b8cbbdec0"
            }
          }
        ]
      },
      {
        "id": "ee269925-7b55-426b-a2bb-ad4dc36cbed2",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "86a83a14-6a6e-4506-a813-f612dd241289",
            "name": "Negative Testing",
            "item": [
              {
                "id": "be671736-d7fa-4e25-aa1a-bd85aad14716",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3b9f8ae6-4eda-49ea-99f0-85e83161247c",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89fbb879-fd79-4b0b-8aca-eac6f8c6d7d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a502007-3034-469e-bb71-108d763b67c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a8ab46a-93ed-4230-b827-4afae878432f",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9620390-96e8-423b-85f8-bfafcc768b2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c5ffb07-42b8-42eb-afb8-a6b00b3db42f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d7bfc5a-cd4a-480d-84e9-10bec7383750",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6ef9643-8a64-4150-b7e3-a3caaf48b3c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4b3815a-2276-42d0-a10e-7a5a8843b107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d704f6b3-b4b9-4ac7-97c0-bd1821cfd0e2",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5771fec8-f342-4d0e-a6cb-25b085d03893",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2460e744-30a9-474d-8211-8739e63b600a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "046ee270-0307-4229-8226-59e59d27fe95",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "738e68b8-530e-4c87-bd85-b98695627941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c712014b-4ced-4abc-9e9f-1f2aa8d5001d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f177922f-0983-42a7-a441-cec8155de24c",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16bb5111-1536-4fd7-af3d-8d7594fd82dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49cdd959-9cb1-4d72-8faf-0d688e294f38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0c05589-4dc8-4d4a-b44e-14821fe45060",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e61ebb3b-9c14-4f40-9195-a1cc2413acc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3615efd4-8659-4f6c-a7c0-a08adbdea21c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45744e53-9398-48a6-b9ce-fd1740bf843c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc5b864f-1755-4242-af03-91327de5b0ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96b28dcf-4b48-4859-8b42-c7966477171c",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95818525-af89-4968-a4a9-2a787c435f4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1f4d7c1-092f-4208-bc40-442fc7162e28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2195a70-ee34-4145-b552-65d80e022946",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "617f2c98-79fa-43f0-bb99-21b76b358472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2141461-9cf2-4ffb-abf9-d29e74d81001",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "316d1f98-78e8-4d1f-9147-d0472f80fa58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b76d43ec-5924-41ad-839d-c5b5098650bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9878e61b-121e-4218-82db-25895eec320c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "325f78f6-58e2-437a-be99-d53f0d0ea519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28c46933-6010-4af6-8dfb-ee2f0dbfd6c5",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8acbb3da-578c-4842-81ce-00acf4ebcdc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfd6871e-4e84-487d-9e2f-0ad9c72d5abf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4c48583-cc42-4054-b5ec-8f76d379a76e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d7b3857-5238-41a1-afec-566caae4bdf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe072590-5977-41ac-a4b7-ca759459ac6a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef2a1cc-23e7-485c-848e-5251c091fba5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5484a5ab-f5e5-4a9d-a218-2caa4066b46a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "934965c7-126d-4cd9-b3a1-665090c66248",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b05ff166-a45b-46de-bb52-cfa6b1bd7c62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "398826b0-2b5a-42e3-bf09-52bc5cc91f20",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cf81b5f-cf1c-4d26-804c-881a7156fe12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "625ffe0f-4df7-499d-b272-4fd094389fc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "095106f4-3ad7-4d51-9f75-2c2fc9fb05d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d3e6d8f-4efb-462e-b23d-3cd062e325ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80abc600-2e5a-4e18-bfbe-a403f6922cdd",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cd4e338-7217-489e-9e66-b78b08d45461",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91f0b2dc-3ca1-4344-8e1b-b6cca276fbe9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f24d6a69-ba5b-4319-a532-c31b4741dc54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9ad6955-b320-4ec0-8fc9-6bdc1409d641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22a84d42-d49d-4bbd-bb73-03a4b2ed718b",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c5429df-9316-4e1c-acb9-68be65c75026",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17d0f8b8-640a-423c-8aca-40e189f044f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e8f281-f667-4278-ac0e-82ac8f924173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc9cc2fe-b700-4c91-a2be-5f5847b7c956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a783596d-188b-44eb-be67-f37e6c383e30",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b8c4576-14d2-4fbe-9eda-6eec494ac2d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2f2af92-986a-4ca3-85a2-8fcb9cf2858e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f89ec23c-04aa-406f-afb0-d7d8eea576c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a98d58d-11c0-4bea-a173-1d7eba68c274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff596109-88ae-47fc-8c29-cf08daeb45dc",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "124f7436-0e80-440c-adca-eae0ef6298f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "affa04f6-b84f-47a0-baf4-e35ce0a8c672"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad81bdb6-7fd4-48e5-b105-9fe7d748a196",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1369c0b-717d-4fd8-a62a-12745461789f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d87194af-3e58-4940-ba7d-5b4a937d8b52",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7bdd884-72c4-4336-81eb-72a280b75fee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "162df66b-2fd8-41aa-899b-f638f36d1c59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59989d11-f841-4d88-8809-9c14ccc335f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19cb979e-b28c-43a3-997a-e701fed425bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea6af590-bda5-4905-a216-fa14c6bd59c8",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf0991a-46bc-4037-a35a-8535f6898e93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5531f22f-c2a5-4b3a-b1a3-c6e738ca1121"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19e4e349-4d75-49ca-8fd8-0841ac875357",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44c7d866-d912-4927-ac69-a3b7137dd75e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64cc288e-b7ba-49d8-b0e6-9d6cf8984883",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a557e0a0-123c-499a-82f2-05d7eaf3d1cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ad3dae0-8258-40e8-804b-7052b55aa4a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6104c00d-6d71-46b1-bf43-8a634f1e0083",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d96e7215-d944-424e-8727-8893583b3638"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ee505c-2249-4bfb-8f87-f40583721009",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b10f2704-5f43-406a-a26b-25e6dd1a76b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddc2806a-766a-4d01-885c-f506a38d0be4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26492646-560f-4a25-94a6-45216b27ef1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "816631e3-0d26-4601-bdc7-26b61b3a3593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0167ad0-5e06-41f2-8f97-319a9f4455a0",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "247f6804-abde-4df7-9b1b-f1e0d795cdc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ec6c402-c331-45b2-a515-54f74f80fc95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dc63479-d3f0-4aa3-b1d0-b27d14e8cb61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "067e5a8a-85b0-4e26-b690-83958e166913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baba6120-d5ef-48c1-b070-bd91a98c24fe",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66907531-23f7-4bf7-933e-8fc13fa5702d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c112c99-933e-4103-9937-e49f83f27940"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00340eab-3832-42f6-b193-2b1c336a8ac1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dbf7dc3-cced-40da-90ee-e3abbd8f22c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3301df3-8994-4fd0-85fe-8c08bffbcd70",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0aeb07d-084d-47ec-b3c0-d915f1bd473a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f0027e6-dc8a-4a9b-8305-556926b0bfed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56b646d5-aea1-4564-9abe-b18bccf3d3fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "789103cd-8679-452a-b2e6-73e975fc8789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df003ac4-bcc2-45c2-9163-d788748dbece",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28d99b28-7194-49bd-8b77-f63ddd7004eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d8c291f-1a12-4126-8fd7-c5a484c21113"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5552b0ec-c4d9-4f50-a54b-ce7778f528a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49bdd1bd-a8ff-4758-8b9e-4fe139bd8bb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d850758b-a3be-4d18-b213-d8f084d5ee78",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c214eb97-de19-4e82-9722-8a6b4c1d75ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fcf4baf-a300-4fd9-990f-6671d574be97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5cbdc12-1b42-4d2b-91a2-1168ce596720",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b2a1e8b-e405-421f-b97a-feffeec4659a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "768b5d95-f279-4f7c-9e0d-cab713061509",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cbb2c6f-ee51-43f2-9f78-76b4057906cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18edfe7c-6a8f-4468-9c12-d8f1fad8a4f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd3a8ff1-fdde-4b0c-a5a9-ac55889e093d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bed238a-f640-49a7-84c7-457b9bb2e9f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7428bc37-9a43-4ab1-9934-92afc5fa11f2",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2df8c84-564f-4c22-ac84-1b6408d9cee1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "438fea49-fda3-4eff-95c7-b9ac1293a972"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53d1e80b-fc68-4e29-adbc-eade5d413596",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18b2c09f-1dfb-493a-9c08-b692c361354c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49beeffa-4e87-4a6d-b1c3-dc027c782a19",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74d75acd-600e-43f9-a0d6-f9d46fdd7383",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bd3c875-3b3e-4acc-98fd-adeff72d88a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0576b3e6-b69a-4a6b-9ce8-744d332fedec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b0f8c73-ae84-4173-ab76-55130c5418fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa4f3814-a3ff-4f0a-ad2c-41aaa8ad3f9a",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06bafd20-8468-49ed-8972-27b76492cecd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d62056a-b16e-4e26-821c-3256c005b448"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "784abab8-b890-4c0e-92d8-3e0b05aec76b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7011b09b-7cdd-41c8-a6f7-56a6af2781e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22d69b47-bc67-4606-b03b-e27b3f8de783",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c560a045-0746-4ff7-9dbe-4a321e1b26b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96b6e978-9e0c-4031-83a7-04737caa478f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "083fd107-df86-4049-9d8b-6ff3d9481a9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45438ce9-6282-4ff2-ba63-2f508b2fd78a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f27996d6-0321-49f4-a744-4d5811374c81",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba5df63f-c092-4ee2-a55b-56692b60db41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70061af3-ed38-4839-9618-ed4d3c01da9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "129010db-f967-4ea3-b352-dc97bcf77885",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb4ce494-b8a1-4cab-b1b3-5e56e5567cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a2404ec-53c4-483a-94fb-ca754f8a3da1",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42ae4db9-6223-477e-bb60-b51daecc98ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08bfd51b-3b17-4b76-9dab-470ebcb9ae3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5eff188-91cf-4862-9a40-7cd79a67004e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02e2555d-1dc9-4f19-a4b5-939296f34059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ad76f0c-1c53-454f-983b-1cd3552402d4",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04dbb076-673b-4bfd-9a13-7c85758ee9db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffaeb07c-b3ed-4e70-a86c-dec538d96577"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "283ab327-d3db-4519-b5a5-7c145373d43f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8be83e53-d774-4737-a11f-fa3ac64bdc1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27174d58-6aa7-482f-bfa8-81e6cab5446a",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "573fcd1b-94bf-4659-b2cc-461efdbaa54a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20ae5166-2a42-4c85-9daf-c5e58685d369"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9e61a2b-2c77-4c40-849d-c02f247d8118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc6e8bb9-3715-4304-a6cf-ccbf0e91ab2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "338b016d-ef16-4820-a47f-f246e09526b3",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b42cf29-f572-46db-a535-0fc1649f7baf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c6b43c1-f606-4b1e-92cb-1340486c313f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86af6acf-480f-4bb4-b117-e446004fed7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24179718-9cca-4c58-a932-792faedfd0ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8bd09b9-9407-4eff-bef8-f5d0b3a452ba",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c108a8ce-15f3-42b5-b40b-13140fadb78f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1940ded7-c353-453b-ae35-c2b3297579b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e94ad254-a8bd-46e1-940b-6b8bec32ae6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3383d084-646f-4106-92f5-0fa32c0e8b5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ed11645-01ec-4f16-bbe0-77576a0f1ac8",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1db6fc3-c6b0-4b75-ade8-081bcfb6e7c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ef9489c-cc63-4345-a4af-a6b00ec3e72b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eb0801e-f637-44be-858d-df30d3351fd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9395023-f7cb-4b35-bce3-4950cf23297c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea1eead-e74a-45cc-ba09-771f916f524a",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "404ff9e3-1474-492c-8248-fdd907a137d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04ded775-4efb-4ecb-b023-dd8def17dfd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bada95e1-af9f-4adf-b9b7-fbb2367f9491",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30129d76-91b5-4a3d-9ccc-f8f60c7df927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5453c29f-5584-42bb-b777-50cc57720d0c",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "407499ee-1d76-4146-a841-86a2849c833d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8cd7349-dc94-4000-a201-6b30a082db87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "105d7881-8fb8-4b2c-8092-8acaf6245854",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "422bba98-a926-4ee1-89fd-768a06d18fbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d04fba-688b-49ae-8343-dd995153e5e9",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aeb37a0-27c4-4abb-a1ab-e89f6d1cd7ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50bb6389-5e2a-4386-9935-2aebcc1c7393"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "365ae5d5-12e2-4215-967c-00b20f34c502",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aef1f78-9312-4831-b9a4-834f49715261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13e07821-0dfd-41de-8be1-af76a09cddf5",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39010b1f-2473-4309-86f6-59f1fe241b88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "228522b3-8b72-4335-a1c4-f0b4022433ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab47b615-0ee9-403d-b4ae-a8c29d52ea09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7714c4f3-f9df-4cf8-9984-4f5f1c51c523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "852016e0-80f4-4607-a643-a4932f5b07a9",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e947eaac-b3b2-42be-8203-c4194783c9ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5466b931-a7a8-4e7c-86e3-8e61bb702159"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f46643e4-d377-41de-8554-7dac614e2d8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51db501d-3b9e-4b4f-a872-9f8e9baac716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6926757e-080e-4219-9a5c-23cdd3d17d48",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cdaa38e-0435-43a8-8fc5-598a2fcc609f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "606defc3-7489-467e-aced-4e3f788357e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12533790-7aa0-42c4-8555-887a13548c0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bace30fb-d1f5-41a9-b09b-89395465dac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0d93e38-8cc9-4ec3-b44f-f0ce2a5da46b",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e9578d-3bea-424e-8c4d-b0f633d4ea97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b32023b7-cf8b-4aa0-b24e-bbb0ecc7f996"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3320bf0d-f89e-4300-b21f-dde76b2584b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55f982b8-9049-48ae-88be-b3ad524ed4a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d64adf0a-f2b5-44cf-b19a-f818e7f43513",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc50fb64-b78c-4036-acd0-f31ca4780fb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d72e1241-1242-4612-b1cb-0d2457fe28aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "554e9738-0c8a-415e-a1a2-6b4fed627c57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f4028c2-005e-4f57-9eb4-73e5e52e510e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43fa8ee8-1c04-4e40-93b5-43310d8ebf99",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d99af5ee-365e-43ac-a1d4-e2298e723e0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fa26818-a4da-4fb1-a555-ed64029084f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68271dac-c822-460b-a09c-9d8ae6a780ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecb6821c-ccee-4581-af84-583a86eba9f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06936641-da25-44f5-bf30-029fa7c179a0",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "665d43a1-7b5b-4234-b5e1-f50a107e771a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fd6176a-4a8c-4302-9af9-6d5a87edd3d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e795422-d04f-48a7-b984-751b48cd7006",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8abade34-d5e3-4cf1-87a5-fdd3b14555bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a3d6bb4-0f26-47b8-93fb-92adea67942a",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "905df664-dee5-42ca-bd49-1d548867b662",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08899576-0ec6-494d-bb9e-0aae799b410f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc3a57a9-4aeb-4e8c-8ea7-b1f562cb8b7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "733f0788-bd0e-4d25-899c-4151b29a20d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "302ca9cb-086f-40fa-a8e2-5298f3cee147",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5166907-74c0-4d04-a65f-4886482b4461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e0f8f8d-a260-4ec2-9ba4-97584abf3199"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd1fa079-6383-451d-81c9-e093a132d3ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdad6a8a-d3b5-4f63-8ef4-07b9b6f5d243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec5d253-9406-4cae-aac4-a81bd4d6ed09",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30135d6c-9e8b-454d-b3c7-fe97dd6dc422",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2032767f-cb07-4edf-8706-3a07a6a73575"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f76dac86-c15d-4e72-a4bf-899a6dda2451",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b36bd553-fe54-40f9-b796-12180fc7e7c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c784585c-70e1-47af-a21e-8bf0687c7e7f",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3df4dec5-5e13-4f74-8979-105595e8d305",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ae48812-9a1a-4a95-9e4a-4f58ecca58e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d3f9e6a-c06a-406f-ae63-9e6a1f6efd0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d47a95c-2a1f-4dd2-944b-f88ab7d94d55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87c0d4f9-05c9-4ee0-99fa-116db7160912",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "511d5ae0-6577-4522-b64e-70a86d572818",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a56ca52-568b-4259-8960-c2c78765a68d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f5e79c-e47d-4e0b-8ad6-6884e40994e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afb76561-d881-42d2-9e92-6f25d1ecb685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e6f73a1-0295-4e85-866f-a56ce1c3bfd8",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a77d4615-9f20-436d-a57e-474ff3d700a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90a0f692-3824-4470-ae96-1a160c24ce5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af2d74f6-e7d6-4e21-95d0-323857292eee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "427df7e2-4807-48e6-9b45-08f1893d8b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dd2b7e8-4334-4dd4-ab05-6b098d8cb614",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fed2c69-8b35-4e57-bf22-c9d37ad2539b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8890a47f-97b9-4d00-b4de-fc05ec741828"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a55de86-a700-4b0a-bbb4-f4a68e3b29cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd11e6b3-b052-46a5-ab63-b45e1a97e125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "097068b3-ec30-4ac2-ad01-9a59d3f5edd9",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3112c001-6ea2-4cc3-b461-f929bdd91453",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a1795ef-85b0-4ed4-af17-a54d0011ffc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d738a97-d0f6-4ccd-b4de-07dcbc38dc30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37f58b63-e589-4cb3-966f-ad88e11a1a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d71ca555-781b-4d39-8581-dc644d9e6104",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "492f25b6-d69f-499d-ad9a-3100d36f39d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "140d8cc4-6138-430a-b248-f0de23d1701d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f43828e9-88f9-43be-b669-0466e4ae39ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c615401-b931-4a74-ae29-040ee149e3c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd06a13a-1ca1-47dd-b41a-ab9dfdfbf9be",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c7e826a-9803-4c71-a647-e21a33a78841",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "509b8bd1-ada2-4457-9133-343e53d672fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf01fd58-ad09-40b2-a4be-40fb0989dd24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec34403d-3caf-43fa-9fd5-7566c347008a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "121576ff-bf51-4f9f-88a1-1ddcc44ac385",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9de1ca6d-abda-4636-ab26-2cab2db4fd3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33a7dbe9-f4b6-4757-b314-417caea6a2b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed57158e-c206-4c24-9968-642ebe980656",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ed8f9f5-998b-4583-afff-0d0561c1cbff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21130742-89b9-4b5c-a97d-a7a808eb127c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "285ffd0d-20ad-496b-8630-55973f83a318",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "069f04e2-a27a-4e41-bc07-66b5adf6006f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ea2dd3-1731-4441-b0e6-82f820df54b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c08ca87-022e-43c5-81e6-e177ad16cc07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "833e6780-98ff-48eb-a8be-4f43dcc9bf2e",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e687bb6f-be24-428d-a0a6-c4dad7119f95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "171c0656-761f-49d2-8c46-698b6e4646ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "432eb968-4ff1-4736-8190-b52bf3083c7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "059e3c5a-0511-4820-9a07-07ea71fe20e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acec94e5-6280-4f8e-b37f-c888962c90ad",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7203237b-1920-4df2-952e-f001774ca208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81042289-a156-4977-b5e6-6b766789a562"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aa38714-9ea4-4d8a-9c5b-7578f0989ecf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "632fd1d4-81f5-430d-b487-f5f5fcb438dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ca99c0-fdc5-43ba-be98-0ab59a9859e3",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f0fbcd1-1bc3-4e46-ac0d-f300e1fabbdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5f01336-0f60-4826-8cb6-840f85e52839"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e49f61-7377-434a-81b2-3394bcc7226a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecd4cd6a-6250-4203-9c65-9955a6a432cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a9d792-7397-4c6a-8b0b-2daf8e96ef29",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c17ea3b2-2b0a-4e8b-87c2-7605932478b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "223cb0f4-efb8-41ab-abd7-67fd2c15596e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6139ac78-b871-42de-9d5e-b18921b6d5e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "137350e4-8297-4fdf-9e62-1039269b52a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5acc5567-cf8d-47b6-94f5-817c70388895",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff5c0fc6-32c1-461f-aec3-949903d00423",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a43f62fc-59f0-4fd4-8733-9f9b503f06e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d537fd99-dbd8-4191-8b58-360aebda4241",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12a0e307-15f3-4b23-85ac-d36ac19a70cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b94dc465-4b7f-4341-ab90-472f4bbf0723",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "275d55dc-b6ed-413d-9b7d-b16bd5dae168",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cbdfc8e-73e2-42bc-8f4a-d95003331b46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a53c5d40-06bc-4b2e-b0d8-930549a912fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01104ca0-7b2b-4dd9-a5db-836d4d27680a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fda1cfb-2b30-456d-8c04-27972d93cb83",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a411d6e1-f3c4-473d-8420-8d7d63f76ea1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "517e6408-ec98-4094-be3b-593981b970ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61742c18-8c55-45eb-be94-dfa0db2ed284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee3fcd4f-8af5-4fcd-be25-83c474e718d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc93d12-167f-4b48-ad95-ebc43ca5dcf9",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da9316bb-f4a9-4a0c-a197-c49f7038b165",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0796e0b6-a3ef-4f76-b5e3-3401670ec2e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b4b922-7519-4b37-9e56-ac8a3abcce24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4df7ac21-bf0e-470f-b21c-001de376937a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8158271e-9c03-46f1-a3a4-90e9ef1d4152",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81bab3c4-36d2-4a2a-af89-c0779b18171c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0983bb81-0431-4d70-aaa5-da93efb9f477"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "698d7ccf-3932-4e8b-a0e4-a21f214ba4fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28c7f21e-aeb0-45b3-a51c-9575bf0a7e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7699b3a8-4988-49b9-a650-3c1de4999e01",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c9b9d57-e26c-43de-9ba6-515e099e3ab1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "665f8fd7-b726-4011-9cdc-7fe46ed1514e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86d2efca-554c-417b-a147-f0847974a68f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "463bc709-0eaa-45c6-8f0f-0c1004b5dc3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "867898b2-ed5f-4e6c-9768-2422f890ec70",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb45eb8c-fb04-415a-a7c5-38a7ab512d9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0a5d169-2548-440d-8d20-f930d6132fa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6491a2e-cb64-4de1-9b16-9adf291b9f34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cc16315-f17d-4c25-a9d9-63a88704dd6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24aa45d7-dafe-4b7f-b7d8-da2c3376cee5",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbdaf92b-1ca9-427e-ac8e-0d3c28ba449a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcad4dc9-2488-4a4d-920e-dfda735b03ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de784afc-4654-4f5d-b4d1-e700d0e14961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fed1b15-0ca4-4879-894e-a0ec2e6e105b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a49fd91-5112-4525-b21d-a6a71d2eaf57",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abe5c5a1-885c-4a2d-86ba-1d8e16ad5aed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0318e636-fa20-4511-b4ec-25839425c637"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a56e8646-73c3-4600-a87e-63fc2f71d33d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "188e33da-98d2-4d9d-9720-b1ae2cd32efa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b74b2090-f934-414f-b79c-b6ddf837d667",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e55b4ba7-34b9-48cc-8307-fb1ac0545fa0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a5754fe-d411-4c2f-baae-4a24e0609978"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d2add8-b1fd-47d2-a3fb-82ae96e0fe20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dd05b7b-bf26-4084-a747-b2bf8fb4d486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "652145b8-1ddc-4b2c-a781-318aba9039fd",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fad849ef-8f4f-4066-8e04-f07c22807d43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d87b27bd-65d7-43e6-be88-dcdd56aef166"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ccf1ea5-4d62-4ad2-a45c-dd682722b9a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7237a9f2-5ce5-4678-acfe-b960499b5b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "859e3e8d-992a-4bef-9ca4-116942ecd3c8",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55e90242-d6a0-4ce8-98e6-019693367125",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46cce4c0-bdce-461b-bd77-188381eac6e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa315459-08bc-4902-b212-202578ad1808",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "354730ce-ba7d-4b52-aa40-c57c83607f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "380e263a-d6e2-4c6a-8838-70b5748ca196",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c29645-1432-42a2-8234-0204200c3aaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fb55740-e875-42ff-a499-6684a04ab0bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea0f2f40-f970-4581-8969-b470523215e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15a1305c-7f40-425e-a733-5134a7c2ca05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5de27f5d-7559-4d21-b5f7-54f8eb5afbe1",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea70c905-010f-4074-a2d2-e571781a2157",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "162a1238-424a-496c-97e4-0954e0cc8f40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b360625-f37c-4e3c-ad29-3862cd36334f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7577bf27-8921-4301-9e17-0ec19235ff74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "931671ff-9a45-4596-ac54-9377bb6ae64a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a77ffb0-13bf-4192-9fdf-1ce0ddd28bbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5de46fd0-12d5-4bf9-a5f4-18c50693dd00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6634d15-0939-4144-a57c-6ff263c1100e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4f14009-4adf-471a-9086-eb0cff276a2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01258c89-b934-476d-8210-bf56a3f36897",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d63ccce-f24b-4a02-ac2a-e898de7e56ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72155d96-2cea-4da3-9b94-568c25155763"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ee49086-4e08-4d4a-9a29-19fd59a77f62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa7a1328-f1e4-45dc-8f27-4fa042a0964e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec308b59-0804-4aa8-9bd9-17fc962f82ca",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e7cbe37-250d-4074-a28f-875d32781893",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "279f82b6-befb-4690-a9a3-a6bf9d04cdd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ee44939-2ab3-4171-b008-c19f0dd245f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a82c827-db2b-43f2-a7ec-4f999e7360e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e7adb9e-448b-44b5-bcdb-5ddaf0755f03",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb52366-5536-444c-8a2b-4f1d8d8a1b59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc6d2210-22e8-441b-9064-f2ae8acb8460"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b31bb7d6-6751-4801-bb27-67c82801d857",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc69cb10-b672-418b-b029-f7c3921a78df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b2d7480-23e1-40ff-95d8-96e25964aaae",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "471c172b-b714-4868-93c4-64c79b93ab13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2c81589-0ed3-4ae6-90f4-928ccfcfa3b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b406116b-fd5a-4587-9938-154b800db311",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5509382e-7403-4903-af32-9f1e1c20845b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e910d93-d57c-4b07-a9ef-5e23108191c5",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be48fa38-a7bf-429b-b991-53ec14d86ff7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "690afd30-74ca-4821-86ac-f5b047973ed3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1aba100-f1d6-4835-b0d2-8092bd76caa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fa08cc0-101e-427e-bf0d-739eb3ca0121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e305fc1-bf7b-4cd3-a7b5-76da57b93355",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a66829d-7b25-46ea-b87c-7aed16ab5d81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74917919-1922-4f46-9206-7f8461d844ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e7ced52-e18b-4e08-b836-072e377a3b62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b58fc74e-c5f8-44f6-a0f4-6362e68f5e21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "793b9507-3a00-4be7-b83e-09b267782d9f",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e547268e-0b6c-4326-bd48-f6397090055a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6615ba7f-34f4-445b-a84c-0ebad6d9de83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7de2f805-ab26-4fac-99d7-8b8d75c01c39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44ecc1db-b827-4df0-9f18-c503bbd96bb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "791f2942-892d-406e-8a0e-6936dbc8151c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "996743dc-578d-4447-b6e5-5ceb8e5a7053",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "264760ad-f4d0-46de-adaf-3cdc373a4c63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5efb1b-c13c-4a33-a250-acaf4c709304",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dba83920-d83d-49dd-8d2b-c30637ce98f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9765ea23-0523-4dce-ac7a-3378ae06181f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6270475-a453-4f64-979a-d23083914f6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0491848c-991d-4ec0-b393-37f3406ab0de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d33d97d-b2be-4e9b-b01c-875bcec8b33a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b18a5010-5ffa-4a6f-ae59-279a561bed7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cf2f2ee-3862-42ab-b965-51fcfa8f8427",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c54eeda-aeb9-4f11-b4c9-9174710b847a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a13bdef-fe38-4ab6-aaec-72f7961f2733"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf01d16-4c08-470c-99ff-fe01ef432e92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbaabdf5-2b1a-4f24-baf9-706a799b9be7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a26803c-2ce2-477c-a048-6dc0876ac0b9",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c08ebb16-a91b-4ffa-8a84-bbdd43805dcf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6538eac-c3ae-45fb-bfc4-55b829876c0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b83ebbf5-7d51-4bc9-93a6-d3aafcefac3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c88f7595-c6c2-4b82-bace-125eb386cb5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9be2ccfa-8f66-47e8-9a1d-fa2bd3d76d24",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a6677db-20ba-4c4d-81b1-1d0c4b9c41cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6671b82b-83eb-415e-9fc4-9bc98e2d4a9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "248e37b5-beef-4e83-ad2a-ac967043f758",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "094b5465-f024-4638-8dd3-fc3d43658723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86154b9c-678f-4ec0-bb33-57ed3dce2434",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de439fda-20e2-465f-ba45-5c40755f9bcd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0643407-0dea-462c-8eaa-69e1892094b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e382bb6b-00a4-4772-bcf2-a9a6f6fae2f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "713bd99b-f08b-4d22-a341-013b0e5628d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc2296f-03f4-4e28-814c-d10324566fed",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b36babc-7e5c-4060-b780-36c44364324a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6d8ba12-0bb7-48e1-8b75-67986a76088f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18eb3a12-b494-4e65-b9ab-4778abeb1dea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f494d68-1de9-498c-abe5-138df5d50543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9798769-386e-4fd5-8b5b-9c51ea382c22",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46806033-4a93-4dc7-9cd5-88ff585f164c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "775098a4-12ac-447a-a9bf-0e57e48f97df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8e98587-64a8-4a32-84b3-a360d5b67c86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d37117e-3169-4c90-a115-fdad0264667c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f228d1ad-0931-4512-a0ea-6f0f12495e74",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72d29088-a0fa-4f15-8906-771634aaa702",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d721b94f-6a97-4587-b695-210fa4c33f54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b91a773f-2e26-4ef2-afc2-679b88788fbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb845e0e-8e9f-4018-999c-db3557fb51ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9952ca34-71cd-489f-86d2-49dc277d9c90",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "954de965-ff6f-45a3-a6f4-dd681ff33af6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97a12167-acdc-4018-bf8e-741c3e22c547"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "001f4bae-9383-408a-8f6c-e5fdb875f521",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d051695-334c-42fb-8bf4-4708acce1e5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c2777fe-6ac5-4e0f-87af-009f7efb8947",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750359c4-61bf-43f9-91ff-c2f9cb4d7426",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "631157b9-08ea-4992-a53e-7122b534840a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ea93ee-0804-4a29-8fb0-3d6894a3d309",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8319f9e-1df0-4f54-a916-8615a942125d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2871ef9a-954d-4eba-a7d9-c2bf2923e82d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9f19cb6-778e-4eb0-82e9-a15553c8454f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d45a836b-172a-4dae-b461-af6b75fbb37f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "481829a2-99de-404b-bada-ec0ebb7a6b3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d78d7d30-5827-445c-b2a5-bfea1dc4a145"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "616cb781-62ec-47aa-98c1-261669a713c6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b523a2b-30b3-493f-98c0-2d471e409a00"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e2655d8-add9-4eb9-b193-112962e26ae5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "23064d40-e217-44b8-8a62-a3f9a6aa782b"
                    }
                  }
                ]
              },
              {
                "id": "5e63d48f-d12b-4ec2-a6d4-91c78eab06e4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "07e7b2d9-11ee-4172-ac6a-a7e43e1a02f7",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94d7cc9c-6efe-42e7-b493-7c1dffd57ec8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4647a625-5307-4d99-804b-145fe9eb134d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb98b6b5-7d9d-4e4c-915c-a6555e92f707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4d9ff4dd-f041-45a0-9101-29cfebc18a8f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f2661969-0eb6-44b2-921d-be5ce37d5769",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "72ca9919-3304-4cb6-96bf-1039f06b8c32"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7784b071-e047-4735-b04e-e8a33765f5db",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2c992e48-8b59-405f-ac0e-c4551179e8d2"
                    }
                  }
                ]
              },
              {
                "id": "5f5cd918-f244-4f40-bcc3-dd722d0ca7a7",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "04554305-8778-4d2b-b900-0a7038e18a22",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb9becfb-466c-41e9-a7ca-b3eeb4ece909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "409bdb9d-c10c-4f16-875e-f570ec79429a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a0f26ad-59af-4e65-bf69-10e4c3acd99e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7b3eccb-42af-42f1-bcb6-951a8bb78331"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5c14c351-7284-48e6-8b64-b99104219994",
            "name": "Positive Testing",
            "item": [
              {
                "id": "eac09ee4-791f-4ca8-a3f2-cea41a45d4f9",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b570c24-5f3d-4059-8983-d5cd4aa10dfb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "212e4cd2-e5d0-436f-af2b-c25ccd481770"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff90bdcb-830f-48ff-af3b-a56fe6681495",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "421071ab-3754-4e95-a381-75b798fb3864"
                    }
                  }
                ]
              },
              {
                "id": "bec181e8-a3da-4ff5-a01c-ed84c9adb068",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b98582d3-effd-4998-847b-249e56392c3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3020d272-8abe-4f71-b15b-0e356c83d50d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6b468ad5-0ab0-4bbc-bba7-d94492b923df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c5657ace-41bb-46c2-8898-141336792763"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d99c178b-25ce-423c-ad3d-afe01b1e1847",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "bfd150e8-19bd-4f05-9768-45a4245cc9f1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5049ad5b-4ac5-43f8-a14c-b1f8701cbcac",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b16b5815-5c83-4b29-9ad3-ac206f304e07"
            }
          }
        ]
      },
      {
        "id": "7b9c8674-bf5a-4c66-8736-c31bb7846304",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b9945535-2edc-4dc7-9eea-fbb1b493adb7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b4b4a093-389c-49d7-a873-ea94b37250a6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ed81cce8-95b5-4636-9c66-8a455779e015",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b813d6cb-b406-4344-b748-6aa65237e355",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5d3870c3-cf05-4359-80b8-d0bc81653208"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3320e4ef-64e6-4377-99c2-cd669eeeff2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d77b572-7fac-42f2-b50a-1c90c7b0fb5d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "70403e39-b62e-448b-8e0c-7d36e6ef2cd5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1cd99ff6-c652-4349-ad4d-a46c42c18380"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ac00ab18-0330-4144-b882-73fb82e1e61e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "529ac8fa-d65e-4dfe-ab26-655f3822a3d3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2399a6c9-7114-4fc9-824c-6e64faea4342",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f8f1f393-a36b-4eb4-a185-1d831021ae0c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "af9530f8-e6ef-44e4-bfa7-212e8c8d33f5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "db2ebe0d-b45a-47fd-9c91-b21754830f17"
            }
          }
        ]
      },
      {
        "id": "f45bb9c7-49f7-45d0-9463-ca47a175d815",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "95f02daf-87da-43ed-bbc0-2897ca692c27",
            "name": "Negative Testing",
            "item": [
              {
                "id": "70961689-cb74-485d-bbe7-cb1b1b5c91e1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2bde3cca-b95e-46b3-a6bf-9d74cdd83250",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "223712c2-a7f9-4efe-bab9-5eb7a825cc30",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "61916139-df5f-4880-a1cc-2ac4ab423175"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e520269-32f5-4b5e-b96e-1d205c631f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "16ed643e-4e2d-49a7-90d9-d406c047317a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5799a8c7-4162-4984-9af2-3c70a4e2840a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9fee288-8afd-46ee-b750-89fc71652a13"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed1f9e59-5abd-4557-acb2-de5acaf5e174",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3f53bcc1-8f8e-4706-bacc-0f9289f3a284"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4a61b558-b8f7-4558-8a9e-decf92cf1948",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "711a2975-02b8-43a7-9025-8e67cbdcd850"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "90227b9c-59a8-4c44-8d6e-96faf8de9606",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e27a8b07-7004-4e74-ae34-9568dd1add81"
            }
          }
        ]
      },
      {
        "id": "c9cc3a1e-6180-4e4f-8de3-6c81877c5581",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "edca5e19-5dbe-47f2-96c6-433fcd9b54e7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8c975a3f-b432-4876-9876-6b25fe452454",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e6f608af-1180-43c8-b23b-472211aee3bd",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9e92e55-ec42-4ca4-acd2-a3992a498022",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "335eaa62-beaa-4d42-bf58-60b6b2a6918d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "452dba0e-dee7-49b0-953a-d6109ddc2349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "74af03be-5109-4d89-acf0-466a5e91fc1f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "256c0bdc-cf08-4e8f-afb3-1755a8aa8cff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "645daa78-a742-4800-b0df-adbafbf70ad2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "43fb8133-99ea-4b87-8baf-23bda6adbc67",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7a01481-eb97-4dbb-98e6-64abfc97c9b8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "28496e8d-ce51-4e1e-b7bf-27542735d3f6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "eb0a46ff-9849-4e1a-82c4-599ec5f268a2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "916da448-83f0-4edf-b85a-3a1509e8d38f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0bf5f416-285a-4417-95a7-da637269ad12"
            }
          }
        ]
      },
      {
        "id": "7de381d8-6b6d-4fa7-8ae5-7bcf1af8759a",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f3c45753-f799-44f8-bca5-1c09f495ae58",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "df08915f-acf1-4df4-ba9a-69c4f8409ed4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e625bb00-3375-4188-8a1d-22ac2e3897fd",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f6146f88-c4ea-4ad1-8d75-7a57b8d11a42",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "95414661-6807-479f-b44b-c6220d71cd9d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1853,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 246,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 495,
        "pending": 0,
        "failed": 286
      },
      "testScripts": {
        "total": 931,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 36.418699186991866,
      "responseMin": 6,
      "responseMax": 1842,
      "responseSd": 117.22135051343699,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1685839716300,
      "completed": 1685839736264
    },
    "executions": [
      {
        "id": "700eedb8-6ee5-4f61-b7c1-4ca8d5f74c3a",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 244,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6cb90c78-2ac0-4462-b3d2-095522e2c2a3",
          "httpRequestId": "6b8ffa00-2fc5-4362-b904-665a94431da0"
        },
        "item": {
          "id": "700eedb8-6ee5-4f61-b7c1-4ca8d5f74c3a",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "5ca765b9-40b8-4662-89bf-67715b14371d",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 0
        }
      },
      {
        "id": "2779ec15-a464-4e41-9c59-8baa685cc008",
        "cursor": {
          "ref": "9b59fa01-ea13-4b6c-9655-3b71c281c483",
          "length": 244,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e6db9a0d-7590-48c1-8448-593de1df7834"
        },
        "item": {
          "id": "2779ec15-a464-4e41-9c59-8baa685cc008",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "e92f0a23-7fcc-46ff-8acc-19e19f40cb40",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "7268eafa-cdc4-4f59-a3f8-06ad2e0c790b",
        "cursor": {
          "ref": "9393d722-57a8-4e64-9b55-5327b4912499",
          "length": 244,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d8f1d2cc-4e39-48c7-a3fb-d6134cf4dee6"
        },
        "item": {
          "id": "7268eafa-cdc4-4f59-a3f8-06ad2e0c790b",
          "name": "did_json"
        },
        "response": {
          "id": "f83008fd-230a-478a-b299-f90ba70d3faa",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d11afcaa-ddb3-47c0-acff-d14440290e02",
        "cursor": {
          "ref": "4ed695ec-9083-4a1b-a284-8ed55c09b42d",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ce0ceea7-1ade-4fda-aedd-4be4b2d98489"
        },
        "item": {
          "id": "d11afcaa-ddb3-47c0-acff-d14440290e02",
          "name": "did:invalid"
        },
        "response": {
          "id": "f7d7357f-d5bf-446f-87fa-53c6e8ca5ca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d11afcaa-ddb3-47c0-acff-d14440290e02",
        "cursor": {
          "ref": "4ed695ec-9083-4a1b-a284-8ed55c09b42d",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ce0ceea7-1ade-4fda-aedd-4be4b2d98489"
        },
        "item": {
          "id": "d11afcaa-ddb3-47c0-acff-d14440290e02",
          "name": "did:invalid"
        },
        "response": {
          "id": "f7d7357f-d5bf-446f-87fa-53c6e8ca5ca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c446900-ccc2-4342-bb9f-466bec2cb067",
        "cursor": {
          "ref": "6f9ce172-c56f-4be7-8c34-e50c4baf0895",
          "length": 244,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "952670b4-4a28-4e94-9659-4dd7a78f1477"
        },
        "item": {
          "id": "9c446900-ccc2-4342-bb9f-466bec2cb067",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "cc688d10-3068-45d5-bcbb-e900bc2e1310",
          "status": "Not Found",
          "code": 404,
          "responseTime": 292,
          "responseSize": 2
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "237cd413-ff25-4ab7-9610-e9ff2376bba3",
        "cursor": {
          "ref": "1f64de55-91da-4f1f-9a99-4f4eae59b1be",
          "length": 244,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "00cfd2f2-7f0f-48b6-b82a-8d25b5b8f394"
        },
        "item": {
          "id": "237cd413-ff25-4ab7-9610-e9ff2376bba3",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "ae758e42-b458-4ccb-9e73-807a346afe07",
          "status": "Not Found",
          "code": 404,
          "responseTime": 32,
          "responseSize": 2
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "6bffd3b1-7453-46ee-9a46-ade0804f9f5c",
        "cursor": {
          "ref": "f343d70e-1773-4a2f-a982-f660aefd5f08",
          "length": 244,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c9bf8c22-1648-4d49-bc40-8da021d207e1"
        },
        "item": {
          "id": "6bffd3b1-7453-46ee-9a46-ade0804f9f5c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "e4bee4da-a1eb-4d8c-a565-945f2e198e3f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "d560ed72-bfc9-4aa3-848b-93dbca2ce004",
        "cursor": {
          "ref": "82268db7-dea7-4c5b-80a5-57fa5bcd5760",
          "length": 244,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "af22694c-c809-4853-aaa2-1e1c0c80c4fc"
        },
        "item": {
          "id": "d560ed72-bfc9-4aa3-848b-93dbca2ce004",
          "name": "identifiers"
        },
        "response": {
          "id": "b6175aa9-c84e-4327-a3ef-78049307e36c",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 1137
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "fd736190-4263-463d-978f-405a4bacb73b",
        "cursor": {
          "ref": "0e2d1b84-9eaf-46ea-9918-8a75f82c7c9c",
          "length": 244,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "3f5783ec-dbc9-4723-9a9b-07244e62ebb7"
        },
        "item": {
          "id": "fd736190-4263-463d-978f-405a4bacb73b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d141f0c6-2943-462f-8cc9-46c2dd3fb82f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "47f9df08-3606-4bca-a2e0-bc721ebd0a95",
        "cursor": {
          "ref": "a4968305-449e-4e33-be19-bf5a81beae3a",
          "length": 244,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0dec2950-0401-49cb-b987-b10b3744fddb"
        },
        "item": {
          "id": "47f9df08-3606-4bca-a2e0-bc721ebd0a95",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "27091f34-cb86-4686-a4d1-dedf0e99c205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "7e0d7d1f-517d-47dc-b9ef-473a224e184e",
        "cursor": {
          "ref": "9e7611b9-8ba7-47e0-b3b9-87d913439bba",
          "length": 244,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d6fab625-9537-4d2c-99b5-45a2e912bade"
        },
        "item": {
          "id": "7e0d7d1f-517d-47dc-b9ef-473a224e184e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "8ea513af-13a7-4c38-ace4-836a8176928d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "0ef52c6b-3f60-4619-a8a9-66fbd9ce0179",
        "cursor": {
          "ref": "555e4022-0362-422d-996e-93d07538aac5",
          "length": 244,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "fe73954a-5df3-4cf9-bc0d-8d234c035c93"
        },
        "item": {
          "id": "0ef52c6b-3f60-4619-a8a9-66fbd9ce0179",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "df043557-d2ad-4d57-8a3c-7d948b139c69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "f8e36ca2-c297-4fc8-8b86-47ff5a5d2354",
        "cursor": {
          "ref": "040f24a1-9aef-46bd-a609-88d66ec45084",
          "length": 244,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "fe98c9c3-af7b-4322-9cf5-cd026ca9b778"
        },
        "item": {
          "id": "f8e36ca2-c297-4fc8-8b86-47ff5a5d2354",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "86a4c095-3c55-45a4-9a8b-e0f3df028dee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "c094648a-0d7e-44e8-b445-48469dc0aea7",
        "cursor": {
          "ref": "f02ec23a-f41d-42d2-b5c0-9a9d9d8fd167",
          "length": 244,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "f93cfb4d-1f95-4eff-870b-fe241e4730d4"
        },
        "item": {
          "id": "c094648a-0d7e-44e8-b445-48469dc0aea7",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "1fadcde6-32a2-40e6-bf24-22ab4d9b42b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "1c51c393-60e4-4af2-a961-12467691f0fb",
        "cursor": {
          "ref": "c6bcba03-9d14-4212-ad1c-d9a63a652999",
          "length": 244,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "4627afa7-dbb6-46c5-b306-e9f93dc4f7f2"
        },
        "item": {
          "id": "1c51c393-60e4-4af2-a961-12467691f0fb",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "d629f070-4264-45c4-8a90-4580101811d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 215
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "4fb62807-8862-4898-950f-d9244aaac6da",
        "cursor": {
          "ref": "02b778b0-b62b-4b50-ac74-e99049c77881",
          "length": 244,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "031e2113-abdf-4ee0-af18-cad947877b5b"
        },
        "item": {
          "id": "4fb62807-8862-4898-950f-d9244aaac6da",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "423c5c50-a133-477c-bca2-2f1f8926de1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "5dc9d37d-6491-455b-b18e-51967a99b4c2",
        "cursor": {
          "ref": "a46f9de9-a878-4423-ad31-1f2f23538965",
          "length": 244,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "286c5605-42ac-4a54-98a8-27613d0f0f1e"
        },
        "item": {
          "id": "5dc9d37d-6491-455b-b18e-51967a99b4c2",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "70991ad9-f085-48d7-ae8f-95f7b4ff87b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "3fee8490-2b08-493e-bbac-5167c67b4f4d",
        "cursor": {
          "ref": "724cc5ee-83d3-4fde-a8cc-e0b6daa542a6",
          "length": 244,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d472c5e2-4e7b-4d8a-8ef5-244ac02575f1"
        },
        "item": {
          "id": "3fee8490-2b08-493e-bbac-5167c67b4f4d",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d60d99c7-ffc4-44a3-b248-174331ffc08e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "140aa14f-3ee2-4a11-8cf1-6c20c4fc7e42",
        "cursor": {
          "ref": "9422587b-81ce-4073-ab8b-ceea4eebae92",
          "length": 244,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "735b9afb-5df5-423e-8c4c-a1eecbf0232c"
        },
        "item": {
          "id": "140aa14f-3ee2-4a11-8cf1-6c20c4fc7e42",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b99c32ae-1750-49ce-9918-cdcae74ea600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "5dfc29d0-a704-4dc9-bb22-f0aff6347c90",
        "cursor": {
          "ref": "483702b9-5102-426d-898b-82ea6c0fb9d8",
          "length": 244,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3f0f59de-7f60-4ba7-9d8a-d61e03826d58"
        },
        "item": {
          "id": "5dfc29d0-a704-4dc9-bb22-f0aff6347c90",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "12a6b073-d75c-43a3-af9f-5cc03bafab6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "2e33ef6a-c9ca-4305-9098-8eb22cd453d8",
        "cursor": {
          "ref": "6fc91172-00c7-46f2-aa0b-57d3422474e6",
          "length": 244,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "382d8b0f-1d17-4237-91fa-4f6a70d22463"
        },
        "item": {
          "id": "2e33ef6a-c9ca-4305-9098-8eb22cd453d8",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ad563b80-678e-43a4-8488-ee24fac96bef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "cbcad28e-977e-4c44-bd89-28708e16df9f",
        "cursor": {
          "ref": "611c797a-86f7-4cd1-826e-6508be4c2dbe",
          "length": 244,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "2fcfff94-f1a1-4b66-816e-4f9d4c1c9340"
        },
        "item": {
          "id": "cbcad28e-977e-4c44-bd89-28708e16df9f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "9494069d-ed7f-47b2-a515-54d5a44a49c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "42674833-0207-4e33-b6a2-8381e7585bcc",
        "cursor": {
          "ref": "d5c663c7-2947-4d81-bf41-c917fb0eb6da",
          "length": 244,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e845fd1e-c381-4368-8203-5ee6bc7f3727"
        },
        "item": {
          "id": "42674833-0207-4e33-b6a2-8381e7585bcc",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "ac141058-8840-4042-a71f-3730f0a69dd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "5110c3fd-f03a-4afb-84c3-0c727e142a7e",
        "cursor": {
          "ref": "119f8929-1eed-4f63-9b18-ffdd0bec5570",
          "length": 244,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a92b4876-195f-4fff-81a6-6b972d8454ae"
        },
        "item": {
          "id": "5110c3fd-f03a-4afb-84c3-0c727e142a7e",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b18a0037-9afb-4ee4-aae0-76352b7080f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "c9555f36-c626-4696-b746-25cd81982a3e",
        "cursor": {
          "ref": "64951dcb-6488-4d9c-8f6c-a2ba796ebb90",
          "length": 244,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a9620749-363f-41df-ab4c-4d463f20943f"
        },
        "item": {
          "id": "c9555f36-c626-4696-b746-25cd81982a3e",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "33506241-16a7-451a-b492-d00b9ae946ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "2ec1bcbd-e4a9-4214-a4fa-9828fa78bcf3",
        "cursor": {
          "ref": "c4f28a3b-8f57-4391-8ac4-6758f0a928c2",
          "length": 244,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "68b5107d-40e3-4410-9a08-18682aea3c91"
        },
        "item": {
          "id": "2ec1bcbd-e4a9-4214-a4fa-9828fa78bcf3",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6a240792-7014-48f2-b998-9c6e6c2bbfc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "fd624627-f5c6-44ea-af97-4c40f487fb04",
        "cursor": {
          "ref": "250ecb36-d617-4a78-8558-8a39a537c55a",
          "length": 244,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "3efe67f3-c271-458c-a86f-320e96c30801"
        },
        "item": {
          "id": "fd624627-f5c6-44ea-af97-4c40f487fb04",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "456cfa19-c6d6-40a2-afc6-ac36f401f69b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "44e3c6d2-8223-49fa-b5c6-6054c56af5f2",
        "cursor": {
          "ref": "ecbfc462-b92a-431b-8a5f-bcd5493ae79d",
          "length": 244,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "7fe536f3-42dc-4242-b9b0-76df21d350b5"
        },
        "item": {
          "id": "44e3c6d2-8223-49fa-b5c6-6054c56af5f2",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "c6e42847-4afe-4bb2-aca2-b167f9e46790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "9f8972cc-8cd2-4fd4-88e2-737731cfcfec",
        "cursor": {
          "ref": "236f4843-936a-4080-b49a-9aada4bcdbbf",
          "length": 244,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "84204ebb-952e-461c-b036-d3f7a9d6446c"
        },
        "item": {
          "id": "9f8972cc-8cd2-4fd4-88e2-737731cfcfec",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "67c53a67-caf6-4e03-9456-9a99bfe48fcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "b633dc43-ecee-45ca-9e6d-14bfece7b6f5",
        "cursor": {
          "ref": "e69cfe0b-3225-41c5-af22-ed5aa8eb4011",
          "length": 244,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "862184ef-b59f-483e-88a6-5e69a1c76f22"
        },
        "item": {
          "id": "b633dc43-ecee-45ca-9e6d-14bfece7b6f5",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "eed1a3fe-a235-4823-8b07-2bb14c8ecea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "3cc24f56-3491-43a4-b99d-b8af12277706",
        "cursor": {
          "ref": "2caf3fb6-b58c-4e34-a98d-58f0ea2ed46d",
          "length": 244,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "1a872d35-8303-4475-9c69-91d354bfe0c9"
        },
        "item": {
          "id": "3cc24f56-3491-43a4-b99d-b8af12277706",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "a2d827d6-2dc9-4f3e-9bd0-517e58ec0d60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "d66c94e8-8c54-4820-888f-7aec9a25afc1",
        "cursor": {
          "ref": "ca6679d5-43ab-460f-85d9-825588b6219e",
          "length": 244,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "04628353-feb4-4dd1-b074-44eabe4ebc81"
        },
        "item": {
          "id": "d66c94e8-8c54-4820-888f-7aec9a25afc1",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "bd26d84f-9ac6-4ce2-b060-15ab69447355",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "3ce7ebd3-c5bd-4584-8288-e9599aca6543",
        "cursor": {
          "ref": "a2d87bc9-da83-42a5-9bec-f12dca92381f",
          "length": 244,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "11d75a5f-ba51-4660-9b64-e1139651c37f"
        },
        "item": {
          "id": "3ce7ebd3-c5bd-4584-8288-e9599aca6543",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d27096da-cb15-43c7-b45c-94522c87ed29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "6aa8db8e-fc21-48fe-b233-4405152dd08f",
        "cursor": {
          "ref": "f3893ba1-0685-4b06-903b-f3117cbd0439",
          "length": 244,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ca3bc081-4dd0-4e19-8e95-b0fa785c526d"
        },
        "item": {
          "id": "6aa8db8e-fc21-48fe-b233-4405152dd08f",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d0c0c3c1-4919-42a2-9a75-5ab75a8f2dc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "5f270d32-8d03-41b8-af8c-0c214ba5cef1",
        "cursor": {
          "ref": "c73a2ab3-3b31-43c6-ab35-5419824d1645",
          "length": 244,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "708ed067-dfd3-4479-9c35-114b89e7e96e"
        },
        "item": {
          "id": "5f270d32-8d03-41b8-af8c-0c214ba5cef1",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "e6e4d5ba-9744-442f-bd9d-253975fa959c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "9a6c4f58-fcaf-4573-845d-bd6d61e60007",
        "cursor": {
          "ref": "7283f0df-1528-412d-97cb-e6570bec2307",
          "length": 244,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "2ed41ede-4926-46c9-9e17-dabbfe627ec5"
        },
        "item": {
          "id": "9a6c4f58-fcaf-4573-845d-bd6d61e60007",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "7d686ba4-1909-4946-a864-cf4cce1883a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "707bac4f-bb6e-4356-b6b6-2af98c277351",
        "cursor": {
          "ref": "316adafb-2f33-47e2-b9d0-6abb15e98fcb",
          "length": 244,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "3ea7822f-4174-4753-b818-e7549180d704"
        },
        "item": {
          "id": "707bac4f-bb6e-4356-b6b6-2af98c277351",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "7acca609-ba1d-4940-a16e-405a5bb2a7e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "785e395d-37e4-41af-916b-fd94501eefbd",
        "cursor": {
          "ref": "bf443103-bc73-4a34-8479-a824b78450a4",
          "length": 244,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "441d16c0-abb5-433b-ae70-03848a90467c"
        },
        "item": {
          "id": "785e395d-37e4-41af-916b-fd94501eefbd",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "46a02fe5-cc7d-4db9-b6ab-eef06ce46dec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "6eca78a0-f111-439e-b80c-9710757f97ef",
        "cursor": {
          "ref": "1e188a81-fe15-4c17-91b7-6fa8afa406d2",
          "length": 244,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3e04ee47-42f5-4342-8611-4d6a949117de"
        },
        "item": {
          "id": "6eca78a0-f111-439e-b80c-9710757f97ef",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "482443f6-f226-4ea2-93f2-ba3a9273a618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "2ae1936a-4044-420b-bff4-ea7d5730651b",
        "cursor": {
          "ref": "2f4ac086-3a82-4898-86d1-913e99c8a8e9",
          "length": 244,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "df97c802-a217-4106-b0da-d8d377bb1d39"
        },
        "item": {
          "id": "2ae1936a-4044-420b-bff4-ea7d5730651b",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "65a5afe3-a9d5-4f4f-a137-0511ccf9dda9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "6da85297-dba0-4b75-acee-1cbb023d1e3f",
        "cursor": {
          "ref": "5cf11f8a-3eed-42b1-87b9-f3f1712a1cfb",
          "length": 244,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b53a468e-d573-4574-b384-af1ab1da8727"
        },
        "item": {
          "id": "6da85297-dba0-4b75-acee-1cbb023d1e3f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7d91e184-fad2-4bd3-ba9f-8607b1015547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "4e5c0032-c3d8-4cb9-869f-704df8ac772b",
        "cursor": {
          "ref": "064b6ce1-518d-4ccb-b8b7-9ef848771631",
          "length": 244,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "202abd7d-4e29-4da8-928d-34311764147f"
        },
        "item": {
          "id": "4e5c0032-c3d8-4cb9-869f-704df8ac772b",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "1b4cfef5-d49b-45f2-ace6-00d5dc384830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "f7f54938-e38d-4cc0-a1aa-c52b76e4ff20",
        "cursor": {
          "ref": "6739ec1c-ebeb-47de-b304-b9701f16b02f",
          "length": 244,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "734b6eea-c64a-4487-89dc-8c07a81bed2a"
        },
        "item": {
          "id": "f7f54938-e38d-4cc0-a1aa-c52b76e4ff20",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "2190fcf1-4fee-4f02-98c8-039ac414d955",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "60c13d9a-e288-4a4d-a68b-4cc23af678d1",
        "cursor": {
          "ref": "8899ada8-e2cf-4b35-82d9-db7c68f5a47a",
          "length": 244,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "fcaf9049-b693-4c96-88af-14bb3c7c3898"
        },
        "item": {
          "id": "60c13d9a-e288-4a4d-a68b-4cc23af678d1",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "1ec758a1-17b8-4645-931e-562474b75846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "0a4181b4-c33a-460a-a51e-29bb4a34ab36",
        "cursor": {
          "ref": "4fa305f7-7934-43f8-b571-8335e017bd02",
          "length": 244,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "3936edab-22c5-43af-8be9-6227c2f4429a"
        },
        "item": {
          "id": "0a4181b4-c33a-460a-a51e-29bb4a34ab36",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "bebe8ba5-2e61-47b3-b252-70471dcf92f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "de45c9ea-6014-4ca6-9d5a-c98e5f3998b9",
        "cursor": {
          "ref": "9ee08f09-6a18-4f3c-9a01-020558e4a933",
          "length": 244,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "9c461413-4ee0-45d5-98af-831daa45eebd"
        },
        "item": {
          "id": "de45c9ea-6014-4ca6-9d5a-c98e5f3998b9",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "396b5bbf-1231-4674-a38d-ed3ab48bf344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "cccbd3bc-7684-415b-8faa-d482d46bd181",
        "cursor": {
          "ref": "85c7cc9b-455a-4ae0-b687-fd28d8965599",
          "length": 244,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "9f411f9a-0ba3-4f4c-bb4a-8bb91d0aeeed"
        },
        "item": {
          "id": "cccbd3bc-7684-415b-8faa-d482d46bd181",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "ab6e3755-d1ba-4237-b34a-e858d8c66b0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "784fa1fb-ac43-48c0-9c0e-8a4de02cbe79",
        "cursor": {
          "ref": "7065a3ca-9e44-48a8-bb00-377914209de1",
          "length": 244,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "becfe236-421b-42ee-bfb7-836e267b3779"
        },
        "item": {
          "id": "784fa1fb-ac43-48c0-9c0e-8a4de02cbe79",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "a22bb297-04f9-444c-bb4f-38fc66bc52cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "3c0319ad-5986-4adc-971d-7be7c8ae6e64",
        "cursor": {
          "ref": "2a0d5263-dcd1-4bbc-908b-69bb11e74fac",
          "length": 244,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f7558ccf-b9f3-489f-b4bd-4795d1ce141e"
        },
        "item": {
          "id": "3c0319ad-5986-4adc-971d-7be7c8ae6e64",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "fa136c07-129c-4d45-bb63-94fb9bbf13f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "20394307-2953-470c-96bf-686d7ea73193",
        "cursor": {
          "ref": "cf813454-8342-40ac-8a45-4e3866f54212",
          "length": 244,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "dc2358d0-9197-4c81-bf00-e34e48f609d0"
        },
        "item": {
          "id": "20394307-2953-470c-96bf-686d7ea73193",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "373e5923-d0be-42b4-bc2f-f4dc736a2c54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "7e6f8a60-4d60-4d92-af6d-eb77cdea28f2",
        "cursor": {
          "ref": "d35fe489-0b0c-4368-a5ba-87dc1d1ae334",
          "length": 244,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "1354c0b9-27cb-4f49-84e9-376f15ec3b3d"
        },
        "item": {
          "id": "7e6f8a60-4d60-4d92-af6d-eb77cdea28f2",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "514f4546-d15a-4f16-84fd-c63459bb0cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "866f819d-b505-4e50-8573-eadb8d88d15a",
        "cursor": {
          "ref": "fed6bd84-043c-483e-8d48-382941b25640",
          "length": 244,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "14288831-b76d-4d7c-a3b0-6d263e2aa3f1"
        },
        "item": {
          "id": "866f819d-b505-4e50-8573-eadb8d88d15a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6906725e-81e1-415a-aafd-c4d764388208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "30a0a965-854e-4a93-941b-6ff6a17ce012",
        "cursor": {
          "ref": "562090c1-d0c6-4994-9e9c-888b6310c159",
          "length": 244,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "52c78986-ef1e-45be-ba50-2fd29f7fe2b9"
        },
        "item": {
          "id": "30a0a965-854e-4a93-941b-6ff6a17ce012",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "97365dbc-9910-4093-a386-2ac4d273ff5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "15855f28-d4d5-4196-b235-bca3a3314ecd",
        "cursor": {
          "ref": "f3f68b80-13a9-4850-8044-256021e338f2",
          "length": 244,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "3107d2a7-1751-4d64-8520-f84f2eb19fd1"
        },
        "item": {
          "id": "15855f28-d4d5-4196-b235-bca3a3314ecd",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "6a4c3fc5-90cd-48c4-a632-17f2c757ea64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "290e6f9d-4377-496f-a252-e5829f2072cf",
        "cursor": {
          "ref": "6178443b-6826-4a27-ae2a-64de3bc759e7",
          "length": 244,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6588db36-2afe-44f3-b136-a10f57c43f8d"
        },
        "item": {
          "id": "290e6f9d-4377-496f-a252-e5829f2072cf",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e5b5740e-8f4d-420a-a90c-0f423f849bb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "5c9955ec-121e-44b6-903b-7e2221bf939a",
        "cursor": {
          "ref": "3cafa9a6-3884-4183-a2ae-b22e227e6b18",
          "length": 244,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "428a923b-4f5c-43a5-b247-be8f64586fd8"
        },
        "item": {
          "id": "5c9955ec-121e-44b6-903b-7e2221bf939a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "7b162a0a-62c0-488d-b983-c9778da76092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "0f2a7e5f-ecf9-49ea-9874-e3a9f273d546",
        "cursor": {
          "ref": "a5009d98-aef7-41ee-9b93-74fb469600b4",
          "length": 244,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "777615a9-5e5d-4ae1-b38a-4b4b936c5cf6"
        },
        "item": {
          "id": "0f2a7e5f-ecf9-49ea-9874-e3a9f273d546",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "763e161e-a093-4af4-8060-39db24740912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "4698e305-de5c-4b75-825d-268a0f964545",
        "cursor": {
          "ref": "db0fd0d7-b14f-4abf-a6a8-660b1d548526",
          "length": 244,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "16928d64-cbd3-4ab6-bf2e-0319c78f8514"
        },
        "item": {
          "id": "4698e305-de5c-4b75-825d-268a0f964545",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "bc66aca1-e0e8-48a6-8b99-c1094249c478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "311fc284-f7eb-43b8-b45c-5686479fee4b",
        "cursor": {
          "ref": "ff202363-7b77-421e-9702-89c07d6d9cf5",
          "length": 244,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "0c06a5ca-8252-4571-a580-9d6198fce93b"
        },
        "item": {
          "id": "311fc284-f7eb-43b8-b45c-5686479fee4b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "a764ba89-7272-4059-87ed-5e2d090a1716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "bee572e4-dc15-4bd1-aa9e-85346ae0d59e",
        "cursor": {
          "ref": "69a2504f-040b-4cb2-a2db-2d0d94ffebe9",
          "length": 244,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b397ca2c-8cf4-4e25-8bf6-432cab464591"
        },
        "item": {
          "id": "bee572e4-dc15-4bd1-aa9e-85346ae0d59e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "55939b87-368f-4b2a-82d2-50cd44f3da32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "48dda455-9594-4374-94bb-493973157dd6",
        "cursor": {
          "ref": "6ab11856-4b00-4a2d-a1a1-94a762e43947",
          "length": 244,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "0019fc47-7a53-4460-9baa-19f2bf10499a"
        },
        "item": {
          "id": "48dda455-9594-4374-94bb-493973157dd6",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "43a4b362-bdcc-4dcc-a06b-efca55e47574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "08e95797-f178-4977-8baa-13f419565fc8",
        "cursor": {
          "ref": "0e78c5a2-496a-4432-862c-e2b8ad57cc0e",
          "length": 244,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "80aa20a6-81e1-4820-80df-dc063ae28987"
        },
        "item": {
          "id": "08e95797-f178-4977-8baa-13f419565fc8",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "e0392504-346a-4668-bb31-2c72e997a76f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "ccabea86-e804-4292-9473-fb0dc123a9f2",
        "cursor": {
          "ref": "73ba7b9d-3d3e-41d9-8dde-225e97bc2e09",
          "length": 244,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "2408f49f-2418-46a5-ab15-006457cab241"
        },
        "item": {
          "id": "ccabea86-e804-4292-9473-fb0dc123a9f2",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "2c162561-289f-459d-a19a-acc77f067e99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "34335e22-b236-443f-9a11-ddc3d6e99858",
        "cursor": {
          "ref": "4895913c-0b11-43a5-809f-29f3d14feeb2",
          "length": 244,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b408f61d-78c9-46dc-b69b-3cd8ffbcc3fd"
        },
        "item": {
          "id": "34335e22-b236-443f-9a11-ddc3d6e99858",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "f22850bd-7687-4d95-98fd-1eec5e0e924d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "504039ba-5151-492a-97d0-1cdf1ace2afd",
        "cursor": {
          "ref": "6a91f9a7-0ecd-4609-9506-8680ac668fb1",
          "length": 244,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "2b13f59c-c231-4c09-8e3f-7cef58344196"
        },
        "item": {
          "id": "504039ba-5151-492a-97d0-1cdf1ace2afd",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "7f2a8f3e-8e4f-4e3e-9e1c-74ca751b9e6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "e592daf6-57db-4738-8329-f72f1dbcd639",
        "cursor": {
          "ref": "150a364a-b95f-408e-bcbc-5cbb120feadb",
          "length": 244,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "3959636f-63e0-41e6-897a-e1dbfa39fc44"
        },
        "item": {
          "id": "e592daf6-57db-4738-8329-f72f1dbcd639",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "e07aa171-e664-4709-a537-b77621bd85d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "15568cd1-7542-40d8-b4a0-34cc16b8f2ca",
        "cursor": {
          "ref": "64e51443-d051-441d-aeab-b364eeb85ada",
          "length": 244,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a79f7bd2-6c89-47f5-aa95-f585aac71d8c"
        },
        "item": {
          "id": "15568cd1-7542-40d8-b4a0-34cc16b8f2ca",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "38e4478a-733d-4fb9-8403-6fdc107e0dd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "7a2be32b-0dbc-4aa3-ba9e-73b876b2ea26",
        "cursor": {
          "ref": "bf9a4e3a-c833-45cc-8d16-4b6c3f5b1d01",
          "length": 244,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "b59161dd-2447-4206-b01a-434832356230"
        },
        "item": {
          "id": "7a2be32b-0dbc-4aa3-ba9e-73b876b2ea26",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "0355b095-cdb7-42ed-9392-da4236691f29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "089c0059-b6da-48c4-bef9-2aa3d0890a2b",
        "cursor": {
          "ref": "05822ee1-bd6e-4b0e-be85-1cd096e0d71d",
          "length": 244,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "1854fc17-e02d-45a8-be7e-8c9ac874eedc"
        },
        "item": {
          "id": "089c0059-b6da-48c4-bef9-2aa3d0890a2b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "2a93434f-43dd-4902-9fca-5a2f7fb1cae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "498e215a-050d-45bf-9bc2-2af2a176efce",
        "cursor": {
          "ref": "673c23e0-71c3-49e9-ba02-4bfc61fac2c4",
          "length": 244,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "268516f4-c9ca-4b3d-baae-152616e25214"
        },
        "item": {
          "id": "498e215a-050d-45bf-9bc2-2af2a176efce",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "858b4e60-1fb9-4dcc-9531-80e7bd9b86f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "b970efd0-8090-4eb6-b5c9-c973ff917e82",
        "cursor": {
          "ref": "f0d58cef-0686-4d22-80b6-acd3ea7a7662",
          "length": 244,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "9bef9749-0859-49c8-b5c5-aad32d3c46aa"
        },
        "item": {
          "id": "b970efd0-8090-4eb6-b5c9-c973ff917e82",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "4019a1cd-3d2f-487b-893b-4d874421b908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "0e81ee07-94fc-489f-8833-81d7f5e56438",
        "cursor": {
          "ref": "9fa9d1fe-4c14-4245-8963-f190754eb519",
          "length": 244,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "5033f50d-7161-410a-93e6-42f8c5ab9ce9"
        },
        "item": {
          "id": "0e81ee07-94fc-489f-8833-81d7f5e56438",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a81f1572-4677-4958-9a24-5a157394bc4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "30009df1-e2c3-4221-ac21-faf0472e1ade",
        "cursor": {
          "ref": "20848b3d-e038-4bb1-96f2-c624b7e33b3a",
          "length": 244,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "9582ba87-f836-472a-9aa0-ea0d28f53adc"
        },
        "item": {
          "id": "30009df1-e2c3-4221-ac21-faf0472e1ade",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e533b75b-4506-46d4-972e-0c66fa7e2436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "a576cf8c-eebc-4a3a-b282-3d72b782e69d",
        "cursor": {
          "ref": "f318a34d-c98f-4966-9207-7fdb4e4c127b",
          "length": 244,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "8b7bc9ed-ecbf-4b30-b57b-61c877d0c3ed"
        },
        "item": {
          "id": "a576cf8c-eebc-4a3a-b282-3d72b782e69d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "a1c817c4-cb3d-4eb6-9b66-378c5ef39391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "28ddf604-0d68-488c-b8ae-ebaa686db382",
        "cursor": {
          "ref": "b651c4bc-535d-4585-bf2e-ee7b8aa54538",
          "length": 244,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "53c8cfc7-655d-4c05-ab1b-3edffb1321ff"
        },
        "item": {
          "id": "28ddf604-0d68-488c-b8ae-ebaa686db382",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "90119a68-cf14-46e1-9987-01d77932d887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "2b5aa836-f8bd-440e-a80b-4e3f0b1ba863",
        "cursor": {
          "ref": "0e314618-49cb-413b-a46b-5118cfdffde2",
          "length": 244,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "13f50f49-3c16-46a6-9ea8-c4120478b334"
        },
        "item": {
          "id": "2b5aa836-f8bd-440e-a80b-4e3f0b1ba863",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e942ac61-a857-401b-833e-f324baf982b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "9ba36bbb-dbd2-438f-a946-b81be0227dec",
        "cursor": {
          "ref": "d849279e-8f73-461a-9fd7-7cea24f0bcdb",
          "length": 244,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "ccaaeebd-8ea4-427d-84ee-33b0e9750ebc"
        },
        "item": {
          "id": "9ba36bbb-dbd2-438f-a946-b81be0227dec",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ef1e1528-c878-4e28-9923-fc770c2b42d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "3a9ce253-3f9c-4a6e-9c9a-d90a559c7f4e",
        "cursor": {
          "ref": "e3757897-48cb-40d3-940a-4ccad1f1bc00",
          "length": 244,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "250d3b95-0ece-4a46-aaea-1dc8783a980b"
        },
        "item": {
          "id": "3a9ce253-3f9c-4a6e-9c9a-d90a559c7f4e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b149163b-ae88-4c26-a526-7a1c093b4c1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "f917894b-0d1d-4e3a-88d7-03f359ccaf75",
        "cursor": {
          "ref": "b55eb3fb-93fb-465b-b4fe-44da44ccca4c",
          "length": 244,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "2e752913-a975-4e01-9ac2-9fc8eb63ff23"
        },
        "item": {
          "id": "f917894b-0d1d-4e3a-88d7-03f359ccaf75",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "2efd9c87-775d-4259-84cb-ed7a5262a822",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "1e64ca9f-9afc-4813-92e3-6008fc7a6bcb",
        "cursor": {
          "ref": "005e0e17-3d5e-4bb8-bf41-2b671def4cf0",
          "length": 244,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "854754fc-54f4-43a6-bb6d-cc47e2975646"
        },
        "item": {
          "id": "1e64ca9f-9afc-4813-92e3-6008fc7a6bcb",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "3a10d958-60a7-4137-ad38-09a13ae5d948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "cc2799a6-5cbf-4350-a879-2dc96502e206",
        "cursor": {
          "ref": "ef9463d5-7123-4c1f-b48f-b9f65f0eadf1",
          "length": 244,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "12611a8f-2b07-4ab1-9493-1b78cadd37ee"
        },
        "item": {
          "id": "cc2799a6-5cbf-4350-a879-2dc96502e206",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "6bc404e6-7c2c-450a-b37b-387c0c164b34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "7abed974-22ae-4308-a233-a76d3ddc2a81",
        "cursor": {
          "ref": "a7cb75fa-8ed2-4f52-9a69-92fa2d28de7b",
          "length": 244,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8eda7dfb-f3d6-4dd2-9b40-72a55bed8ceb"
        },
        "item": {
          "id": "7abed974-22ae-4308-a233-a76d3ddc2a81",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "362f8145-65a2-4223-95c9-ed032bd777d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "0ca3a270-7631-49ec-9555-df88806bc93e",
        "cursor": {
          "ref": "d08ffebe-77a1-4487-8f36-1a36f22d8452",
          "length": 244,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a67cd4b0-9287-4661-b338-0a031cab217a"
        },
        "item": {
          "id": "0ca3a270-7631-49ec-9555-df88806bc93e",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "0b507f66-b4ff-49e4-90d8-6f18e7aebdb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "95d3a22b-1207-4e6b-8207-78d97c02308a",
        "cursor": {
          "ref": "5d22b3e3-43cf-4aa7-8b1c-2cff1cc821ac",
          "length": 244,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d5e8b04a-9bfd-4074-b659-93159785173a"
        },
        "item": {
          "id": "95d3a22b-1207-4e6b-8207-78d97c02308a",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ebc33c07-4324-468d-bb29-435c458a2632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "f3bb649d-e252-44b8-8c38-c42c625ade58",
        "cursor": {
          "ref": "76bc02a3-8c68-4067-83ac-2b0121081e8b",
          "length": 244,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "08bcdd1a-1526-4186-9047-955ba41b6715"
        },
        "item": {
          "id": "f3bb649d-e252-44b8-8c38-c42c625ade58",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "c7f61478-d2c8-4a91-8d86-e0a42cee5653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "cc3b2eca-dc28-4da3-ab8b-0c911f35ddd2",
        "cursor": {
          "ref": "47905a69-00a3-47d4-af11-db8c064dc3db",
          "length": 244,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "1a06f6f2-45c5-407b-8a77-036012b35bb1"
        },
        "item": {
          "id": "cc3b2eca-dc28-4da3-ab8b-0c911f35ddd2",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "3efa7864-7028-4384-8685-d6443d72aad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "e53b0888-b009-4a72-973a-0c5baa03de99",
        "cursor": {
          "ref": "859ed6e8-7079-4af8-bced-53d8110c6532",
          "length": 244,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "cee1c75a-a447-4797-942f-0a61e3c3cdce"
        },
        "item": {
          "id": "e53b0888-b009-4a72-973a-0c5baa03de99",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "cfb2cf95-9c8b-4e26-a048-f81181fa6758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "6eeffac4-24a1-40bf-9543-7cc2c8e0e08c",
        "cursor": {
          "ref": "4c2f3eab-a05c-40ba-9a59-d77b0e9abd1d",
          "length": 244,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "4e4137c3-2f2c-4766-8b96-b9d9361358e4"
        },
        "item": {
          "id": "6eeffac4-24a1-40bf-9543-7cc2c8e0e08c",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "6ed40cc3-f4e0-4ad7-856b-cdb53a70d30d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "54d4a23c-6843-481f-880b-8183b3066534",
        "cursor": {
          "ref": "b010a0fd-2618-45d2-a8f1-aa893ad5714e",
          "length": 244,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "fe7f5d80-9310-41d0-994a-8581dbc94fcc"
        },
        "item": {
          "id": "54d4a23c-6843-481f-880b-8183b3066534",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "3b373810-b558-41b2-88f0-93e0d2819aff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "74357b76-a8fa-4aef-a6cc-61d279fa7d87",
        "cursor": {
          "ref": "fc8017ae-0dea-46ba-9159-015094813f37",
          "length": 244,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "c6fd93c5-d55b-401c-a055-d78446ad50dc"
        },
        "item": {
          "id": "74357b76-a8fa-4aef-a6cc-61d279fa7d87",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "f2d5eb47-e140-4722-ae10-eab9bf92c53d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "0d2c4b1d-e27a-4f33-8fa5-8bcf9a2ff2f3",
        "cursor": {
          "ref": "366868e3-25b4-41ae-98fa-488eb262eb1d",
          "length": 244,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f65a3654-e965-4fef-8702-a14eb683d41a"
        },
        "item": {
          "id": "0d2c4b1d-e27a-4f33-8fa5-8bcf9a2ff2f3",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "d4df6427-4f91-4695-8d81-8dd827f7f6f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "96eadd9d-dbe1-4bf1-8702-18a7328f46e9",
        "cursor": {
          "ref": "48b953aa-547b-48a0-90b0-b25eb917cd72",
          "length": 244,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "f207c352-9194-48b1-b018-4c189c73778d"
        },
        "item": {
          "id": "96eadd9d-dbe1-4bf1-8702-18a7328f46e9",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "4b819365-7f1d-4e17-930d-a26eee3750c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "de1571c7-b8de-4a41-8214-5d93776862fb",
        "cursor": {
          "ref": "30e6287c-beb1-459c-8dce-fe30f36f7e70",
          "length": 244,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f93f80b0-fd14-4298-ade6-3de5db731188"
        },
        "item": {
          "id": "de1571c7-b8de-4a41-8214-5d93776862fb",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "45873353-bdb8-402f-8ced-9da6988e386a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "aad72f7b-2469-4b64-8f9d-80274423732b",
        "cursor": {
          "ref": "9c19e9fe-bb07-45ff-82af-c63ae2dc524a",
          "length": 244,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4c9954cb-448c-43cd-8396-58561d9ad382"
        },
        "item": {
          "id": "aad72f7b-2469-4b64-8f9d-80274423732b",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "354a940a-0b0c-4426-98b6-1e40b1e28932",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "3f6cdf4e-8a47-4a22-a21b-4a32fd3fbc39",
        "cursor": {
          "ref": "695cea75-8b80-45ef-8527-affaea1f550a",
          "length": 244,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a112ab74-e5a7-41ff-9750-085a018f6c4a"
        },
        "item": {
          "id": "3f6cdf4e-8a47-4a22-a21b-4a32fd3fbc39",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "87f501f6-bde1-4412-826f-0ab0cb039a0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "d3e7bd98-6115-4e4d-bfc1-648406231e38",
        "cursor": {
          "ref": "1cd8935f-37a5-44c6-a67c-8b254e930dd0",
          "length": 244,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "4c7cd3d5-4b7c-46af-8c4f-939f23e9bc9b"
        },
        "item": {
          "id": "d3e7bd98-6115-4e4d-bfc1-648406231e38",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "3225d2b3-23e7-44d4-9f2e-af917ee5c2d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "976c8757-e9e7-459b-abfd-3a738d53f39e",
        "cursor": {
          "ref": "8cb0d1ec-9c6f-4199-b30b-6c7b1a5bc2cd",
          "length": 244,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a731dada-04a9-447e-a444-4c0cb15f8206"
        },
        "item": {
          "id": "976c8757-e9e7-459b-abfd-3a738d53f39e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "30a71763-b56e-48bf-b117-a83d49676c3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "9edf7784-7185-44b1-97ca-5a4085db7efc",
        "cursor": {
          "ref": "4768ce9b-a60e-4f79-969c-a17790eff2aa",
          "length": 244,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "bd124e08-a533-4eb2-a74f-f9d5d06fcfbc"
        },
        "item": {
          "id": "9edf7784-7185-44b1-97ca-5a4085db7efc",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a8c1c80e-f4f5-49a8-8820-cba12b9bd8f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "282aaf43-ba79-4860-bbe8-ebef7148e667",
        "cursor": {
          "ref": "9ae4540e-be39-4a70-a737-f215cc7ccb78",
          "length": 244,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4b2e73c1-e1f9-4db6-b317-fdbe8736f7ac"
        },
        "item": {
          "id": "282aaf43-ba79-4860-bbe8-ebef7148e667",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "bec6884c-fc84-49d5-ba22-faf2b7ad37a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "636b94ad-c1a7-4a67-ba1f-bea338dd8246",
        "cursor": {
          "ref": "8a037348-cc61-480c-b930-56b5acc5fa0b",
          "length": 244,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "7d7f4aa0-b211-4ea7-b258-a8e78dd83641"
        },
        "item": {
          "id": "636b94ad-c1a7-4a67-ba1f-bea338dd8246",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "0ec54ffd-44ce-46f6-bd7f-a0c0a2a2e2d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "4843f7a4-0c03-46f7-b662-3ff219be2ffa",
        "cursor": {
          "ref": "ff4d9457-c0ec-4deb-a837-e50274ba46b5",
          "length": 244,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "73a68822-454c-4bfc-8f38-db9e3a513c08"
        },
        "item": {
          "id": "4843f7a4-0c03-46f7-b662-3ff219be2ffa",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "8504dbbe-6c20-4fed-b39e-ae00250ba334",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "aa9fc1ea-7cfb-4637-9026-7c1c86e68288",
        "cursor": {
          "ref": "40269956-2324-4dd6-b439-212109a3d28f",
          "length": 244,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "072ac552-1474-45a4-af01-3f58d5742b0e"
        },
        "item": {
          "id": "aa9fc1ea-7cfb-4637-9026-7c1c86e68288",
          "name": "credentials_issue"
        },
        "response": {
          "id": "0b91e034-fbf0-4517-bbda-c1d41d385af9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:102)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:102)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:102)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:102)"
            }
          }
        ]
      },
      {
        "id": "c23c9aea-3013-4a5b-8e96-0195f56b8bb6",
        "cursor": {
          "ref": "ed1dbb1d-3865-4530-9670-2373880fcace",
          "length": 244,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "434eb445-52b0-46d1-9447-98da379a8ba1"
        },
        "item": {
          "id": "c23c9aea-3013-4a5b-8e96-0195f56b8bb6",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "fe87bd01-3966-47e6-9732-037dcf32a0eb",
          "status": "Created",
          "code": 201,
          "responseTime": 1842,
          "responseSize": 749
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should be object",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should be object\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:103)"
            }
          }
        ]
      },
      {
        "id": "671ad45f-1437-4b48-b150-196f48f38135",
        "cursor": {
          "ref": "8d113da5-506f-4754-9289-4ac2d47208fc",
          "length": 244,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "e1babcc0-9fb5-438f-870c-6c5619957755"
        },
        "item": {
          "id": "671ad45f-1437-4b48-b150-196f48f38135",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "f8009132-fc50-4650-a150-d9c12efce2f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "fad3cc9a-8316-46cf-aee8-169d6e397b36",
        "cursor": {
          "ref": "5ada1d26-34d7-4d7d-93da-71664eb85a20",
          "length": 244,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "df751d09-b92b-47eb-8046-dbaac2b23807"
        },
        "item": {
          "id": "fad3cc9a-8316-46cf-aee8-169d6e397b36",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "4c365eed-20d4-42cb-9ee1-743039163899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "811e5286-bc0f-4e5f-b812-c822a4945498",
        "cursor": {
          "ref": "76f80a68-974a-4630-b2e0-9ed355c50c03",
          "length": 244,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "66f96dec-062f-449f-b86a-29119c26279f"
        },
        "item": {
          "id": "811e5286-bc0f-4e5f-b812-c822a4945498",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "9e7d2cf7-ab9a-44af-9c98-10b698da604d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "0bb57029-33cf-4ffd-8b96-67639e44fdf0",
        "cursor": {
          "ref": "decf379c-bf1d-48df-968e-dca813c3573a",
          "length": 244,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "5718e097-292b-4a85-ba9e-450bd25883ea"
        },
        "item": {
          "id": "0bb57029-33cf-4ffd-8b96-67639e44fdf0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "22cc9c71-1a39-49d6-a82f-09fbd1ba074f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "9a65b160-7f06-4555-9244-b395e9783d89",
        "cursor": {
          "ref": "01aa0307-fc55-49ec-98bb-d105b1cdfb7e",
          "length": 244,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "75a50773-b677-4d2b-93fb-fc10ee926fcd"
        },
        "item": {
          "id": "9a65b160-7f06-4555-9244-b395e9783d89",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "9ec56fba-49c4-4455-93b5-ef36b7d11a38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "5f7f6ae7-cfd8-43af-b7ab-a2b54fe2cfb5",
        "cursor": {
          "ref": "c376d046-e8bc-47d5-889d-1768a404ed8f",
          "length": 244,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "518d854e-987b-47f4-93f5-19aab8956cc7"
        },
        "item": {
          "id": "5f7f6ae7-cfd8-43af-b7ab-a2b54fe2cfb5",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "2a0ff5e2-1c72-4bd7-8fd6-32c1552ce2a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "12b42435-42b7-47dc-acc2-97ad2e6796bd",
        "cursor": {
          "ref": "62f1609a-0116-48ce-a70f-515a5b0e9c78",
          "length": 244,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "854288a8-2356-4544-a33e-a218ace994e7"
        },
        "item": {
          "id": "12b42435-42b7-47dc-acc2-97ad2e6796bd",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "cd800764-438d-42d8-9e61-119f4cfb5c28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "1fc6be68-7df8-4b9d-afa4-dca58f18400d",
        "cursor": {
          "ref": "df0c255e-f87c-4285-99e0-0139f89661b0",
          "length": 244,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "4ef29dca-8f89-4ef8-b998-542f0579a420"
        },
        "item": {
          "id": "1fc6be68-7df8-4b9d-afa4-dca58f18400d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c6232a5b-f37b-4c87-b403-62dac8819c29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "0475422f-434a-413d-b4df-e1ecc01a7539",
        "cursor": {
          "ref": "2c764944-9f5e-43b2-acde-27f40be239ea",
          "length": 244,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "0a22f5c7-9e91-4790-bee1-528ac6c1002c"
        },
        "item": {
          "id": "0475422f-434a-413d-b4df-e1ecc01a7539",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "06385990-624a-4098-87fc-cb8bb9f156e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "f0b1b6db-1e39-4864-92fb-5d0754aef705",
        "cursor": {
          "ref": "76123edf-0073-42ee-9535-c5e5fc0c1a48",
          "length": 244,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "c74a3586-5f36-458e-8b9a-fa20ec2ee3b9"
        },
        "item": {
          "id": "f0b1b6db-1e39-4864-92fb-5d0754aef705",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f5f81603-6b16-485e-b3aa-ac52f9781cea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "9e49374c-c36f-4de9-b6ef-d55cdca6c27c",
        "cursor": {
          "ref": "355ef081-6fa5-4af3-bb98-0a209af99195",
          "length": 244,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "4433bea2-8371-4be9-b268-7cf6e05f7ef8"
        },
        "item": {
          "id": "9e49374c-c36f-4de9-b6ef-d55cdca6c27c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "df623048-876c-4a20-a152-11d50c179fb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "0f4d9c62-cafb-423b-9143-56be744aacd4",
        "cursor": {
          "ref": "761cba10-bdec-4f3c-b3e9-433417669203",
          "length": 244,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b168c506-7538-4a78-b544-f29d6a2f58b3"
        },
        "item": {
          "id": "0f4d9c62-cafb-423b-9143-56be744aacd4",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "0097a6c0-e6d8-4841-96b0-e50a8796a90d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "f4ed96ef-18ec-4775-8197-4dbfa90fa4e4",
        "cursor": {
          "ref": "6311c5dd-2b62-419d-b483-8979a68338e5",
          "length": 244,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "eafa00b0-d0d8-4dbb-a07e-22903b502941"
        },
        "item": {
          "id": "f4ed96ef-18ec-4775-8197-4dbfa90fa4e4",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c81acbb8-353f-48d5-bb80-f76df0d8b090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "b06110ca-eca1-4e53-a26a-e967fff0a1de",
        "cursor": {
          "ref": "4bd9204c-7b69-4ba9-b579-b65992a29d0a",
          "length": 244,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e6e93aeb-ea15-44c9-a843-769b70ac29e6"
        },
        "item": {
          "id": "b06110ca-eca1-4e53-a26a-e967fff0a1de",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "1333f9c9-fb54-4cd9-bb24-f9d4faafd464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "343d3930-49a6-4606-a9ff-45a4dc549ce9",
        "cursor": {
          "ref": "3a0c2e39-ccbe-42b3-a510-14a43993e683",
          "length": 244,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "bee0f65c-e648-4cf2-87f3-7f33b31f5a02"
        },
        "item": {
          "id": "343d3930-49a6-4606-a9ff-45a4dc549ce9",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f1967098-b136-4409-9e57-aa057a0ad4dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "9d4fea09-a2ac-4be8-9d1c-65d714aa7ddf",
        "cursor": {
          "ref": "db35d2df-d29b-4e68-8d1e-07aefbfd07f4",
          "length": 244,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "60f91176-c233-4828-8cd7-a5ecabcd7d0d"
        },
        "item": {
          "id": "9d4fea09-a2ac-4be8-9d1c-65d714aa7ddf",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3cded6b9-1ada-40bf-a6d3-e656960f719c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "412d5631-0a1b-459b-a719-0f76dcb243a6",
        "cursor": {
          "ref": "ce3e3594-d42d-479b-83b8-5b3b218a44ef",
          "length": 244,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "8f673743-ae6d-459d-8e1f-d382fccf93f4"
        },
        "item": {
          "id": "412d5631-0a1b-459b-a719-0f76dcb243a6",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8c1212f6-a453-486d-9896-df15b29504df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "ca9bf290-8649-4628-b859-82c221a52336",
        "cursor": {
          "ref": "806d4506-3131-4585-8a14-e3ac232753ac",
          "length": 244,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d2a9223e-3421-4bce-80c4-19c4b993f6b2"
        },
        "item": {
          "id": "ca9bf290-8649-4628-b859-82c221a52336",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ecaa4a53-2b2a-4fc3-83fd-fad26aa703d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "6cd4acf8-49d1-4d2e-998b-e1e8273ca984",
        "cursor": {
          "ref": "6273d02a-b433-4c8b-b876-ca2953d839b4",
          "length": 244,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "5791e3c6-9777-4b28-839f-32b3290997c1"
        },
        "item": {
          "id": "6cd4acf8-49d1-4d2e-998b-e1e8273ca984",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c61738ee-cde9-4e54-9db0-1af08f84234a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "80cb9408-a0c7-4fd8-9567-0c35cf045b66",
        "cursor": {
          "ref": "ac703dde-42a9-4a3f-8c90-b68217237883",
          "length": 244,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "a54861b7-54b0-4537-8d30-280e0e17e6fe"
        },
        "item": {
          "id": "80cb9408-a0c7-4fd8-9567-0c35cf045b66",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "da07d427-7a4a-4493-9a34-3ce7d68ea889",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "f29f25f7-92e1-446c-ad09-b69f93e2ba5f",
        "cursor": {
          "ref": "498b26df-84e3-4688-acd8-02b6fa82ee26",
          "length": 244,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "844930fb-8b6f-4347-a973-16c1dee549de"
        },
        "item": {
          "id": "f29f25f7-92e1-446c-ad09-b69f93e2ba5f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "88402b1c-9c5b-41e2-b1be-be0467435949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "d9617df1-9ee8-4294-a085-bdce7b153a11",
        "cursor": {
          "ref": "1a590265-da59-43e1-81c8-e7e492c03978",
          "length": 244,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "bb1b391c-9240-4612-9e73-8c15fbe711d1"
        },
        "item": {
          "id": "d9617df1-9ee8-4294-a085-bdce7b153a11",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "3d825d83-d05d-461f-8be2-1b74c4c3eaca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "c0439a7b-4039-4c24-bd5d-2176183cba1a",
        "cursor": {
          "ref": "351d4da2-0578-4be0-a2c3-2807d8bf1386",
          "length": 244,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "6f9efcc8-cdd4-4bb0-8d2a-11368faabb72"
        },
        "item": {
          "id": "c0439a7b-4039-4c24-bd5d-2176183cba1a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9655c9be-81be-414b-8e76-6c4bb5f11af4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "c72c06ba-ad6d-40cc-ae21-725e4b190cd6",
        "cursor": {
          "ref": "18030512-5402-44b1-8a1d-56e6f7a5194a",
          "length": 244,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "517d40b7-64b4-4ce7-9965-2677efe2c5d2"
        },
        "item": {
          "id": "c72c06ba-ad6d-40cc-ae21-725e4b190cd6",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "5cde9e3e-b813-4d7e-9ac0-8feb645a1e03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "c2f6ceae-a387-410c-9f16-0682309c0aeb",
        "cursor": {
          "ref": "35f7e206-3b75-4640-9c6e-e3ca377ac612",
          "length": 244,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "8d32233e-827e-4304-bc9f-49b097f3889e"
        },
        "item": {
          "id": "c2f6ceae-a387-410c-9f16-0682309c0aeb",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "53d4a167-89b9-4c43-99c0-bc5c22d35c6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "343b5849-ed10-4577-90b9-8900bcac2cd2",
        "cursor": {
          "ref": "0a818a14-4d6f-4d1f-a7c9-741f433aec32",
          "length": 244,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "00d358e8-4242-436a-9b68-3cfc92cc7571"
        },
        "item": {
          "id": "343b5849-ed10-4577-90b9-8900bcac2cd2",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "6626fb4d-fa79-42f2-a682-f3e1d0018cbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "78afc4be-dd9c-4341-bde2-bd5353c515f7",
        "cursor": {
          "ref": "40370c23-5d63-4134-bc5d-edffaf2071ec",
          "length": 244,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "935fb64f-6636-4d49-843c-d7cd42cea15a"
        },
        "item": {
          "id": "78afc4be-dd9c-4341-bde2-bd5353c515f7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "bb058248-e899-4c49-9c1d-aed556d64fb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "6e6e930d-e120-40d8-bb5f-250527bdb509",
        "cursor": {
          "ref": "4a808885-2b77-4792-8a5c-3c6f301dc60b",
          "length": 244,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "4d01464f-9168-4169-bcdd-b38e9a017a2f"
        },
        "item": {
          "id": "6e6e930d-e120-40d8-bb5f-250527bdb509",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8443bf84-080e-43fa-8202-b9863bc3ba44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "768fb2b6-8a5b-4f4a-9748-160c7a9bd54d",
        "cursor": {
          "ref": "74337a61-d16d-4609-be13-c37018c2f0e3",
          "length": 244,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "03f036b5-5e6a-4c5f-bbe1-2e30e05b109f"
        },
        "item": {
          "id": "768fb2b6-8a5b-4f4a-9748-160c7a9bd54d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "da1aadc7-3dd3-44c1-9d3e-26f5c9117617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "08224ce5-142e-49c5-8f55-b8a7ed7004f8",
        "cursor": {
          "ref": "9abbd577-1413-4f1e-a88c-c1f9e447143b",
          "length": 244,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d8b91522-5dea-46da-b2da-cb0425125ba3"
        },
        "item": {
          "id": "08224ce5-142e-49c5-8f55-b8a7ed7004f8",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8be66c02-ba4b-4676-8650-038408baacdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "69bd7c8c-8142-4d48-b2fc-abe86a6af6dc",
        "cursor": {
          "ref": "dbf9b759-b57f-4469-8395-2669b26cd4af",
          "length": 244,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1a97f2db-e092-4f1b-bc9a-824dd6379258"
        },
        "item": {
          "id": "69bd7c8c-8142-4d48-b2fc-abe86a6af6dc",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "46f11bef-729b-457a-8cc3-38e6c1ee2349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "8e44f451-62cd-48f5-a577-35a9b97c158d",
        "cursor": {
          "ref": "250ea606-8e3f-4117-9ad8-ba2341f09022",
          "length": 244,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "75ad3e66-d6ff-47a3-9c94-e30a2b39fbe2"
        },
        "item": {
          "id": "8e44f451-62cd-48f5-a577-35a9b97c158d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "5062ee45-6eca-4f61-a443-cd0fbfe5d7f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "2755d17f-48c1-4dcb-92d1-fd336c0f30f8",
        "cursor": {
          "ref": "3ba456f0-736b-408f-ade1-ff35302c02f4",
          "length": 244,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "12950327-dd94-4441-afea-dc522406775b"
        },
        "item": {
          "id": "2755d17f-48c1-4dcb-92d1-fd336c0f30f8",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c276b116-302f-4801-990c-a2a459109175",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "30d58924-b9b2-4c23-a72b-c129fc85c603",
        "cursor": {
          "ref": "c24c9278-5470-411b-8a7e-06b4ed279789",
          "length": 244,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "29c90dc5-38ff-48e9-a90a-8ab3f391fb37"
        },
        "item": {
          "id": "30d58924-b9b2-4c23-a72b-c129fc85c603",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5a6ea792-ac0f-43e7-a9a9-a0cf766c9447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "ca3e4d11-5970-418e-a96f-7e5049c4efb5",
        "cursor": {
          "ref": "39bad877-5b02-40ba-a643-58403fd0d909",
          "length": 244,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "c7b327b2-34ba-49f0-90c0-c7d6a0c7b992"
        },
        "item": {
          "id": "ca3e4d11-5970-418e-a96f-7e5049c4efb5",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6d5f86c5-27fb-476c-be59-ad28ca08ed33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "9514833e-0acd-4def-b7b5-5a4c03841a75",
        "cursor": {
          "ref": "3178cc75-7df8-40b4-9676-e2962599a0b1",
          "length": 244,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "e496b607-be93-4257-a199-7b9fa5ed72b6"
        },
        "item": {
          "id": "9514833e-0acd-4def-b7b5-5a4c03841a75",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "e04c8c9a-2fbb-4720-b28b-13c14a511890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "23bc830f-caba-42d0-8b59-c11039f82f91",
        "cursor": {
          "ref": "64fdce8f-e7c0-4f17-97da-dc5c734cb158",
          "length": 244,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "98466304-327c-467b-805d-bb326b8fbd2e"
        },
        "item": {
          "id": "23bc830f-caba-42d0-8b59-c11039f82f91",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "accf60a1-a170-44db-a6d3-251b8c97d326",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "3b9f8ae6-4eda-49ea-99f0-85e83161247c",
        "cursor": {
          "ref": "8decf95a-f5cd-47c7-857e-52ab24d3d91e",
          "length": 244,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "748d3eea-7379-4fe3-9376-598aea14c860"
        },
        "item": {
          "id": "3b9f8ae6-4eda-49ea-99f0-85e83161247c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "afa134db-5d52-48a3-b2fb-b955e2aad0c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "1a8ab46a-93ed-4230-b827-4afae878432f",
        "cursor": {
          "ref": "1f4aaf18-d69d-415f-87fe-fded4bf9d9c7",
          "length": 244,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "3fb41cd5-69f2-4248-a1d9-16d5aa1e8c42"
        },
        "item": {
          "id": "1a8ab46a-93ed-4230-b827-4afae878432f",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "19e2dd51-bb58-4b2d-910d-2e57130557b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "8d7bfc5a-cd4a-480d-84e9-10bec7383750",
        "cursor": {
          "ref": "c69f648f-a3b3-46f1-a6ee-ee9b25895dde",
          "length": 244,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "7f667467-8358-41e0-b06f-83768a37d12e"
        },
        "item": {
          "id": "8d7bfc5a-cd4a-480d-84e9-10bec7383750",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9e1855f7-a1ef-4c5a-89e1-6d4bd88a7f13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "d704f6b3-b4b9-4ac7-97c0-bd1821cfd0e2",
        "cursor": {
          "ref": "fd22a05a-09f2-451b-8769-af673e9df1b5",
          "length": 244,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c1d6d43d-278c-4182-838d-005f0a6e1a3f"
        },
        "item": {
          "id": "d704f6b3-b4b9-4ac7-97c0-bd1821cfd0e2",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "025ba158-005b-4993-85d6-83bbe9514f3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "046ee270-0307-4229-8226-59e59d27fe95",
        "cursor": {
          "ref": "590b2796-39ac-496d-a56a-c68114df776e",
          "length": 244,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "cb2f43bd-82d9-44bd-b377-6068ec95dda2"
        },
        "item": {
          "id": "046ee270-0307-4229-8226-59e59d27fe95",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "6954821a-05b0-4cb4-a859-212d9b38f4ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "f177922f-0983-42a7-a441-cec8155de24c",
        "cursor": {
          "ref": "80b0b81e-1e36-40a6-bcfa-da3b0e1c6595",
          "length": 244,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "9aa16ee9-d00f-4882-aa14-e972265f68d7"
        },
        "item": {
          "id": "f177922f-0983-42a7-a441-cec8155de24c",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "84e6e0ee-c27c-4787-aa53-24c3dd13de31",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "b0c05589-4dc8-4d4a-b44e-14821fe45060",
        "cursor": {
          "ref": "f2c930ca-b323-46c1-a639-cd82e1fd9640",
          "length": 244,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "c51d06f1-acfd-4c1a-b2dd-2a5b2768413d"
        },
        "item": {
          "id": "b0c05589-4dc8-4d4a-b44e-14821fe45060",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "21436045-a7dd-4245-a1aa-65213ce3fbc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "96b28dcf-4b48-4859-8b42-c7966477171c",
        "cursor": {
          "ref": "9f3a2954-67f2-4ed1-a630-2900436124a7",
          "length": 244,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "429f3b45-212e-46ac-9f6e-1156a03ab97d"
        },
        "item": {
          "id": "96b28dcf-4b48-4859-8b42-c7966477171c",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "67cdfc66-2282-4317-b581-15a5429ca4c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "b2141461-9cf2-4ffb-abf9-d29e74d81001",
        "cursor": {
          "ref": "6d68fd9a-c2b6-4996-8600-c2e808cbe522",
          "length": 244,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "f8d48d33-d765-4a85-8a2c-9aa855100f2f"
        },
        "item": {
          "id": "b2141461-9cf2-4ffb-abf9-d29e74d81001",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "28961b9d-607e-4e25-98e3-41ef433525ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "28c46933-6010-4af6-8dfb-ee2f0dbfd6c5",
        "cursor": {
          "ref": "94e3f6a0-9f22-42fc-89e8-d6c99b7af8d5",
          "length": 244,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "5c7c6eea-8226-404d-a207-f49419e4c53a"
        },
        "item": {
          "id": "28c46933-6010-4af6-8dfb-ee2f0dbfd6c5",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "c3abf94b-9554-4b5b-9019-8f6384a3389e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "fe072590-5977-41ac-a4b7-ca759459ac6a",
        "cursor": {
          "ref": "64395d49-0f73-4b21-bb79-9ec2fb219708",
          "length": 244,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "61825362-afa3-4b1c-afc1-973c82d21054"
        },
        "item": {
          "id": "fe072590-5977-41ac-a4b7-ca759459ac6a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "ada08b33-a569-4c69-b66a-f426bc6c73fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "398826b0-2b5a-42e3-bf09-52bc5cc91f20",
        "cursor": {
          "ref": "c5e55571-ef2b-46de-95ec-fb538c949b3f",
          "length": 244,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "0bf250e5-85f6-4a1d-a9f6-b73f65dd8b13"
        },
        "item": {
          "id": "398826b0-2b5a-42e3-bf09-52bc5cc91f20",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c4b35146-21fc-4ed0-aefa-e1479df59dc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "80abc600-2e5a-4e18-bfbe-a403f6922cdd",
        "cursor": {
          "ref": "e4148aae-de8e-4294-a139-e1014cc0fc6c",
          "length": 244,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b7a253b7-53d0-4a48-a968-f6285ff971e2"
        },
        "item": {
          "id": "80abc600-2e5a-4e18-bfbe-a403f6922cdd",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "59c13218-ef5f-4b6f-a5a0-7dc9c7bbeb01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "22a84d42-d49d-4bbd-bb73-03a4b2ed718b",
        "cursor": {
          "ref": "3ec4a3e4-3136-4389-9ea9-c8c73c2e56f4",
          "length": 244,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e363ca61-9af5-4f93-ae5a-ccbeb81bb1d8"
        },
        "item": {
          "id": "22a84d42-d49d-4bbd-bb73-03a4b2ed718b",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "077896bf-34f6-4b6f-8496-be5264efafc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "a783596d-188b-44eb-be67-f37e6c383e30",
        "cursor": {
          "ref": "782a09a1-78c9-4e3d-8760-cee233a369c7",
          "length": 244,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "39f6f856-cf53-43f5-ab9d-76a58e2d3621"
        },
        "item": {
          "id": "a783596d-188b-44eb-be67-f37e6c383e30",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "13a34220-2dea-464b-8244-30e16bf114cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "ff596109-88ae-47fc-8c29-cf08daeb45dc",
        "cursor": {
          "ref": "e146060b-3767-4557-9bb6-c289b16bfbd5",
          "length": 244,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "eac44bd1-18b3-44bc-9bb8-f87632f007d0"
        },
        "item": {
          "id": "ff596109-88ae-47fc-8c29-cf08daeb45dc",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "07e273d7-433e-4862-8cb3-2267e3bce1ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "d87194af-3e58-4940-ba7d-5b4a937d8b52",
        "cursor": {
          "ref": "8ba37268-dce1-4fb0-9380-536fea90dae5",
          "length": 244,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "16815f3b-e37c-4629-8262-b1e15825a01a"
        },
        "item": {
          "id": "d87194af-3e58-4940-ba7d-5b4a937d8b52",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "949cd990-78ce-4aed-b387-89047b0da029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "ea6af590-bda5-4905-a216-fa14c6bd59c8",
        "cursor": {
          "ref": "1e5982df-5c4a-4254-a48b-41f62f0fc9ca",
          "length": 244,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "a7d971d3-6dd9-4aab-beea-66d38d6ad2b3"
        },
        "item": {
          "id": "ea6af590-bda5-4905-a216-fa14c6bd59c8",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "01e68f09-b44b-4c5c-9d1a-ee5334f1e101",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "64cc288e-b7ba-49d8-b0e6-9d6cf8984883",
        "cursor": {
          "ref": "70073eba-b7c8-44c9-bbcb-23579675ed0c",
          "length": 244,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "df2761fe-92bb-41ef-bd23-49dd58e16da4"
        },
        "item": {
          "id": "64cc288e-b7ba-49d8-b0e6-9d6cf8984883",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "af53818b-6927-4e88-b766-7e818f87be02",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "d4ee505c-2249-4bfb-8f87-f40583721009",
        "cursor": {
          "ref": "48014304-fc4d-48e1-9fee-b49414dc4912",
          "length": 244,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "19fe8b91-31cc-4d1e-93ed-d4e466f6453d"
        },
        "item": {
          "id": "d4ee505c-2249-4bfb-8f87-f40583721009",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "6e0224d7-64ee-4618-a27a-0e57c61a7d09",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "b0167ad0-5e06-41f2-8f97-319a9f4455a0",
        "cursor": {
          "ref": "91dcfce2-ad5b-445b-9dc0-dc2e8284c610",
          "length": 244,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "bf92a96d-23b7-41d0-9882-cdccf54ec2eb"
        },
        "item": {
          "id": "b0167ad0-5e06-41f2-8f97-319a9f4455a0",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "36d144d2-0c6e-49b9-aedc-d8aab1d1502a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 98
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "baba6120-d5ef-48c1-b070-bd91a98c24fe",
        "cursor": {
          "ref": "e9e539f1-37a2-45e0-b9df-c36b748a9561",
          "length": 244,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f485dffd-4593-4cb6-ad5f-2125372a70b3"
        },
        "item": {
          "id": "baba6120-d5ef-48c1-b070-bd91a98c24fe",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "bc0a3754-6131-481d-a23f-ed75daffe807",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "f3301df3-8994-4fd0-85fe-8c08bffbcd70",
        "cursor": {
          "ref": "523cc00d-f72f-4db8-b314-b5d1017f881c",
          "length": 244,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "7e512919-5e34-48c8-b8bf-ea11d2e676ea"
        },
        "item": {
          "id": "f3301df3-8994-4fd0-85fe-8c08bffbcd70",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "6ba851b4-205b-4e1b-9fe7-657c45e43850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "df003ac4-bcc2-45c2-9163-d788748dbece",
        "cursor": {
          "ref": "fadbd7bd-6cf5-4fd2-addb-54fa673eed6a",
          "length": 244,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ab29637a-b7c1-40be-8763-aaa86eaec112"
        },
        "item": {
          "id": "df003ac4-bcc2-45c2-9163-d788748dbece",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "efddfd1b-ae41-447b-af39-368eb36a622a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "d850758b-a3be-4d18-b213-d8f084d5ee78",
        "cursor": {
          "ref": "f3d8425f-f2ef-47ad-bed0-8e4b987f51f9",
          "length": 244,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "45904cd8-714d-45c9-8b29-10a5838191e4"
        },
        "item": {
          "id": "d850758b-a3be-4d18-b213-d8f084d5ee78",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f4090c49-dadb-41c0-9797-d3f5d7d4671c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "768b5d95-f279-4f7c-9e0d-cab713061509",
        "cursor": {
          "ref": "763f23c6-0b7a-4366-87eb-016dd4d47312",
          "length": 244,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "50092fb3-36a0-420e-b111-fb9c3679c0ef"
        },
        "item": {
          "id": "768b5d95-f279-4f7c-9e0d-cab713061509",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "1ad41f7c-0e9b-4759-bb2f-e4b64546d9db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "7428bc37-9a43-4ab1-9934-92afc5fa11f2",
        "cursor": {
          "ref": "8d8cfc5d-57b5-4fab-9ac6-2345aec3c35f",
          "length": 244,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "4f36f671-5ab4-4bed-a2aa-0c7a9b90521c"
        },
        "item": {
          "id": "7428bc37-9a43-4ab1-9934-92afc5fa11f2",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d170e3ba-c3d7-4bd4-8395-9af0599896a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "49beeffa-4e87-4a6d-b1c3-dc027c782a19",
        "cursor": {
          "ref": "35fb62fe-f095-4db9-9fd5-67d0badacbeb",
          "length": 244,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "9e9f1d5f-c08f-4846-a47e-ce77cdbaf3b9"
        },
        "item": {
          "id": "49beeffa-4e87-4a6d-b1c3-dc027c782a19",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "7727f7d9-714f-4043-bc5e-76c254a4f979",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "aa4f3814-a3ff-4f0a-ad2c-41aaa8ad3f9a",
        "cursor": {
          "ref": "fa98d6d2-3774-463d-9886-d4dcc61bab01",
          "length": 244,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "13cd87a5-b93c-4554-9ae7-9d435e73a358"
        },
        "item": {
          "id": "aa4f3814-a3ff-4f0a-ad2c-41aaa8ad3f9a",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "32ae8623-0c78-4dc3-b85f-eb5071c56778",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "22d69b47-bc67-4606-b03b-e27b3f8de783",
        "cursor": {
          "ref": "5938121f-89b7-4baf-a422-c3b0b66bfbd7",
          "length": 244,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "794e0f3c-cb4c-4005-8c06-f2c6f80cc126"
        },
        "item": {
          "id": "22d69b47-bc67-4606-b03b-e27b3f8de783",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "c3670c20-8300-45c5-80f3-29ab85bdd547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "f27996d6-0321-49f4-a744-4d5811374c81",
        "cursor": {
          "ref": "6aa022bf-2ea4-462d-b754-185c3669dcd7",
          "length": 244,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "8a80e8a8-22b3-4ce4-ae4f-969cb4676d64"
        },
        "item": {
          "id": "f27996d6-0321-49f4-a744-4d5811374c81",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "94866aff-5a3a-4c84-8ded-2a7a8a40edf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "2a2404ec-53c4-483a-94fb-ca754f8a3da1",
        "cursor": {
          "ref": "7a93930c-eb0f-457d-90be-e9b53037623b",
          "length": 244,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "8974ce77-f932-42f8-b34b-86f2b7400ae9"
        },
        "item": {
          "id": "2a2404ec-53c4-483a-94fb-ca754f8a3da1",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4a876e12-0e0a-49e1-9ecf-de4bdf8b2a81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "1ad76f0c-1c53-454f-983b-1cd3552402d4",
        "cursor": {
          "ref": "d33906c8-d5fa-4f77-8fe2-9ef48067253e",
          "length": 244,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "9f309f34-1602-403b-a686-2f1f25db808d"
        },
        "item": {
          "id": "1ad76f0c-1c53-454f-983b-1cd3552402d4",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "1af0f0aa-d9c5-4814-b8e8-04fafce02012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "27174d58-6aa7-482f-bfa8-81e6cab5446a",
        "cursor": {
          "ref": "74dea551-75c0-42e1-b612-b50377fdcdf9",
          "length": 244,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e526df79-dac8-4296-a025-c65d2149e6c3"
        },
        "item": {
          "id": "27174d58-6aa7-482f-bfa8-81e6cab5446a",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "fdce571d-18d5-478f-bf6c-8fbb6f2c867f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "338b016d-ef16-4820-a47f-f246e09526b3",
        "cursor": {
          "ref": "b78d166e-4460-418e-874a-dc66f04e5f3b",
          "length": 244,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "cd36ec2d-729e-42aa-933d-9a0798946539"
        },
        "item": {
          "id": "338b016d-ef16-4820-a47f-f246e09526b3",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "8f8f13f2-471f-41c8-a923-bbcc4b13f097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "f8bd09b9-9407-4eff-bef8-f5d0b3a452ba",
        "cursor": {
          "ref": "7ec2a0b0-5dbc-4aff-971a-36012b5223b4",
          "length": 244,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "7ee11474-3deb-4f5d-a974-104fea1ac353"
        },
        "item": {
          "id": "f8bd09b9-9407-4eff-bef8-f5d0b3a452ba",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "25388b40-4f36-40f2-9bd9-f6d3a8436de1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "5ed11645-01ec-4f16-bbe0-77576a0f1ac8",
        "cursor": {
          "ref": "1ad36d7c-b4a7-468f-93cc-a7dad5bb65cf",
          "length": 244,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "a9baee92-a7c6-4b1c-834f-a21977ffc02a"
        },
        "item": {
          "id": "5ed11645-01ec-4f16-bbe0-77576a0f1ac8",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "22d912a4-b853-4196-9c40-4637beac5ca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "bea1eead-e74a-45cc-ba09-771f916f524a",
        "cursor": {
          "ref": "2431d196-fa6e-45cb-b172-8c34cd695899",
          "length": 244,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "2080b686-f537-45a6-b9c9-44be9f69bec2"
        },
        "item": {
          "id": "bea1eead-e74a-45cc-ba09-771f916f524a",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0441b9e8-a74f-43d5-a0f3-9b92f92319b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "5453c29f-5584-42bb-b777-50cc57720d0c",
        "cursor": {
          "ref": "dfc6ca9a-99c8-47f1-8125-c189170e09af",
          "length": 244,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "859bc32a-938f-4f93-8982-9053eff59deb"
        },
        "item": {
          "id": "5453c29f-5584-42bb-b777-50cc57720d0c",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "52fef833-413a-478d-a597-5a4940418ffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "97d04fba-688b-49ae-8343-dd995153e5e9",
        "cursor": {
          "ref": "c2139ffa-4629-4dc1-9b9e-bf37c53400ea",
          "length": 244,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "c5f000f4-f58b-456a-b985-eba51ce6f3f4"
        },
        "item": {
          "id": "97d04fba-688b-49ae-8343-dd995153e5e9",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "3e140d6e-5624-47c8-b52b-4181f49ab85f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "13e07821-0dfd-41de-8be1-af76a09cddf5",
        "cursor": {
          "ref": "1b76c9c6-1d24-47fc-a760-5234ebb52408",
          "length": 244,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "8f97a721-c655-447d-b300-776a8e0da759"
        },
        "item": {
          "id": "13e07821-0dfd-41de-8be1-af76a09cddf5",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "dee03ade-138c-43d3-bdbe-3b21e4ad0dd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "852016e0-80f4-4607-a643-a4932f5b07a9",
        "cursor": {
          "ref": "b3e9c600-3a66-4848-9e73-8cfbb2850e3e",
          "length": 244,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "0ad057f8-08dc-49ae-b2eb-b14ec483d115"
        },
        "item": {
          "id": "852016e0-80f4-4607-a643-a4932f5b07a9",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "16004150-9674-4e0d-b27d-0166ceee0d87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "6926757e-080e-4219-9a5c-23cdd3d17d48",
        "cursor": {
          "ref": "00d19487-aafc-456a-9369-647bbf1b3645",
          "length": 244,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f7007b5a-99a5-45f6-aab6-0404b35c4fa7"
        },
        "item": {
          "id": "6926757e-080e-4219-9a5c-23cdd3d17d48",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "896a128b-12ab-4d69-b2bf-6e6d5bd91430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "d0d93e38-8cc9-4ec3-b44f-f0ce2a5da46b",
        "cursor": {
          "ref": "8d40798c-0258-42f7-99e4-84c054a9ab78",
          "length": 244,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "2f072319-c245-4c4e-9901-e3fda101f4be"
        },
        "item": {
          "id": "d0d93e38-8cc9-4ec3-b44f-f0ce2a5da46b",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ce1d0ad4-44e6-40c6-8589-76df2543bdfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "d64adf0a-f2b5-44cf-b19a-f818e7f43513",
        "cursor": {
          "ref": "787fb7df-f212-4db8-9d14-b33eb0f4a261",
          "length": 244,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "3446da7e-a5c7-40ac-a982-b53cd566980a"
        },
        "item": {
          "id": "d64adf0a-f2b5-44cf-b19a-f818e7f43513",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "98d0291d-6ac9-4149-ac7d-9d816dab367f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "43fa8ee8-1c04-4e40-93b5-43310d8ebf99",
        "cursor": {
          "ref": "43b3819e-2c49-4299-a5c1-274ec57a3cce",
          "length": 244,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "eac521bc-2b7d-48d2-a298-b5eb14d47c38"
        },
        "item": {
          "id": "43fa8ee8-1c04-4e40-93b5-43310d8ebf99",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "06cbf689-c975-4cc3-80d8-081d1e4f36a6",
          "status": "OK",
          "code": 200,
          "responseTime": 24,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "06936641-da25-44f5-bf30-029fa7c179a0",
        "cursor": {
          "ref": "30d1f610-aee0-4a93-b307-b726cefb2c45",
          "length": 244,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "1795d933-c7ec-4f72-a6b3-398204b2503e"
        },
        "item": {
          "id": "06936641-da25-44f5-bf30-029fa7c179a0",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a82c5a7b-8110-429a-b802-0184e07d3acc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "2a3d6bb4-0f26-47b8-93fb-92adea67942a",
        "cursor": {
          "ref": "2b3605e5-2ac2-4b20-ba4e-4f7d491b71cc",
          "length": 244,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "c9aa1ee5-8c67-4a1a-8485-359e2d6a11a5"
        },
        "item": {
          "id": "2a3d6bb4-0f26-47b8-93fb-92adea67942a",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f5599b9c-2012-4555-97b3-9c8a7e85b480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "302ca9cb-086f-40fa-a8e2-5298f3cee147",
        "cursor": {
          "ref": "01a143dd-080d-4906-8c6a-2786e9e6363e",
          "length": 244,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "aa119395-2d32-465c-8873-b52e335d45b2"
        },
        "item": {
          "id": "302ca9cb-086f-40fa-a8e2-5298f3cee147",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f06975d8-444d-4c08-8016-f311f7a5fb6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "5ec5d253-9406-4cae-aac4-a81bd4d6ed09",
        "cursor": {
          "ref": "07142a43-e4c9-43c5-9f39-e8f30ab0cc13",
          "length": 244,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "f2e52e2e-f7f9-4cc2-a06c-5072c998e99f"
        },
        "item": {
          "id": "5ec5d253-9406-4cae-aac4-a81bd4d6ed09",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f41af2e0-b19f-4e6b-9e7a-ec947475381d",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "c784585c-70e1-47af-a21e-8bf0687c7e7f",
        "cursor": {
          "ref": "84b58467-f386-43dd-9342-5ce39c1c1731",
          "length": 244,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "4c0b4a76-cf65-44aa-b2ab-21a4a9cae9ec"
        },
        "item": {
          "id": "c784585c-70e1-47af-a21e-8bf0687c7e7f",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "5ad8e869-33d4-4463-a601-8dc17b5e64e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "87c0d4f9-05c9-4ee0-99fa-116db7160912",
        "cursor": {
          "ref": "e6c35d18-9aba-4330-a5b4-e239336a2692",
          "length": 244,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "55fb9a5f-27ad-4c0a-8843-8b0b076c55b1"
        },
        "item": {
          "id": "87c0d4f9-05c9-4ee0-99fa-116db7160912",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "db951466-d4b7-47d4-be0a-04899cdcfa66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "2e6f73a1-0295-4e85-866f-a56ce1c3bfd8",
        "cursor": {
          "ref": "9511370c-18d1-4c19-92b9-7ad7d9c6ff22",
          "length": 244,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "390c243d-5c5c-41e3-92c3-9b75e1699953"
        },
        "item": {
          "id": "2e6f73a1-0295-4e85-866f-a56ce1c3bfd8",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "3fc5100a-a960-4d06-bfe9-016abe76e436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "9dd2b7e8-4334-4dd4-ab05-6b098d8cb614",
        "cursor": {
          "ref": "fbafe14d-824c-4eaa-be49-664ff451f84f",
          "length": 244,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "a01f94c9-f682-4b33-abff-515c9ac5969d"
        },
        "item": {
          "id": "9dd2b7e8-4334-4dd4-ab05-6b098d8cb614",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "06659b13-a0f9-41fc-8e17-08dc5bb005dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "097068b3-ec30-4ac2-ad01-9a59d3f5edd9",
        "cursor": {
          "ref": "b1cbb900-cbf9-49f2-a61e-44329b48bce0",
          "length": 244,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "605ae191-a2f8-4e58-9b53-5862aabd1523"
        },
        "item": {
          "id": "097068b3-ec30-4ac2-ad01-9a59d3f5edd9",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8e9048e2-339d-4ee7-93a6-440a2238c74b",
          "status": "OK",
          "code": 200,
          "responseTime": 24,
          "responseSize": 94
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "d71ca555-781b-4d39-8581-dc644d9e6104",
        "cursor": {
          "ref": "b3b1e23e-f944-4914-97c9-3d1b4916f58d",
          "length": 244,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ec4fe784-bddc-4db8-9a48-b9532935e48d"
        },
        "item": {
          "id": "d71ca555-781b-4d39-8581-dc644d9e6104",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "3e7184d2-5092-4485-aa40-47ce2ba538ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "fd06a13a-1ca1-47dd-b41a-ab9dfdfbf9be",
        "cursor": {
          "ref": "a88cd706-9d4b-4e49-a0de-82d03888a9c9",
          "length": 244,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "d0b044fe-210b-45ec-8c80-7fffa05c3a92"
        },
        "item": {
          "id": "fd06a13a-1ca1-47dd-b41a-ab9dfdfbf9be",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "6ca3c8b7-a84e-442f-9591-8052b1659e57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "121576ff-bf51-4f9f-88a1-1ddcc44ac385",
        "cursor": {
          "ref": "8055d367-89f4-4d87-a4ed-35fa0c06ffea",
          "length": 244,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "48551208-2705-4300-b822-3b1e2a929cd2"
        },
        "item": {
          "id": "121576ff-bf51-4f9f-88a1-1ddcc44ac385",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "f9b4836b-706a-4480-ae42-81164d48f713",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "21130742-89b9-4b5c-a97d-a7a808eb127c",
        "cursor": {
          "ref": "1439c6da-2e6c-47b2-b0bd-b5321c409b0b",
          "length": 244,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "83ea43bb-2d7f-40a7-ba4c-2c370505c131"
        },
        "item": {
          "id": "21130742-89b9-4b5c-a97d-a7a808eb127c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "ad065fee-7a05-453b-afdd-1fb450bbb4a0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "833e6780-98ff-48eb-a8be-4f43dcc9bf2e",
        "cursor": {
          "ref": "e03f463d-ae87-4c7a-bb24-aa1e9afb3b51",
          "length": 244,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "693ea50f-ca66-4e2c-aeed-554ce06fcf14"
        },
        "item": {
          "id": "833e6780-98ff-48eb-a8be-4f43dcc9bf2e",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e7255fee-72f1-4dc1-ab0a-5de70fbb1cb1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "acec94e5-6280-4f8e-b37f-c888962c90ad",
        "cursor": {
          "ref": "6d93f48d-acea-43de-802e-7e87286d9cd0",
          "length": 244,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "5a4c9ef6-c09d-444d-aefd-aba8f96c5225"
        },
        "item": {
          "id": "acec94e5-6280-4f8e-b37f-c888962c90ad",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "cefcfbfa-92f5-458b-9a36-1a2266f31b27",
          "status": "OK",
          "code": 200,
          "responseTime": 25,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "b9ca99c0-fdc5-43ba-be98-0ab59a9859e3",
        "cursor": {
          "ref": "287b5470-075f-400c-8088-4c0a74438c95",
          "length": 244,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d4eefa7b-7019-4d8e-b40e-594aec63a1f3"
        },
        "item": {
          "id": "b9ca99c0-fdc5-43ba-be98-0ab59a9859e3",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "919991c0-62b2-44fa-9b90-ef46e1a2fb6e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "c4a9d792-7397-4c6a-8b0b-2daf8e96ef29",
        "cursor": {
          "ref": "f5c5fac1-e5a0-4850-90c4-f7bc6b43f2f0",
          "length": 244,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c2bb5776-9d1d-45d1-80c1-c86bef6efd97"
        },
        "item": {
          "id": "c4a9d792-7397-4c6a-8b0b-2daf8e96ef29",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "03429c86-c280-45d9-8994-e19cf6990a94",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "5acc5567-cf8d-47b6-94f5-817c70388895",
        "cursor": {
          "ref": "bd8cd433-744c-4d37-b465-f84354b7944f",
          "length": 244,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "5127aad5-5f5b-4549-8288-271cea271f46"
        },
        "item": {
          "id": "5acc5567-cf8d-47b6-94f5-817c70388895",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "3129b287-1534-484c-95d9-bd53b7bcab39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "b94dc465-4b7f-4341-ab90-472f4bbf0723",
        "cursor": {
          "ref": "dedc9a7d-fe7b-48d6-a823-760e6050f734",
          "length": 244,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b7de2ddc-2150-43ef-bac0-a544b5795c93"
        },
        "item": {
          "id": "b94dc465-4b7f-4341-ab90-472f4bbf0723",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "8317df4d-7759-40c6-94e8-35be69443f2a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "4fda1cfb-2b30-456d-8c04-27972d93cb83",
        "cursor": {
          "ref": "fa1dc1af-630a-4f5b-bd5c-f7ade44c706f",
          "length": 244,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "be0168f6-2d99-4b4b-a741-92dd2752a5bc"
        },
        "item": {
          "id": "4fda1cfb-2b30-456d-8c04-27972d93cb83",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "5e380547-ca20-4e24-95df-09b079282d3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 128
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "8dc93d12-167f-4b48-ad95-ebc43ca5dcf9",
        "cursor": {
          "ref": "2a520738-ba20-4081-b5ea-2ee6f696c315",
          "length": 244,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "d4dba9ac-c06c-4eb7-8b9e-b65412e60109"
        },
        "item": {
          "id": "8dc93d12-167f-4b48-ad95-ebc43ca5dcf9",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "c618c59c-27a9-49f5-a874-53bcbea2c1b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 128
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "8158271e-9c03-46f1-a3a4-90e9ef1d4152",
        "cursor": {
          "ref": "d40a3212-c81c-4bfb-9f1f-dffe96547149",
          "length": 244,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "6d2abdaa-9e12-4cad-ac16-689a84ca8135"
        },
        "item": {
          "id": "8158271e-9c03-46f1-a3a4-90e9ef1d4152",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "687ce10c-3f31-4bf6-b601-47cfbffcd78d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "7699b3a8-4988-49b9-a650-3c1de4999e01",
        "cursor": {
          "ref": "feb2dd6d-0bb2-4ca6-95aa-2aeb5e9f490d",
          "length": 244,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "3196da48-a19c-4174-b178-2382a29ac43e"
        },
        "item": {
          "id": "7699b3a8-4988-49b9-a650-3c1de4999e01",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c351d2ee-c4d7-4444-9371-b2fbbe1306ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 128
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "867898b2-ed5f-4e6c-9768-2422f890ec70",
        "cursor": {
          "ref": "2d18bfa2-dd7e-45c7-a66f-ec3c326cd198",
          "length": 244,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "20d7fdf4-2d5f-4b81-a74b-4d150a4c0ac2"
        },
        "item": {
          "id": "867898b2-ed5f-4e6c-9768-2422f890ec70",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9b7ac834-458f-4651-9fb3-e4739d4542fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 552
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "24aa45d7-dafe-4b7f-b7d8-da2c3376cee5",
        "cursor": {
          "ref": "318db12f-e918-4ef3-86e5-483342b46122",
          "length": 244,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "0dac80fc-a3e2-4976-bfdc-07fa5063abe7"
        },
        "item": {
          "id": "24aa45d7-dafe-4b7f-b7d8-da2c3376cee5",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "85097621-c442-4402-ac2f-95e9cb1ddcf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "4a49fd91-5112-4525-b21d-a6a71d2eaf57",
        "cursor": {
          "ref": "4e39ecd6-9651-4e74-be21-f930c8fa23dd",
          "length": 244,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "4e64442b-060b-46c7-94f6-e1b5991aecd2"
        },
        "item": {
          "id": "4a49fd91-5112-4525-b21d-a6a71d2eaf57",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "1363c60c-42d6-4d76-a6f5-9a3cad4fddfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "b74b2090-f934-414f-b79c-b6ddf837d667",
        "cursor": {
          "ref": "f0707532-3beb-4fdd-ad96-9266204a6d06",
          "length": 244,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e9d9ad97-9a13-4971-99f2-5fa523e1c02d"
        },
        "item": {
          "id": "b74b2090-f934-414f-b79c-b6ddf837d667",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "ffa135bd-70d2-4ad4-9aba-c7959b5b0c02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "652145b8-1ddc-4b2c-a781-318aba9039fd",
        "cursor": {
          "ref": "b4218be9-f4e9-4037-ba15-98d134597600",
          "length": 244,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "6b2a5939-9645-4e8b-83f9-904745476ac2"
        },
        "item": {
          "id": "652145b8-1ddc-4b2c-a781-318aba9039fd",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "4ba0e5e3-49e5-4ac0-a450-de5c95c09099",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 552
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "859e3e8d-992a-4bef-9ca4-116942ecd3c8",
        "cursor": {
          "ref": "f5151ac6-7907-4c7a-956c-b0ee055c9b9d",
          "length": 244,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "9e21529c-0580-44c9-b596-41227d235277"
        },
        "item": {
          "id": "859e3e8d-992a-4bef-9ca4-116942ecd3c8",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "e0f74281-b71a-43c0-a3f4-18824cce9561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "380e263a-d6e2-4c6a-8838-70b5748ca196",
        "cursor": {
          "ref": "f9cdc7b1-58b4-49c9-8364-65a240d93371",
          "length": 244,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "f4b07b3f-dd20-4181-97cd-0791ed54b33b"
        },
        "item": {
          "id": "380e263a-d6e2-4c6a-8838-70b5748ca196",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "4dae2908-5815-4e85-9c78-8776d74814f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "5de27f5d-7559-4d21-b5f7-54f8eb5afbe1",
        "cursor": {
          "ref": "dfc839e9-4363-4dcf-894f-b880b2aee58d",
          "length": 244,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "d954997e-03e0-4d9b-95e0-800684fcde75"
        },
        "item": {
          "id": "5de27f5d-7559-4d21-b5f7-54f8eb5afbe1",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ff3afc9d-ff1d-43b8-a50c-1a69761781e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "931671ff-9a45-4596-ac54-9377bb6ae64a",
        "cursor": {
          "ref": "640ed49b-0585-4a4f-95c5-dc101b53c1be",
          "length": 244,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "c5a979eb-b41d-446b-b3cd-cae62b0e25c4"
        },
        "item": {
          "id": "931671ff-9a45-4596-ac54-9377bb6ae64a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "12a688a1-2132-4a99-895c-6f3c0611d87d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "01258c89-b934-476d-8210-bf56a3f36897",
        "cursor": {
          "ref": "92ce0f6d-ea06-4758-8283-c538b1ee4d36",
          "length": 244,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "ac9278ac-7f10-41ec-9a84-d250db58d83f"
        },
        "item": {
          "id": "01258c89-b934-476d-8210-bf56a3f36897",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "fc1615a7-9276-4bed-852f-307067be9aab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "ec308b59-0804-4aa8-9bd9-17fc962f82ca",
        "cursor": {
          "ref": "7d793324-2e91-4811-8044-d311c93f6ade",
          "length": 244,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "c126ffc2-33b9-4b8e-9f8a-0efe5f9d258c"
        },
        "item": {
          "id": "ec308b59-0804-4aa8-9bd9-17fc962f82ca",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "2b175c15-9113-44e4-9c26-92165ab4795d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "5e7adb9e-448b-44b5-bcdb-5ddaf0755f03",
        "cursor": {
          "ref": "868b6cda-3810-406c-876d-90443d311f93",
          "length": 244,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "cfaa7665-5fc8-47b7-b208-94f69b9f36b1"
        },
        "item": {
          "id": "5e7adb9e-448b-44b5-bcdb-5ddaf0755f03",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "70c7e36a-01e2-4321-829b-ef83ad1ae7d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "3b2d7480-23e1-40ff-95d8-96e25964aaae",
        "cursor": {
          "ref": "2cfe4bd5-6b15-4b7e-9ed5-4e2ef3e782ee",
          "length": 244,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "8d116f27-9c96-4714-8b7e-86ce65b1c2dc"
        },
        "item": {
          "id": "3b2d7480-23e1-40ff-95d8-96e25964aaae",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "070900b9-b2a1-46f7-910a-ddd2ff1cfc70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "6e910d93-d57c-4b07-a9ef-5e23108191c5",
        "cursor": {
          "ref": "3696d2b2-6511-4d7b-8058-7a40300a118e",
          "length": 244,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "55e6845c-7fa3-4a3c-8b78-bcb3fdff9bb6"
        },
        "item": {
          "id": "6e910d93-d57c-4b07-a9ef-5e23108191c5",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "ee77daa0-ebc4-4eae-b1ee-c81917c53427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "7e305fc1-bf7b-4cd3-a7b5-76da57b93355",
        "cursor": {
          "ref": "44830762-304a-4ea2-b6ee-d9d3984af1d4",
          "length": 244,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "f548564e-92ee-4162-8ebb-1d65d65be465"
        },
        "item": {
          "id": "7e305fc1-bf7b-4cd3-a7b5-76da57b93355",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "10f98230-f2a9-48a0-b237-fe4394a2c051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "793b9507-3a00-4be7-b83e-09b267782d9f",
        "cursor": {
          "ref": "cf6879a8-33e7-4fae-999d-1148f73a4468",
          "length": 244,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "94f5c7d1-e183-439c-9c84-f92291a7c982"
        },
        "item": {
          "id": "793b9507-3a00-4be7-b83e-09b267782d9f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "a0b50ece-b3de-4894-a402-07f3a54a89e3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "791f2942-892d-406e-8a0e-6936dbc8151c",
        "cursor": {
          "ref": "278c780a-ff08-44cc-92ec-8d2b67bcd734",
          "length": 244,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "123b3be6-7b81-4ff3-b157-9bf61046c914"
        },
        "item": {
          "id": "791f2942-892d-406e-8a0e-6936dbc8151c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b625a6fd-5a66-418f-a547-61c3a75ff394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "9765ea23-0523-4dce-ac7a-3378ae06181f",
        "cursor": {
          "ref": "cce32c72-31ea-404f-b5d5-a598db397377",
          "length": 244,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e8c4c303-6735-48e4-af15-e013dcfa7a57"
        },
        "item": {
          "id": "9765ea23-0523-4dce-ac7a-3378ae06181f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "c43a71fb-0179-4e6c-8648-d93707e2404c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "2cf2f2ee-3862-42ab-b965-51fcfa8f8427",
        "cursor": {
          "ref": "286daac3-f4fd-4ab0-a4c0-e29afe22bcba",
          "length": 244,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "6a517018-0f32-431d-be60-847f22c0d1d6"
        },
        "item": {
          "id": "2cf2f2ee-3862-42ab-b965-51fcfa8f8427",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "da4a4519-9819-4e3e-9194-43d3b79061da",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "4a26803c-2ce2-477c-a048-6dc0876ac0b9",
        "cursor": {
          "ref": "10dbf935-0698-48e9-b86e-64b7ae976938",
          "length": 244,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "0db144ca-dd7b-4c46-a5ad-906964de732e"
        },
        "item": {
          "id": "4a26803c-2ce2-477c-a048-6dc0876ac0b9",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6422cafe-b573-430f-b1f8-6b35c67d075c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "9be2ccfa-8f66-47e8-9a1d-fa2bd3d76d24",
        "cursor": {
          "ref": "da7c4757-bb0b-400f-9cf8-a279db6dd856",
          "length": 244,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "60d64b7b-1be1-465a-aa36-5eb8696a6b03"
        },
        "item": {
          "id": "9be2ccfa-8f66-47e8-9a1d-fa2bd3d76d24",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "30fcc923-0e82-489f-8633-8bee8fec79c4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "86154b9c-678f-4ec0-bb33-57ed3dce2434",
        "cursor": {
          "ref": "2c8791ea-1619-4cc5-9423-ddd05b8727c5",
          "length": 244,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d2e0f983-3ce7-443d-a5e4-cdd060696900"
        },
        "item": {
          "id": "86154b9c-678f-4ec0-bb33-57ed3dce2434",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "87b623c2-2bfd-4781-a6b7-7934bc80af30",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "9cc2296f-03f4-4e28-814c-d10324566fed",
        "cursor": {
          "ref": "79e09cb5-e3cc-405f-9371-aaed15e034ec",
          "length": 244,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "4c9bd73c-3ae6-4982-8efc-20ea4d220850"
        },
        "item": {
          "id": "9cc2296f-03f4-4e28-814c-d10324566fed",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ec405a36-e5f9-468f-a1b2-c306ef63dc19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "f9798769-386e-4fd5-8b5b-9c51ea382c22",
        "cursor": {
          "ref": "b9256085-fb5d-4b23-8a41-1683407f8154",
          "length": 244,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a2459457-1a5f-410f-9d65-6d99edad6fe8"
        },
        "item": {
          "id": "f9798769-386e-4fd5-8b5b-9c51ea382c22",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "5e9ee2a2-5d73-4ae8-bf48-3ac33a16448c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "f228d1ad-0931-4512-a0ea-6f0f12495e74",
        "cursor": {
          "ref": "d3f739c8-db67-4dfe-a0e7-7db6d26b4e25",
          "length": 244,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "fa0a7f3d-e134-45f5-b6e1-a29f5d918b66"
        },
        "item": {
          "id": "f228d1ad-0931-4512-a0ea-6f0f12495e74",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "88f99427-62c1-4017-b4ec-1f9be84c8d9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "9952ca34-71cd-489f-86d2-49dc277d9c90",
        "cursor": {
          "ref": "dc39ffb0-4e1b-4575-b5cc-08d6acf90d73",
          "length": 244,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "d0c8e79e-6562-431c-aeed-76443be87d52"
        },
        "item": {
          "id": "9952ca34-71cd-489f-86d2-49dc277d9c90",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8ebe97c1-fcf1-4229-8c68-0e91be9c0bed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "6c2777fe-6ac5-4e0f-87af-009f7efb8947",
        "cursor": {
          "ref": "d6ffd13a-7704-4c26-a7a3-0f2314345d7f",
          "length": 244,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "18b62a5f-2059-4cc8-9368-7806ebfff506"
        },
        "item": {
          "id": "6c2777fe-6ac5-4e0f-87af-009f7efb8947",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b9f90d61-8db1-4526-ab65-d182fb623cd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "2871ef9a-954d-4eba-a7d9-c2bf2923e82d",
        "cursor": {
          "ref": "088a1707-79b6-41b1-ab43-7472a481e2fa",
          "length": 244,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "786bedeb-9d34-49b6-8dde-2383cbc3531b"
        },
        "item": {
          "id": "2871ef9a-954d-4eba-a7d9-c2bf2923e82d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "b4136e37-f2dd-4bc3-a102-2a65974ad5f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "07e7b2d9-11ee-4172-ac6a-a7e43e1a02f7",
        "cursor": {
          "ref": "e70dce07-45eb-4896-89c1-af14f69d37f0",
          "length": 244,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "3a2539bf-b83a-4a47-b4de-d0ac90625d69"
        },
        "item": {
          "id": "07e7b2d9-11ee-4172-ac6a-a7e43e1a02f7",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "8a5434cf-0be5-44b5-bd4d-85df333ae4a0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "04554305-8778-4d2b-b900-0a7038e18a22",
        "cursor": {
          "ref": "0eeddecd-78b2-4528-8a90-c7987b14ed9b",
          "length": 244,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a3e10013-e8c1-480f-9dc5-c5260080923c"
        },
        "item": {
          "id": "04554305-8778-4d2b-b900-0a7038e18a22",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "41444692-2a0d-48a6-8597-d348fe5c85bf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:239)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:239)"
            }
          }
        ]
      },
      {
        "id": "eac09ee4-791f-4ca8-a3f2-cea41a45d4f9",
        "cursor": {
          "ref": "dae520fb-00e8-417c-b349-0f97bf6f9a1c",
          "length": 244,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "76d82f5a-6f25-4b7e-b5d7-4d732cbc8ad9"
        },
        "item": {
          "id": "eac09ee4-791f-4ca8-a3f2-cea41a45d4f9",
          "name": "credentials_verify"
        },
        "response": {
          "id": "6349fa04-f348-43b2-aed7-e1cfca4f7db7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:240)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:240)"
            }
          }
        ]
      },
      {
        "id": "bec181e8-a3da-4ff5-a01c-ed84c9adb068",
        "cursor": {
          "ref": "634ab86f-4a32-41bc-8836-114c22d372ce",
          "length": 244,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "6d05eac4-2aad-4d8b-a58a-3326430c28c7"
        },
        "item": {
          "id": "bec181e8-a3da-4ff5-a01c-ed84c9adb068",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "aa52a5d0-d0a6-4fe8-8a73-1f83feb3d159",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:241)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:241)"
            }
          }
        ]
      },
      {
        "id": "ed81cce8-95b5-4636-9c66-8a455779e015",
        "cursor": {
          "ref": "fea38a85-b83d-45e0-9b74-03ee17b6a98d",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ae1e6151-4d57-4728-8299-b0de703d3a34"
        },
        "item": {
          "id": "ed81cce8-95b5-4636-9c66-8a455779e015",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2868fd83-6c02-44b4-97eb-5a44b375b9f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "ed81cce8-95b5-4636-9c66-8a455779e015",
        "cursor": {
          "ref": "fea38a85-b83d-45e0-9b74-03ee17b6a98d",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ae1e6151-4d57-4728-8299-b0de703d3a34"
        },
        "item": {
          "id": "ed81cce8-95b5-4636-9c66-8a455779e015",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2868fd83-6c02-44b4-97eb-5a44b375b9f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "2bde3cca-b95e-46b3-a6bf-9d74cdd83250",
        "cursor": {
          "ref": "ca13a7f6-1aac-4feb-a272-eb93c5d1c910",
          "length": 244,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "2ca7dce6-00b8-4e5e-b681-6489452586af"
        },
        "item": {
          "id": "2bde3cca-b95e-46b3-a6bf-9d74cdd83250",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "3a7c4519-ec94-4b78-8fdb-7072097f1b7b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "e6f608af-1180-43c8-b23b-472211aee3bd",
        "cursor": {
          "ref": "cd8e9191-6e2b-4e7d-8462-c10714d4da6d",
          "length": 244,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "b91d8af1-0ed5-450c-9507-38e95443b43c"
        },
        "item": {
          "id": "e6f608af-1180-43c8-b23b-472211aee3bd",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c17f92e2-81be-4bfe-986f-4b16467a20d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      }
    ]
  }
}