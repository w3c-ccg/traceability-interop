{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "d9ed275d-34c6-4cb8-be3f-cb189ec79a1e",
        "name": "Clear Cache",
        "item": [
          {
            "id": "fd822268-49fa-4325-9f31-bfff90b49033",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "61a0890b-2100-4dcc-855f-21a2cfa7f6ce",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "455b8abf-83a3-489f-99d4-186c7a68ad0e"
                }
              }
            ]
          },
          {
            "id": "746f7acd-5843-4ff5-8632-411f9c32fd7b",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4ac2cdc4-7e2f-4ec7-b55d-73c1b202f8fb",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e7d8cd1e-a0e2-4305-b60e-f2924e051d5e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "953e771c-8a7a-4487-9c58-8cbd278ff6a9",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "0092e0ac-11f9-4666-9224-1f87d9f80d81",
            "name": "Positive Testing",
            "item": [
              {
                "id": "86282f30-3cf5-44d7-b65c-906f9607d1c8",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bde2c6d7-b8e8-4307-8d30-e1a22a83cad3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "de4745e8-7b66-40a2-9ea5-cf74c7b97305"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9da3b904-8365-4dde-85b1-180c83b9c9e3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "269348d3-7380-406d-8af0-b828de363456"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cb6e6516-6c37-4f67-82c3-a169a7b8ee41",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0da828e0-058d-4a55-a59a-a56e9a1eaad8"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c47ed1a5-46a1-4383-ad93-5efa0372367b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "9ffffac4-db4e-42fa-899f-855d1772cecc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ca28b635-fbcd-46e4-b957-67c67aa0a935",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b8e075ca-0a10-4742-af4f-9226ccbd2dbd"
            }
          }
        ]
      },
      {
        "id": "1e92b966-0d52-4d5a-bb2a-94c0e5172c1d",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "7d1e5418-db87-43ad-9e92-8938090d409d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8aeb655e-11b3-4e71-ab32-c5a03695b939",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cc22b18b-3ab6-4f45-bf7c-3ae08ea5e8e8",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35f0de1e-82ed-48fd-9468-6b8ba2691291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5eb11dde-9970-4cf9-9434-e3111e7c8dac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a91694b-967f-43bd-b1fa-3725f3d4fb0d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "110d75b2-2609-49bb-8823-c8d21a61b298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3f270452-4fc5-44d7-aad3-850092902ab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d1d3b0b-6eb6-4213-9227-67476b7a6646",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cced38ec-bbb7-4563-bdd3-ea4d7b680d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c403d04d-f30b-427b-8477-badb72724336"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b8ceeac7-2931-485d-8679-76f37ed9b263",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9ffacda2-321a-4d99-80a2-53846af7572b",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa6fdc7c-3d78-4d24-b3d1-1a3f0039b66e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dd413fdd-9a06-4b2e-b89c-2e90d4776213"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13c16c5a-4bec-4407-9fec-2ea66600b023",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1978c87-438e-4b97-82db-7fc08d7d3af4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c0f02416-d017-417a-b981-2fc30a4fbf06",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b3b9c731-4f07-4618-93dc-a138b0bc362b",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4fa42a1b-580b-4cf9-ad08-df93302253c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "8915a1b0-127e-469a-8a61-14b7f77f51d9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5033c2d2-1d91-4329-ba7f-dc6450052102",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "095dd3e5-8729-4ea2-b6e6-9cd7908aec3b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "148d08bf-9141-4334-ab66-a4c9b9af8f37",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "655cdef3-546c-4bf2-aee5-5a2cb5e20ac9"
            }
          }
        ]
      },
      {
        "id": "7e756d62-994e-4bc2-b415-7ae8af5711af",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "0257b0f6-6d7b-4440-82dc-2408d791aaa7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "84836c1a-7630-4c3a-91c5-6934da43c681",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "0d4efac2-cfc5-4378-a1bc-5c09a950f8b6",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a8e269c-fd73-46e4-9e30-6c437b42986f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b79f2b64-5715-42a6-9177-f6c10a3fd699"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78b6d7ff-73b7-4fee-97ff-c5d651132b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5bf36fba-825a-4679-9e63-1a435314085f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c285589-82cd-484d-bd3e-55c436d89980",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9a0c5e0-b8a6-4c7f-95e0-a47a55aa9c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68302bc9-ce57-4e08-bb6e-5b8f926f8648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19886add-58a4-4c1d-9645-e4c5bf5dd216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b42ef8df-19b4-4d9e-9df4-b72fabc9e12f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "142b0d77-762c-4008-8c0a-692ce076cb5d",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f8d4bc2-ae7e-4b6b-9d2a-5dce761fc8c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6c6985b-3569-4caa-970a-d89e127c1e1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c22602b-1981-42f8-adbb-08e1b0cc7c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae02039c-4322-4670-a5a8-dbf21f7a2812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e3fb872-b561-4af4-9dfa-f71e032dfc42",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7786c326-6a05-4f2f-8c0d-bf0f74e4e398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "507d8f47-94a8-4c4e-ab0d-7cdb70c4de6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8ea7507-4a68-4273-8a6b-5bda9670624f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4a2682dd-a789-4b73-8fe4-76864ec74e14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da83282d-c4f8-4ed8-9bab-6e7d52435df5",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ffd755-a892-46f2-9346-532188a0b616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58b37c1d-a4f5-42ef-bb81-48c678e3c239"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc67b242-a500-4a04-b83f-925f8f412d70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cccea4db-86f2-41a6-b0c3-72244122055a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7011c453-0137-4ba0-8244-e89d7155ea28",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b641655d-96a1-4a86-bf59-0abac610b84d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec9917e7-0959-4df4-a98f-12bf314579cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce9603c7-3742-4820-af8e-db27e6569f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db74180e-9254-42a0-94c7-a8f916aa8440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "188160fa-cf87-47fe-aa86-731b1a29e1ac",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b994c23a-a3e7-4e41-8038-2ab3e88708a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d50a2219-a88b-4804-9ac2-67570cdecbd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88f73eaa-b5ff-4e90-9ddd-14dfe2e81c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dd44b6d9-8e15-4792-b154-679c641b8988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80932e78-64dc-4039-b29b-2779fece56e7",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "563d1ec0-7be2-4998-9a3f-40e0514c1927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d638360-be61-4576-b427-94b9d4f6ac74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "305427a7-8d49-41aa-ae19-1cb596ea3833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "45a549fa-0e4f-48b1-8247-08671eb27fc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f5d69fb-7edd-434b-8c40-9de67b74dbfe",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "362d1501-775e-4828-b25a-583d012f1d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9881900c-0471-426d-a518-ae21218495e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b062d44-c554-4590-9fc1-66aa78efb41b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bf72f303-dfbd-42c2-ae01-be049c86de80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49faa744-ee93-466e-86ad-1b3a4999ea14",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c966428-3194-4ede-bbd7-0c07995de43b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6100d3f6-5c5b-41c0-9891-d13bb18d764a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d17929e-0a66-4ffc-b71e-879abdc424d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eb092925-1392-4e33-adba-03144e7e2e23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1893af2-2aa9-4a0f-8532-48535905243c",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "919475ed-bb90-4e92-82f1-165d3518f52b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34d7ad83-0cc4-445f-ae03-f9e34acb65ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "337d2103-8e71-48a4-9e37-5d585b7b59c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "05683ee8-1b10-4a3e-9630-7cbd82821120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e62f554-d7f6-42fd-85e5-8c1a7c1c5b82",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c32efeb1-7369-4d61-ba5b-87a3d3fc9245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25244de1-4369-42e8-8b19-62d0fd3a3849"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12a994d1-abcf-47ff-b737-c039f6eb25c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac1197b5-c600-45f3-b82e-a136ccf0cd8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fd946d6-aad3-4f11-9745-0ec91f701bf0",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "018c4d92-2dfd-497a-80ea-31b1d9587dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a2b4bc0-0b2e-4b6c-af6f-81b652ec3b5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2a3eda6-364c-4d31-a7a3-764f37953279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "de775b0c-d3d0-4d3c-a64e-045cebc8525a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "437374d5-5d1b-45c9-8096-6371f02383b7",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c51428-0289-4a4e-b8cc-d783b22cd3ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79dae540-5f04-4f4b-9eed-ce8ada5f020e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5517b686-7381-4e69-824a-0aed0ec95f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e9a93b9-584d-4532-9d94-f49c5bbe7bd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d2d66a-e924-42b4-a4b4-fc722524fd4f",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afa72088-b96d-4565-a33b-66736776e0fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28730948-a06b-4ace-b210-f8116d6df181"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a01791f-e499-41ce-85ba-33e77c405c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e66bbca9-a3ed-48f6-9d52-690822222231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ebd0b63-f25c-43df-8936-0c479fd4092a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6ca67e5-fd4a-40eb-9cdc-6ba6aa931543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8551756-0b46-4d1a-8435-370d8e62d903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3451bb1f-a9ec-409f-aa54-8b0ca2e1c093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ffaf52f8-4e37-4574-93b2-e817af18c5be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4538c8a-9ccd-4aea-8d80-1109d10f38c7",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "623d1fd8-5838-4317-b4e4-e0aad4be5e0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1a01cd8-16fd-47d3-872c-35053532cc5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66636ff5-b7f6-43d2-b001-1ec4b837eece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37e98797-3408-4196-984e-2b2ef3d76f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb854f1e-a92f-44b6-a96e-37c8eab4f010",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a4c814-ed50-4a36-98fa-3ae093571685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d89dc06a-7a15-4643-8c34-8e2b8094d3d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cee52bb-ef47-4254-8c58-7c25ebf0dc0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e01c7f0-3aca-4326-8665-fe01ce69b27e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efe9ba92-e906-4bb8-8d57-1524507d0960",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f19224f-ebe8-4a85-b18d-ce662c32cb4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ef1ebeb-8084-46de-86b7-500f951ff725"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a39627-3424-4ebf-9abe-270534a58474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ea43aae-b539-4836-8ac2-fc90565a25a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2473be4-93a0-48e4-a456-68ddff9606d1",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d90273b2-46bd-4536-95e9-149354f5a615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9a84559-634b-4759-a60c-5377a8fa6e5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f69b9940-77c9-44a1-b8bc-561b43875259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6d5f745-9a24-4a1e-90ee-a1752d964c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "266e46cf-0d0c-472a-9763-3f9a3d350e38",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa5aea33-da7c-4751-a983-4537fb6c41e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43d1e767-3654-4042-88cf-cca467a918b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dda7cc1-3a00-447b-92ee-4631069c05d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c86f9b77-4b2f-4a00-ac10-1c5fab9e12fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cda3619-b56f-4191-8e22-62c0ea267e62",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35eb13de-11b0-4fc3-a9e8-06bed741d2c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18b3d616-29c9-4ae5-8f9a-e31a4cd353cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30d5ea34-7cb9-4e29-b288-6bdac692c466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3af0d15a-6081-4d6d-984d-55944550cf61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45eb0c59-4a15-477f-8f61-aa8dcb025007",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e1e15d2-fc2c-4085-970a-b25c5670ed8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81a92cb5-e589-4633-a5a5-2afe0f5be41f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1259c94b-d088-41de-9123-6da98295f1fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9070511c-1d83-4e57-9a0a-0ef0bbff4382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b72d73d9-e358-41d3-bf2f-2759d454d73a",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24de7095-1235-4601-8fff-6459fb949201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8474f427-072c-4dd7-a9ad-e6f5b5355cc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "150d2ccb-3550-4fcd-921e-b5f3c96cb45c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b435e252-fc38-4278-9055-3a14acaa3604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0b06fc4-9e7e-48ea-8bc8-563c006cb68a",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffdf47c3-2086-4360-9251-450312864b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d62316d-9e56-40c0-ace2-8e43ebd1f2f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04d9d96c-e89d-4d92-9fd2-e4251bc7af93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "efd0e5cf-b756-475b-ae5d-2f96de6df772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40beae67-3a78-4adb-b524-9d059ec02091",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9246a764-2bdf-436f-a620-bb32d01c96d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bb0f83e-e3d5-4926-8044-37597db33cb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e05649b-e16e-4e57-bbd5-dde63a938278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdf6c41e-d810-4435-80c4-624778dcfaef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a9a21c7-1611-4771-8a82-ad33bc6244c2",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3309707-330f-4149-83b3-3eaa4cbae240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be1cdb51-86b6-4e15-b64b-77fa4715b829"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f3098d3-c5ec-42de-8ebd-d11b53b63ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd72041b-159c-49cc-a733-737c67905bcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e76fad4-0783-48fd-91d3-db655c5fc5cd",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9d7e15b-111d-4768-ad40-66c8cb516461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbf1b8a9-bcd8-42fb-ab6a-b7fab754f0d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d876b9e3-a0ca-4b41-88dc-1a40568fa044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "36bb0449-a80b-4939-894a-d776ea2d7203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97818f6b-fd09-4703-be21-f85fcc52b57d",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0743d336-0150-4c8f-8b4e-bfc80965c8d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6988a4e-91a4-419d-ab66-b90c9bdfbeed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f00c27-728f-4482-8b1b-becac983a6d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "87f1e707-0846-40ab-a6fa-ba14fc4ef274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8385aad5-f2b9-4ea6-bc9d-1987bec05d6e",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e536439-5921-4923-b127-91cb65971c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeb025c0-9693-4c4b-b690-a4a6d041f412"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "658eac39-2173-47ca-8e63-e27414976ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "abf99090-53c9-42fd-a1ab-549190eb0e5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6688b97d-23bf-4fca-ade9-d9a807ebd28e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ace91ad6-d4cc-49c3-a99b-82b3064dcc5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8a375a8-ad72-4570-a836-9f9177705004"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf8aa06-2cc7-4ebd-8e9f-a6df02bdc985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b5708b8-df7f-4d5c-bb63-415d5533f45b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3c5ec81-5887-415d-99fe-e2085aecc270",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cb865b5-3ff0-4c89-8da7-ab5c02d1821f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8bc1948-5843-4ac0-bfc9-49fd27650581"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "209fca35-9d10-4060-8bdb-baf8d238158a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a00b8e4c-79f5-4c56-b721-1e5b614b8af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b21031f0-993b-4aa2-bbb9-25f7ad0acb28",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bc04300-e92d-4299-8942-c1fc0b741788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b295e6e-1b9a-4f48-b628-5bc3a7bf3fda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79c0c33d-5edb-4a7e-84f5-7dd7014b937d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "103f0c27-0f22-4bb6-89e8-d4f925c92b08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4620eef9-bbc9-434b-9204-1510f7cb3df8",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7c03c1b-4002-4534-9fd2-8eded3124ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28405dc3-6ad0-4342-b1f8-c832623f0592"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73937751-2e4c-4e73-a39e-bf82c44072ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c9569ac-dac8-4a0c-aec6-30675b0b6ed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "234aaba6-4dbd-44d4-ad07-e8e349df163b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b3a85eb-7a5e-44de-99ae-2495c9f6b8bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de6d316a-d95b-406d-80c7-0858af1a9269"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96710120-a024-4b57-b0ad-c5ce4f9248f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "b11c97ff-a8dc-41ac-8bc6-78f42e5fa282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56801a83-706d-46ba-865f-f3b11b17c2ee",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6cefa21-9301-4f2e-be72-8c67656dcfee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ebec9d63-c50d-4ac5-aed2-4a56a6a9686d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "392e2d32-6f41-460f-bb52-1e8bb95e8e0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5d6b9160-5fcd-4190-a4ff-91e64c828173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13087766-cd58-4d25-ae03-6d9854e50fad",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2ae77b1-ec16-4e96-ba39-01a18c08c20a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5daa26d-cacd-4496-9f1c-f5319a888f32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8adad35-79b3-4d15-8a92-2903a878387f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "673d1f7b-5cf8-4aa2-b8c7-0c8add909b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44922748-c0b1-437c-b908-cb6e240a22a1",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "521a0ec2-4f78-49c1-91b5-7f64edd15aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c1aa274-bc5a-4a03-94d2-59a9692c842a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94edb782-dfdb-40e4-8d2e-093cb41d6bdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "43d869b9-dfa6-47a2-ba71-96180cc94082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ccef76f-cba2-45e0-92de-ee8e68a43c52",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5360fd9e-661e-415e-8c91-6182bd3d4a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d8e03bb-33f3-4fcb-8860-a008f07c55f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d13419-36f2-4553-819b-5ec521428b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "78b4685b-91a8-44bd-a878-0468e884e2a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b944af34-0e8c-4e37-b4cb-cd790e71bd48",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5bf692a-24b2-4fd0-8b6a-cb5df1277932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "982fbfbc-45ba-4ad2-b53c-66ff50bab34d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f464f52-475c-46ea-8672-ee6ea479b45d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "10bdb295-c90a-4daf-b866-316d2d62cc0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d0068ff-f538-4af9-b2ae-e6604ff9d12b",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "353b9149-4d0f-44f8-b0a6-ad0b8c260e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce6a4ba9-ee12-4537-ab71-5ce263c75ecf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0816ecc8-3056-4223-a53e-c82c27377080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9366d90e-e833-4280-a08c-f60782e03583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea1edc12-a43b-4bba-81bd-b362119a3e92",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e1e1ff6-b893-4134-b057-0f2f0a2d60ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe910f51-1059-41ad-b6e8-812011e965c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc7f915f-cfa0-4daa-8b21-c87000edfe6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "166299df-d1f4-4460-b50e-c54d69c224a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e2aff64-1fe9-49cc-9d52-c258d6bf7a96",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e16c229-78bf-4846-88b9-65a97a4ac462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42d6c5f2-4201-4c9c-b746-796337ace0e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f514dff9-b0bc-4b49-8128-4007a82eaac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "258f49aa-a460-41da-9375-d275db14ee67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85396274-1e52-449e-9d68-ca489ea1e9f8",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06ab8060-bfeb-4272-a1ff-5f21f6dc2b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46dd3ef9-2d7d-4615-87f9-06ecc19ed60e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "995c0df6-abb0-4d46-9217-7729fa99dec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "42d9e105-27d7-4a6a-b183-97b67dae803b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bf97dc9-1c97-4460-9b06-a3bfadd21a29",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da86252a-bfa6-4fb8-9148-c38ee890ff8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abebe991-3abc-44f3-829f-778087723c93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1495737b-c3d6-405f-9ba8-22067bae821b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c425a18-1b9b-4ff2-8977-7315d4dc04cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e100f506-4105-49af-a005-74a831d5adc5",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ac74a1-d7c9-4649-b3a3-b472189eb352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22deb9e0-2dc9-4ad9-8999-7a0f32e84bca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "798cc46a-a079-4b17-8930-5692c76935a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f22de940-ca2d-4c8a-81aa-05de2ef85a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "540d889c-36a8-4db7-9538-8e0f5922dc41",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95206f8a-cb65-4d45-8765-d34552db0093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa376b77-110e-40b3-b4cd-9ccde01bbf69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f42b2c4-180e-447b-bcf3-97a198438180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f33ef34d-2129-41b7-a809-e2fb0173aedf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e88c99-5f02-49e5-afff-64e8b36122fd",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7811408f-db7b-43cd-8c1e-8bcdd96a49d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "921461ed-0cb5-45ea-b42e-b300e94e46ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04e809b3-e9c9-4d48-9cda-51e6b8b54593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d373a570-0796-4657-89eb-e6d1737e99de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a990cc2c-68f8-4fe2-98e4-2a79ab2ac51d",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be3e2c3b-e3dc-4630-8129-6c8d2dce0b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceeca004-3bf0-489b-be89-423e8720c1fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e1f8805-ede9-4d5e-abfb-ed6267983d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6f1d435-d7c0-49de-99d7-54d4040fad3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cd4112c-452c-47e2-b5f0-1ff55c9ba61b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "549a5044-ffda-4ad6-b85a-73191591becf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78b6aa86-2779-4ee9-89ac-3d1cc2f4b9a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dd2a51e-657a-446e-a0e3-471f8f5408d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8f423419-e451-4889-84fd-3c529ff2783e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "433ea343-0988-48fb-a600-7942b53006b3",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39eb06ae-f60a-453b-8e97-0a37d7aaf4b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "414a1d01-f0b5-455e-959d-d9c88024a176"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be0f03a-087e-4f53-8170-6dd354e49065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc794c04-b450-4e20-b2a8-b77d0f6f8173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0ae5257-7b2b-4e41-98d3-432101c8114a",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1f8f8d-f2f6-4c72-95ba-6a2142bd8d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f874e6d-1e10-4e3e-902f-a8c5e215910b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bc6442e-d7ae-4db3-a153-ff5d85678417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9664e11e-ff48-486b-b2ff-32fd67309943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21df6f1c-e533-4066-a0c7-8b9958cf029d",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47eac251-b028-4b1b-bb7b-9133ee2255ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22c76d3b-10de-4b0d-b9ea-0f4510d67cc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47c3978d-c427-492d-bd4d-02e1a0b41481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf6da7a0-8ffc-4c35-b14c-245ef8219230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7abb926-f374-48b9-b3f4-f2399a6ce8ad",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b907f2c7-e552-4831-9d9e-30f142766790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fe35943-d7ce-4bce-bd1e-d6c6815589d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c69d0ef-82e3-4456-af20-4e37ef4ac1d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "078bda9c-be21-4bc4-bd0a-f93a6bb3c17a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b0b0c8a-0a55-4b45-9cb0-a366fa631581",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f83c0421-98e6-42f0-b60d-7a05c00f59c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d567e63b-c387-429c-b002-6bb57eb5e64e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "778ad29e-12d1-4acb-93a9-6782b7d2843b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e262a2e-bf36-431a-b432-cf60795db0af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c43f0810-2efe-4c8a-aca5-81ecb3d15206",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bd3e79b-7ada-4ad8-969b-6e128bb5b11b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da7779e8-b6d8-4a34-88b4-b97984080b40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "796e14ea-a77f-4535-857b-c6207e3cffbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "9cdc5662-280c-4104-a6bb-ecb3bdb617f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73e256ee-c3e4-40f5-99fe-8562e2fbd16d",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3559765-d965-4cac-b53e-ced7a61ff773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc9746d2-60fb-40d9-b7ad-2de2c3d37513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "927b2f15-4492-44bc-b7dc-7e122f601528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2eb15fb1-10ad-421c-9673-b2fe2d91898d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04a6aed7-347d-4a2c-bee5-240d94b90837",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f8c532-5b5f-4c44-a18f-02bbe50aac26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fde52edc-ca8d-4958-b9b8-d9683dab8278"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa3efb0-9ac7-4dc9-bda0-ba95d266d13a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2b974608-5a4c-4017-b15c-3fdce9fc7244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c56579-395e-4516-a55f-e4f90b295256",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3150046d-c0a4-4f79-903b-8aa41c5c4e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed332e1f-de5a-4009-9a71-0accfdf57f19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47360293-f69a-4eb6-94fc-fa96cfb36e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "88f3cba6-964c-4128-bce7-1c91b12ec7d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cc0a2c3-2386-476a-a0e4-b30f06bb42c6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0ce0ec0-c5a2-4b19-bcc9-5b84b04529e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5daecfb-0496-4c89-8a8d-878e4a388b11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a54e322-30aa-4bf1-996d-e05fcf3c042b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "92b67b8f-04f8-4ccd-8189-75f82a4d16ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d44d2034-9dce-426f-8a82-36073b09334c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a96cf836-e5b5-43e8-ac80-a66a1a36c34b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9a39a15-7cac-4c87-8cb3-c6905cf59d5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5febb1e6-345c-4492-a322-85fb9129f4ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "bfd85720-2aab-4507-a02d-4d4cc347b5c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fdbab94-3940-41b9-a764-adc6ee259c37",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9fb5e8d-91a0-4253-bc1f-3a410d02f372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81848f87-20e5-40bc-8f3d-164bf2806e32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1127ad9d-0245-4886-8a33-e2604621d80a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bb1a46d-4142-414e-9ce4-7cd0d131b1e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b6fcfa3-6b6c-4b64-9c89-c95f6de2ea17",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "020cec54-2777-49d3-b5ee-be1632b12488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c601be78-ea51-4983-aada-b28517fd76ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc317762-076e-4304-81f4-c4921fecda97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d252012-6de8-4493-8850-602ccca8805a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02085695-7312-46b4-8fe0-ff70ae087a88",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ce9694-38a1-4430-bd9a-7df2e9d5de3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e29a876e-10d6-4bed-ac30-02f7ce4720c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5883f0f-0f7e-44a7-8613-d11c2a834037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc525a20-c99d-452c-9532-5d0d947977d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae48fd59-61fa-4a1e-8e6a-8bdc7adf1921",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f15f2a93-2b2e-4758-979b-d7c000130f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46a9dbff-97e5-4cf5-bc4e-4ee287cd713c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6447d938-6403-4541-8695-f33f55bd7e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd8df3fd-bc5c-4b3b-b70a-1a95c552afb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8858e7cd-4e29-4e62-885a-25ad8233739e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67a95f32-1cfd-43bf-b818-2ed2c21e6acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6f0aa48-daa4-458d-9bbc-9c5b5cf74387"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf70faa1-661f-4d44-9fa0-1c713820e796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbba4af8-58dc-4233-bd91-df23a6aa667c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c53483c6-b7c4-4255-b056-42572028c7ac",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e33fd53-f487-4887-ada9-0bbc69d0594c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "952413b0-e5a6-49ea-856b-aed9e49694b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "814ab485-efec-4571-802f-ec76ffccb4c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a26c66e6-f276-4b6a-b8ff-d40d8e119a5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "855b8dc5-4aff-44e6-b09f-92cb8e4f47fb",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9d8ec8f-a175-4ade-924a-8183c99fc4a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ae0579f-2315-4497-88ff-d75e70e42f09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe146d63-7ff1-46d1-b355-b6118f47c578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2d0f7c8-08af-4d9e-a06d-01aa42c8ee93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f1e0d9e-7b04-45cf-866b-d0852c6066b7",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2602e7e6-2b7f-49e1-9492-50afdcfdf8eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb6fc4c7-38dc-4823-90cb-2894ab02f17b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de8d2473-4e0f-4c55-9a45-a8e56b9558fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a48647b-bd5f-4b5e-b2f9-e8a0eb8511c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db5bdcc-f5ac-48e4-8372-fe08cfa6a9a0",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80e72cfa-a473-4961-b458-699f283d22b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82d4149b-4678-468e-9169-a0b5c5f910de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ba226e6-75df-453f-a70c-48d7dc032417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e20b1e24-0633-4b6e-957f-98e1e881a067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bdae3d4-3cd3-4ed8-8f5a-b24a94b0e70d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "297149bc-5bdf-4fa9-970a-9b7a0401790f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eed1abc-94ff-4e2f-9621-9388586998fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4c2b8e8-4f0f-4e6e-9b1b-c696f07e7b79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d01793e4-6a02-48cf-96c3-daab0beb6478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ad1f4e-8381-4d17-b772-5f29c24bc881",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d1a8385-ab3c-4463-9d86-6371f3bc4c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e045c5f5-bf5f-40e6-b7aa-f0571f0c2e3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2ab622b-833b-49fe-85c4-f807e6495626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a74ed485-925c-4fb0-935b-09adc304924c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb22f2e8-3cca-4e22-8b68-3ee2a096902c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d0324d-ec2c-417c-9e02-e894ff5fb07d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bace8ce-3209-4dc1-a230-a51ecbdaf819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "859143ca-1dd7-4cd3-b556-6ca529c00bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f47461d5-2673-4711-b727-44ab8cd87b37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1122fb27-dcca-43ab-aaf8-d523d1c7cfb9",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9db73fc-c26c-4bfd-84bf-17bfb45019ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81511f5d-00d3-464d-9d2f-fa1571bce1a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b419339c-dd6b-4392-9aef-d5149ce92b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6ddd5603-e7bb-43b6-8314-8d221f7e7547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df1cfe0f-1f3c-4189-b9e9-b58de725e0c4",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acb9c7f0-e572-4e03-9094-bb3cbf5aeb8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70dd3338-741c-4b28-b678-27e913aba515"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac0e3d7a-fdd8-4ce5-915d-15f46f07e593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5b88c5e-96bc-4807-903f-619f300c7995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2b4417a-81e2-4a40-8ea5-4840bba8089f",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "408e97a2-5c88-49c6-83b8-7214bd238284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09d4f3aa-e03f-4ed6-9846-133dbb984e0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "207c1532-c2ec-42ac-b0ef-0369e2473960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f0b13c9-f983-4674-88ca-2d94832e6ec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2692735d-27ba-4e95-acf5-ff798f83738c",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "272eadb0-1726-4607-af69-35b7db991ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ea0b62d-1441-4898-acc5-edbc50a597bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43988cc7-fd92-4891-8412-489743908532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4423326-7941-4ae6-a131-d10ca0ea2b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "106377f2-fcb3-443c-a863-2dcfdcc9367e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29b9c1ef-a10d-4889-a76e-765c8affc714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6cc323e-2aa7-4a79-a9f5-88f34879d35c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d7f60bf-9e43-4b2b-9c67-318c2e52ba58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1b0ed3c-b831-499e-bdfa-35b5b589844f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4571024e-9e73-461f-9fa3-7c1af4f24ccb",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f63317b-6408-4b06-bd84-83379cb9351d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3999a040-ec39-443b-a123-56bee74030f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49107432-0955-435d-8dcf-3ae174fee348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d578a5b1-5f3f-4912-8f8a-bac82595451d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86ac6896-46e7-4587-8e11-7017190c1e88",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54019c4f-63aa-4fac-a460-7771e1859d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40eabd1c-6e39-4172-a98d-7767b8c8baa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f108a3ed-4e6e-406f-a093-ca69416ab8ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2e682f57-ccf5-4840-bc23-4fae913fefef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6ba697a-a731-4a21-b9a4-e0d5f05c446c",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61cabcc2-a46b-481f-b998-43678900950a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32bcb463-159f-45d9-8a48-87aa2b34d796"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcd41cbd-2fc8-4254-83dc-e463a278fe7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7e4de2a-594a-469d-bd5e-0ce262da5bac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d8a8eb8-9bd1-45bc-9c5c-28a4b5303fba",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e31e018-3878-4674-9fb4-2baf469422c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6205f2c4-44c0-44e6-a18c-910118b5d678"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89f12211-b929-4f7c-935e-1c1dadfe9ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b464d3f8-2f00-461f-8a5e-1b0f535a61a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21869eea-c9ba-4e82-983f-c4fbf7d880dd",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb39af6-6482-40a9-8ee9-c8a242a4a853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daa36ce0-693d-4c28-9c32-f5f3178c3f7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d08c71f8-3810-441f-b92e-98931f9763d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "82ddf520-f3f3-49f0-99ed-886d81da7806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11833ee4-7496-400a-bf3a-f4c645c54030",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "091815b6-2cf6-44f5-9c36-5d7ff1accf2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72bb9b0a-2343-4ff8-958b-b84f1dd39056"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20cfe01e-3db4-46da-b511-a0476fa0b11c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec83e235-20d7-445f-ad3c-a5f40534611f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f26117c4-6f7f-43df-9bdf-a803894aebe5",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f4f9041-3e77-42f1-b606-f27321b436b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "497c5847-aeff-460e-8c4d-e505792564ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01d94dc1-aa38-4db7-a595-f92da975912c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "826432bc-c265-4d56-8857-5f4fb1052fc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15cbd1d1-8940-4e80-b956-559f78974675",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e2a048-55d5-43ed-ae3a-c227810f51dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ee3ec5b-e913-44be-8bef-dcb5df7301ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "891f6da4-8feb-491e-b423-a9bb28ad06fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ab20bc8-0c67-49e8-9b77-017d5442b7f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9a009ee-53fd-4ea6-81e4-20e7b6bf3ea3",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e58e210d-ba62-471f-bcbb-c2f7a4bae605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec4dde11-92b6-41bf-be45-0012dd07fdc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "538b926f-a41c-41ee-bbe0-9d8065ab9089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e281ede-9807-46b2-969c-c555b3c1729a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4c72c20-491e-43a5-af0d-7b1485720c3d",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56ae187e-d6bf-4157-b405-a0a057f09d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f614728-f361-4420-b601-502dc8df3e56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b05a6c-a237-42f7-8cb9-c4ace6ed3ccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f419d4e-ea70-455f-8fa3-59ebcb36941e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a204fe6-1328-4b10-bcd1-4c087700fe9e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "081410ed-11d3-438a-a5e4-ca442b8d81f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16740a7f-8a6e-4706-af4d-852cfada7929"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d47a675-b67a-4bdb-a5cc-03d350ee2fe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "25d3caef-dc96-4a03-ab4c-8dca84ff898a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c325292d-8baa-48b1-bb91-95da26d22fe8",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b44e4c39-0fd7-481d-bf6b-d7c1a8a8b3f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eb0dff2-38d4-4475-9922-9ddd16a7b388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a9d8e29-fde8-42d2-b94c-03c8bbbd454d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "09104b3a-be79-4015-bcce-400b36f3abbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2362dd3c-32a5-4efa-9a6e-dad1bc6de494",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c488e6e6-d7ed-4def-9c2b-1e8f4383f7e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "053af6fc-73da-427a-a945-f2525fc04fae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab66b606-052b-4d3d-a9cc-0a08811701fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ff1fd4e-8c57-497c-80f5-352ca192161e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e3e221b-7746-4510-b065-c2137571ba4f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62e68e61-bceb-44f6-bf4e-a6213f89f868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "aa4c6823-4bd5-4046-bb34-f2df44fb8659"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c028dd-0ddf-41c4-9336-949c06d2200a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a084ae0a-4b10-4818-b558-fe99b1680f50"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0884347f-ea1c-4f31-8393-4b161d86d3f3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9a7127f5-7847-4415-8d00-f39c797788c0",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8162c635-7b71-4655-a3fa-cd3dd9073571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "db30ff20-4bd8-4305-9f6a-9003b20b57eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9308e24-785c-42eb-9c78-5d69b5797197",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c0651ad-a301-4526-89df-872e05fcfa0e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cfb88ee2-434e-4ecb-b96e-7a36056f1cdf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6dd7dc10-5f19-496f-93ba-d3b3e22ca377"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc5a9059-7a6f-4cfb-9e36-d1605f1313e1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8a44764c-0e5a-4a3e-873e-973f4e77a99c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6880d2cb-4caf-44bf-9bc2-8b9bf20d942c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "198ea2ab-2aac-4fd3-afde-295d098a6bd8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "790de4c7-a174-4628-9923-d60b21665710",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2d366c75-b51f-4be6-8e11-6e5d496b4b1d"
                }
              }
            ]
          },
          {
            "id": "3eed4e13-aec8-433f-8536-3429af122f21",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b6ede167-145b-448d-8622-1955f41dbad8",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "cbf92af4-627f-46d0-93e7-3defe6257621",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6957c126-21a2-4edc-8baf-0260bfeb0130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5d912dc3-de3c-4c1e-b707-5134fc4471ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe304b52-0c32-4c70-bab3-2ab38d8a5de3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a742a31-0883-45f4-a7ca-b78740255f7b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6f4a60b9-6065-4a84-a9d9-de40bd7465ba",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fde15a52-c147-47a2-8474-8fadf0ddf705",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e9f33500-5126-49bb-9527-a26f076b38f4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe4eb1c4-35d6-4848-a82f-a3b17a7cdde8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "daa27154-0507-492c-adab-56e84f5209ac"
                    }
                  }
                ]
              },
              {
                "id": "308a3b0d-b484-419b-a04f-3ee1eaf90222",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "550af9df-f889-4de3-b816-48d912950513",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eee45c61-5739-4fa1-8e08-62551bf6e5ad"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e11be24d-c4e2-47cd-8b1a-e6823aa56b69",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6773938c-eeab-4e4c-bbe2-e330425d7e58"
                    }
                  }
                ]
              },
              {
                "id": "35eb80e1-1a67-4f3b-b1ed-08676b196875",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e94329b9-08e0-4230-9af9-0aeceb50459c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a7060406-f12e-4731-84ab-7e0a3c8cf8a5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bbfc8cd4-61e2-4bb2-a664-e58499a974ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "73e83e4c-1fa4-4b0f-b81f-dc9d3959b640"
                    }
                  }
                ]
              },
              {
                "id": "bf1c47ad-983c-464d-9753-ca4dcbaa652c",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cab1ba02-94a1-471f-a6be-474da236f273",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "87032ef1-3a0f-44b7-ae80-740703b597fe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3758dc85-081c-4bbd-adb2-74ea553ab3ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "941f40eb-9abe-478e-88d3-b26c0e766b3e"
                    }
                  }
                ]
              },
              {
                "id": "31e5f0c8-423b-454f-bd55-be08cc98d0c9",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e4e50fa5-50db-44d3-bce5-2277642d5833",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b720894a-8fb0-4d0c-915f-c8c90170b28a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dfc56c9f-c58c-415e-b967-aae7a4b578a5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "6f81cbb9-8708-479c-869e-041923356675"
                    }
                  }
                ]
              },
              {
                "id": "e7918ce6-e0ef-497b-84f2-3a7fa21fa5dc",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "13c9dc3a-d104-4bd0-9a00-de0d7b8dbaf7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1d3d4007-c3b6-4d47-9153-e1dbbf8e7a80"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "abb7efff-1a8c-4676-8014-42b99612a24b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "676f5cf3-b636-4f09-8bec-eaaea4d5e51c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "47c1f237-398a-4f99-8101-b3701af13919",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "07471034-bc23-48cf-8707-698519ff113b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ffd48050-c05e-4a29-b463-117ce05693a8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0c8d40e7-687c-44c8-b9a2-39f878a93f54"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a4de8f58-d5c7-467b-995a-3361665f3c51",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "d7cd23d2-e4cd-4bab-a05b-53e4f6c506a6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1e0fe022-92a4-4a0f-89a2-0a4bd2e0fc00",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "829420e7-18a2-4a3e-8838-140be2582cbc"
            }
          }
        ]
      },
      {
        "id": "d0eb51d0-2b41-421a-907a-58553aacdc5c",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "8e4b55ad-2572-428b-a311-7570a25a021c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7b7ee22b-5e51-496a-b2b0-c48ef258a51a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ee75230f-6faa-445d-9dae-0d24bcd05b20",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4faf865c-e378-438d-a19a-b75658e104d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1630cee-d7ec-4235-b041-4d8771e3e876"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f176c56c-0579-4b1f-aeee-0c943a40be60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5af6b37-7bc4-4aaa-8689-ab5b09684ed8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18c4aa42-23b4-48a2-8e5a-5678ca5905ed",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c76ce780-2855-4d5f-8dba-6f27629c7cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fb3a331-834d-4594-a430-c1800fce1d6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06468396-7b62-4e39-9a6e-2de1009828a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3160fb64-95fc-48b8-a32d-6aef39687c95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ddcc0b9-a75c-4fed-a966-9c31a7d255d3",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0453d3a-60a0-44d0-a04c-8bf957df3973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a94dcf93-9cc9-41ac-b77f-285e54494362"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04379d4f-186b-45df-946f-c59bab0c96a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "360531a2-bbc0-4174-abb9-227e31f5e66f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdf54f59-c4aa-4671-9135-1e8100289ceb",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba56472-5580-48bd-987f-8c9691de43c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c726813-1fab-4504-be28-6e1fdce00e74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b895ada8-62cb-4215-9298-f147444c7dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9d673e7-0f54-453a-88bd-b54a023994af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11628a40-3514-4d48-82b1-60a63880b217",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e5583ed-ed19-48c4-94c5-14cac578e514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6109dcc5-eb54-44ae-b4e6-8203826dcc22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d529c142-545f-47b2-b24e-fe206a7d4970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f125292d-3da5-45f0-8bf3-8d5dc281e025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f085fb72-01fc-4201-b4f6-2059d637a3ea",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcb2adeb-5aa7-40f6-934b-a2231f55eb4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf9c09cd-b374-4afd-9e32-75894190ff4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de61ebbd-4cf1-43b3-9585-1bba516413f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc3eae8b-3f8b-4930-b3d5-39cc10480771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69332a11-76b6-447c-9a1c-980e0c48df15",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58058e38-cc79-4360-8283-7a43e3f89fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "291cec16-52cb-46c3-8ce8-d2178357f602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c7e73e6-073e-46e2-befc-83024b13110b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b54d654-4423-4310-9344-40c35a1346fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fed8b6d-4880-4101-9f7a-d53501503349",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "998c361e-768c-4084-9b90-f16f34c56c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45ce0e06-8132-4595-bfca-d04ccc8710e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48cc9866-b937-4c29-9cc8-a59cc24c831a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e3f00a1-2a25-40da-9f90-f54e7d014644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c01a40e8-8846-4b84-a8e4-bae04e403693",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8926735d-0eca-46d6-a26e-c71f2788a62c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ba0c3e8-7121-469c-8992-58111ac1e793"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "520b2f77-4390-4a1b-acb5-8a14ac27b482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1fe3c96-0078-4d53-bc8f-fcf35efc9797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e58084da-9d2d-43e5-9d59-670ccb80b50b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd3fa3a0-5fb6-48d5-943a-18ecb5fd132a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "916acf7e-5ee8-4f40-8431-709365cd3c89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae1fadee-bd70-4156-9206-ab600dbad5af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ba7e9c4-cec8-4fe9-afb4-5d95d6abbc27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "781ebeef-8d15-4d3d-b615-4ab1d9a770e9",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eca53e6f-0d04-4a1a-a288-fef89fe7c5f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "051d145a-475b-4d54-a4ac-aec0d48c1689"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27c4f798-8b27-4e37-bac9-386080b924bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "abd50fe4-2165-458e-80e6-93b584beedc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "436c2941-b7fe-496d-b334-a9c0818c3178",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "542bf4c9-e037-432b-8d93-a612c6eb421a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19951a2a-02d2-4d39-9984-719b700b5e5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "786f34f8-4d73-431f-b579-f907f9696cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "797df483-7df4-4c16-852b-149c721042bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdb5fd5d-5500-48ca-8cdd-540ce3e29cb5",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b1dde4-ecdd-43a7-b0a4-68cd8c6407c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "653c996d-9007-4ac9-8383-e7df6556d7d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d1214b4-38a8-40b3-9757-3a444c0a7f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d369746b-ff6d-44d7-b518-ab4fd281340c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb1f539a-fd5c-4864-919d-53bf8632e23e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9b5216d-67fa-4f52-9858-dcea2677e003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c23ec266-48fd-49da-8f75-c794e8e575d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fafea102-c12e-4bdb-8b94-e1d4065e890b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1dbcb8e8-f455-426e-9e9b-8c807b8fd93c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d320ea2d-e9d6-47ac-a18e-b31bbedf6f75",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7fe937f-da33-4947-beb2-8fce8d0cc53d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6e55fea-dac3-44e6-ab89-68252605f54b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f68e7623-4b89-4970-b97e-cdde1ad0b35e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c2f292f-e4a1-477f-9fbd-30eae14cdb64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0067ec68-154d-4ca7-87b4-3a7a1a497fe3",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81863a5a-c2ec-4c7f-beb1-4224c71b9ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b71491d-a707-4657-947a-f4494f44b961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e62a20-e426-48c2-ad14-c0229786043f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "27bb0ce7-11de-4097-b124-83e52982ba5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3bfe5b8-0193-4d5f-935d-12dbf8f4479f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fbc942f-459b-4413-9ca5-6a7989777781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20d9b650-8b0a-47f2-ae83-8b67ac9d9b7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bba3f94f-249b-4b38-9a63-6a4cfbdc2915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f515b83-50f5-44ac-adc9-c32f5a0c64af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7af37ad0-8e42-40f2-8a23-b893c14da433",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ed0f3b6-e082-43ec-9f65-effb8ad9d85b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10c9d876-7391-44f4-bc4c-fecf351ed1af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d417bcc-59d3-4bb6-b0d8-2531ad77114a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b0cba49-142a-4a52-aa2a-a218f456528a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "800022c9-a93b-4e2d-9e9d-2c96d6b2ad69",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f3d8c2-0e85-415c-bea1-0732ad4b8ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9d10304-54a4-4c8a-9655-776852c6f2e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb61678f-d407-4dc0-8f0d-a06258aab72c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3805af3b-f0aa-4af1-a7bf-1fe70c2df670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e66b4c2-8a87-4cc4-a631-210a329eb826",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae352d1f-7e54-474f-a007-1b72063a6c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e21de773-e6cb-46b9-bcba-40d3de308b93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a227ca45-9107-4c4a-98b4-3ec62fb94ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f702cf0-95f6-40ab-8e91-3e912089e547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ca00f75-91b1-4878-bb4a-e2b58ec1b590",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90f3b314-f6d9-4cc4-97a7-b5b468779ed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aa393fc-3286-4016-8971-3ffe4cb23af4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c36d7dc-78af-4703-9e38-c1586f7cc487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5546e72-fa16-4f38-9969-9bc8a8702d9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9765692-ece4-4104-957e-e036e4fb5def",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f13b0612-ae38-4cfb-803b-2d5dc9b21779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13d6966c-7a73-42ff-9e16-f2fec9f79750"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83ff3047-038e-44f2-9aea-0999a004a048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b0abf92-1ae2-42a9-ba64-4351502d99f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e637bb82-0550-4539-aa1b-b9e181c5753e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db4b9d3e-1fe3-4d35-a455-bcab4669bb64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7b1b6ba-6300-41b9-93e1-9f1f50729139"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5c33f64-a208-476f-84b3-6faa39a116e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffc05c73-8c09-4eb3-9ffa-e1c611e55d35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "271285ba-fb36-4a7f-aef8-5b2fae9c9870",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb98fa9e-84a1-4398-8b4e-c105ddce690b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "718ce5d1-4880-4a18-ba2a-272d1076e4ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c28427f8-9002-41dc-9ad2-5b72fa5e9414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e672eefc-4f5e-442c-b055-4cb0745dfd85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a59c78de-c392-4e5a-94b5-65dd2b5a5282",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68080761-03b2-417f-919d-cf8f0e971d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7abfad05-b7ac-4b05-9ec1-fa830ac408bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66ded1aa-ac35-4f53-8773-47abdedf81f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "00c0d983-ac32-4388-931e-f72728bc4833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0937311e-9fc3-4681-8db8-ffc72992d986",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e9135fb-a555-4446-be6b-53c6536a788a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "949212bf-8e9d-42e9-8c17-2bb0a255397b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abee858a-373d-400d-ba7f-62cad1305aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65241b9b-a21d-4d04-826b-0da7d05ccbda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7edd052b-d63b-48b6-ba5d-3f937d6881a0",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf1fb62-5880-4df0-9f74-2564ec599e58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8fa3a81-1c73-4bab-aada-b426baaede75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5899a3d-e37d-4617-bdeb-cb742d52cd8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a59edfbd-2aa9-488e-994a-14a16f9972aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00d30add-c660-42cc-9074-47c84276d45a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0564d0da-d9aa-4586-a357-cdfcf7280974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a76bf7b-e80e-499d-a6a0-3cc4dd166a02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da70c8a4-d12a-4398-aaaf-00620e6625b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88a42328-1f22-448a-8936-044019666cc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff16f90d-55fc-47b6-af5f-de75959fbe15",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f88feb8-1217-4b09-8e5d-89c68beb6e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aff8aab3-635c-42ec-a413-8836742d7fa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "438a00d8-da7a-4296-a72f-1eb67a17fc9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "abac7323-26e2-42e9-a29b-121944535a98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfcea83c-fe1c-45fa-b301-c45572accc3f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff279d0-bb2e-442d-a364-4834717b7cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7af63d8d-5b43-4edc-b5ca-4011d8446c25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb155556-7a20-4f93-88b5-c4643b232532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4668a42-7e10-4a69-83a0-1a0139f10b6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60d34083-72a8-4779-abb1-cb48efd9132e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f19b1a48-7f62-45c6-8bfa-d93e7445203c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78a29140-baa5-4d96-9d7c-10e6fcd47390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce49c7da-c63e-4ac0-8eb2-27e91b03835d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38065c88-4f4b-4f83-a291-301ddc3d5a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3cd8b4f-86ee-4f30-8d43-e8739e300c1d",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96cdec26-2356-4d9e-adfa-9a358a289199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7faf34a0-7fcf-43b7-ae21-6f0ce8f18d69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fed5b53-6b8b-4dc2-86f8-adce80972836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "67d730ed-2e67-42cd-86b8-7e7e4c506a49"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "06079bdf-4dee-42bc-a448-c8248c0d0ca1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4767a8f2-eedb-4f38-a6d7-40639144e41d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d509ed-2cb7-45d3-b254-1e6b38d14ab0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "42275e23-ffb7-49df-a8ce-2ca421119b45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2cadac0-2d15-428c-b72a-588d0da9dd27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f387da0-e96d-4d50-bfab-04482624dec4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "952770d3-d11d-4a56-9648-222b46447e75",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f7414bc-b400-4a29-9d35-d8873e7861fd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a2b8b420-ea65-4b0c-b1ad-7991088bc8eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "13523132-941d-48d9-b919-2e6538ef0849"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f3d43888-1f67-4afa-a760-dcbb1da7775a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "480246cf-0509-488b-bc5c-d0b22504c01d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "01c35117-fcdf-4ce1-8956-99051079cef5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b3d4b349-1a5b-41d5-9656-eb55a9320a33"
            }
          }
        ]
      },
      {
        "id": "dcec714d-e103-462d-becd-e10834074743",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "b6b4dfb7-e712-4172-a1b0-a2b383be1356",
            "name": "Negative Testing",
            "item": [
              {
                "id": "60aac56e-8dbe-471a-9595-2df13e67085e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fc2511a8-91d2-4c62-9c19-64b246586cc0",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "890202d8-ae86-4811-a0c1-ac58bbf8c71b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeb0fea6-fcc8-4444-80c1-01e47ded4c6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76abadbf-0fca-45ce-be88-b8a74420a6a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6872a7f4-009d-4e1d-b72a-403012f700e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3d441b8-d73a-4f9e-93de-a5ac24c5b903",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d2aef0b-c6bf-4df4-9030-5681e1eab1eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd2bd100-61b9-48ac-b793-5538c919116a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a00c15-8231-4f84-9db2-b03391661a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd68b24e-f271-4dce-adff-22af7fd99252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43553964-baaf-44aa-87ac-4836ac19734f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df286fe3-f8bf-4312-bedf-04113753a61f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b3f11cb-2319-4620-9eba-bed4c703b2c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8485dbad-dc3b-470a-b796-0c08fa9a4604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "11ada58b-0da1-45c5-ae93-98a0d8c33c34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bbe6362-d353-4f11-af8d-45309103bbfb",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca62cd4d-9d82-4d41-9304-034b11a94b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07be2a42-3ded-4fb3-8390-f4694b234d4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f5be33a-8305-48e2-b3ba-20b6f156188c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7d72d80-417c-465c-84aa-8c765e5cb0c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d54db358-3bef-4647-8b37-736861e0fb3f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "682ff0c9-65a4-4e67-862f-de25e60e7a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0375edc2-fcef-4521-9296-9bff6a463892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fa9ad15-1775-48d7-aa63-e954255e0c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb03ae1e-f4de-440a-a75e-d8e11f267b02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "914c0b75-c874-4c83-af03-8c51574eab71",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5cd479d-1c68-402c-8968-43884e6933f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "325a5af0-7529-4c1f-9a6d-d4e24178745a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "136b04df-432d-468a-913c-268042487fa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e118ab50-9515-4b5a-a0d5-bedd19764ff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a6b977d-e526-434b-9956-8f45b11a4515",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b577eea1-fccc-4506-b1bc-afacacaa0583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8dccb77-8961-42ac-8804-dc5e01e685af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2f86d92-bf22-4479-9e8b-bf1a6d53b86f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e836615-523e-4c16-b22f-bfb16fd80067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d87350e-5145-4aa6-bcd2-abcb98876802",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e78eb56-c9c9-41ce-9af4-c0c0a313d651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e956c957-23d6-4d86-8dc0-823becf794fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21e3b6bd-75bd-4677-a114-b2b9a017ec6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "56044eff-7a95-4666-b501-cc0bd56ccc96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5467101c-e664-4ff9-8a05-777acf4efa2b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed14f9f-58f6-4343-8d98-8f3b9e071b6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce8eb9dc-6f50-4574-b909-dcdc1da86c66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54cfb9c7-3a42-40dd-b2f0-b68b4a4cd545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f412e54a-e33b-44fe-a6a4-832cdb8c5cc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac49edaf-3d0d-406d-a779-138f5e21c0cf",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5d5b08a-40d1-4836-99dd-faaa5ce59a50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "795a51a1-277b-41f6-8ec0-d8ee6b5e3e8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36abb854-87f4-41c1-9a69-4f8467f3157e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7ca99ff-5b1c-4321-9b24-de16bf3361d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb0476be-a855-4220-9d13-3c84d6a5d512",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad64b617-940a-406b-aeb3-80d7568bd39c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdfdefd7-4e62-40c2-8014-5523de9c9d2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3d62dbb-e8e1-4676-b44a-c4dd6a1ae9e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2229c136-bb04-414f-9991-0bd37302bd42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5da381b6-bc03-4dcc-a067-177454c3c56a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb66ebb-d4a6-40cb-a257-691b689fcc8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da3e21b2-adab-47d4-9358-e288ecd916bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a902ae5-b014-49a7-9cdd-0b45d7e75277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "412c64d4-bc74-4939-a893-759c3f3f5bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bf9512b-1952-4b8b-8138-9209bb385019",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fdd0e56-172f-4a88-8e91-86ef603fe306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f826702-c2ad-4fb3-9e47-90b1fa5d5a0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e6cd0d-e943-4336-bff0-7048a846b846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "929c763d-c41f-4215-b349-60c343a5c25b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39da7244-7af7-45b7-bbec-0c7117b5f827",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4ac2a37-8994-4153-8abd-6375e33d8cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a413e046-e2ec-4d8e-8dfc-6846c5b8a875"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab45a39e-6247-4df6-b043-19472328fa49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "63f35f93-53d2-48d0-9c27-5f577814bfb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26cdb2bd-3c7d-45f2-8b27-12e15ef56f19",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce0653ff-82b5-49cc-9d18-bd8766cffa74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deec8c94-7ce0-4c2e-8595-5242de2af495"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e8cae0d-77f0-45a3-acc9-81bc4009c169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0eb767a7-c4f2-4a51-9c67-7f70a8916696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5327bc32-0ea7-4296-8ada-b69b787b1c7e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89d5999f-307f-42b2-939a-46565ddb09b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9e7cbbf-e9fc-4018-afcc-d2c014e88492"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03a46039-6fd9-4b2e-bcfd-85569043ba5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "036d54eb-414d-4031-baf0-80f2845727ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e1981d5-f6bd-45af-af17-b733267a263a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d464f7b6-2987-4d19-a14b-c0f5aad93c93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2485cb40-3fb3-4057-bf94-d2c718a95ab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af49239-b803-4c41-a7ad-4fb5ccfbf929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ff6f1b0-64e1-49a2-ba0f-17e55d0c6f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f8c2e2-9bfb-4cf0-8dce-1afd566c0d29",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1357f60-6db4-41fe-93e4-0ca0d22f9feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33a6afb8-ecc8-4a48-9df5-d658a89febdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b61451d4-7799-45a8-9ce9-2ef32e349c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "af6bc9f3-75b5-46f1-b13e-f9ad705e260a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15100aa6-0fca-4c5d-806d-4b4aae76a4a2",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4090f468-7234-464e-863d-2d35b3ebc5c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "370e32bd-530d-401a-be0b-9102c93f1cbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "060fad5b-a30a-4d76-8c22-3024fdc8d0b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3d80340-35bb-465b-ae9e-04fed0ca3be2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da7e79b5-9a3b-498a-9c06-06343fabe241",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21213878-2993-4a0d-916a-3274c647b92f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a103a423-72e8-4766-99d2-2a1c0710ceca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d47d25b-39d3-48e3-9512-84b12a066ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78907e0d-4dd3-43cb-9aa1-f7f83459c64a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39e43927-64c6-4714-932b-12dbf48e0edd",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d0ccc3c-21cd-414c-9d4b-151356b61c40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6835edb1-3a26-43b4-a3ec-d86ba5a4f613"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4041eaee-b975-4c2a-b69c-ae361254befc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60e34f50-df54-4ff4-81fb-1ccd21153b62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a1279ad-b5ee-4c5e-84bd-e5c755adb853",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e774949-ad90-499b-add4-1f94ab902c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e35c3f1b-4ba6-4634-a9be-cf8d87b6ca1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee83e632-a788-4f14-82b7-e3c9aa35049e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7c1633a-ccaf-4109-93c9-017577987504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d360f94b-0ac3-4104-adbe-903d673acc14",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b13c1f86-b6a1-4e07-9889-c30e8e1fedb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "894e9f4b-41e4-4b9c-a377-851a583951c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c2dbd13-0978-4bae-971c-d902263c0f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13d6e721-5d2d-4ccd-b671-25eb69d66085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a8809a-5fa8-4065-a10b-c4263fbb8100",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6332010a-a8cc-4f20-b5bd-7a7cd8bd7c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64f37a8e-f43a-4681-a883-7cc3ca538b38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b3132a6-270c-4d41-b7ee-79612373e947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec8328b7-4c28-4021-be99-0374202ba29f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "167906b0-f306-458e-bd5f-097b0c918b28",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f082c0d-cacd-49ba-aaed-4a21df5473f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10f39fca-c731-498f-b2a4-69f04f1160d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a97baaa-0ce8-4cf0-91cd-6f6f77a141fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e3a098e-57e3-4951-b27d-362e0a7c2bdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12e76994-23ab-452e-9a5a-19d07c048a87",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ba0a99-b18e-4b13-b7ad-2473550954ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ecad9e8-31f5-4afa-b7b8-6c9e98f1aba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3963e6b2-a58e-4451-a915-a5df9edf1b93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c51b1ac4-7726-4d80-9d2e-ec31c4f119fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da2c3ae1-de88-410a-af1c-f580473deaa7",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac8c2918-7b7e-4dec-8ae5-95539464131a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3155013-bf19-4670-b2ef-83aed5a18fd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c840a67-69a0-4b66-a568-584bf262c596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7115568-120d-4d11-aa1b-f77763c265f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc6a8b1-03a8-438a-ab5b-c6434eae5f83",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0afb6a6-5a5a-46d5-9c3c-cd43fb0e6fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bce926a-135c-4943-9a06-573b75e9379a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6282958b-72b5-4660-8817-162fba73048c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "22ef0e35-c62c-43a7-85c8-09501a3186d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a23c6c95-7d48-4d8a-a8dc-3ad039938172",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad354cc-c7ee-4581-b869-067cab38effe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51ef3e1a-20fb-405d-8001-5cd8a03eb6fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5aea873-f0d0-427e-a543-9eccc1567deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80d1a170-a4c2-4fe8-80bf-a27d8922b5fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a186b167-6d03-4d7b-aaf2-607336745bc6",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97aa6475-c06d-436f-bf85-1fd76bb58dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "399066cb-45cd-4987-8a8f-f8a16194176b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a083077-149e-4f51-b6ed-cabbeb6abb62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9284387-e988-431e-a6bc-f1b82c2edf84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c0083be-0d42-4435-aa70-c4c0e2a1b035",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62a0fd30-d735-4c5b-a09a-a3f7edbbbe33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "181b4043-5bd8-4c37-9a80-4f739a57a188"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d7bdc40-f3cf-4d1f-9e65-791c3d4727bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "074c954f-206c-46d0-adcc-1b53cf466e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a28c9443-3ac5-4f5b-bae5-06346b950577",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efe8b435-fa6d-4cda-b463-0674c8e5a9db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e8293a4-b20c-47ab-86bd-b16dfa59088a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2463e17a-3e10-458e-b504-898a81799ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33c1e615-3186-48bb-8018-07ede22726de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52a95f35-c786-4cdf-b13b-d6ece8e978a6",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf8ac6a0-5405-40f9-8ea1-91e47aaa087d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99f0d33e-dfef-4847-8692-93c0bf8bd5ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b952369-0504-488d-8b4d-8f61614a41e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28255a67-c576-4390-aa03-ebe78d1772b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be643292-6b4d-4925-a72c-25ac1bacbb51",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dee324a-2a23-434c-b7c9-131977392e91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f231e8d-82a1-4ed3-a291-064b045ab04b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5fe369d-c751-4dc8-a48e-57ed83253966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36fd406f-273f-4ade-b3aa-0efaf9f315ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99ff144e-8ccc-4edf-9272-0d5543ef96e2",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06945809-9ff8-4ca1-a7d4-b0c83088cfe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fbc10ff-66e6-4c71-8418-165919d4354e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "328146a7-9ef3-4243-b16e-d0ea9cf7e383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7baf836-6449-4e3a-94dd-1845af334c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffbed68a-4941-47eb-8afc-62b79bc320e9",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad31b354-2ba3-42ee-8c2b-ab18728fdcf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a5d618e-90d5-4ecb-b46c-5e129750b327"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd2188c-8a29-4650-b41d-cc960458212b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7eb73e5f-ac1c-4e7d-98ff-535f03978acd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74ea23cc-9982-470c-a0b6-20f59ee0212d",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf0ef0ef-f5d5-4a27-9d79-a46570368aa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1d0bb12-e851-487e-999b-dc3f1f83f1db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07f338c0-1c48-4bbd-a943-96f67926d643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8505d279-f4aa-46b6-913c-907548960a19"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d1b95a04-1e95-46a2-8a96-f3f6acbb9934",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d7d02508-c17c-4afe-86fe-d115e632f0d6",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bb635b8-30c4-47af-a4d1-0d53b3c045b7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9b236c3f-1683-46d6-9a4a-75202b31bf29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "587db9c0-e4e1-41a7-a832-f76045d59865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aab1a0c6-bec7-4945-9a77-9637dd550d53"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21cfbd34-efae-4fa0-aafe-d7997a412f51",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da33b2ad-f474-4500-a645-c4df30370c77"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9dcf11fd-0e59-4709-b5c0-589d84adaddd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "58b762a0-7fd7-4199-b520-f69aabac353b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c91327b4-08e6-4e77-97f1-d7416fc1f770",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "065ae6f3-bcef-4454-984c-a2b0dad3825a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ecbc63ee-0b77-4d2a-977f-62dfb1c5f044",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f22dfa32-c385-4c27-9404-bc19b550b179"
            }
          }
        ]
      },
      {
        "id": "4c4dfc7b-36e0-42bf-a27f-f98bb7d2c1de",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "58b0f7f9-0684-4ee7-87d2-1aa04dbfebbe",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3f4e9d29-1fbf-45fd-ac53-9179c423f9a6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9fd60088-2c20-4730-b54b-7b63a1fe6991",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "888e4b32-ec37-4d38-84c2-fb6493f74f59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77846f3c-f7ae-4e61-88ef-9f807d4dd4eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aebe57c3-7006-48a4-ae49-b7651101103d",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c85218c7-9290-4938-b247-3d2b3bcda2c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feaa94fa-9f4d-4ed3-b5b5-40fd145c3d42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc88eaf2-40cf-4c76-9377-d317115f4652",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32b6533c-44fe-4438-8fec-135ca9bc034e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b40b1045-5db7-43b6-9f29-eb77fb7171f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e0221a5-c3b1-4ac4-a15a-139e42085c09",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "249568b2-e780-417e-b10b-77ff75fa4cd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "720190c4-e106-4e08-bae5-5cc4e2a85b9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d731a7c8-7a09-489b-97b2-d1ebaab8ec50",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0c27fe-163b-4544-9d15-f7657900aba7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f12370d4-e275-415c-8e60-07e1650d0457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a737556-6c9b-4603-8830-0e91f2b3d9cd",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "225a91c0-9d1f-4abf-be76-33afc0ded1c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df9f3523-e5b5-4493-9504-1736420a53b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9454297-9a8f-4fc8-9703-9077e75b9c5c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d36d26f-f339-4f1c-b064-ba6495a7048e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "270a7d22-e6f0-4cef-b385-e23f930a30bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dea653a1-8ceb-4690-825d-22a91eb4f3c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "297cca30-398c-4f48-9752-fe820184fd3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f562ab0-d69a-49d4-86a3-7bc23631fb69",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ecc96ff-df4d-4785-ad43-e0dfdea1f23a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82c1691e-267e-4bcb-aae0-3f7b7dda0ab2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4ddd403-43a1-45db-9b8a-cc28fb893508",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a193e022-026a-498a-8f98-c35a21ddd817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f036e486-7e83-42d4-88cb-343ce249c274",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20be0fc2-aaa8-4dfa-9859-751a50563aea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71ad34bc-294d-4468-91ba-7cd22c18740d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8a479e1-f872-42a7-924d-7123e2d9f7fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e65fa8e2-f305-4fdd-b44d-f95876d7c34d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35508f69-c7de-4e1b-998f-aa02423ba0a1",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ddedfc2-b069-4edc-a309-5e3b3d4f830a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdfeb612-b8fa-439d-aa20-968dcc686a69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fce0044-4c49-4fc9-9ad8-7b237d3f6c13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aeef4ec-35bf-4d1e-aa6c-5dab2f1c42e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76867862-47ac-4587-9eb0-23ee2d23588f",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2109967c-1140-4f67-9977-3413dd175fb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11dcf858-34ec-4ea1-bee0-23c2b9cc0529"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9df1f167-1a54-45b4-b381-59393e58159b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "def0a7e2-6476-4f4e-83bf-dca0cf7b9d27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2144c264-b733-410d-8f6f-f6701b5ac41b",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e936d15-b024-4030-9645-b7f23376e390",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47572d74-606f-4888-a055-6391b546d218"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d016b65-c9f9-4a2a-b75a-42ccea8832dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34e15452-6042-4d16-82c3-976d1972c97f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "203217f3-492c-41d4-a952-977d6e35f115",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42c14fa8-78a0-4cf7-a0db-f14f5ba69942",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edaccd94-7cb4-448d-8200-f13ab51bf257"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9a47b3e-f46c-4fc3-b319-ed1a516668ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "453d07ed-82a0-4391-9363-0b09fdaad122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c35230f-4db1-487e-97bb-82fef487c74a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a5e8102-295d-4fa2-baed-2c32a0318956",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f045e748-00d5-4f8d-8bf7-a3aed1d95c74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96364ba6-be22-4fea-aff1-e00649302042",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3077b48-e666-4290-a2e6-aabcc62997d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cfb6745-3351-46df-9c8f-89cc7288c8ab",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63bd5ac8-94e0-42b2-868b-f4c41bdc73d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "859c57bf-4881-4283-bda0-5ddced5fd4a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d187356f-bd3c-4ff3-b6ed-11109fa0111d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "637cb000-4ea7-45aa-8355-7cc6bcba751e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a6c1c98-a49f-4221-b4f1-d0d524287c11",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0afd0b1-0d9d-487a-b00f-038a8381a819",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9194ab25-26e6-4c19-86f2-07cce27b75c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "893b28ea-2028-4d42-9358-1e1cf9947852",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe427af6-cdee-46d6-ab7e-619b3d014e43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b82f72cf-c394-4c06-bced-5b15e49e86eb",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e64cc71-ae57-4d76-b54e-6f8746857b77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f864072d-e146-42bf-b600-522c18aa15d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60732488-66cc-4e7f-9e5d-5e14b0a130ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d8921e4-b5f1-4a8a-a484-19f642e5feb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcf970cb-b291-44f3-8102-3ddfcbcda8ff",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c4bc4bc-f720-45a2-a03b-9c5556ea1090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92de3aeb-0c47-4cc9-8082-d62f6ce5df88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f01d88f1-68bd-428b-b6a7-84a32bb10d7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbf944b9-af17-4b43-80f6-f351311ed349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c5c850-6539-40d1-a64f-1e237dfad2ef",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f060eda-2789-4596-a8ec-4887a4fd0074",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "882aae9e-cdce-4841-871b-917cced1898c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4660a73-961d-4743-870e-eaf8b7918543",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68042bde-ef0e-43a4-9813-93032833e890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db008f87-80ad-4b0a-a462-4711b51f5de8",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "167f6d97-bb2f-441f-946c-0f2b84ab790a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3f9ce67-85b5-4005-b32d-b3a0a2e49302"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdba60ca-716e-422f-819f-82f12a75c87e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c578b692-268c-45fe-a5c3-446208053d15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d460c76-5be1-4557-8718-d1df559bb944",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46040637-a4d3-4dc9-a287-cbcea841ec83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddd936c1-73a1-4a93-9007-e64fd0989332"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0653245-288b-46d6-a543-4dde2e4a3446",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83085947-a47c-4307-aa7c-f2b72c4b4ff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed900bcd-2bba-44a4-ad4f-9cb7bca0e6af",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99358073-c7a0-4475-8c2b-622f140c86fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d40716f-8b1e-40fc-8562-04d5e64c4773"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a637834b-31c4-47c3-90bb-471b8f5cb46d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01eb2680-cc76-4163-9c68-07cbcb214229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a244ab5-91ba-481a-bd5a-c7156af13fab",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a4eba4f-e121-4af7-ae47-5026106ac46c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fcca997-e0d2-4967-9ffd-71a2cbd651c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "426cb203-c7d1-417f-942f-1c16037aa289",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0b8649d-93d9-4203-8fa3-e1a205703fbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f477344-cd3f-4083-bace-8cbbf9c4d631",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8ca1e06-89af-42c6-9713-329e219abd87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7ea75c3-20d8-49e7-9f17-1a0854820166"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f153db72-697d-4598-a6bf-e3a4419239d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a0900b7-969c-444d-a9a0-2d7cd64beaf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57dc7756-a8d1-4e0f-8978-2a30af2943dd",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12d3d9a6-16df-4ac7-baba-c055c76fd386",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bb406fa-cb0e-4354-bcf6-75cc618cbbe8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76b256d4-2c91-439d-a605-cd797d168de6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bbc5130-9392-4984-b3c0-0c5dea082558"
                        }
                      }
                    ]
                  },
                  {
                    "id": "902d067a-0da2-41b8-8408-21cbd58e66f2",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6331caf-2ae9-4f18-9032-7fb0f6ccfeed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e21b180a-26f6-4737-9505-fa7939271636"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d79e7f61-f0d7-4e56-b7b5-91c36569d482",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f0e643d-02ca-4148-a84c-9c3cca8a5cab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec7bc6b8-c535-46e8-8b29-08d768ee3740",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acb07e97-6fd3-4ec2-bebe-60c37e69fa07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9442d9c9-10ba-4cf3-8f85-6ede867e0c60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfed83e6-183b-4554-af5b-3efda63c055f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c2c79d2-7557-4e93-8cf6-a4708498a191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f9e593e-df19-4dbd-9f9d-5dc8633a5401",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01a248c2-54c4-4ee5-a334-9349c0a8b29b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a4350f5-d0cd-4cb8-8663-5f3a747bc955"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efb7bc65-88aa-41ff-b21b-ba2dfe7c44fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3a9f50c-182a-4131-8e59-c1519f167db8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66055965-83a2-48f8-b78c-b1e58bd9c6cf",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fdfefde-2f40-4f2d-9208-a57e43c084aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e300f7c-dd49-41bc-9a5b-3aa869ee35b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb638676-7c11-44e6-891f-7ddfbb26f78c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "985f2a67-3838-4711-8a7c-6f8156704253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1167f871-da4c-43d8-9ca6-07dafa61223f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a972fba7-f82b-4f0c-b058-fb23e7a8a612",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6dbb9be2-f6ba-4a59-ba22-40871e043d54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d896b99-0e37-497d-9997-609595a2c3b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b617ef0-24b6-4d2a-9140-ef9d901fdd5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba36f938-d38e-4ba4-b7dd-a281b8ba80d4",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16d2ac10-9423-431c-911e-cec03784ec79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f18f3183-4c6e-46ca-85de-5fd8a6ba91f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14d6b2c7-f3f6-467c-879f-3b439045cca3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88c1d126-7060-4e89-ba1c-e121890759a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "107e7548-5168-44e2-8755-79b3b81ee74a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b919096d-a7d5-4862-b0e3-883792f087e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f8ea6cb-ebbc-438d-a082-711e3c724516"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abdaaf06-91f9-4ca2-aa6b-01769f05840d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4ebd6cf-999b-46ad-b504-cdaa67f8c6c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f73cb196-4c24-4db6-b467-5ea11cd925f1",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1487483e-81e3-4564-ba0b-bd604206b6e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8eb34a7b-38c8-4a56-b86c-99f4d4304393"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02485fe2-2890-40c9-8423-a4ab6fb0f759",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8e741a0-9072-4086-85b0-c5cc3be37375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26034147-cdf1-48c5-af4d-f8aab6b6a539",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43fd6316-1734-413e-8b46-27cf0f869d0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ea5e86a-7032-4a43-87d3-ad9125475b64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a389dc7-c392-4001-a201-6239de270b76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9cbe1fa-8174-4bdf-b06a-85dc7a5af44a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca20c640-2050-4cad-8388-1c99db0c55ca",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eec23c2-3f87-46bb-9bfe-8d85dd82bae9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fb85c61-32be-4859-a10d-70958f6a57c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f40597-c79b-417a-bea7-2045ea8c4ff1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ad7d159-1c38-4650-ad7a-50e2f862b4b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a30aa8-f2d4-4f99-a622-d7fe8b932da2",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e61c25-58a0-40dd-a196-72ada8d0c216",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9da8101-f71f-419a-ad44-a2aa0f36ee1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "141bc544-8006-44d8-97f0-4be52be62c5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4579c726-e163-4801-823a-b2c8e18c6448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b3af823-2dc5-49d4-bd17-5c3b682e0baa",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e00976a1-44d6-44c6-a352-9b7743ba7e18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc6c3c18-4731-4169-9810-1405b2e6ac9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e67fb10d-e22c-438f-9ef9-1785491bbdae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "390b7f1c-b55b-4d47-87b2-51813d898271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caa80be4-6d54-4f9c-b2ab-d78660bb9e92",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "026ae1d8-452d-4b8e-bf58-db6e11beb1ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ba72ab9-567e-4b79-891d-e54ddc97ebc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6a3f451-1d45-40ea-abb9-b7f4fa00b89a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "028bb584-ed34-47de-9efa-d1f15c808b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdbd6600-be20-4472-9aad-96b1ba9649f3",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e104765-0132-4205-8df6-8076cdf43557",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f914fac-74c2-4244-89a6-2bee0661bd32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e4374dc-60c4-4eb9-8f8d-1c47eb68928e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "229aefa9-752e-4b90-96bf-ae6038bb7194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb58b1a1-c5d8-4dec-9fe7-eae8fd9a84de",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55469a62-0c52-4f4b-9b50-d4f28fb6aa64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9098795-e162-4c3c-9ac9-adcc154a13a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d54800f6-7963-47d6-bfe1-c2d78a8dee74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "967d669b-62c0-426e-a251-23f5285c68d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5185751-6571-4497-9e13-bda6eb044658",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a9192b5-eecc-4b59-b14d-88300781a10e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63817ea2-d535-44e9-a17d-6f8f60b606e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "748b955d-dba5-4335-87a0-fe497c623c39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6089ced-f761-43b4-8402-550aa1e99fa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0156f5ca-dbd2-44cc-8979-5caf75f95ff7",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d671755-f722-4b97-a4ad-ce4d350934e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aaa3164-43c1-4359-b2e4-fa6092a4a6d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88899592-0ce0-41d1-b6f9-575fec8ac91a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2602b14-7387-41f0-9972-796af1bb3747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdbd9835-a73d-4a28-abf9-53089521a4eb",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4752dcc0-e452-4c71-8f09-e24055ff2969",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71c11cf1-2543-4d93-9d6b-47b6e50eb356"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb9334dc-9f58-419a-8cac-b79712b2a161",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aac3ea5c-c541-477f-bb41-10403fd910ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de53c571-a2a6-4582-8668-6739ec8a46a0",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41ce226c-5779-419e-853f-36f27b7e4d10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f524b9d2-c5df-4b45-a796-28bdae3ac559"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e90de9b7-737f-45ad-8712-c3c7b9923149",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f32845dd-e320-4e6b-bd5c-0c2479d33d1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd75a4dd-06af-4ec9-a678-986fab7b161c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bd2b351-3a15-4edc-9e2f-00700069ab3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c8dcf1b-903d-4d79-a50f-b6d397e1b3dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88ee58ed-eea2-4882-8e3e-066c65cd87da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e17625c0-c825-4a58-82f0-4cfda180ec15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ddeea22-1363-4e40-b7a3-45f2ac254dc3",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a78c43d9-64b8-4c2b-9ced-9aa9226d8322",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b98533e-7472-4a89-8fe4-47f157205fcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7604948d-fb92-4c64-b399-48210ef4c60a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5258d5d-9a5a-4ded-9805-97c93947f402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a300ae3-e2bb-46b3-9a7e-ef70d1dcf586",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eed59d7-39f7-4092-8258-ad4d03329839",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a482593-0516-4e79-bf68-17b6a437a0b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f13b4f8-b181-429d-89a2-51dfb191b088",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7f4f225-a92e-4e73-9e23-432c9a234735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57208260-1865-4798-8b5d-580b40310e56",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d0343ed-23c9-4275-a450-803a7e01207d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9d1a97e-fd10-4df0-b557-661114975b9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b4fc736-7568-4508-b597-863dfe61440d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43c97eba-5ceb-4363-82b9-a676b50212eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80247991-a788-44e4-a5f1-670cba9423fc",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fda32304-e511-46f4-a033-c70f90620e8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8194972e-888e-4ea6-a9ea-19cc5fe66d2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9afaee0b-d469-4f9c-a369-27e022be614b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea506010-e5e3-4aeb-bfbc-b9fbb3118180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d224dc-e0b7-43d3-ae06-88a199c5102c",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57263214-97b1-4059-9c3a-77d59f65392b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0776bdf4-a0d1-4f6c-97b8-c1fa7938dab1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12a9a763-8621-4137-be49-854b6229327a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd494aad-0d1c-4822-8f54-c4131aee9fdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbecc6f0-4562-4201-b4d3-6be64a326f50",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0b8c4e0-acf3-445e-818f-eabaf1db1bcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34c38589-d96c-42aa-adef-f0fea6c2a577"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1c3124-033a-4432-8d41-99d82017d567",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d51c8f8-be62-421c-accc-4d97d0cd13a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c86049c9-5a44-4366-b2fc-4542e6005594",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "528652df-e05b-4ad0-af7c-d51565f0a693",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f890a6ee-bb24-47be-a2e6-89db158beb2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c796b09b-405f-4fa8-b8e6-ca7c17270e63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1213698f-3f88-4ae6-9a4d-c9b960f137ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dab1dbb-956a-4bf9-915a-5c15506365fa",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df2120ca-c50e-4d81-92c2-2309872d8573",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5120c88c-9c00-4bd2-a5cb-e24d8a8ac58b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e73e755-27f2-4763-8b06-0924fa040b37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fdd4111-3bcc-4654-9ea9-f6b98d7b8166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70ef30cb-950a-4a19-8587-9e68a4cf687b",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea7b979a-9f59-4faf-adf8-d9e0ef0ebd86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9acc4528-0766-4ef8-ba5c-86c7ab4840e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1daf412-8887-4eaa-99e3-43047243b2a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d0da9d3-0e79-4e7e-988d-10a473524c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f5d139e-4d1a-4b2e-b6c9-e27ca0ba58dd",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c2a03a7-7bd2-40a8-8f72-041361426e9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50ede919-abc4-4d06-9880-aa9f6cdc4b07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6a0bb38-7a84-42be-9388-775b8d8b9797",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "405fd7bc-2997-435b-8d2b-f13cd4802f91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11aa3d79-55fe-4594-b558-3ad0c6e68a3e",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "811216ec-b840-4a2c-81f3-d795000eb3a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e9fe96f-2e84-4769-bd8a-fbb515052c82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30b80857-4c8b-4fbe-ad45-890170eccd2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51db6426-a27a-4057-b4a6-e770a09fa929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "731e772d-f400-4049-a568-4c1cb42c983a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92d5f67b-6a2e-4638-9810-75bf7ca51953",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bc7b283-a615-4fa6-93cb-f54a5670e66f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc8aa3ff-39e1-421c-9484-cd719b8d8353",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b0adfba-4523-4650-9523-5c48c8066c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dea26619-a163-4c56-ac84-fb108e670ceb",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdb0e55f-6960-49f6-ab75-373c8e1323fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b1f0b33-b05a-486c-82b9-d241f4158740"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec18d661-5677-4654-87d2-f9cdf86fda52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e558884a-a14a-48df-8166-2beea582ade3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b13c0b81-c176-4730-a132-cc858436d930",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3049573-79c7-429c-8ff4-333f89a55ae8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f455c1b-b5f9-4bba-99c9-29f179ec17ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b00223d-0ce0-4ac9-84fa-f1bb90f0b028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "310223bd-f3c7-4772-8269-8c7ef6677781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3141722c-940c-46b3-94c7-4d1f3f57fbb9",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b1d9634-87a8-425c-9897-451c20c520f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe2d1019-40b7-4cde-9797-a832f5acba5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d3e880-e3dd-47bf-b45d-5808abf3ad4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5051cd96-0e7e-43de-902d-2185a3caa7b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5deef15-ffa2-4628-813a-14019a6015f1",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb8ce03a-8a33-43ac-a22a-2b0a3fece296",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61232d39-3db9-4740-bcfa-2ea35ba5a8a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71c03740-0058-44e3-8e55-ce0ad55a5baf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f791bfdc-0212-4391-9130-8363691907b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeccd875-69cc-451e-9e67-48311e332cd2",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d13c6679-309d-4cdd-ab59-e0b5d8108abd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee687432-e3fd-4ccb-990d-8ffff1db96c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52293d15-4622-4875-ad84-82522b482c6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2924fa97-eedf-4abd-b989-449c711c75c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d2757d6-d1c9-4c04-8fec-73241954448d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f97c186-438c-4924-87a3-0351a4066283",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "765848c2-e7e0-4a06-b06d-50d132a2afb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c2ee20c-8c7b-47b4-9240-9f3e6be70592",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48765694-0522-4f5b-95ce-76cac54ae54b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "064d076c-2feb-41bd-ad69-e2c88fbee515",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3024707b-9a1a-4e1d-b9e9-a6a2f57b918b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1d0e06c-1f91-400a-875f-97887f066817"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afa604cb-b3bb-4f0a-8f24-9809ce6cedc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4091ee8c-f87f-497c-aedf-ceb281ee8c27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6c62fd6-7f35-48a4-aee0-3112b077b3b4",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "043c4a06-60a8-4e7f-9900-77817b78edb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17b150e6-50ab-44e4-bdce-85a99f73a56b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e07c6d56-e39a-400b-94fb-799b08407455",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d10f7be4-482e-47d8-96a5-4e4698914065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7769c4b3-960e-402e-a2b1-d44040749d30",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13fa5f24-b266-4e46-acf7-251f57457afc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dd6e6a3-2a38-4fa2-b571-34cd3661f02a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a837601-ce9f-4b10-a8f6-32db6c9cc866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a53aa627-3bd6-4995-b52e-ec7ef3df63c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57ab2546-f6d1-4291-96f2-ab27fa705150",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09ae1ae6-470e-4346-97d0-d719c9daac06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2896682-9750-4082-8828-e341deb20346"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b137c4b9-7418-4997-8d0d-8f8954550f10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a791f5b-b179-4378-b962-a9ad6ef295da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6eec691-2290-4315-b0ba-d23517f50c77",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ad7daf-718c-4e54-ba6d-416ca741e82a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82f2f3e3-7eeb-4156-ad79-2349baa8cdf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9fa5843-c662-4908-8e63-f8a10685dca6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b014e870-7cfe-429e-b929-d0d071573038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33dcd140-3308-4f33-afec-7e359957b393",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c65d5914-f2e3-4381-9b32-992f7937f9b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32a7b12f-aae8-41a5-9cc7-9541b64d4591"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92e81da0-0dfd-4822-aceb-39eaadc462e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69fe10ba-0da1-49d0-97d3-340b63ed1e48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a51eea2-0602-4e3b-bde8-97b0354ce895",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d820d3c5-7a71-414f-a267-301c81721ebf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b432106-1f74-4a06-ab8a-f0b33d05d5fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42b4b13f-05fd-4761-8933-1ef9c6661c3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7f5c94c-fb99-4d54-9a96-8b0e8c0ca428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a458df6-7782-4d7b-856a-95e8548072d9",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7028f39-b4e6-495d-8aaa-5a5ae5a07b9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e88bd86-dbdb-4e5a-8582-4e9a6b8cd879"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a13b26-bf4c-4dec-86eb-f2a696c7d59e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d5573e8-3310-4f85-9e57-acde9c594069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "699810ce-c3f9-4574-aa41-a7efba718ed5",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a53d24b-b551-49c0-8e5c-623220f91a35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e660aa5e-80f4-4192-bd9d-590f9dd4ac40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08cd61fe-d33d-48d3-af27-d06f6f5f774a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "722dd23b-74d3-414a-ab6c-14427debcba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0129a911-1ee5-4434-87a8-6cb52f8c1b60",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb5bd20b-cbcb-49b6-be3a-007173f61353",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa1a4f3b-fe73-460e-a0f1-9c9a9f3083e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "458f4a7f-4aa8-4933-9162-d9aa7588d292",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a92dc80d-0099-43c1-b4c3-3ca5e6e54366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6155c7c6-8dff-4aa5-b288-47403aabefe0",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25499bf9-52cc-413f-94c1-dcff5e691996",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f600226b-aa5b-4d9f-8d8a-0355730c782f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f311efb3-0397-4189-92fa-bf77b0c206b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9f058ac-991c-43b4-b750-1108b2bbc004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c65e3f3f-5d12-4b63-8321-4bfbfea072c6",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c6cfdc-9d06-4db7-b732-388252d8e1ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7ffce61-b454-4b16-ab11-45ffe7df430d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93ff45e6-33df-48cc-a133-9bc62c2a0986",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd2b5997-da6b-405f-ac5e-8af8433f3c04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03f39692-8061-4f6a-bd5f-4911a7ead164",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f74ae831-ed7d-4a3f-b3af-100af7184560",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21612ebd-4f1b-4a75-b805-4541a85d529e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cde3a96-46ee-4f74-aea1-a37e55d3f2f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d694340-1830-4f63-8227-20d1b9fa42bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b2b629c-ffc8-4103-8b43-bda12c8c74e0",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3bb7767-504a-41e9-aa6a-9b57aeb6a4be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb3bd6e4-2185-4977-b30e-04c6854d5ead"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54618b7f-588b-497f-914b-8030dae8cc91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "933614be-1608-4375-8c90-d20b2b74a8e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1101e974-c286-4a54-bedb-65e530a22e36",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb3ae14-394b-41b2-8bc0-591f94615fde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7115db2-4621-4c6e-af05-998d95482a2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ec94b59-c516-4365-a946-b57049bb97e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21016189-a457-4548-bb1c-da60a17919f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f2cfe21-c8a0-4bcc-a873-ba3efab294e9",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0880a377-7c0a-4ecc-a268-7eb990815e06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87182b1a-8c62-4d62-9a46-af9e3d4da835"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "181f3b40-eceb-40ae-b0ef-49e887f98bfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca1b989f-01dd-4ba4-b1f3-0dcd331eab1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb4a6c4b-6dd5-4df0-9c68-c3bc4dafa724",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a450bc-229a-4525-b9e8-317f642f4e3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "564cd373-b41f-45fe-b620-4a4bb9517e49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d41df43-5e3e-4377-82fc-90c6640a6e78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f697093-9828-4801-957f-977109b89690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2f541f6-07b4-4849-851d-b4148d006317",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e6fcef-e4e3-4afd-8c48-96e1bde72a04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6406a439-08be-4e06-94f4-4c936cf71eb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abdb8528-6dff-4bc4-af46-365fa68c4ce8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb4d09a3-d889-4756-b15f-71091b742898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "706d9839-da3f-40d5-bf3f-5396b9b64e2e",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4aed175-449d-46db-9ef8-798483c5ae52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db9d7380-969d-4311-8e10-1a3617b24ff8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82fe28c3-6936-45b2-b077-f0366663089d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fce86df9-2526-4a14-b2ea-9ce7a7c96e7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d13236fc-7663-4c6c-8e23-2b1bf145b20b",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f050fc25-fa1c-4cc8-b1a8-15bd0c63d197",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbf7c710-968a-43e1-abb7-235a88da87f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2819ba72-d06a-4970-a774-e4f81234f025",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc98a2ec-31c4-43fc-a93b-397e8daa0161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3533f10c-ac43-4364-a832-5db362a0cc5f",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4319c79f-b38e-43cb-aa35-0dcf81350ef5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58a91185-0c6b-430c-984e-6a2f8148479d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c935600-5416-4716-9dd3-12ce822fc0d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82605ed1-4774-459d-b4c2-63fedea36984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c07bb4dd-851c-4e0c-a763-13cdfb2603a9",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab539bd-2c50-4999-bcc2-ace101a92baa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "443acab6-5a16-4114-b0c0-cc1710c0c27a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c932d7b3-fd40-4ee2-b8b9-d5da434d4d89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c1eb587-8784-40de-80c7-a487686a4f77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eef1541e-6a53-498e-aa4e-653d6c000d72",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a695ecb9-e6cb-4c0d-928c-68ecff3734b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "145e24c7-c00a-49fa-98c6-3bc156c1ec36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25b2a1fb-d7f7-44dc-8a18-fdcdd6618181",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3303a5d-f8e2-43d7-bef0-044be8d38308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "652d19cf-0b33-4289-bee4-5ae4d5861040",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa997467-5b9b-4bdc-9856-94527e12afd7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ce7e895-7e21-4426-b1f0-fd06980c5b66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53705c13-6d00-4a69-a287-3c6ad9c0a60a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a8e50ef-f5d7-42e2-8a59-b689a8d72f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce9c9b7c-e6fa-4f9c-b3f6-4bd82fa72e43",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8158fb84-359a-4550-9fb2-3cd2980e24e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6dea0fb-7d71-4f0a-a26e-deb251639a3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11ec3d07-0ba8-455f-89b0-e7ecd8b83f6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54b69c5c-c990-4f6e-b60f-8f14c51eba3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb2ef3fe-4a84-48f2-9a64-c4fe4a534b1b",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3853417e-5af0-45b2-8ef7-2ba7ac80f878",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c1e3261-2ca4-4b5a-baec-e5d1b03291c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef0b31fb-812e-4d21-81fc-6b514b84632f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "581a6ce6-d0b2-44e6-a93f-e80847c3d597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e10fb64-3cc0-4e9e-81b2-4621ed12ae32",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e802310-09fb-45f0-b8e6-424ffb3bcd6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "629c7787-30b4-4bf5-b9d2-04d1a06bb804"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef907aa3-7364-4955-baff-ef132a90aa5c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e458e854-1309-48aa-b783-7fc821be923f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8854fa7d-ff5f-4577-adc9-d4171afceac1",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd2d4631-eebe-4074-a9b6-57872a336d00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8e601ae-a648-4bda-be67-d43913c36829"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "923ea589-704e-427b-9565-27769b588a94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ab32bf9-86a2-49c6-ac19-5d1fe30a11d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d2d9f1-e937-4e77-9265-7ef8d2815a28",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff325a06-5133-455f-9a71-ff38ed78f1ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abc96504-b92b-49cd-bb46-2b762c786e6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdcb7517-c2a4-4313-baa8-b666fbf2be78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c14dce0-f7ad-41e7-9aed-d45251567fa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "569389ec-8667-470b-a645-5f24b5ce22eb",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68021583-9133-40a2-884d-df2479f40c1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fc45ed2-28e7-429a-8b20-a75fffab372a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d06c6220-9ae9-4063-b5f1-b0838f17d617",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb61315a-e0b4-4159-a48c-99e773d19946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58aa1399-6b62-4640-a5a6-34483b05f79c",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af6f613-f6c3-4a8f-991e-40ce35320106",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "135f0012-f519-43bc-9054-fc59cd3ddee0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a3ad2be-e507-43cc-a295-2c491b185907",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12665deb-acd0-452d-9421-f6cfa1f13feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13f735ce-a0c1-4023-8874-9763e5f370c0",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a433caf5-fa8e-47e6-a937-772fe92517a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "206e7f79-1a69-4728-b4b7-d629bdc7de09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cdd4b84-5a99-4137-95eb-1d59af43ddac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f21a7d6e-ef1e-4d57-a356-a1f904252629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8e95dd8-a3b7-4f5e-adda-e287a58aff76",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fdcfa8b-45ce-4aa9-8be5-f844723a5304",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ac636fa-4b59-4784-b2b5-0a2d8ef61b57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16eda79a-24e1-4b3d-9055-a73f155abbae",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7edb03b-798f-4664-b4b8-7f9ba98666fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e4952b6-88da-41f3-9b7c-da904c4b260e",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e97a8f45-69e9-47e0-ba1c-d197899fb1e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fd57d17-2390-4708-becb-75d2eb447654"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a6bce2-3d83-415f-992a-fb4ca8bba3c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4e2716a-82f9-468c-9378-3db94ed3bac3"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e0f1f7f4-5da9-4951-8aab-be626fbc7bc2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d69ae52-11e2-46c1-a8eb-5dfdf604a189"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "17e89e4d-b70b-4981-85f4-118e76d129ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f71f07f7-3c10-4acf-b7b0-90a704d3a111"
                    }
                  }
                ]
              },
              {
                "id": "359b21fb-8feb-4f95-9978-e6951137def4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2075d10d-95f1-475a-baa5-b22e7d685fbc",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b3441ba-427e-42e6-b939-62590f8267e5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "cd94f8bb-3db8-4b15-9675-7c07c27124ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0db00f9-6f42-46e3-8602-3e4fc776602f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5890c22b-7748-4db3-870e-8e641724fc79"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "76048c52-3d2b-452e-bd60-36949362f4ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62503990-88d7-4ee5-9a43-17c03c7c3a44"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "da9f0719-0c0f-4ace-bdb5-67736b5872f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da5678f3-14f0-4583-b06c-59e356e32e7f"
                    }
                  }
                ]
              },
              {
                "id": "67668c54-02be-4960-9c4d-a7818cd5a6ad",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6d39e8f0-fd8a-4a8d-b33f-27a2c3537ef2",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d62b503-1757-47e9-b119-1754132f7086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "ce0f6e1d-bd4f-4ec6-802b-7893d408499e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2be4c13f-d940-4325-a9ad-f3a2a4cb864f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d39a7a8-5c6f-4f38-a05f-e6383a82d5db"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "48020426-1c20-485b-a9ee-3a8e86fbb574",
            "name": "Positive Testing",
            "item": [
              {
                "id": "322fe675-22d4-4186-a136-aab7c77f5bdf",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "591b29c0-641c-449c-b177-37dd8eab167f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "fffe9b57-64ae-429c-a1cc-2480d60071d4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f33056d-c551-4c30-822a-9d05e2e35e09",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b9b936fc-afe1-488b-9ec1-722603165cb4"
                    }
                  }
                ]
              },
              {
                "id": "9f263efb-b467-4de5-9672-cf8107364370",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b3e6aa1-3fe4-4708-a9b5-7a6b71950d33",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f8e447f9-c73c-4eed-8ddb-a65c09ad28c6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2fea4cb8-0e2b-4fb1-ae1e-c180a00e2fe4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d088d262-b09f-4516-a938-fa3d1cb0b8be"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9223a7d2-67d5-4957-8388-01aa9c6501a6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e67a26ca-d657-484a-adf2-62c1b1f8ca7c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "30c34df1-fcfa-4473-8f5b-0b8c5c5582f5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "27a95094-b45a-44b9-9973-30b03580bdd8"
            }
          }
        ]
      },
      {
        "id": "8df8e6f3-15a2-4cc7-8d6f-3a0bb6181698",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "6c925f20-5834-49b2-8a7c-d0d2b4aba498",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c4be678e-5454-4630-b61b-2c2a3bf284db",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "716b2a46-8dda-46bf-a20c-6be5f97d0994",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b48ca49-1ec5-4094-8e52-7d153d9dcf27",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4d86671a-cda1-42fe-a482-0a13fdad2c61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ce839c0-03e3-46fd-bd9b-a1e1a834c998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "95add207-9663-4c6c-9da6-3432e8a40907"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d0d863c9-7fa6-46a7-850a-f04e8e4c7c39",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "facbd87a-8844-43cd-afe6-21d4bfaebe76"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "27bb704f-4fd5-4f14-b4cc-13e3513ebd1f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5d7ff2fa-edf5-4858-8726-e48dad57f686"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "75f14439-aaa4-4fe2-846e-ecf6ca460030",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "98620f3c-96af-4baf-89ed-96fbfe42939d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d72f0913-2db8-4c28-9772-93615132c30f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dc81bfce-10c8-459a-8cc2-949a02a1be4d"
            }
          }
        ]
      },
      {
        "id": "93a57cf2-d3ae-49fb-bdff-cc185cf9a7e7",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "42439a5d-c459-4efb-be0a-402c94ecc3c5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2c28f39e-22b6-4981-951a-d4f4b4d010da",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c39f7fe5-b6db-401f-b8fb-6dbf2a2e65e9",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f14327b-d784-4eee-a2ff-aa8d269be17a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c1624ce-4047-4f05-8ab4-d9f2b692d820"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7aa1764-62e3-4cd8-915c-244af6041edd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "016ebb4a-32a8-4ece-9e6a-5baf6f500e43"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "762ede33-09d6-446e-b938-cf5f57fa56ac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f65cd373-e62a-442b-992b-2a9fa55e0e40"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe5f5744-02a8-4688-a162-e32fa76149fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5ccc82a9-b0ac-4bf6-be1f-6c37e7f49f5d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b3685068-1f4d-43b8-b84f-058cc4b659f5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "747014dd-d97e-445e-a5f3-8c114794ea76"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "05ca673e-059b-45a7-a8f2-01502cd9585d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "432dee67-aa83-4886-89a2-a646fcd97d27"
            }
          }
        ]
      },
      {
        "id": "7a1142ff-924e-4ebe-aa97-ec02872f4842",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b31e121e-dca1-4d0b-9cbc-d6a67eb25a08",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cf7fbda2-6e6d-4ce1-8fc2-7964e10949fe",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "37d7919e-f455-4859-a5ba-cdf3acd5bd77",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c4f181-a082-4aac-bec4-71bd19c12729",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "49fe00cc-bb6e-4188-a15a-838f533443e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6f2b5cf-dd2f-4809-b517-a7039b511af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b7917fbf-bf30-47d7-81ce-577e5ce92aa1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b034de12-b829-4bff-bcce-ebb99a4c0a48",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04401bff-1323-4e86-a037-735d8b6e6cd0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "522529d6-aeb5-4e3e-8e98-22ad6f71b9e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d789e484-4734-4f7a-b9ad-8bd4cd863bce"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2b985f4a-74cc-4091-8c2f-49e17863e30b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "13f68c40-f100-4b7d-87eb-60967678a185"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "10b65139-e285-432b-8b72-599acc930bd0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ab342a1d-487b-4b9f-b53d-6406ef777614"
            }
          }
        ]
      },
      {
        "id": "005517c4-c422-4616-9863-2143931416c4",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2eab528d-1cfb-4e27-a071-ebe910190711",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6fe71696-5ffd-4313-bd71-add391270c0b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6417feab-4e4c-4e5f-920b-381883f8bd21",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "89387e83-094c-40ed-81e4-93f6ad2c241a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "85674e0e-52a8-4e5e-967d-5d4680f1cc2e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 81.49122807017545,
      "responseMin": 6,
      "responseMax": 694,
      "responseSd": 81.03616753875409,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1710808448419,
      "completed": 1710808481133
    },
    "executions": [
      {
        "id": "fd822268-49fa-4325-9f31-bfff90b49033",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e39e5c7e-040a-4e19-a979-3ed817609601",
          "httpRequestId": "bd788499-a8df-4ffa-b830-ebda7384df43"
        },
        "item": {
          "id": "fd822268-49fa-4325-9f31-bfff90b49033",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "40e950bf-2595-4ebe-9e7e-ae8891998f32",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 0
        }
      },
      {
        "id": "746f7acd-5843-4ff5-8632-411f9c32fd7b",
        "cursor": {
          "ref": "36e4e859-018a-4f77-9976-594b256e0fa3",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9dfcc833-8eec-489b-8c50-01bcc143b652"
        },
        "item": {
          "id": "746f7acd-5843-4ff5-8632-411f9c32fd7b",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "2c7f0ff5-d9b1-4ea0-8627-99b3829c354b",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "86282f30-3cf5-44d7-b65c-906f9607d1c8",
        "cursor": {
          "ref": "cc2e3f4e-f536-410b-8e9f-b0342a088372",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a5b0cdaf-7d1e-4b7d-8117-bff250ad9e6a"
        },
        "item": {
          "id": "86282f30-3cf5-44d7-b65c-906f9607d1c8",
          "name": "did_json"
        },
        "response": {
          "id": "b2c98bd3-2983-4a28-941d-b9f2498ed8b6",
          "status": "OK",
          "code": 200,
          "responseTime": 324,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc22b18b-3ab6-4f45-bf7c-3ae08ea5e8e8",
        "cursor": {
          "ref": "2417260b-d51a-4dc6-8803-53bfc9a7fe7c",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "411051cb-6e76-44f1-923b-33236535b08a"
        },
        "item": {
          "id": "cc22b18b-3ab6-4f45-bf7c-3ae08ea5e8e8",
          "name": "did:invalid"
        },
        "response": {
          "id": "899dc1e7-aa59-4992-8e8f-65e0e0d8b756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc22b18b-3ab6-4f45-bf7c-3ae08ea5e8e8",
        "cursor": {
          "ref": "2417260b-d51a-4dc6-8803-53bfc9a7fe7c",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "411051cb-6e76-44f1-923b-33236535b08a"
        },
        "item": {
          "id": "cc22b18b-3ab6-4f45-bf7c-3ae08ea5e8e8",
          "name": "did:invalid"
        },
        "response": {
          "id": "899dc1e7-aa59-4992-8e8f-65e0e0d8b756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a91694b-967f-43bd-b1fa-3725f3d4fb0d",
        "cursor": {
          "ref": "0818d96a-0912-483c-8e03-2fe2138388ad",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5f1237e9-bb87-4b81-ba8b-b2810eff8973"
        },
        "item": {
          "id": "0a91694b-967f-43bd-b1fa-3725f3d4fb0d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "8d3c9c43-ff19-46a0-8542-729404a7ba87",
          "status": "Not Found",
          "code": 404,
          "responseTime": 328,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d1d3b0b-6eb6-4213-9227-67476b7a6646",
        "cursor": {
          "ref": "847a8f71-7887-45cd-a6d5-91ba96de85de",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "566f57aa-3c82-4941-ad05-3da04777b59b"
        },
        "item": {
          "id": "9d1d3b0b-6eb6-4213-9227-67476b7a6646",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "00b8caa9-c61d-4daf-bb71-70557f3208ed",
          "status": "Not Found",
          "code": 404,
          "responseTime": 63,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ffacda2-321a-4d99-80a2-53846af7572b",
        "cursor": {
          "ref": "5c835d18-938d-471c-8dff-081899e2cec4",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "15299ddc-6a4c-415a-94a0-3c562f90fbae"
        },
        "item": {
          "id": "9ffacda2-321a-4d99-80a2-53846af7572b",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b44750b3-1816-4c30-b1e4-ad39ac8107e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3b9c731-4f07-4618-93dc-a138b0bc362b",
        "cursor": {
          "ref": "f1efe01b-2b46-41da-8c55-520011969872",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "84dbbf52-c65a-448e-b133-14f26510ef8e"
        },
        "item": {
          "id": "b3b9c731-4f07-4618-93dc-a138b0bc362b",
          "name": "identifiers"
        },
        "response": {
          "id": "259284c8-919b-49ae-9492-2d18c95548c0",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d4efac2-cfc5-4378-a1bc-5c09a950f8b6",
        "cursor": {
          "ref": "14d4f09a-6573-43b0-8a8b-20c3bd5c312e",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c8fbde0f-b8ee-4906-a805-15481088ae4f"
        },
        "item": {
          "id": "0d4efac2-cfc5-4378-a1bc-5c09a950f8b6",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "464b199c-9e35-42a4-97d6-5de5c80b8354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c285589-82cd-484d-bd3e-55c436d89980",
        "cursor": {
          "ref": "5288bd0c-0e76-42ba-8da3-26246a020569",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "53e7ddbf-0701-4cdb-9123-b131a7d54cf9"
        },
        "item": {
          "id": "3c285589-82cd-484d-bd3e-55c436d89980",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "28612b14-413a-46c1-bb61-a14f1df2cef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "142b0d77-762c-4008-8c0a-692ce076cb5d",
        "cursor": {
          "ref": "5c716fcf-4de9-42ad-9ffc-7491daded483",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "64e77436-0563-49a3-bd21-3e51a8ba3f15"
        },
        "item": {
          "id": "142b0d77-762c-4008-8c0a-692ce076cb5d",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c2b6b13b-4bdc-4382-986e-746557babc4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e3fb872-b561-4af4-9dfa-f71e032dfc42",
        "cursor": {
          "ref": "779e3b1b-cec5-41f3-9257-333828edf4f5",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "d162826c-f2cc-4a80-8715-efadaca18d85"
        },
        "item": {
          "id": "4e3fb872-b561-4af4-9dfa-f71e032dfc42",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "5aac9008-7f11-4bb4-8823-3b350fbbcd38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da83282d-c4f8-4ed8-9bab-6e7d52435df5",
        "cursor": {
          "ref": "f8d0faf4-a7a7-4d45-a74e-ff9821fa4e2a",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8a2d21a4-30db-4787-a7e0-f2f629085a1a"
        },
        "item": {
          "id": "da83282d-c4f8-4ed8-9bab-6e7d52435df5",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "6e0b3d32-45df-41b0-ae00-cde0c26d6cae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7011c453-0137-4ba0-8244-e89d7155ea28",
        "cursor": {
          "ref": "8a9b85a6-62e5-4505-a4ed-3ddcb35d53a0",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "cf6331a6-fb81-44a3-9bd2-e177d29ee14c"
        },
        "item": {
          "id": "7011c453-0137-4ba0-8244-e89d7155ea28",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "6213424a-8e6f-4b5f-ad64-88353244601e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "188160fa-cf87-47fe-aa86-731b1a29e1ac",
        "cursor": {
          "ref": "2aa83aa6-5727-4688-955f-9e02ab97f685",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "19ba150c-81f2-44c3-b1f0-e952e40ae543"
        },
        "item": {
          "id": "188160fa-cf87-47fe-aa86-731b1a29e1ac",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ace5b8db-7a06-40dc-814e-065cacbde6be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80932e78-64dc-4039-b29b-2779fece56e7",
        "cursor": {
          "ref": "5b0da513-e032-4150-8099-4695731b2bd8",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "faa83f88-a6e6-461c-83d3-f93e998fd76b"
        },
        "item": {
          "id": "80932e78-64dc-4039-b29b-2779fece56e7",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "6eb56fad-f081-4a4b-9c01-a1086bf70b8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f5d69fb-7edd-434b-8c40-9de67b74dbfe",
        "cursor": {
          "ref": "78af8a48-5529-4629-be17-f5afd283fd40",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "609e0fc5-e3ef-4734-a61d-f5ad6aaf3dce"
        },
        "item": {
          "id": "8f5d69fb-7edd-434b-8c40-9de67b74dbfe",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "952fec83-776b-4327-81c2-42020be034e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49faa744-ee93-466e-86ad-1b3a4999ea14",
        "cursor": {
          "ref": "a3d894c9-eabd-4f5c-aaba-d59e339c58f4",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b4230e40-2ac8-4dd6-af7f-5a960bec8b20"
        },
        "item": {
          "id": "49faa744-ee93-466e-86ad-1b3a4999ea14",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e18581b1-eb4d-4bf8-b407-f194f68824d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1893af2-2aa9-4a0f-8532-48535905243c",
        "cursor": {
          "ref": "15c6d15f-3e2b-47bd-a0e0-0ffa8df5bff1",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7339122d-e524-442a-ac77-cd4585cf277a"
        },
        "item": {
          "id": "f1893af2-2aa9-4a0f-8532-48535905243c",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "fa4b1022-84b5-427e-93ce-7f19c7289bdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e62f554-d7f6-42fd-85e5-8c1a7c1c5b82",
        "cursor": {
          "ref": "1f174f83-aa6f-45b9-b549-e0a68d94c6c6",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "365b022b-e25a-46be-b2a0-5c2e13dfd31d"
        },
        "item": {
          "id": "8e62f554-d7f6-42fd-85e5-8c1a7c1c5b82",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "8c548003-755c-4dcc-9100-bd946df9999c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fd946d6-aad3-4f11-9745-0ec91f701bf0",
        "cursor": {
          "ref": "72da5345-d188-4975-b39c-5dc4fe49336c",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "4e15e0f1-0321-4dca-b136-09b77f158e80"
        },
        "item": {
          "id": "7fd946d6-aad3-4f11-9745-0ec91f701bf0",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "f47e222e-7776-47cd-abae-938e041de03b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "437374d5-5d1b-45c9-8096-6371f02383b7",
        "cursor": {
          "ref": "e13325fe-1495-46a1-9f2f-c0921a531260",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "304bcb8a-6c2e-4b89-be21-f73ea7b3c5e3"
        },
        "item": {
          "id": "437374d5-5d1b-45c9-8096-6371f02383b7",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "9367da05-3ad9-4de8-bdba-b5556814bef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8d2d66a-e924-42b4-a4b4-fc722524fd4f",
        "cursor": {
          "ref": "c00c56a9-6e28-41e4-b080-89883b994e34",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "62050733-e9ba-47f3-bc97-7cc82e0c9d7a"
        },
        "item": {
          "id": "f8d2d66a-e924-42b4-a4b4-fc722524fd4f",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "6631f225-2770-4a21-be08-f08083d2e477",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ebd0b63-f25c-43df-8936-0c479fd4092a",
        "cursor": {
          "ref": "ec6c4530-9038-4f11-80c7-077d208318b7",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "9e49f3c6-a56a-4e65-8f5a-956847298560"
        },
        "item": {
          "id": "2ebd0b63-f25c-43df-8936-0c479fd4092a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "cde77592-f61f-4156-8185-a0b55cda9030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4538c8a-9ccd-4aea-8d80-1109d10f38c7",
        "cursor": {
          "ref": "3752bc61-946f-44dc-bcd3-305fe92469dd",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "6a29ab48-5793-4300-97f6-18bd118d825b"
        },
        "item": {
          "id": "c4538c8a-9ccd-4aea-8d80-1109d10f38c7",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "2f3ec60e-b954-49bd-8474-e932192665b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb854f1e-a92f-44b6-a96e-37c8eab4f010",
        "cursor": {
          "ref": "df386ce8-36f5-4aa7-8ed8-8104a9af2bd0",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "9f212529-2ccd-4795-8203-2c0ea6938742"
        },
        "item": {
          "id": "fb854f1e-a92f-44b6-a96e-37c8eab4f010",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "61561535-44dd-4961-ba48-9362c7d83e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efe9ba92-e906-4bb8-8d57-1524507d0960",
        "cursor": {
          "ref": "d79ed780-5b72-4861-8fe2-09613a0fde5b",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b0dc40d0-ade6-4084-b883-ecc285c2c60d"
        },
        "item": {
          "id": "efe9ba92-e906-4bb8-8d57-1524507d0960",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "f689d9c0-75f8-46a5-8452-89dc6d7db335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2473be4-93a0-48e4-a456-68ddff9606d1",
        "cursor": {
          "ref": "72f10788-73f6-448e-a3a4-93081a039e6c",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "36e0d66e-deb1-4f26-9518-e0598f416dd8"
        },
        "item": {
          "id": "d2473be4-93a0-48e4-a456-68ddff9606d1",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "901f4f57-012f-4b2f-97f4-90abaa9dd255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "266e46cf-0d0c-472a-9763-3f9a3d350e38",
        "cursor": {
          "ref": "dc6b8737-a194-4641-abca-812c8b46a8db",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4fb8b74b-2098-4c38-839e-09bc2cd613c7"
        },
        "item": {
          "id": "266e46cf-0d0c-472a-9763-3f9a3d350e38",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "9f3810cd-b564-490b-a8bf-fa6b7a409771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cda3619-b56f-4191-8e22-62c0ea267e62",
        "cursor": {
          "ref": "3e597850-87ed-4734-88c5-79da6cac407e",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e6579383-3211-4884-bb98-1e657ee2da7d"
        },
        "item": {
          "id": "3cda3619-b56f-4191-8e22-62c0ea267e62",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "7a40d4a4-8d34-4e25-a853-b2c85671ab5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45eb0c59-4a15-477f-8f61-aa8dcb025007",
        "cursor": {
          "ref": "adbb39e6-8fad-41d0-8d18-d74eec87d87e",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "6caf80fb-49d6-4b95-8c90-360c8b032b0a"
        },
        "item": {
          "id": "45eb0c59-4a15-477f-8f61-aa8dcb025007",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "2d37bdc1-7e7b-4aac-9351-e5089828725c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b72d73d9-e358-41d3-bf2f-2759d454d73a",
        "cursor": {
          "ref": "3b950e44-408b-4904-a9b8-25c9fd486ef5",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "31642105-0f66-4bde-a815-a3b0d8914fe0"
        },
        "item": {
          "id": "b72d73d9-e358-41d3-bf2f-2759d454d73a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "f4740a59-e75a-40bc-9968-083bbac36a5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0b06fc4-9e7e-48ea-8bc8-563c006cb68a",
        "cursor": {
          "ref": "f0fa2cdd-6fd0-430c-8f33-0fd131656d06",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "bf684d0d-0245-444b-8780-2683b4a7bdac"
        },
        "item": {
          "id": "c0b06fc4-9e7e-48ea-8bc8-563c006cb68a",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d256d7f5-4284-45dc-b34e-88e7de51e4f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40beae67-3a78-4adb-b524-9d059ec02091",
        "cursor": {
          "ref": "19fdcd84-3d72-41a5-83b0-73feac01b033",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "62f1799e-7897-4c94-b8be-bcf4f489a4a5"
        },
        "item": {
          "id": "40beae67-3a78-4adb-b524-9d059ec02091",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "a89080f7-acf0-44c8-a36e-83cab0f6a459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a9a21c7-1611-4771-8a82-ad33bc6244c2",
        "cursor": {
          "ref": "8c967b39-5d58-4416-bc63-32c9a9fb637b",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "e55ec3a9-2159-4c21-b41f-376b8fd98031"
        },
        "item": {
          "id": "0a9a21c7-1611-4771-8a82-ad33bc6244c2",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "db5dabe5-02d4-4dcc-9b75-88ac9d536d83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e76fad4-0783-48fd-91d3-db655c5fc5cd",
        "cursor": {
          "ref": "3b44cb9a-c762-465b-9308-0b7c93747609",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "ddc48c7b-b439-42de-b8dc-05402104fe2f"
        },
        "item": {
          "id": "8e76fad4-0783-48fd-91d3-db655c5fc5cd",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "35d9e295-d013-4d04-9bd9-a99da4bac272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97818f6b-fd09-4703-be21-f85fcc52b57d",
        "cursor": {
          "ref": "0c49b88b-85c6-47a7-97af-d8a5774616f8",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "abe4022f-c2b4-40ce-8174-38d6840c840d"
        },
        "item": {
          "id": "97818f6b-fd09-4703-be21-f85fcc52b57d",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "afce5a61-f83a-4f2b-a0f8-c31263ce2358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8385aad5-f2b9-4ea6-bc9d-1987bec05d6e",
        "cursor": {
          "ref": "e59b0315-2fa7-4663-9b04-7eba3f133706",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "c0b0c48a-44f4-4c46-b462-694cfdc401e2"
        },
        "item": {
          "id": "8385aad5-f2b9-4ea6-bc9d-1987bec05d6e",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "43f6ac34-aaf5-4995-a7ce-81948cfe3c50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6688b97d-23bf-4fca-ade9-d9a807ebd28e",
        "cursor": {
          "ref": "fdd85f0f-7dbb-4c1f-85aa-dba7deca1021",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "43bc13d8-8af2-45ca-b049-4a5f7a8f5270"
        },
        "item": {
          "id": "6688b97d-23bf-4fca-ade9-d9a807ebd28e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "558b67d8-86e2-4293-b4c4-212ad4c544c4",
          "status": "Created",
          "code": 201,
          "responseTime": 694,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "d3c5ec81-5887-415d-99fe-e2085aecc270",
        "cursor": {
          "ref": "8139ac8e-4a68-4a3b-8d8d-25e150dc5623",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "3b3a7931-ae23-4d18-9b54-2e358d0c5164"
        },
        "item": {
          "id": "d3c5ec81-5887-415d-99fe-e2085aecc270",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "703bf646-004f-4e78-9d75-9fca47880f90",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "b21031f0-993b-4aa2-bbb9-25f7ad0acb28",
        "cursor": {
          "ref": "d715ae1d-0de2-4106-9a15-f2b7c6953c71",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b247b2ab-1c9d-41b3-a988-4bbec38937c6"
        },
        "item": {
          "id": "b21031f0-993b-4aa2-bbb9-25f7ad0acb28",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7d6bb31b-4a0c-4266-9bd6-442918f45ec1",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "4620eef9-bbc9-434b-9204-1510f7cb3df8",
        "cursor": {
          "ref": "389e9f14-fbfe-4b7d-bd74-489e47a87136",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "68687e4e-2343-43ae-95da-25deb1f00e58"
        },
        "item": {
          "id": "4620eef9-bbc9-434b-9204-1510f7cb3df8",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "327496d5-16e1-42f4-a9fc-0635cbe8a59e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "234aaba6-4dbd-44d4-ad07-e8e349df163b",
        "cursor": {
          "ref": "46638d17-67a1-4b82-a4e7-33f5b65be69f",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d3d5083f-277e-4c7b-86f0-b17ac73d6bf2"
        },
        "item": {
          "id": "234aaba6-4dbd-44d4-ad07-e8e349df163b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "d9aeabe4-fea6-4cf3-acf4-4bff77851d78",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "56801a83-706d-46ba-865f-f3b11b17c2ee",
        "cursor": {
          "ref": "116612df-24d4-4fbe-8bb4-0df7df2b6c50",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "28fcfe93-432a-4eb7-9a61-0dcb06d4ea69"
        },
        "item": {
          "id": "56801a83-706d-46ba-865f-f3b11b17c2ee",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "bd53d1a3-2c19-4448-8dfd-774c4bd6d5f5",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "13087766-cd58-4d25-ae03-6d9854e50fad",
        "cursor": {
          "ref": "f5e4c57f-1e07-4db8-ab06-c9fb08023861",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "7d29a8ea-348b-451a-86b8-6a56dfc78903"
        },
        "item": {
          "id": "13087766-cd58-4d25-ae03-6d9854e50fad",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e6703bd8-2021-4922-88ae-30fe34d5a773",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "44922748-c0b1-437c-b908-cb6e240a22a1",
        "cursor": {
          "ref": "b7b2bbab-c9bb-4231-b57b-eb80ce90fe73",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "642fbb8e-7239-4202-be7b-3c5e21d22c48"
        },
        "item": {
          "id": "44922748-c0b1-437c-b908-cb6e240a22a1",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "863a8cf6-bed9-445d-bc31-ddb3663066cc",
          "status": "Created",
          "code": 201,
          "responseTime": 319,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "6ccef76f-cba2-45e0-92de-ee8e68a43c52",
        "cursor": {
          "ref": "0a782900-dd0f-4be8-b0ad-443b386ae381",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "aace3a87-41e3-41b6-9a7c-4b6b97624c81"
        },
        "item": {
          "id": "6ccef76f-cba2-45e0-92de-ee8e68a43c52",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "1883ce76-43bc-49d7-923c-6183e899650d",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "b944af34-0e8c-4e37-b4cb-cd790e71bd48",
        "cursor": {
          "ref": "34524858-b6ef-46a8-b21a-5d045beffaeb",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "1e7899c7-507c-4c72-9bdd-37d7c863784e"
        },
        "item": {
          "id": "b944af34-0e8c-4e37-b4cb-cd790e71bd48",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "94d436cf-7596-4d9e-ad47-6630e6299ae2",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "3d0068ff-f538-4af9-b2ae-e6604ff9d12b",
        "cursor": {
          "ref": "5fca16ec-bed8-4ff0-9d60-0af92ad17067",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "34419b9e-8b24-44bc-8e69-8b1ed93deb1c"
        },
        "item": {
          "id": "3d0068ff-f538-4af9-b2ae-e6604ff9d12b",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "6f5ca103-72db-4179-afa5-945de984255c",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "ea1edc12-a43b-4bba-81bd-b362119a3e92",
        "cursor": {
          "ref": "6e120140-ffd3-4c01-b846-b8d7079b3665",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "fcfde5b6-1e68-454e-afe9-08db54d94992"
        },
        "item": {
          "id": "ea1edc12-a43b-4bba-81bd-b362119a3e92",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "4ac07cc3-5bd6-43eb-90e1-9c5861561104",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "3e2aff64-1fe9-49cc-9d52-c258d6bf7a96",
        "cursor": {
          "ref": "e10a2dc9-7782-4f34-8775-8dce41c0bd52",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "bd1a2c33-ceae-4360-9cf6-2f772084c17b"
        },
        "item": {
          "id": "3e2aff64-1fe9-49cc-9d52-c258d6bf7a96",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "58994083-e9ec-40ce-92d3-95e4da61edc3",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "85396274-1e52-449e-9d68-ca489ea1e9f8",
        "cursor": {
          "ref": "d22d6c1a-e9b4-4d87-9266-4b12e5a2bf83",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a8399c2a-af03-4ff2-90e6-03be5d27326b"
        },
        "item": {
          "id": "85396274-1e52-449e-9d68-ca489ea1e9f8",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e7d6095a-85ca-42ef-b7ba-afea3ce886f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bf97dc9-1c97-4460-9b06-a3bfadd21a29",
        "cursor": {
          "ref": "98dfdd57-8859-4de8-b69b-25b5f960e1cc",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "20f24e94-1c5c-44f4-9103-20cdcf81b685"
        },
        "item": {
          "id": "9bf97dc9-1c97-4460-9b06-a3bfadd21a29",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "1b0fcfea-aa17-4ab7-b8b9-c6456d76345b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e100f506-4105-49af-a005-74a831d5adc5",
        "cursor": {
          "ref": "e7d14574-ecf3-4c98-bdac-79329f01d581",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "3b7f0e94-125e-450f-b334-164cc807a25d"
        },
        "item": {
          "id": "e100f506-4105-49af-a005-74a831d5adc5",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "2bd2d544-5513-448c-9e6c-4619c3099b3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "540d889c-36a8-4db7-9538-8e0f5922dc41",
        "cursor": {
          "ref": "50643f49-df2a-4c77-9ca7-89b971b36972",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6059ed63-4d7a-44d3-982d-d6bbea21f3b4"
        },
        "item": {
          "id": "540d889c-36a8-4db7-9538-8e0f5922dc41",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "948eaab2-6b4d-4552-a504-e5b0bf81bc29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e88c99-5f02-49e5-afff-64e8b36122fd",
        "cursor": {
          "ref": "4159713e-aa7f-4a4a-9723-29e53e899816",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "6381c6f8-883d-4c42-b87e-113ebce4ba1e"
        },
        "item": {
          "id": "94e88c99-5f02-49e5-afff-64e8b36122fd",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c7a9fc37-41ef-420b-bac5-9c46efc1b617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a990cc2c-68f8-4fe2-98e4-2a79ab2ac51d",
        "cursor": {
          "ref": "7de0f023-52c1-4835-9b7b-31d8e8806688",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "eb7d7649-03e3-48ef-a7af-61e872c142c0"
        },
        "item": {
          "id": "a990cc2c-68f8-4fe2-98e4-2a79ab2ac51d",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "fc5bfb7e-e906-4cbf-994a-f778ee4ca2c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cd4112c-452c-47e2-b5f0-1ff55c9ba61b",
        "cursor": {
          "ref": "3cf16cb7-9f1f-439b-91da-d5be8bcd0bd7",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "6946aa0f-c162-434b-a560-c6f9a512f548"
        },
        "item": {
          "id": "6cd4112c-452c-47e2-b5f0-1ff55c9ba61b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "488c3718-f4df-4ab1-b216-7a2a4d5f1252",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "433ea343-0988-48fb-a600-7942b53006b3",
        "cursor": {
          "ref": "3b33e29c-c055-4437-9d85-e273496a6d3f",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "084569d4-3601-4a4b-9417-67b48620c755"
        },
        "item": {
          "id": "433ea343-0988-48fb-a600-7942b53006b3",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "4fa23d33-6a72-461a-8156-2b11400d8ff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0ae5257-7b2b-4e41-98d3-432101c8114a",
        "cursor": {
          "ref": "e1bba0ae-cfae-4d9a-9fa4-aa1134a0ef5e",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "334ab145-64fd-41df-bf6c-777be3123f25"
        },
        "item": {
          "id": "f0ae5257-7b2b-4e41-98d3-432101c8114a",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "250b9b09-208b-4231-a877-f54d19e139e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21df6f1c-e533-4066-a0c7-8b9958cf029d",
        "cursor": {
          "ref": "fb9cd035-298c-42f4-9b2e-05110476afc4",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "5d73fe4f-7b1b-490c-9343-c3cce98fb9ec"
        },
        "item": {
          "id": "21df6f1c-e533-4066-a0c7-8b9958cf029d",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "3b6708db-7327-439c-bbf7-86fdb7a36993",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7abb926-f374-48b9-b3f4-f2399a6ce8ad",
        "cursor": {
          "ref": "d6904271-cfd9-4f69-8d06-5aa262db776c",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "5d61ebe1-cb1e-448d-8f43-6d8b94a0fd91"
        },
        "item": {
          "id": "e7abb926-f374-48b9-b3f4-f2399a6ce8ad",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "f9dd8640-c700-427a-96b0-0d003eb7059d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b0b0c8a-0a55-4b45-9cb0-a366fa631581",
        "cursor": {
          "ref": "d39009cc-1f53-4a59-a2ea-5303145f4eb8",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "de77a1be-3d47-4708-94f2-46a9638380c4"
        },
        "item": {
          "id": "8b0b0c8a-0a55-4b45-9cb0-a366fa631581",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d3d3ece7-fb84-4b88-ad73-b30d03c6e014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c43f0810-2efe-4c8a-aca5-81ecb3d15206",
        "cursor": {
          "ref": "ae3b6434-b228-4506-96b8-bd09edd236cb",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "c827de4a-8c6b-4f3b-8c24-b80b49882a16"
        },
        "item": {
          "id": "c43f0810-2efe-4c8a-aca5-81ecb3d15206",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "659afa11-2066-40d0-a8c1-4d3410f11501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73e256ee-c3e4-40f5-99fe-8562e2fbd16d",
        "cursor": {
          "ref": "97caf9d1-b59a-4015-ac74-82a7450039e3",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "70d00310-a93e-4270-a185-fdebd5de422f"
        },
        "item": {
          "id": "73e256ee-c3e4-40f5-99fe-8562e2fbd16d",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "8b8cb67a-aa1a-4ca3-84cc-c9473fe1cab7",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "04a6aed7-347d-4a2c-bee5-240d94b90837",
        "cursor": {
          "ref": "6506b981-db82-4e93-a790-1b63641ded65",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "1b74205f-c64d-4403-8f41-a79d97ef3247"
        },
        "item": {
          "id": "04a6aed7-347d-4a2c-bee5-240d94b90837",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "ab508a62-0d08-4779-a165-fee9b9e27ed6",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "13c56579-395e-4516-a55f-e4f90b295256",
        "cursor": {
          "ref": "931f9566-44f0-4d60-9d2a-e0bba6d40844",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "cec80b70-d5c4-48f2-a489-b1d06fe8f9c3"
        },
        "item": {
          "id": "13c56579-395e-4516-a55f-e4f90b295256",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "8b51f886-58a5-4b71-9190-da5d748cc224",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "5cc0a2c3-2386-476a-a0e4-b30f06bb42c6",
        "cursor": {
          "ref": "283f5faa-17b9-477b-9ff6-db7669333ae3",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6eb1111b-5231-4161-bb37-66aca8c0218f"
        },
        "item": {
          "id": "5cc0a2c3-2386-476a-a0e4-b30f06bb42c6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "a822e64d-7ff6-4ed3-a397-c55ddc9734d1",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "d44d2034-9dce-426f-8a82-36073b09334c",
        "cursor": {
          "ref": "b6d86b8e-87e5-4808-be31-b1e734170c96",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d5397fe4-5e41-419a-8ffd-3a651bbaa429"
        },
        "item": {
          "id": "d44d2034-9dce-426f-8a82-36073b09334c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "1fa019dd-650f-4130-9d6e-d9a47f063107",
          "status": "Created",
          "code": 201,
          "responseTime": 383,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "0fdbab94-3940-41b9-a764-adc6ee259c37",
        "cursor": {
          "ref": "883f7a81-e6ad-47b1-a411-18e920dc357c",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "9e38f697-f78a-4417-8b35-886072c1a1a2"
        },
        "item": {
          "id": "0fdbab94-3940-41b9-a764-adc6ee259c37",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ef004bb8-c068-4934-858b-cfefb907e5ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b6fcfa3-6b6c-4b64-9c89-c95f6de2ea17",
        "cursor": {
          "ref": "c5004911-a0ee-4760-92e9-cd0d95ab5909",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "46a6d5cb-6368-46ed-93c1-d2a073acba62"
        },
        "item": {
          "id": "8b6fcfa3-6b6c-4b64-9c89-c95f6de2ea17",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "b8c2499e-07c2-49d0-8151-976b7ea2a23f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02085695-7312-46b4-8fe0-ff70ae087a88",
        "cursor": {
          "ref": "3510b830-cf73-499d-a039-4ae4bd345969",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e465488e-cbc2-4315-aa98-93c50d8b8aeb"
        },
        "item": {
          "id": "02085695-7312-46b4-8fe0-ff70ae087a88",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "9a2325dd-eee9-4025-8842-0a00b5583698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae48fd59-61fa-4a1e-8e6a-8bdc7adf1921",
        "cursor": {
          "ref": "494235cd-4ffa-434b-b7ae-08c7d335cdae",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "1226aebb-0a54-4d06-bcef-3a9ffe3f7fb7"
        },
        "item": {
          "id": "ae48fd59-61fa-4a1e-8e6a-8bdc7adf1921",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "f1014122-3cdd-456c-b935-604626f31c57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8858e7cd-4e29-4e62-885a-25ad8233739e",
        "cursor": {
          "ref": "9e935ab4-754a-45d1-b7e5-db5e8c978f29",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "7c61d35b-a938-4424-a313-1d9204923f6b"
        },
        "item": {
          "id": "8858e7cd-4e29-4e62-885a-25ad8233739e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "76c32134-26a0-40bd-8b7a-d44465024b8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c53483c6-b7c4-4255-b056-42572028c7ac",
        "cursor": {
          "ref": "fc7ece68-261c-4f17-885c-318ff05ddf14",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "c593e976-d85d-4765-a40b-399bbe76ef64"
        },
        "item": {
          "id": "c53483c6-b7c4-4255-b056-42572028c7ac",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "7001abef-1905-442c-ad9c-07e3c5e7e73f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "855b8dc5-4aff-44e6-b09f-92cb8e4f47fb",
        "cursor": {
          "ref": "29cc4119-52e7-41ee-af4c-0226d0f80c38",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "e56b25cf-e141-4b4c-ae51-6e5d37b697f5"
        },
        "item": {
          "id": "855b8dc5-4aff-44e6-b09f-92cb8e4f47fb",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "33f7da49-a32a-449f-9498-d035659ce893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f1e0d9e-7b04-45cf-866b-d0852c6066b7",
        "cursor": {
          "ref": "16f51ce0-a4ed-40eb-8206-dec1ae225b4a",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "309ba341-b835-4a41-944b-b7df46934890"
        },
        "item": {
          "id": "7f1e0d9e-7b04-45cf-866b-d0852c6066b7",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "85ac0b11-47ab-48eb-a697-0f444c3867c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3db5bdcc-f5ac-48e4-8372-fe08cfa6a9a0",
        "cursor": {
          "ref": "bf2270b8-0f83-4ae2-a13f-119d4dcff17f",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "fb857377-e506-4574-b12f-d58bd6f53d49"
        },
        "item": {
          "id": "3db5bdcc-f5ac-48e4-8372-fe08cfa6a9a0",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "34d4e243-99c5-4e3b-b5d5-480e65d3b6b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bdae3d4-3cd3-4ed8-8f5a-b24a94b0e70d",
        "cursor": {
          "ref": "a166b8dc-fcc8-4dc0-b678-9d4e66d2c17c",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "5e70adee-7a3e-4227-b5c6-1155299b90db"
        },
        "item": {
          "id": "6bdae3d4-3cd3-4ed8-8f5a-b24a94b0e70d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "65875c39-303f-4fd3-983c-4088de2907b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38ad1f4e-8381-4d17-b772-5f29c24bc881",
        "cursor": {
          "ref": "89ea43a0-7d6c-4ce0-9ef6-0b89363d64b2",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "2d7b2126-9484-4162-b189-2599ddf83c10"
        },
        "item": {
          "id": "38ad1f4e-8381-4d17-b772-5f29c24bc881",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "bcd706e0-c368-46a7-b44b-474fb5f1d735",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb22f2e8-3cca-4e22-8b68-3ee2a096902c",
        "cursor": {
          "ref": "cc808de7-829d-4048-be02-0c88bf5872e6",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "dd84544b-4ce3-4ea5-8c0f-2f8d99c7dc89"
        },
        "item": {
          "id": "eb22f2e8-3cca-4e22-8b68-3ee2a096902c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "f30b6c5b-264a-404c-8111-50c6c738ce46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1122fb27-dcca-43ab-aaf8-d523d1c7cfb9",
        "cursor": {
          "ref": "438d7ae8-b631-4763-a4d6-057c4ef5c700",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "37207650-5923-4d30-ae1d-10070baca688"
        },
        "item": {
          "id": "1122fb27-dcca-43ab-aaf8-d523d1c7cfb9",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "618ed473-49a9-4adb-b111-40982f9ad840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df1cfe0f-1f3c-4189-b9e9-b58de725e0c4",
        "cursor": {
          "ref": "17d8ad89-da42-4e98-b09f-2c76f5532947",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "1dc8adbd-8695-41cc-8957-d45605ac33e3"
        },
        "item": {
          "id": "df1cfe0f-1f3c-4189-b9e9-b58de725e0c4",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "cfaf1c63-d2cb-483d-99c1-79e44db13fe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2b4417a-81e2-4a40-8ea5-4840bba8089f",
        "cursor": {
          "ref": "0ca414a7-87d1-4af9-99ee-ecd593ff8e96",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "9e2d7d6a-ccff-449d-92b8-4116cdf14622"
        },
        "item": {
          "id": "a2b4417a-81e2-4a40-8ea5-4840bba8089f",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "5481af6e-2d4b-427f-b802-161cff8f691c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2692735d-27ba-4e95-acf5-ff798f83738c",
        "cursor": {
          "ref": "fa034dd1-d215-417d-aa57-9f781bfbc8be",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "843520cb-0d7b-4209-99ef-0bb93d8dadd9"
        },
        "item": {
          "id": "2692735d-27ba-4e95-acf5-ff798f83738c",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "8c5819a3-db45-44ef-9f9a-e4f205d597ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "106377f2-fcb3-443c-a863-2dcfdcc9367e",
        "cursor": {
          "ref": "8afa9af1-c252-4414-afb6-6315b83ff88d",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "105610cf-1ed8-4d3b-974b-cf9729535a83"
        },
        "item": {
          "id": "106377f2-fcb3-443c-a863-2dcfdcc9367e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "718df273-3a9f-4324-b68e-8ac90c6ced35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4571024e-9e73-461f-9fa3-7c1af4f24ccb",
        "cursor": {
          "ref": "6aa2f09b-ba18-437f-a15f-8ad6b6629cc1",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e41651be-5268-4201-908a-c480fe1a49cb"
        },
        "item": {
          "id": "4571024e-9e73-461f-9fa3-7c1af4f24ccb",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "e7f11522-8d8c-478c-b42c-f315c523ce96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86ac6896-46e7-4587-8e11-7017190c1e88",
        "cursor": {
          "ref": "2b6f578f-c99d-4905-b09e-5c3ed8b66f35",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "5e275fe1-d1a2-479d-b824-5541d72efa76"
        },
        "item": {
          "id": "86ac6896-46e7-4587-8e11-7017190c1e88",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "20861b4a-98a7-4691-9797-925188607eab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 276,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6ba697a-a731-4a21-b9a4-e0d5f05c446c",
        "cursor": {
          "ref": "70ad8e03-2dda-4c17-b2fc-34333ce1d185",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "0432f32b-b17f-4bf8-8e6e-2801f5c1fd06"
        },
        "item": {
          "id": "a6ba697a-a731-4a21-b9a4-e0d5f05c446c",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "d95380b4-d117-4230-bbcc-dd8b6656721c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d8a8eb8-9bd1-45bc-9c5c-28a4b5303fba",
        "cursor": {
          "ref": "962a8c7c-7892-4a3f-8d08-bc895bb58b71",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "67d95efe-7a3b-4676-aef7-ef93d5fc1940"
        },
        "item": {
          "id": "1d8a8eb8-9bd1-45bc-9c5c-28a4b5303fba",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "8b612ee1-fed0-48f6-93c1-3fb3ea092ae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21869eea-c9ba-4e82-983f-c4fbf7d880dd",
        "cursor": {
          "ref": "3e2ec9b9-4d47-478e-a8c8-d2f3a3d3562b",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "acf83390-f9e8-4b3c-b205-4aeb4b04a6f5"
        },
        "item": {
          "id": "21869eea-c9ba-4e82-983f-c4fbf7d880dd",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "4a9d623b-573c-408b-83bb-3e20b7421503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11833ee4-7496-400a-bf3a-f4c645c54030",
        "cursor": {
          "ref": "9f8a6b71-b910-4971-ad53-41af882a7064",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "58cc7f6c-d416-463c-8d6a-cc061a44982a"
        },
        "item": {
          "id": "11833ee4-7496-400a-bf3a-f4c645c54030",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "1fe8608b-e9b9-46d8-a79d-28af430ef090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f26117c4-6f7f-43df-9bdf-a803894aebe5",
        "cursor": {
          "ref": "c42915d4-ad58-4575-9974-9ab895cf70a8",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "bf93d81c-b022-4bfc-8172-fbcd317ed108"
        },
        "item": {
          "id": "f26117c4-6f7f-43df-9bdf-a803894aebe5",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "7cafcb96-de3f-4886-8b1d-06eb6b7e5081",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15cbd1d1-8940-4e80-b956-559f78974675",
        "cursor": {
          "ref": "71a96e61-a761-4a2b-9094-a770c1e831c9",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c8c70c19-5c90-4856-8061-c3549443fb7e"
        },
        "item": {
          "id": "15cbd1d1-8940-4e80-b956-559f78974675",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "8a1c218b-3f98-4aac-8ca0-664a56a027dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9a009ee-53fd-4ea6-81e4-20e7b6bf3ea3",
        "cursor": {
          "ref": "d81b39d8-9259-4959-aca5-e1694951af0f",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "3e9fff54-075a-41dd-961b-83b9711484b6"
        },
        "item": {
          "id": "a9a009ee-53fd-4ea6-81e4-20e7b6bf3ea3",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "52553067-b49f-479c-a72f-ceaf43b147a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4c72c20-491e-43a5-af0d-7b1485720c3d",
        "cursor": {
          "ref": "db1186d5-648a-4c16-a9fe-de89ba7c87c2",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "67da17ab-ae44-428c-81d5-e855409eb356"
        },
        "item": {
          "id": "c4c72c20-491e-43a5-af0d-7b1485720c3d",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "439cf6e6-daca-4a82-b95c-d72fa204f226",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a204fe6-1328-4b10-bcd1-4c087700fe9e",
        "cursor": {
          "ref": "cc49c2eb-4730-49c6-a9bc-e99e74da2300",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "9c959437-74c6-4153-988b-4123a0d50892"
        },
        "item": {
          "id": "7a204fe6-1328-4b10-bcd1-4c087700fe9e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "a87639fe-ef4e-4e83-9141-a4318adbc7c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c325292d-8baa-48b1-bb91-95da26d22fe8",
        "cursor": {
          "ref": "c61b6278-0124-4c7e-a3af-922df9ee8570",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "51942bba-5dca-405f-8c46-0115b07fcfa3"
        },
        "item": {
          "id": "c325292d-8baa-48b1-bb91-95da26d22fe8",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d7f5bc36-eaa9-4186-8d1b-467c87622393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2362dd3c-32a5-4efa-9a6e-dad1bc6de494",
        "cursor": {
          "ref": "2bd21bc2-9436-43a2-b333-c38357df8a8b",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "6bff91a5-486d-4f21-9f3d-f9118f4c82e2"
        },
        "item": {
          "id": "2362dd3c-32a5-4efa-9a6e-dad1bc6de494",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "dc114ac5-13f1-4241-a268-ec1efa5b3732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e3e221b-7746-4510-b065-c2137571ba4f",
        "cursor": {
          "ref": "315dc609-1266-4862-b18a-f1422bdc4bc3",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "8511de08-6a2c-4652-aab5-63aae07ec018"
        },
        "item": {
          "id": "2e3e221b-7746-4510-b065-c2137571ba4f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "5d1c7ddb-8bb2-4f76-aaa2-6326a53351c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a7127f5-7847-4415-8d00-f39c797788c0",
        "cursor": {
          "ref": "7fd8ba1e-3591-44e8-b61f-12b9e1455978",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "7c87c17c-e2af-4746-b280-3622ccd89e8a"
        },
        "item": {
          "id": "9a7127f5-7847-4415-8d00-f39c797788c0",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "87739987-c080-4880-ae8e-472e7cacad18",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbf92af4-627f-46d0-93e7-3defe6257621",
        "cursor": {
          "ref": "669aa31f-bac3-43a6-910b-cd567a271692",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "fed07986-7b69-4dc9-8835-868dbb43b883"
        },
        "item": {
          "id": "cbf92af4-627f-46d0-93e7-3defe6257621",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "c8c9d192-d37e-4ca0-b353-3836557da9bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "6f4a60b9-6065-4a84-a9d9-de40bd7465ba",
        "cursor": {
          "ref": "0662c015-1bee-435a-9aa9-57c00e375e27",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "2725013c-c536-419e-b43c-5fe2ce55b485"
        },
        "item": {
          "id": "6f4a60b9-6065-4a84-a9d9-de40bd7465ba",
          "name": "credentials_issue"
        },
        "response": {
          "id": "2a22fe90-a688-4461-8702-f7d4333cbbdb",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "308a3b0d-b484-419b-a04f-3ee1eaf90222",
        "cursor": {
          "ref": "9cf86c6a-28d0-40b8-b272-4d2fdbbe4555",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "92a973ba-d2e0-4071-8ea9-5186d194373b"
        },
        "item": {
          "id": "308a3b0d-b484-419b-a04f-3ee1eaf90222",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "4a755754-86e1-48f1-b050-95cbf5ceb8e7",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "35eb80e1-1a67-4f3b-b1ed-08676b196875",
        "cursor": {
          "ref": "03fc4d2f-bb4f-467c-b4bf-afbac3f8562b",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "a407a9ef-6b7f-4db9-8215-631ee0acc72f"
        },
        "item": {
          "id": "35eb80e1-1a67-4f3b-b1ed-08676b196875",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "caf152ba-fe40-476d-abbf-a4ae46fd0bf2",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf1c47ad-983c-464d-9753-ca4dcbaa652c",
        "cursor": {
          "ref": "516f3cf9-ea56-44fa-bf9a-8fdac24ba1ca",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b9b64326-4e00-433f-90b8-1e0f8cb68c1c"
        },
        "item": {
          "id": "bf1c47ad-983c-464d-9753-ca4dcbaa652c",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "66ec16a6-41c4-4c8b-a262-36fd202fce12",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "31e5f0c8-423b-454f-bd55-be08cc98d0c9",
        "cursor": {
          "ref": "99891ede-10a7-4393-8b1c-af7c34d896ad",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "aca4a395-58b3-49a4-baac-b1079eefe5d9"
        },
        "item": {
          "id": "31e5f0c8-423b-454f-bd55-be08cc98d0c9",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "bbc1cb65-5705-4bc8-8e3d-67fc21b36643",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-03-19T00:34:24.483Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-03-19T00:34:24.483Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "e7918ce6-e0ef-497b-84f2-3a7fa21fa5dc",
        "cursor": {
          "ref": "dff41706-2a51-4f3b-a804-8451879add7b",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "996726f3-efbf-48ba-839e-ed42affe7f44"
        },
        "item": {
          "id": "e7918ce6-e0ef-497b-84f2-3a7fa21fa5dc",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "65003ba9-26c9-463b-9d78-0ca5f7dddbb4",
          "status": "Created",
          "code": 201,
          "responseTime": 399,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee75230f-6faa-445d-9dae-0d24bcd05b20",
        "cursor": {
          "ref": "1c7bcc94-f3bb-44eb-8648-274988a380f3",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "8d58468c-5d8a-4112-ba8b-8a47541dc20c"
        },
        "item": {
          "id": "ee75230f-6faa-445d-9dae-0d24bcd05b20",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "052f9a55-ebdd-4b79-a205-f71987cba743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18c4aa42-23b4-48a2-8e5a-5678ca5905ed",
        "cursor": {
          "ref": "72470087-0cb3-4bbb-8026-44843fe46431",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "fa000c73-1cf0-4f93-a24a-088b80920bcd"
        },
        "item": {
          "id": "18c4aa42-23b4-48a2-8e5a-5678ca5905ed",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "026443c1-0fd8-4bc2-833c-52b481ab4081",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ddcc0b9-a75c-4fed-a966-9c31a7d255d3",
        "cursor": {
          "ref": "4982818f-6b89-4ba6-b626-a20eac139600",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e8d32950-d5e4-4797-b95d-3d020817c609"
        },
        "item": {
          "id": "5ddcc0b9-a75c-4fed-a966-9c31a7d255d3",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d19b44de-6bfb-43e8-bccc-34993dd4cf27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf54f59-c4aa-4671-9135-1e8100289ceb",
        "cursor": {
          "ref": "04b93e07-dc24-43f0-9d27-36a1cddf40fe",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "cc81f8f2-d7dc-4853-8e0f-e618605b1e5d"
        },
        "item": {
          "id": "bdf54f59-c4aa-4671-9135-1e8100289ceb",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e4303c2a-d239-4c09-b56a-24c552973ef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11628a40-3514-4d48-82b1-60a63880b217",
        "cursor": {
          "ref": "6c709319-7ed4-49b5-bf26-0d39e3c5ae37",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a5f30ad2-5790-408f-a785-0bcc0e775254"
        },
        "item": {
          "id": "11628a40-3514-4d48-82b1-60a63880b217",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9abf6a6e-6168-41f2-8bb0-59297849bebd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f085fb72-01fc-4201-b4f6-2059d637a3ea",
        "cursor": {
          "ref": "0c066af3-9afd-4597-ac16-2cb09f75141e",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "5a7b0085-5f03-4e7e-b1b0-ee17fe076c5a"
        },
        "item": {
          "id": "f085fb72-01fc-4201-b4f6-2059d637a3ea",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c51fe359-d6ea-4ae5-90aa-79218a4263e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69332a11-76b6-447c-9a1c-980e0c48df15",
        "cursor": {
          "ref": "b10d75d3-dca4-4c65-8d90-4e966632ae94",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "53acfe1e-c728-46be-9179-4c366510538a"
        },
        "item": {
          "id": "69332a11-76b6-447c-9a1c-980e0c48df15",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2db09046-577b-4709-a5c3-9f2da407b65f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fed8b6d-4880-4101-9f7a-d53501503349",
        "cursor": {
          "ref": "72498438-6eeb-4423-857a-bb5c01ee7466",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "52bc3eb7-1206-4f67-b9eb-8f180282fc96"
        },
        "item": {
          "id": "9fed8b6d-4880-4101-9f7a-d53501503349",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "72e9b30e-b513-45d3-b98c-9cd971a91f32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c01a40e8-8846-4b84-a8e4-bae04e403693",
        "cursor": {
          "ref": "c3f16c67-927c-47c7-886a-17a343bb7510",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "4ba6f639-ef46-4bd7-ab6c-4ec201d0fca6"
        },
        "item": {
          "id": "c01a40e8-8846-4b84-a8e4-bae04e403693",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d49a6e11-0c6e-4b6d-b9f9-0e070c229c33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e58084da-9d2d-43e5-9d59-670ccb80b50b",
        "cursor": {
          "ref": "3be688d0-a069-4186-a64c-c3f0b6c68d44",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "f321f31c-2a1d-48bc-bae2-4fd176b8f942"
        },
        "item": {
          "id": "e58084da-9d2d-43e5-9d59-670ccb80b50b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b3bca280-2553-447e-8407-b3fc93457b55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "781ebeef-8d15-4d3d-b615-4ab1d9a770e9",
        "cursor": {
          "ref": "43815764-a461-4bdc-9152-6988b594dc92",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "b12d4def-0791-4f39-9e67-fcf783f54086"
        },
        "item": {
          "id": "781ebeef-8d15-4d3d-b615-4ab1d9a770e9",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4499e0b7-7158-43cd-8f31-22eed0f216fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "436c2941-b7fe-496d-b334-a9c0818c3178",
        "cursor": {
          "ref": "474f8769-3d53-48c7-a6f9-fdc9c345f355",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "028f054f-677d-478e-8047-6f857a705b73"
        },
        "item": {
          "id": "436c2941-b7fe-496d-b334-a9c0818c3178",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "7beac946-5add-4550-a4b2-e306cce40e0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdb5fd5d-5500-48ca-8cdd-540ce3e29cb5",
        "cursor": {
          "ref": "cd8ddd2f-fb7a-4389-88cb-df1d71bf9edc",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f4a4bda0-6cd0-4d0b-9cd0-287c36981fb5"
        },
        "item": {
          "id": "bdb5fd5d-5500-48ca-8cdd-540ce3e29cb5",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "498b6ee2-173d-4a7f-b30e-efab1b2885b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 105,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "cb1f539a-fd5c-4864-919d-53bf8632e23e",
        "cursor": {
          "ref": "aaef0211-62c2-42a4-9236-af21b61c0438",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e8eaa959-3235-44ce-9b66-d7bc0910d1ab"
        },
        "item": {
          "id": "cb1f539a-fd5c-4864-919d-53bf8632e23e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "058b8428-ee3e-4418-8ca7-591935dec1fe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 108,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "d320ea2d-e9d6-47ac-a18e-b31bbedf6f75",
        "cursor": {
          "ref": "fe819d9b-4cae-49fa-bc37-827a2ac34067",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "1883a32f-a04f-4110-8b53-c95d36c89e77"
        },
        "item": {
          "id": "d320ea2d-e9d6-47ac-a18e-b31bbedf6f75",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "de00eedd-69a2-46c6-b506-1b85cf9ddb65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0067ec68-154d-4ca7-87b4-3a7a1a497fe3",
        "cursor": {
          "ref": "57b88e21-cdd8-4c65-bf2c-2e08374e6469",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e4d4cb39-dede-4b32-9960-ea772a8f84fd"
        },
        "item": {
          "id": "0067ec68-154d-4ca7-87b4-3a7a1a497fe3",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "539ed54a-5da9-4eb2-8707-522f8028807c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3bfe5b8-0193-4d5f-935d-12dbf8f4479f",
        "cursor": {
          "ref": "369f49a5-1bc0-48b3-b2e5-02f9f95ae874",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "ae75aae5-f385-46ca-82c8-3fb701563513"
        },
        "item": {
          "id": "a3bfe5b8-0193-4d5f-935d-12dbf8f4479f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8db68bce-d099-44b3-bfda-5d5dcf2808a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7af37ad0-8e42-40f2-8a23-b893c14da433",
        "cursor": {
          "ref": "6874c238-8d4e-4ef5-a042-dcb6db31f488",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c68be07a-1a88-4efb-b36f-70bf1866f437"
        },
        "item": {
          "id": "7af37ad0-8e42-40f2-8a23-b893c14da433",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1bb9d580-d530-4dfc-b0c6-9efb29424e71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "800022c9-a93b-4e2d-9e9d-2c96d6b2ad69",
        "cursor": {
          "ref": "b07b8ec8-f58b-4b3b-abe9-96a2d28d76a0",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "40ef0af7-c910-4858-807f-b92fcf563691"
        },
        "item": {
          "id": "800022c9-a93b-4e2d-9e9d-2c96d6b2ad69",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b49cbd2d-302b-4467-a305-542bc59506b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e66b4c2-8a87-4cc4-a631-210a329eb826",
        "cursor": {
          "ref": "3d38f0a9-bab9-4df1-adb0-3dbd4f72ecaa",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "92192007-a62d-43be-a638-6a6429d5dbfa"
        },
        "item": {
          "id": "7e66b4c2-8a87-4cc4-a631-210a329eb826",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "330d637a-0cda-43bd-89b5-2b509d0d190b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ca00f75-91b1-4878-bb4a-e2b58ec1b590",
        "cursor": {
          "ref": "154ca13a-9069-4d92-830f-db7db1ecb79c",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "42833f8e-8968-46bb-a7d5-077ee19b5533"
        },
        "item": {
          "id": "3ca00f75-91b1-4878-bb4a-e2b58ec1b590",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "bb17f1f2-655a-4f79-b6b8-e5a0d77cfa48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9765692-ece4-4104-957e-e036e4fb5def",
        "cursor": {
          "ref": "149f51f9-6365-4871-87d8-a45bd11d9a66",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "24878a1f-22ea-44f9-9986-b775ad372c22"
        },
        "item": {
          "id": "a9765692-ece4-4104-957e-e036e4fb5def",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d77bd243-4af8-4a71-b104-c07f40ed2238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e637bb82-0550-4539-aa1b-b9e181c5753e",
        "cursor": {
          "ref": "9fd04622-6c0e-44d1-b1aa-ef744f614c50",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "960884ee-d4a6-47f9-947f-377b981addf9"
        },
        "item": {
          "id": "e637bb82-0550-4539-aa1b-b9e181c5753e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "68ed0313-a5fa-4b34-9a3d-1b689548d76a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "271285ba-fb36-4a7f-aef8-5b2fae9c9870",
        "cursor": {
          "ref": "c364be84-e6b2-4b61-ae84-ef77a549e002",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "a95d436b-37df-42ce-a7bb-edf6aff17e5c"
        },
        "item": {
          "id": "271285ba-fb36-4a7f-aef8-5b2fae9c9870",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "77be5b2d-54ab-4b40-8259-5ed811c62630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a59c78de-c392-4e5a-94b5-65dd2b5a5282",
        "cursor": {
          "ref": "c5d2aa56-5c47-4b66-9f8d-2fb5f199f4c9",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "6ef6cb16-3541-4dcf-a446-37ec621cb8b3"
        },
        "item": {
          "id": "a59c78de-c392-4e5a-94b5-65dd2b5a5282",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c614ac7b-97d4-4160-8fc4-5ab11d23ff4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0937311e-9fc3-4681-8db8-ffc72992d986",
        "cursor": {
          "ref": "9bbf5774-ccc2-4a40-ac29-548712a35cf5",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "cc12015d-6cd4-4e03-8c5b-4b38d3f78c89"
        },
        "item": {
          "id": "0937311e-9fc3-4681-8db8-ffc72992d986",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a5ecb792-fb71-45c0-956d-b1a205c71737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7edd052b-d63b-48b6-ba5d-3f937d6881a0",
        "cursor": {
          "ref": "5eaa7562-e96b-4e29-9d26-41bfd5822e46",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "5a8742ee-4db9-421f-9e57-0489c25871a9"
        },
        "item": {
          "id": "7edd052b-d63b-48b6-ba5d-3f937d6881a0",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "6747143e-8ad6-47e3-882a-083e44c200f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00d30add-c660-42cc-9074-47c84276d45a",
        "cursor": {
          "ref": "853d1c5f-45b6-4cbf-9f48-4fe70769e876",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "7f5b9d5e-384b-4eac-8141-de94b1c79345"
        },
        "item": {
          "id": "00d30add-c660-42cc-9074-47c84276d45a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "2308f5db-2240-42de-b519-80eca095b8e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff16f90d-55fc-47b6-af5f-de75959fbe15",
        "cursor": {
          "ref": "e1af94bd-2a17-4ffd-9d4a-a715d2073574",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d73c3c63-ab9a-4888-8379-e4373201f63d"
        },
        "item": {
          "id": "ff16f90d-55fc-47b6-af5f-de75959fbe15",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "719da0e0-b876-4307-a4a2-ff2238d643dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfcea83c-fe1c-45fa-b301-c45572accc3f",
        "cursor": {
          "ref": "9d93676b-d2de-454c-8939-287f60797419",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "96144369-9291-4cf9-b47a-ae304c776a84"
        },
        "item": {
          "id": "cfcea83c-fe1c-45fa-b301-c45572accc3f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c64133fa-599a-4b4a-b3d4-34c9e9d74964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60d34083-72a8-4779-abb1-cb48efd9132e",
        "cursor": {
          "ref": "7544a9e0-9456-4ca8-9b6e-19206d6fe6a3",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "fb048cec-aa00-4f73-8e99-969c9422379f"
        },
        "item": {
          "id": "60d34083-72a8-4779-abb1-cb48efd9132e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8790748c-6ed7-440e-8fe5-bf14d1b1d3a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3cd8b4f-86ee-4f30-8d43-e8739e300c1d",
        "cursor": {
          "ref": "07d87b44-4af9-43fb-9f81-737bfc29bd4c",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "5b33dae4-1d6d-4fa5-b307-f8cd31097322"
        },
        "item": {
          "id": "f3cd8b4f-86ee-4f30-8d43-e8739e300c1d",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4d546efa-f8c9-43a3-bfc3-0a1a94c37bbc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 81,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "4767a8f2-eedb-4f38-a6d7-40639144e41d",
        "cursor": {
          "ref": "031ce7b9-c6eb-4ca4-8bdd-f9f9e302a9e6",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a008f8da-2023-4ef0-a902-968f1d9f7dcf"
        },
        "item": {
          "id": "4767a8f2-eedb-4f38-a6d7-40639144e41d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "5293b342-09fc-48b8-8445-2f0513431885",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc2511a8-91d2-4c62-9c19-64b246586cc0",
        "cursor": {
          "ref": "c9c6b973-af24-4ef6-988c-d86037a1d41c",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "4213b22f-73ab-4873-b721-1a9dc8c1ed49"
        },
        "item": {
          "id": "fc2511a8-91d2-4c62-9c19-64b246586cc0",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2f4bf73e-f0c1-4d41-a413-6d6ea0075673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3d441b8-d73a-4f9e-93de-a5ac24c5b903",
        "cursor": {
          "ref": "6c48c1c0-40d6-4c17-891f-b8501c42a9ad",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "c1eee0c9-9f6e-44ca-921d-fda9e4d80799"
        },
        "item": {
          "id": "f3d441b8-d73a-4f9e-93de-a5ac24c5b903",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "421c09f7-f4a0-4a36-a254-e4c7917a0784",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43553964-baaf-44aa-87ac-4836ac19734f",
        "cursor": {
          "ref": "12657bc7-5b00-4227-8cfb-dfb247c1401a",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "b8fc9884-e604-4177-82bc-2f5c0f036c01"
        },
        "item": {
          "id": "43553964-baaf-44aa-87ac-4836ac19734f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "85f2a3a5-a0f0-4068-bdd2-a716661b38e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bbe6362-d353-4f11-af8d-45309103bbfb",
        "cursor": {
          "ref": "c8645014-1ad6-4630-b8f0-e33b6b0ce9af",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ff53ac08-26fa-43c5-a996-dfc2e66f43d3"
        },
        "item": {
          "id": "9bbe6362-d353-4f11-af8d-45309103bbfb",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "75c713cb-f82c-433e-b961-cea9a99b8374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d54db358-3bef-4647-8b37-736861e0fb3f",
        "cursor": {
          "ref": "1764b573-8542-4ecb-95c4-f7c94386e9c5",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "4efeffd1-e66a-43cf-b0bc-4492a393f9a6"
        },
        "item": {
          "id": "d54db358-3bef-4647-8b37-736861e0fb3f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e98bd79d-9277-4e0c-8744-e255fe35ed78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "914c0b75-c874-4c83-af03-8c51574eab71",
        "cursor": {
          "ref": "67ddc1ea-26ed-4545-8c6c-f4606f6ed3e2",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "7df1608a-b253-4d88-b525-0df2092bdb29"
        },
        "item": {
          "id": "914c0b75-c874-4c83-af03-8c51574eab71",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "2e7dea75-2697-421d-a528-e400c4f9d682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a6b977d-e526-434b-9956-8f45b11a4515",
        "cursor": {
          "ref": "be1dae8c-d878-40d3-9a75-0154781958c1",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "db2cca29-65b2-4605-95ae-7f1e1862d01e"
        },
        "item": {
          "id": "6a6b977d-e526-434b-9956-8f45b11a4515",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d444c695-0143-4d25-830d-a188a982a6b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d87350e-5145-4aa6-bcd2-abcb98876802",
        "cursor": {
          "ref": "d8431880-0ab4-4b18-899f-aa83c8e784f2",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "f6cd53f0-8249-4053-83ac-cbb37b678278"
        },
        "item": {
          "id": "2d87350e-5145-4aa6-bcd2-abcb98876802",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "97282f75-f3bf-4110-af3e-88359447a186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5467101c-e664-4ff9-8a05-777acf4efa2b",
        "cursor": {
          "ref": "72ffb580-adbb-4ede-86ee-0295286645ab",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "904a327f-f1bd-4cdd-bfe9-d2a09407ad42"
        },
        "item": {
          "id": "5467101c-e664-4ff9-8a05-777acf4efa2b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "1aa620ba-2321-4a24-965e-055b73aea5e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac49edaf-3d0d-406d-a779-138f5e21c0cf",
        "cursor": {
          "ref": "97fe1f12-6e3f-42fe-9beb-df50144b82e3",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b6d5b112-e576-4aa6-80f2-7ed7c878d53c"
        },
        "item": {
          "id": "ac49edaf-3d0d-406d-a779-138f5e21c0cf",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5f002031-5b13-4511-ae3d-74d301e69db6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb0476be-a855-4220-9d13-3c84d6a5d512",
        "cursor": {
          "ref": "4a3736f8-785d-4612-9a4a-620844bdfd2d",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b431fa89-cde4-42be-abb9-6f2a945e8fab"
        },
        "item": {
          "id": "eb0476be-a855-4220-9d13-3c84d6a5d512",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "7742cff8-9edb-44a4-b603-e30a3f2df6be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5da381b6-bc03-4dcc-a067-177454c3c56a",
        "cursor": {
          "ref": "a815c8cb-7287-4966-affe-22c8e8b1c506",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "5dcde400-ab43-4173-8683-66b5068e0378"
        },
        "item": {
          "id": "5da381b6-bc03-4dcc-a067-177454c3c56a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ac726116-98e7-4631-a6d6-4f6d46662615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bf9512b-1952-4b8b-8138-9209bb385019",
        "cursor": {
          "ref": "2a1da9f2-d2d7-4c3f-ae33-24896b3e5ebd",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e4814a8c-c292-4d53-bbb7-2a117974b20e"
        },
        "item": {
          "id": "8bf9512b-1952-4b8b-8138-9209bb385019",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d329ab56-e98f-4457-a5ee-1ddf2a0b7196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39da7244-7af7-45b7-bbec-0c7117b5f827",
        "cursor": {
          "ref": "cf0c927e-1138-4586-95cd-d4ca9544c679",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "333a27d1-5033-4831-a339-99883c85aa3d"
        },
        "item": {
          "id": "39da7244-7af7-45b7-bbec-0c7117b5f827",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "27531b7e-14d2-49ec-9edc-79f1653dae83",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 98,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "26cdb2bd-3c7d-45f2-8b27-12e15ef56f19",
        "cursor": {
          "ref": "b9fe0e14-b8c1-408a-8ecf-58d83f5128d2",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "b0a01d5b-f206-4668-b944-f1579b051164"
        },
        "item": {
          "id": "26cdb2bd-3c7d-45f2-8b27-12e15ef56f19",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "fe0f6a58-3456-46e2-9e87-c2ba1aa361c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5327bc32-0ea7-4296-8ada-b69b787b1c7e",
        "cursor": {
          "ref": "c9886913-182f-4a71-a8b2-25322c6bfb5c",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "23b3a429-8346-49b3-b917-2b950b62cad5"
        },
        "item": {
          "id": "5327bc32-0ea7-4296-8ada-b69b787b1c7e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "431da009-1123-4159-afa4-5637cdffc7e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e1981d5-f6bd-45af-af17-b733267a263a",
        "cursor": {
          "ref": "2294fb66-770f-425a-ae49-f28f9c387638",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "3f54fbb5-57d8-447c-a972-00c4eca8e5e2"
        },
        "item": {
          "id": "7e1981d5-f6bd-45af-af17-b733267a263a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8fe85183-6627-4d26-95cd-9918a92a5ab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16f8c2e2-9bfb-4cf0-8dce-1afd566c0d29",
        "cursor": {
          "ref": "7ba44fd3-dbfc-4520-bac4-78c4dcfe6867",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "dc6a7075-b4da-440b-9351-d328abeccd26"
        },
        "item": {
          "id": "16f8c2e2-9bfb-4cf0-8dce-1afd566c0d29",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8ff19211-dbc1-493e-8688-248a542572d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15100aa6-0fca-4c5d-806d-4b4aae76a4a2",
        "cursor": {
          "ref": "219d1ae9-9db5-45b3-9859-0a2591242619",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "b30104ff-bcf4-488e-a931-193cb508f700"
        },
        "item": {
          "id": "15100aa6-0fca-4c5d-806d-4b4aae76a4a2",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d71329e2-d867-41f5-b5db-ac9353b2f1cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da7e79b5-9a3b-498a-9c06-06343fabe241",
        "cursor": {
          "ref": "c9fa3c85-fa6c-472d-a08c-f566f601419a",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "3b71c1b7-62e7-4d07-8976-a53500e5b96d"
        },
        "item": {
          "id": "da7e79b5-9a3b-498a-9c06-06343fabe241",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1f651dab-b24b-462d-b3b2-f8e739af4f21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39e43927-64c6-4714-932b-12dbf48e0edd",
        "cursor": {
          "ref": "6c9ea54e-4dfa-4ef9-8149-406344bc7ec0",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "235c90f9-835e-40ab-9856-77cb95367abb"
        },
        "item": {
          "id": "39e43927-64c6-4714-932b-12dbf48e0edd",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "1c505d14-7dd0-400f-891a-b072e54af263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a1279ad-b5ee-4c5e-84bd-e5c755adb853",
        "cursor": {
          "ref": "9b825338-2c04-4f69-ad83-35b64a2b8a37",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "4608e70b-e4cc-4a22-8e05-fa7905c1801d"
        },
        "item": {
          "id": "5a1279ad-b5ee-4c5e-84bd-e5c755adb853",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "19930136-04d2-4fa8-889c-eed189150bfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d360f94b-0ac3-4104-adbe-903d673acc14",
        "cursor": {
          "ref": "3afc7dbb-3734-4a62-80e2-dcb11b389a60",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "0322aee9-06e9-4113-b84d-7abb0b965b6b"
        },
        "item": {
          "id": "d360f94b-0ac3-4104-adbe-903d673acc14",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "41970275-4806-4083-8608-3796521ffdbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a8809a-5fa8-4065-a10b-c4263fbb8100",
        "cursor": {
          "ref": "24792e34-3304-4604-8c25-bb9b0152df17",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "4fa8584a-9e15-4b81-a4ac-d85c94e4cae3"
        },
        "item": {
          "id": "f7a8809a-5fa8-4065-a10b-c4263fbb8100",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b95a35fe-b6de-4408-9220-19e07c0e31ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "167906b0-f306-458e-bd5f-097b0c918b28",
        "cursor": {
          "ref": "49fed27a-91de-46c7-80e1-29817dfe3dd3",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "1c60a03b-0b07-4f7f-a04f-6185fff72111"
        },
        "item": {
          "id": "167906b0-f306-458e-bd5f-097b0c918b28",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3f55f9e9-3306-4883-8320-b6e3be88ea60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12e76994-23ab-452e-9a5a-19d07c048a87",
        "cursor": {
          "ref": "2bcf547b-e40c-4de8-977f-0efd706554c0",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "0d26ab1d-92e5-4626-9438-1cb7a55044e0"
        },
        "item": {
          "id": "12e76994-23ab-452e-9a5a-19d07c048a87",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "9d66a167-411c-4c14-92b0-a529a4187708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da2c3ae1-de88-410a-af1c-f580473deaa7",
        "cursor": {
          "ref": "f2f878f9-42e8-4019-9d82-e7ce7aab760b",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "1157b261-ed2b-4107-ab2b-b14a8252ebef"
        },
        "item": {
          "id": "da2c3ae1-de88-410a-af1c-f580473deaa7",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7f096e19-d6a7-4a3c-bd1b-c03ad80683e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc6a8b1-03a8-438a-ab5b-c6434eae5f83",
        "cursor": {
          "ref": "76f9ce0d-e930-4548-9790-050cea8b7801",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c1eeac59-b46b-4479-aa7b-5a51a1b0ac46"
        },
        "item": {
          "id": "7fc6a8b1-03a8-438a-ab5b-c6434eae5f83",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "8305a12b-412b-4aea-84fd-1a3d325482e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a23c6c95-7d48-4d8a-a8dc-3ad039938172",
        "cursor": {
          "ref": "e628b6f7-11d4-433f-84f7-064b42152a2d",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6e5edfe2-be77-498c-bf59-633e2c2a72bb"
        },
        "item": {
          "id": "a23c6c95-7d48-4d8a-a8dc-3ad039938172",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a64c8f41-2af9-4b1a-8f9a-8f949a1bf122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a186b167-6d03-4d7b-aaf2-607336745bc6",
        "cursor": {
          "ref": "88eab3b6-9174-49bd-8f1e-e455b722cb82",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "0021de24-57f9-4685-8143-80970713ecff"
        },
        "item": {
          "id": "a186b167-6d03-4d7b-aaf2-607336745bc6",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "76d6a1fb-b9a5-4aa7-b3aa-0f608d81b2fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c0083be-0d42-4435-aa70-c4c0e2a1b035",
        "cursor": {
          "ref": "354cc874-87e2-4a5e-ba4c-2da72d0c9746",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "aae61179-0805-49f3-8885-7439e5bf11ab"
        },
        "item": {
          "id": "5c0083be-0d42-4435-aa70-c4c0e2a1b035",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "93d71467-27dc-4411-8d42-7aa8b923a142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a28c9443-3ac5-4f5b-bae5-06346b950577",
        "cursor": {
          "ref": "3d1c8217-c564-400c-a118-ab83fad2f75a",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "8feec56e-c540-4377-bb27-24c6d9d6333a"
        },
        "item": {
          "id": "a28c9443-3ac5-4f5b-bae5-06346b950577",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "7d45fb60-b9c2-49db-9a67-509248a11c38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52a95f35-c786-4cdf-b13b-d6ece8e978a6",
        "cursor": {
          "ref": "d4a0e4d8-4f70-4041-9111-258d61b5973b",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "223d470e-0f2d-46ff-a9c3-79dd1b137fa8"
        },
        "item": {
          "id": "52a95f35-c786-4cdf-b13b-d6ece8e978a6",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "9bd10ef5-dcae-4a0a-8a80-96d52f4c8a3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be643292-6b4d-4925-a72c-25ac1bacbb51",
        "cursor": {
          "ref": "9c2357dc-a03d-4430-b394-3df74e7ed1ae",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "cc2c07ab-78ea-4e5f-8bc1-087a63f6ba79"
        },
        "item": {
          "id": "be643292-6b4d-4925-a72c-25ac1bacbb51",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "aa754ffc-61df-4584-98fe-01a6b3f3ff18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99ff144e-8ccc-4edf-9272-0d5543ef96e2",
        "cursor": {
          "ref": "359d7a20-c626-48a8-b7cc-f8f53e5ea6a1",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c45d0b88-fe86-41f8-85dd-a079f49b1e12"
        },
        "item": {
          "id": "99ff144e-8ccc-4edf-9272-0d5543ef96e2",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "2107fdf7-f6d4-4888-803a-ef54a3e0d1b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffbed68a-4941-47eb-8afc-62b79bc320e9",
        "cursor": {
          "ref": "cdceb00c-2a02-45e6-b5b6-0fff21ddc87c",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "64814aef-44f1-45d8-b994-72a2532836cd"
        },
        "item": {
          "id": "ffbed68a-4941-47eb-8afc-62b79bc320e9",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "c46b12d4-5ba2-4def-b85e-3778bede8cfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74ea23cc-9982-470c-a0b6-20f59ee0212d",
        "cursor": {
          "ref": "4dd701b8-ab8c-4eac-bce2-b10e3c44d38e",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "439e4bfb-9fc1-4546-8bf7-a329ed521d3a"
        },
        "item": {
          "id": "74ea23cc-9982-470c-a0b6-20f59ee0212d",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "ef38be5a-f7e3-4942-adab-7442e8caf512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7d02508-c17c-4afe-86fe-d115e632f0d6",
        "cursor": {
          "ref": "725043dd-06b0-486a-b7d3-66d88c0e1286",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "fc27f98d-674f-4f13-b985-422a10a62eb1"
        },
        "item": {
          "id": "d7d02508-c17c-4afe-86fe-d115e632f0d6",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "15ff5477-ef33-4972-bf6a-9eba7e685921",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fd60088-2c20-4730-b54b-7b63a1fe6991",
        "cursor": {
          "ref": "93a37544-bf72-4ac5-ae25-83e898bb8fb9",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f08bb0fd-8431-496a-974e-705609ee49bc"
        },
        "item": {
          "id": "9fd60088-2c20-4730-b54b-7b63a1fe6991",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b2b6d421-3743-482e-8310-c0c7cef6a289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aebe57c3-7006-48a4-ae49-b7651101103d",
        "cursor": {
          "ref": "7bdc3b96-deba-4333-a00d-663a29fe70d9",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "414e7367-f04a-4da0-91b8-b0b491f62fcb"
        },
        "item": {
          "id": "aebe57c3-7006-48a4-ae49-b7651101103d",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "a1c0e197-fda7-4093-a789-dbb2e18def29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc88eaf2-40cf-4c76-9377-d317115f4652",
        "cursor": {
          "ref": "0e300c37-6859-42e0-83f4-e40e25b0a220",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a0b72fef-843e-4e89-8ab7-a9027adc1a13"
        },
        "item": {
          "id": "cc88eaf2-40cf-4c76-9377-d317115f4652",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "78abe185-e675-477b-987b-dc20e2e3e444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e0221a5-c3b1-4ac4-a15a-139e42085c09",
        "cursor": {
          "ref": "b605509b-0c9f-4d69-844a-8d07a1dfa849",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "74814355-ce02-452a-98a1-7adeb599ffc6"
        },
        "item": {
          "id": "8e0221a5-c3b1-4ac4-a15a-139e42085c09",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "d15c76ea-8973-46ae-ac29-eda76603fa05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d731a7c8-7a09-489b-97b2-d1ebaab8ec50",
        "cursor": {
          "ref": "2b270f6d-8e5e-47de-bb4b-3228e440de27",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "0c21c204-c6e6-4515-99d2-1e6bd3c6eb48"
        },
        "item": {
          "id": "d731a7c8-7a09-489b-97b2-d1ebaab8ec50",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "1a4a3833-7a11-4de1-b38c-4768e7bf8710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a737556-6c9b-4603-8830-0e91f2b3d9cd",
        "cursor": {
          "ref": "b3a42f62-6291-47fc-81f7-e0001d6dd3cb",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "24598027-e3eb-4d81-83c4-0a66e2a0a186"
        },
        "item": {
          "id": "8a737556-6c9b-4603-8830-0e91f2b3d9cd",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "0e8ec286-9514-4d64-830f-e6eefce425f2",
          "status": "OK",
          "code": 200,
          "responseTime": 153,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "b9454297-9a8f-4fc8-9703-9077e75b9c5c",
        "cursor": {
          "ref": "2065fab2-52e9-453e-99cb-5e7c1dcaf2fa",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d98a5396-8e9e-4b88-8cb4-76506c30f8e2"
        },
        "item": {
          "id": "b9454297-9a8f-4fc8-9703-9077e75b9c5c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "68de861a-c970-49fb-8d8b-23390db34b87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f562ab0-d69a-49d4-86a3-7bc23631fb69",
        "cursor": {
          "ref": "0f39068c-0a2d-42e4-a8c2-d8fc8d1ffc6f",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "e2278573-58e9-4060-9ec0-2560b897ccda"
        },
        "item": {
          "id": "8f562ab0-d69a-49d4-86a3-7bc23631fb69",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ca2e1d9b-87f0-4e43-9e24-f3dfa9d1da46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f036e486-7e83-42d4-88cb-343ce249c274",
        "cursor": {
          "ref": "34f5bb62-0f39-46f8-8b64-219993b3c4ab",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "951596eb-98ca-4e65-a454-961353f4a787"
        },
        "item": {
          "id": "f036e486-7e83-42d4-88cb-343ce249c274",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "41c9e228-caa7-43ef-b98b-27389261d5b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35508f69-c7de-4e1b-998f-aa02423ba0a1",
        "cursor": {
          "ref": "08b6f432-1777-4529-a306-a00d73d7ae15",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "74f051da-1a91-4a05-a446-162114e6e7b1"
        },
        "item": {
          "id": "35508f69-c7de-4e1b-998f-aa02423ba0a1",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "b8076cc1-149f-4270-9635-b3fbbad9c7f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76867862-47ac-4587-9eb0-23ee2d23588f",
        "cursor": {
          "ref": "8d9dec41-0bb4-40df-8002-0b5fcd5fa773",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "d93d8103-651a-49ce-9150-dc377cfc8686"
        },
        "item": {
          "id": "76867862-47ac-4587-9eb0-23ee2d23588f",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "2b0529d6-af5d-4aae-9777-aa7334437241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2144c264-b733-410d-8f6f-f6701b5ac41b",
        "cursor": {
          "ref": "0108adce-c64c-4c1b-8193-77eac17d0b06",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b4ba1112-7979-4987-b8bb-845d3ac5e53c"
        },
        "item": {
          "id": "2144c264-b733-410d-8f6f-f6701b5ac41b",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "9cb227e3-8b2e-46df-9ee5-c373e2708ee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "203217f3-492c-41d4-a952-977d6e35f115",
        "cursor": {
          "ref": "44bb74ed-3149-466e-8e98-4c9db675a4f2",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "1b23219a-670f-468c-baa7-8530eb007dd3"
        },
        "item": {
          "id": "203217f3-492c-41d4-a952-977d6e35f115",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "77c78883-6373-4f60-b850-515a29636978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c35230f-4db1-487e-97bb-82fef487c74a",
        "cursor": {
          "ref": "7fad309b-c7f3-44c1-8d2e-b6f7bf4e68df",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "a295ff4c-26d7-4b5f-b234-a9e63c1b8ab5"
        },
        "item": {
          "id": "7c35230f-4db1-487e-97bb-82fef487c74a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "30458c53-8330-4989-93a5-75aec2d960a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cfb6745-3351-46df-9c8f-89cc7288c8ab",
        "cursor": {
          "ref": "6b5409a8-9b1e-422f-89e1-9da55b3a73d6",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "97c15d37-73b7-431d-8637-6e50c1b5d4a1"
        },
        "item": {
          "id": "4cfb6745-3351-46df-9c8f-89cc7288c8ab",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d4a79b27-e971-4283-8e90-84ff5af016fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a6c1c98-a49f-4221-b4f1-d0d524287c11",
        "cursor": {
          "ref": "883733af-56a9-4020-83db-4d5230028d49",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "41864069-6289-4e64-b798-ab6f45074775"
        },
        "item": {
          "id": "1a6c1c98-a49f-4221-b4f1-d0d524287c11",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "4845c0d7-1c10-40da-9177-aaa70c1aa594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b82f72cf-c394-4c06-bced-5b15e49e86eb",
        "cursor": {
          "ref": "6dacfcbb-6fb6-473f-96bf-7c07af2fcc08",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "0fcc75ed-8085-4a54-afd4-248a01c6e63d"
        },
        "item": {
          "id": "b82f72cf-c394-4c06-bced-5b15e49e86eb",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "c604fa10-9ac9-4532-bda4-85a8de65be28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcf970cb-b291-44f3-8102-3ddfcbcda8ff",
        "cursor": {
          "ref": "b1b0741c-35ff-4f91-9b6d-fe3eb5650eac",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "2dba0303-7560-4996-88c9-c0ea5fe9bf8b"
        },
        "item": {
          "id": "fcf970cb-b291-44f3-8102-3ddfcbcda8ff",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "1ebb86dc-91c1-40e6-add9-d870892411b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36c5c850-6539-40d1-a64f-1e237dfad2ef",
        "cursor": {
          "ref": "29d48a34-bb87-453d-89ca-d23a912657fe",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "006582b9-af07-4bc4-8f2c-9a46e7ec425a"
        },
        "item": {
          "id": "36c5c850-6539-40d1-a64f-1e237dfad2ef",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "205319f3-80b1-4f67-ad17-4ca10f76a68c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db008f87-80ad-4b0a-a462-4711b51f5de8",
        "cursor": {
          "ref": "c829c852-81d2-4a3a-8d85-65c4af42a2bf",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "31885dc0-d514-4469-918e-3485113aeff0"
        },
        "item": {
          "id": "db008f87-80ad-4b0a-a462-4711b51f5de8",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "c23bc730-ee85-4254-8182-119cc923bf87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d460c76-5be1-4557-8718-d1df559bb944",
        "cursor": {
          "ref": "d3ca287b-38f8-47de-beec-421f0902982d",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "2eed174d-c7f0-4386-ae95-b395086edf0a"
        },
        "item": {
          "id": "2d460c76-5be1-4557-8718-d1df559bb944",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "05b1819e-9908-4ebf-b7a6-8260fd2a1794",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed900bcd-2bba-44a4-ad4f-9cb7bca0e6af",
        "cursor": {
          "ref": "0d0289c5-39e9-4df4-8179-41d9d18208c6",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "8fb7bf51-aceb-45f2-9e7e-55b01e33ced5"
        },
        "item": {
          "id": "ed900bcd-2bba-44a4-ad4f-9cb7bca0e6af",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a2cc6c92-8032-404e-b87c-5ae29f5e73e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a244ab5-91ba-481a-bd5a-c7156af13fab",
        "cursor": {
          "ref": "55ac5725-62a3-4561-8534-57265a271edc",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "014b389d-727c-40d1-8702-4e7e59f805e8"
        },
        "item": {
          "id": "8a244ab5-91ba-481a-bd5a-c7156af13fab",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "1d23535e-88f9-41da-b052-3043b0670ab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f477344-cd3f-4083-bace-8cbbf9c4d631",
        "cursor": {
          "ref": "6fc559da-bb09-43a4-a81b-a1a639ef879d",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "0385424c-9c24-4270-8dbe-da7ac6c1b649"
        },
        "item": {
          "id": "6f477344-cd3f-4083-bace-8cbbf9c4d631",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "d1e5ef93-137f-439e-8e4f-1260a40936b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57dc7756-a8d1-4e0f-8978-2a30af2943dd",
        "cursor": {
          "ref": "16b85785-14e3-4b29-8cc9-60384e37aa90",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "79314dd2-7e94-4c82-8da6-11cebcde680d"
        },
        "item": {
          "id": "57dc7756-a8d1-4e0f-8978-2a30af2943dd",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "5500a812-5963-4b4d-95b5-df86d9354c9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "902d067a-0da2-41b8-8408-21cbd58e66f2",
        "cursor": {
          "ref": "e564673d-5cbc-4e83-bce8-68518f2003b7",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "0d46e5a7-95e4-41ee-b9d0-d24c95de6dc0"
        },
        "item": {
          "id": "902d067a-0da2-41b8-8408-21cbd58e66f2",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "0b18a361-a873-4720-a07e-bcdf4a5e8ea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec7bc6b8-c535-46e8-8b29-08d768ee3740",
        "cursor": {
          "ref": "ff66c0d6-07ae-4447-9c00-921b08117525",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7ca72535-f339-4a49-b1b1-be8d73c24f57"
        },
        "item": {
          "id": "ec7bc6b8-c535-46e8-8b29-08d768ee3740",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "0e854448-a7e4-4e75-aa8b-38d63f0e8ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f9e593e-df19-4dbd-9f9d-5dc8633a5401",
        "cursor": {
          "ref": "4e70d289-226a-4a0a-9c3c-ef71af637500",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "85f793be-8f75-4c7d-a50b-5ee826265489"
        },
        "item": {
          "id": "1f9e593e-df19-4dbd-9f9d-5dc8633a5401",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "3aea005d-13e1-42cb-90be-d9c7a6972ac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66055965-83a2-48f8-b78c-b1e58bd9c6cf",
        "cursor": {
          "ref": "842853a8-f424-4896-b180-3fd76eb39efd",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "ee1d63a0-3700-4bf8-a0ba-68f6b3634816"
        },
        "item": {
          "id": "66055965-83a2-48f8-b78c-b1e58bd9c6cf",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "7cded103-daf6-4fec-af16-294c236c177f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1167f871-da4c-43d8-9ca6-07dafa61223f",
        "cursor": {
          "ref": "82226b48-34eb-4f78-8c57-47040b1112a3",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "5a366feb-1167-4625-af9b-f0141dd6175f"
        },
        "item": {
          "id": "1167f871-da4c-43d8-9ca6-07dafa61223f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "9fc3c163-2d3d-4c24-b415-d846cedd7a64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba36f938-d38e-4ba4-b7dd-a281b8ba80d4",
        "cursor": {
          "ref": "0d3a8827-ae4c-4e16-9394-0fd0bb2cc7f2",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a3239638-b560-419d-b0ef-00476d986e4d"
        },
        "item": {
          "id": "ba36f938-d38e-4ba4-b7dd-a281b8ba80d4",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "7914d53e-88cb-4afd-9050-c026c2451a09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "107e7548-5168-44e2-8755-79b3b81ee74a",
        "cursor": {
          "ref": "69a5d50a-9cb7-4704-af62-638074088351",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "3a1de04f-0063-4c49-b183-0e70492d7e20"
        },
        "item": {
          "id": "107e7548-5168-44e2-8755-79b3b81ee74a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "34ad717f-ea47-4e9f-9fd7-49a06723aea2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f73cb196-4c24-4db6-b467-5ea11cd925f1",
        "cursor": {
          "ref": "745f1ccd-308b-46b9-ab87-231dbf21ff45",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "bfb8a38d-395a-485f-945d-b748b392ebe0"
        },
        "item": {
          "id": "f73cb196-4c24-4db6-b467-5ea11cd925f1",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "3efd536a-b89c-4f2c-8349-6670dd5d2602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26034147-cdf1-48c5-af4d-f8aab6b6a539",
        "cursor": {
          "ref": "e82aa5fe-8956-4ccb-9f9c-0767e7ad5a53",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "fca050c4-8248-4c29-a25d-969788957763"
        },
        "item": {
          "id": "26034147-cdf1-48c5-af4d-f8aab6b6a539",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "37c63fa3-94d4-4e4a-a0c3-299b402ef92f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca20c640-2050-4cad-8388-1c99db0c55ca",
        "cursor": {
          "ref": "2d3e84bf-e442-498b-919d-bef8e0d619f6",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "3d3c3c96-fc9b-448e-94cd-f5af4b5298c0"
        },
        "item": {
          "id": "ca20c640-2050-4cad-8388-1c99db0c55ca",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a0306bbb-fee5-4dc0-a267-39f42ea239fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a30aa8-f2d4-4f99-a622-d7fe8b932da2",
        "cursor": {
          "ref": "7994b979-bc98-487a-8f8c-babded68cd3f",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "78166888-52e9-4a77-b8a8-d78e7f80b962"
        },
        "item": {
          "id": "b2a30aa8-f2d4-4f99-a622-d7fe8b932da2",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "87ebce4f-c313-43ac-8fa6-418d5b73a6e9",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "9b3af823-2dc5-49d4-bd17-5c3b682e0baa",
        "cursor": {
          "ref": "bce59660-4d98-40b6-a397-e3b1f80abdaa",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "e20535c1-8cb7-4bfd-8ab8-544d9904b48a"
        },
        "item": {
          "id": "9b3af823-2dc5-49d4-bd17-5c3b682e0baa",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "49747d81-799f-4274-8306-30c125334be5",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "caa80be4-6d54-4f9c-b2ab-d78660bb9e92",
        "cursor": {
          "ref": "8d6830cb-3de1-4598-a0ea-2c20f0a193cd",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "bb8eab7e-e49b-483e-96c9-01d6a84e4c0e"
        },
        "item": {
          "id": "caa80be4-6d54-4f9c-b2ab-d78660bb9e92",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "3bcf57bc-b8f0-46ff-9dbc-53c1924b2a09",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "fdbd6600-be20-4472-9aad-96b1ba9649f3",
        "cursor": {
          "ref": "fafcb096-3b89-4cfa-9322-c4624811c626",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ab7be1e6-bdde-4863-9ef6-d0e3d1fc6c21"
        },
        "item": {
          "id": "fdbd6600-be20-4472-9aad-96b1ba9649f3",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "040d1051-6b1f-48cf-81c7-a6b11b77dcd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb58b1a1-c5d8-4dec-9fe7-eae8fd9a84de",
        "cursor": {
          "ref": "556e3823-dbae-4534-b8fb-af7f324cce45",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b5e2456e-899c-4c32-8d7b-f521bfa7d667"
        },
        "item": {
          "id": "bb58b1a1-c5d8-4dec-9fe7-eae8fd9a84de",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "08247b55-6c06-4faf-abc7-87949dde4a68",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "a5185751-6571-4497-9e13-bda6eb044658",
        "cursor": {
          "ref": "bb4fad82-9bf6-4d21-a427-086ee1768a3b",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "e1de82ed-9f6c-4d0c-8b40-e01be085f0aa"
        },
        "item": {
          "id": "a5185751-6571-4497-9e13-bda6eb044658",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "70ff8830-e789-4c1a-a460-cc8bf3cc1a23",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "0156f5ca-dbd2-44cc-8979-5caf75f95ff7",
        "cursor": {
          "ref": "2f73b2ae-8d37-410a-8a7c-531cac6eacfd",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "b24af31c-3449-43c9-b944-ec3c83358554"
        },
        "item": {
          "id": "0156f5ca-dbd2-44cc-8979-5caf75f95ff7",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "a597b4c2-d1ba-4f60-a29d-4f8316dd27da",
          "status": "OK",
          "code": 200,
          "responseTime": 201,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "fdbd9835-a73d-4a28-abf9-53089521a4eb",
        "cursor": {
          "ref": "9fe40b16-a38a-4852-b61f-76f4b6a8a966",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "b0a4c5c8-7d1c-4146-aaf5-80f41e0edf21"
        },
        "item": {
          "id": "fdbd9835-a73d-4a28-abf9-53089521a4eb",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ec5b97a4-1bcf-4514-bd82-269e55ee40dd",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "de53c571-a2a6-4582-8668-6739ec8a46a0",
        "cursor": {
          "ref": "51ea6487-ecac-4571-96ee-39575e24b010",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b4f83df4-f421-405b-8830-cad76e879134"
        },
        "item": {
          "id": "de53c571-a2a6-4582-8668-6739ec8a46a0",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c0d348a1-412f-4ca6-bb71-81161355808d",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "dd75a4dd-06af-4ec9-a678-986fab7b161c",
        "cursor": {
          "ref": "409041a8-ae39-48d6-97f1-f18b7935bc43",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "27c39dae-f4c7-443e-9f49-0dd332c95faf"
        },
        "item": {
          "id": "dd75a4dd-06af-4ec9-a678-986fab7b161c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "9a9f89e3-71cd-466f-85d1-c5a6f9ee1c6c",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "8ddeea22-1363-4e40-b7a3-45f2ac254dc3",
        "cursor": {
          "ref": "0ae1b316-c296-40ab-8a2e-0a5bddc34620",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e8f248ec-6119-4e27-8fc3-5db673bfe0ca"
        },
        "item": {
          "id": "8ddeea22-1363-4e40-b7a3-45f2ac254dc3",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "145ba952-ff40-4e3a-91af-d6ed0560849a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a300ae3-e2bb-46b3-9a7e-ef70d1dcf586",
        "cursor": {
          "ref": "518cc2ab-911a-48e2-8070-16ebb7351d80",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "7bd9644c-3091-4b7a-bda8-d1d02df7dc6c"
        },
        "item": {
          "id": "6a300ae3-e2bb-46b3-9a7e-ef70d1dcf586",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "02502950-90a1-4096-832f-07f999260c6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57208260-1865-4798-8b5d-580b40310e56",
        "cursor": {
          "ref": "523cfa90-9ebd-446c-a7e5-6ef9cc51558a",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "7b5f7c93-ff87-492a-ba40-f870be3f2318"
        },
        "item": {
          "id": "57208260-1865-4798-8b5d-580b40310e56",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c9efed0d-3c34-4b82-8918-734b5641536e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80247991-a788-44e4-a5f1-670cba9423fc",
        "cursor": {
          "ref": "372ce4a7-633a-4129-9f79-e0b0d94d6729",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "071da391-b778-4774-bb9f-1fd61677dae6"
        },
        "item": {
          "id": "80247991-a788-44e4-a5f1-670cba9423fc",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "5d9f2a88-9997-48fa-8238-c94a7422829a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73d224dc-e0b7-43d3-ae06-88a199c5102c",
        "cursor": {
          "ref": "5f552df3-3353-4ad0-8435-f62a50f808a8",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "266269a1-9d9e-4d07-868a-420f82705686"
        },
        "item": {
          "id": "73d224dc-e0b7-43d3-ae06-88a199c5102c",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "511daed1-650f-40d0-9bf7-2a2d356dba7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbecc6f0-4562-4201-b4d3-6be64a326f50",
        "cursor": {
          "ref": "6bb67d3e-f95e-4d95-bde8-e44deba1537e",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "74f8c731-94d4-4894-9057-27f1ab6bacb1"
        },
        "item": {
          "id": "fbecc6f0-4562-4201-b4d3-6be64a326f50",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "1fbbca56-3ad2-434d-a611-900bccc8189a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c86049c9-5a44-4366-b2fc-4542e6005594",
        "cursor": {
          "ref": "5252857e-1cdf-4168-867a-4da8af6a33a4",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "b3dc5e3d-340f-428e-a04f-2e479dd17ca9"
        },
        "item": {
          "id": "c86049c9-5a44-4366-b2fc-4542e6005594",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "2280f8ba-191d-40b4-a1f7-b29d319ce2c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dab1dbb-956a-4bf9-915a-5c15506365fa",
        "cursor": {
          "ref": "3c21b028-943d-493a-affc-d83b27d1ca9f",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "31d23cbf-0df2-469c-9bb0-ae4544486c4a"
        },
        "item": {
          "id": "3dab1dbb-956a-4bf9-915a-5c15506365fa",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "dc62b259-2909-4417-ac06-c6d5a8288d5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70ef30cb-950a-4a19-8587-9e68a4cf687b",
        "cursor": {
          "ref": "ab380104-3a4b-49a0-9887-46a17f417b69",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "01f474d2-82e4-41f2-b73f-a01e38f85586"
        },
        "item": {
          "id": "70ef30cb-950a-4a19-8587-9e68a4cf687b",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "90e86468-7c2c-47f9-924a-01cad4ccb177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f5d139e-4d1a-4b2e-b6c9-e27ca0ba58dd",
        "cursor": {
          "ref": "9960d433-7031-4065-84a4-1bf4f14c85d4",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "ca9402cf-8065-4d2a-a149-85621d498dcc"
        },
        "item": {
          "id": "1f5d139e-4d1a-4b2e-b6c9-e27ca0ba58dd",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8bafc461-9dd4-4223-88ce-1a101249de4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11aa3d79-55fe-4594-b558-3ad0c6e68a3e",
        "cursor": {
          "ref": "4c8144f1-82fe-49f2-9bf2-61a65a969f31",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "52701730-d455-43fe-85a8-b190f6aa9442"
        },
        "item": {
          "id": "11aa3d79-55fe-4594-b558-3ad0c6e68a3e",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "70296292-26a9-4de0-9ac5-07aaeba6abac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "731e772d-f400-4049-a568-4c1cb42c983a",
        "cursor": {
          "ref": "60fdc7d4-b78f-4f12-84c0-386b67d66a78",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "8e237d6e-ab2c-46be-ab26-2ccbe1e33334"
        },
        "item": {
          "id": "731e772d-f400-4049-a568-4c1cb42c983a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "cd00389b-cf2f-4d29-8df2-e9b8dda6fc8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dea26619-a163-4c56-ac84-fb108e670ceb",
        "cursor": {
          "ref": "3c165462-53a8-4be2-9291-b9c59cc23329",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "4b5a0385-346c-4bab-b3b9-0a58c7878498"
        },
        "item": {
          "id": "dea26619-a163-4c56-ac84-fb108e670ceb",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "494057a2-c490-4c7e-a02d-e6204f270b50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b13c0b81-c176-4730-a132-cc858436d930",
        "cursor": {
          "ref": "748ecad5-b414-4c95-a7d4-6edce6933ff2",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "66e11591-3a9c-445f-ae05-a76f4e3c4b8c"
        },
        "item": {
          "id": "b13c0b81-c176-4730-a132-cc858436d930",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "6895cfbc-31c7-407a-a4cc-a1a7b46e6ccb",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "3141722c-940c-46b3-94c7-4d1f3f57fbb9",
        "cursor": {
          "ref": "13ada585-6dae-4ddf-9294-1f0fffa619a4",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "423f15fd-9dcc-4603-abd0-f0fcf20c8225"
        },
        "item": {
          "id": "3141722c-940c-46b3-94c7-4d1f3f57fbb9",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e22d38a1-6287-4537-bbb7-3e380d450175",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "b5deef15-ffa2-4628-813a-14019a6015f1",
        "cursor": {
          "ref": "593c84b2-c04e-47e9-80f0-245a79f1bc38",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "e0e452bf-2ba1-4fbd-ab4e-e1c25be79c67"
        },
        "item": {
          "id": "b5deef15-ffa2-4628-813a-14019a6015f1",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c9162e09-704e-4887-849d-853c6a7c1507",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "eeccd875-69cc-451e-9e67-48311e332cd2",
        "cursor": {
          "ref": "a6527c07-f976-48df-8e5a-622f2ede2cc5",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "a841b2c1-1821-4c8d-9dfb-5b106debbafa"
        },
        "item": {
          "id": "eeccd875-69cc-451e-9e67-48311e332cd2",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "4d05c72d-2539-4dc5-addc-7bcdf0d6e8ed",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "6d2757d6-d1c9-4c04-8fec-73241954448d",
        "cursor": {
          "ref": "811291c2-8578-41dc-a7f5-7a0af6254ebb",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "169da45a-e526-4386-b7e8-88d5d388c24f"
        },
        "item": {
          "id": "6d2757d6-d1c9-4c04-8fec-73241954448d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "5d5cc296-1b8b-4109-a8cc-3452c104b9e7",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "064d076c-2feb-41bd-ad69-e2c88fbee515",
        "cursor": {
          "ref": "bb26a585-fe7d-44c7-852d-36f119569cc1",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "596ea289-5270-4b32-b727-45774e48ffde"
        },
        "item": {
          "id": "064d076c-2feb-41bd-ad69-e2c88fbee515",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "5a0f9dd1-5d61-4e8a-ba9b-40def013d90c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6c62fd6-7f35-48a4-aee0-3112b077b3b4",
        "cursor": {
          "ref": "448ff457-3866-4d1f-875c-693998a1c893",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "2eb2a29d-2ab9-42f3-8fc3-12d5a4a035b2"
        },
        "item": {
          "id": "c6c62fd6-7f35-48a4-aee0-3112b077b3b4",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d37e3d1e-c148-43c0-ad0c-ab3877e814b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7769c4b3-960e-402e-a2b1-d44040749d30",
        "cursor": {
          "ref": "0e729a05-8c34-43dc-94bf-f585c6beba77",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "c648ce4d-ca0c-4251-b09c-82319ffdf406"
        },
        "item": {
          "id": "7769c4b3-960e-402e-a2b1-d44040749d30",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1bfc7b49-2123-4ee7-a99e-c16d03a3a795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57ab2546-f6d1-4291-96f2-ab27fa705150",
        "cursor": {
          "ref": "9dd16e58-cf65-4e6f-bfaa-b2d350590b02",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "cc45cd91-3004-414b-95bf-57fdec8da36b"
        },
        "item": {
          "id": "57ab2546-f6d1-4291-96f2-ab27fa705150",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "bee1f70c-816d-436e-ae95-6dfa430ddf1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6eec691-2290-4315-b0ba-d23517f50c77",
        "cursor": {
          "ref": "18439de5-f352-45c9-8302-b5540c154aa1",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "d1b360ad-4b56-4655-9a9a-e1e547110cb5"
        },
        "item": {
          "id": "d6eec691-2290-4315-b0ba-d23517f50c77",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b4e4d203-370a-4720-b033-94250bd8cab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33dcd140-3308-4f33-afec-7e359957b393",
        "cursor": {
          "ref": "324f377e-a29e-40c2-8bfb-ad34b17671cd",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "bf555dc4-2ca0-4508-b8f7-54d56ec7988d"
        },
        "item": {
          "id": "33dcd140-3308-4f33-afec-7e359957b393",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "ab121831-4fa8-42cf-bea0-896ed26b44af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a51eea2-0602-4e3b-bde8-97b0354ce895",
        "cursor": {
          "ref": "b38de3f8-e0f4-4c84-abfc-55383e4aa625",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "6042a379-fd73-4181-9540-d34519a7aaca"
        },
        "item": {
          "id": "5a51eea2-0602-4e3b-bde8-97b0354ce895",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "c7bd93a1-7886-4cff-b62d-f4f26f37f041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a458df6-7782-4d7b-856a-95e8548072d9",
        "cursor": {
          "ref": "c945ebb2-da7b-4e5d-bb64-2734b034325b",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "aeb3cd96-e9c5-4f96-9df9-bd2adb64bdbf"
        },
        "item": {
          "id": "8a458df6-7782-4d7b-856a-95e8548072d9",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "65dcaf07-6e05-4062-bf61-9e3d1e8ef664",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "699810ce-c3f9-4574-aa41-a7efba718ed5",
        "cursor": {
          "ref": "c33fceca-29ed-49e2-8b08-38c20a5cb21d",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "abbec6fb-c14b-4b21-9882-f2a0f4d1f197"
        },
        "item": {
          "id": "699810ce-c3f9-4574-aa41-a7efba718ed5",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b74aab65-d61e-4b47-a02b-4049372550e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0129a911-1ee5-4434-87a8-6cb52f8c1b60",
        "cursor": {
          "ref": "5515190b-40e5-43a8-b0d6-ad0b878ed13b",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "6974eb9a-1048-479d-9870-7c422dd87f3a"
        },
        "item": {
          "id": "0129a911-1ee5-4434-87a8-6cb52f8c1b60",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "da97abb8-623f-4fea-84f3-ef7afb47b023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6155c7c6-8dff-4aa5-b288-47403aabefe0",
        "cursor": {
          "ref": "8078e50c-3e98-4d9d-8e0a-adfb30266cd8",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "70f03ca1-342b-4813-89a0-f9b616ae9eed"
        },
        "item": {
          "id": "6155c7c6-8dff-4aa5-b288-47403aabefe0",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c6eaae1c-29a2-4cf4-95e8-f40d710d6b5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c65e3f3f-5d12-4b63-8321-4bfbfea072c6",
        "cursor": {
          "ref": "42dce32e-04ab-4628-be3d-b0534d81f804",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "c6584de4-34f5-4619-a58e-28676d5b7c1e"
        },
        "item": {
          "id": "c65e3f3f-5d12-4b63-8321-4bfbfea072c6",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "5318f0e9-f2d2-43bf-be5f-6ff7e11aa39a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03f39692-8061-4f6a-bd5f-4911a7ead164",
        "cursor": {
          "ref": "ab13061b-01bb-4c29-b392-bbdfa3a54d56",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "6403e49d-e175-4bdc-936b-a4f52ced7cb0"
        },
        "item": {
          "id": "03f39692-8061-4f6a-bd5f-4911a7ead164",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "013df707-25e0-4148-a471-f5fe96bab326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b2b629c-ffc8-4103-8b43-bda12c8c74e0",
        "cursor": {
          "ref": "cb0e3ba9-79b7-4820-a0a5-bb338a4adc32",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "c5872174-da3d-4e89-8276-53efe92d7590"
        },
        "item": {
          "id": "7b2b629c-ffc8-4103-8b43-bda12c8c74e0",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ba611c47-fb57-4cfe-aa74-ff8ed8aa75f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1101e974-c286-4a54-bedb-65e530a22e36",
        "cursor": {
          "ref": "86294516-a378-45dd-83d1-f67f321f0303",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "b3d91e1f-7443-4ab5-87f1-dd2c0969c699"
        },
        "item": {
          "id": "1101e974-c286-4a54-bedb-65e530a22e36",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "81a6bcb3-f810-430a-8dee-a5fc6f733a4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f2cfe21-c8a0-4bcc-a873-ba3efab294e9",
        "cursor": {
          "ref": "b30a3ba5-c702-4550-bb13-a08803f9ee56",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "8ecf0b0f-c07e-48fc-a86f-306f58add003"
        },
        "item": {
          "id": "6f2cfe21-c8a0-4bcc-a873-ba3efab294e9",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b9f45dbd-4b0c-4a86-b5d5-859b5815b6f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb4a6c4b-6dd5-4df0-9c68-c3bc4dafa724",
        "cursor": {
          "ref": "cad310b5-fc66-4767-8a9e-94d22a65a55a",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "70e08f96-70d1-4f91-8719-437a991c8f98"
        },
        "item": {
          "id": "bb4a6c4b-6dd5-4df0-9c68-c3bc4dafa724",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "65c1daae-d405-4613-9bd9-a05a391dd0a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2f541f6-07b4-4849-851d-b4148d006317",
        "cursor": {
          "ref": "8bb9d147-ab24-462a-b5b0-bee73c505a0e",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "1f4a6bd5-b009-495f-a568-c82645e3743a"
        },
        "item": {
          "id": "a2f541f6-07b4-4849-851d-b4148d006317",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "5b71e952-00ee-49db-9fb8-368dd0540338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "706d9839-da3f-40d5-bf3f-5396b9b64e2e",
        "cursor": {
          "ref": "d08e52d8-2247-4f5f-9398-ce5d6c3f344f",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "ed860372-934d-4dd2-819b-2f8b3344bfda"
        },
        "item": {
          "id": "706d9839-da3f-40d5-bf3f-5396b9b64e2e",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "7df913ed-38cf-4f27-a1c1-f6b9720b2375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d13236fc-7663-4c6c-8e23-2b1bf145b20b",
        "cursor": {
          "ref": "3f5dbfb2-7cca-4fcf-bdbb-fc4ec0f3af32",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "d61d49a0-8b17-4083-8190-24aca2fe6568"
        },
        "item": {
          "id": "d13236fc-7663-4c6c-8e23-2b1bf145b20b",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "a4013036-0cb0-4211-a2e4-f9585ca472fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3533f10c-ac43-4364-a832-5db362a0cc5f",
        "cursor": {
          "ref": "da5305cc-b911-422f-9c30-04fb7e68d349",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "81c9ae5f-f2c8-44a9-8a94-329b4d407b17"
        },
        "item": {
          "id": "3533f10c-ac43-4364-a832-5db362a0cc5f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "91c71c3e-9883-44d6-b5d5-39b409395fc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c07bb4dd-851c-4e0c-a763-13cdfb2603a9",
        "cursor": {
          "ref": "e7c9fb59-5e60-47e4-8628-bb9684d0ab43",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "57ffa48f-0697-45ff-9c9b-8b7368750c04"
        },
        "item": {
          "id": "c07bb4dd-851c-4e0c-a763-13cdfb2603a9",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "f4bd8c19-ca1e-43f8-a0f9-95bfd548604a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eef1541e-6a53-498e-aa4e-653d6c000d72",
        "cursor": {
          "ref": "8060d3b2-45e9-4d7e-b2e1-8582bcb851f3",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "044a667d-eb03-4068-8fb8-99df038b40e4"
        },
        "item": {
          "id": "eef1541e-6a53-498e-aa4e-653d6c000d72",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "08d5b10f-e639-4328-becf-cce5bc6e2d68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "652d19cf-0b33-4289-bee4-5ae4d5861040",
        "cursor": {
          "ref": "764909a8-eda7-433a-9ed4-3a7987f6c154",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "ae84c762-eb85-4c48-b03d-600116255f82"
        },
        "item": {
          "id": "652d19cf-0b33-4289-bee4-5ae4d5861040",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ad80fb83-ec8b-4481-87e2-23f68e067b95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce9c9b7c-e6fa-4f9c-b3f6-4bd82fa72e43",
        "cursor": {
          "ref": "7f29e97b-f73b-43fb-9ea0-07203894c389",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "29fee6d4-5b84-426e-bdaf-255f81dd8061"
        },
        "item": {
          "id": "ce9c9b7c-e6fa-4f9c-b3f6-4bd82fa72e43",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "3e0a005a-76af-4fcd-9f8b-e31a9ab9bd70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb2ef3fe-4a84-48f2-9a64-c4fe4a534b1b",
        "cursor": {
          "ref": "4cc3f3fb-9ab4-4117-94b2-e2d3bd6a2ac5",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "ec4e58f3-547a-4282-a64f-b8e92a55b26a"
        },
        "item": {
          "id": "eb2ef3fe-4a84-48f2-9a64-c4fe4a534b1b",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "87c04b31-5481-4339-860c-6056d859f377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e10fb64-3cc0-4e9e-81b2-4621ed12ae32",
        "cursor": {
          "ref": "c5e11562-6dcb-447e-b7be-9a3606f6cb03",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "59c1fc23-5661-4aa2-9c06-9608b6dc40a8"
        },
        "item": {
          "id": "7e10fb64-3cc0-4e9e-81b2-4621ed12ae32",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "3e2666fd-438f-48d2-a705-4479d1f4bfcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8854fa7d-ff5f-4577-adc9-d4171afceac1",
        "cursor": {
          "ref": "e3e52389-f37b-4584-ac87-b89b998f1641",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "1e082654-87ce-4a71-999a-fb3c7d8439da"
        },
        "item": {
          "id": "8854fa7d-ff5f-4577-adc9-d4171afceac1",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "2a75a9f3-1551-49ed-ab10-7987544b3e85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58d2d9f1-e937-4e77-9265-7ef8d2815a28",
        "cursor": {
          "ref": "7bc6dfe4-4f87-42eb-a3cd-35781bcef0bb",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "e05abee2-64a4-4caf-98e9-a99e0932bc34"
        },
        "item": {
          "id": "58d2d9f1-e937-4e77-9265-7ef8d2815a28",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "aef3f0ea-3283-47bb-819d-884405c21d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "569389ec-8667-470b-a645-5f24b5ce22eb",
        "cursor": {
          "ref": "11bec7e6-09cc-49e2-9fbb-6853c291f141",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "22b8d179-a709-49e3-ae92-6235e3b505c5"
        },
        "item": {
          "id": "569389ec-8667-470b-a645-5f24b5ce22eb",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "1367bfe0-fde7-4918-9e56-0e96ba3cd649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58aa1399-6b62-4640-a5a6-34483b05f79c",
        "cursor": {
          "ref": "50197731-957e-41cb-b315-bee5e07762b0",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "6e158d7f-6b56-4a1a-abd0-e8138211c576"
        },
        "item": {
          "id": "58aa1399-6b62-4640-a5a6-34483b05f79c",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "366e9ce4-8b89-40db-a2ae-d8bfdb450b1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13f735ce-a0c1-4023-8874-9763e5f370c0",
        "cursor": {
          "ref": "1e5991c5-945b-4b91-8c1d-27343c14c3e3",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "25a3f969-aa96-49c2-8ecc-8fcaad8cea1d"
        },
        "item": {
          "id": "13f735ce-a0c1-4023-8874-9763e5f370c0",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "f30ef5ed-3a98-4040-b82c-d1021db5094c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8e95dd8-a3b7-4f5e-adda-e287a58aff76",
        "cursor": {
          "ref": "deed6ae4-ba1e-4057-a088-029685a2d23f",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "e0b99604-23fd-42b7-adbb-77590b42c6a3"
        },
        "item": {
          "id": "e8e95dd8-a3b7-4f5e-adda-e287a58aff76",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "2afa6cfb-23d7-4608-9db0-157b2907db93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e4952b6-88da-41f3-9b7c-da904c4b260e",
        "cursor": {
          "ref": "7279ff02-c3ac-4d6b-8386-1335d392350c",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "d81a5067-e305-4a8b-99ee-e11ecbc3f87f"
        },
        "item": {
          "id": "6e4952b6-88da-41f3-9b7c-da904c4b260e",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "35dc34e4-1dbe-47e4-8d5a-949284eee872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2075d10d-95f1-475a-baa5-b22e7d685fbc",
        "cursor": {
          "ref": "fde56efb-ad12-4840-a366-be2318fa63c4",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "595da484-6d14-498f-b3b0-f70af483c05c"
        },
        "item": {
          "id": "2075d10d-95f1-475a-baa5-b22e7d685fbc",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "7673daf7-7a0f-4a18-847c-3f14f281ebd9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d39e8f0-fd8a-4a8d-b33f-27a2c3537ef2",
        "cursor": {
          "ref": "d0dfc616-710d-4bae-8949-ec475717f78c",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "402edcae-80e3-410c-966c-a134ca9d3377"
        },
        "item": {
          "id": "6d39e8f0-fd8a-4a8d-b33f-27a2c3537ef2",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "3d94c7bb-16e8-4207-aad8-fdd05a8df5ad",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "322fe675-22d4-4186-a136-aab7c77f5bdf",
        "cursor": {
          "ref": "ea425338-9283-4cdf-acff-22b711bf5872",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "e92e303f-3119-403f-b2c6-829e6805226e"
        },
        "item": {
          "id": "322fe675-22d4-4186-a136-aab7c77f5bdf",
          "name": "credentials_verify"
        },
        "response": {
          "id": "7ba2aa05-d8b3-4f59-a54e-0b7ddb0ab42f",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f263efb-b467-4de5-9672-cf8107364370",
        "cursor": {
          "ref": "22590225-ae1c-4a4e-8d31-83bc63bc4608",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "4ba28de4-fbb8-44af-9bf4-c90888eb5d03"
        },
        "item": {
          "id": "9f263efb-b467-4de5-9672-cf8107364370",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "3cb07657-0a23-4514-8d6c-8e2809095995",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "716b2a46-8dda-46bf-a20c-6be5f97d0994",
        "cursor": {
          "ref": "b4b1130a-3494-4962-84b1-07c81485203d",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "9a6be9c4-5afc-4041-bb70-57f1c90806ce"
        },
        "item": {
          "id": "716b2a46-8dda-46bf-a20c-6be5f97d0994",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a030961c-3461-4469-b206-b947af94436c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "716b2a46-8dda-46bf-a20c-6be5f97d0994",
        "cursor": {
          "ref": "b4b1130a-3494-4962-84b1-07c81485203d",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "9a6be9c4-5afc-4041-bb70-57f1c90806ce"
        },
        "item": {
          "id": "716b2a46-8dda-46bf-a20c-6be5f97d0994",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a030961c-3461-4469-b206-b947af94436c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c39f7fe5-b6db-401f-b8fb-6dbf2a2e65e9",
        "cursor": {
          "ref": "897e70de-f3a8-4d03-adda-fb82b6eb5cba",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "0fad3dbc-a042-4108-a515-24d04e1e21e4"
        },
        "item": {
          "id": "c39f7fe5-b6db-401f-b8fb-6dbf2a2e65e9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5e39b0ca-2583-4918-a79b-eac491a836ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37d7919e-f455-4859-a5ba-cdf3acd5bd77",
        "cursor": {
          "ref": "5f62289d-15af-4a86-acae-a6e114b97e12",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "6220e396-5a80-4f82-b0a4-0bcbf99b7be0"
        },
        "item": {
          "id": "37d7919e-f455-4859-a5ba-cdf3acd5bd77",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c91c8dfe-48fc-42ae-92a9-b232177f6108",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}