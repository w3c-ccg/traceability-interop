{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "271d75ac-2019-4f83-8a1d-d4d63ca743c1",
        "name": "Clear Cache",
        "item": [
          {
            "id": "9cd0f0b9-ce84-4f08-97fb-56a312cb72db",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7e510194-c1c1-46b1-86fb-24ec3ccf8ee6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "83524b41-f612-4e87-8221-9ed6b66e886e"
                }
              }
            ]
          },
          {
            "id": "46c6ee7d-77dd-46c4-9a7a-603f2a7876b6",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "119ce2b7-8fbf-4cf4-bc9a-de48f5490d71",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f89a567d-9dfe-485b-aef1-fbc0e7532190"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "78e410b5-df90-419f-a40b-175f2643d955",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "0bf5765b-6ca6-4fe3-b01a-af483174a9ac",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4fbd6d0c-c2d0-4925-9f45-0d492c153a6b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d4675d3d-078b-4edf-9d7b-05d877eff428",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f0780166-625c-4f69-90fb-eda8c3a4c915"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7b8f83cf-55f7-4247-bea0-7ae4e50a4d16",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dc7addd3-2d6c-4db4-9a98-df8952b3fb88"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1aab23f9-2ae8-4532-9c6a-faeef8081f29",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dc9a81d0-024d-4cf9-a9ff-ab806dd16faf"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7aa1c7d0-602a-420b-b78f-1c497c53f565",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "469c56f8-c640-438b-a5b8-b2ca570fc681"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "94db541f-1df5-4752-877b-db3e7dad21a8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a0c9251b-713b-4f6b-a0cc-76a01e1b5afb"
            }
          }
        ]
      },
      {
        "id": "3168a97d-ec29-4c57-af2c-fa6c65dd99e4",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "c985f512-219a-409a-a132-f0ef41edd36b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "69193542-4c2e-4414-9c80-c632cd49d249",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8cff86dc-3551-487e-a004-67e1926d9ce2",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41a21323-c808-4e61-9232-036288f6d093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "41f5e2fe-0ae6-4b09-a7e0-2d7ef78acd7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1abde24c-ebbe-4f67-9bc8-4d21cfee0645",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9aa5d16-541e-4ffc-886c-afdc970fe398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f10dc4d-6f42-43de-802a-2814f8637839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2235f789-1c92-422c-ac61-7de240dbb6ec",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be4d7950-3e94-4a3f-af88-ba56d4bf22d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "728122ab-c00b-4442-8370-1969990fde0f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bac5b64f-0b86-4aaa-b426-3f7db42b8786",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "958e2287-b402-484d-bd18-0c317a604328",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c0a801-2a74-44cc-89ca-5b9a2e616872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4dd13c39-6af6-4279-bc70-1b401fccda2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70b680ac-e00f-4df0-a04d-0dee50ac27de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9388a87-b83a-4c82-aa4e-35fb1360e077"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0c926068-e106-4df7-939e-7c8c0b647d93",
            "name": "Positive Testing",
            "item": [
              {
                "id": "68750e8a-fc52-43c2-acaf-d85955e5f41f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eae43e30-e41e-4d80-a634-693434500f30",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "b1efafc5-212f-4764-9bc0-a6264b9cc769"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7bc8840c-6c60-4749-851d-057be7d436b5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "6b056b27-e3f3-4a16-a617-7b1784a0d7b5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ea61b642-c7c5-45ee-960b-69cac4ed7072",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a9ed12b4-ea5e-4582-8663-0a25d103beb2"
            }
          }
        ]
      },
      {
        "id": "9efef15b-8f60-4ace-8889-ba124456deec",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "72fc4c63-5cfc-4aed-82b3-441d51076d0e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8a0a9010-be8f-434d-8164-8616943a1c7e",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "b3f2be5f-b24f-4371-94d4-39f066c0b897",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92d26465-dd17-4bf0-91d3-981b9f99cbf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "668db7b9-efb8-4eb2-84fa-71dabc91241b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8afd1c9d-dd8c-4c6d-8a7c-2a3a56289312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f0e57f5f-81c0-4706-b663-93dd9ba0ab82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54443875-7cc5-4fec-b983-6be5d24988a5",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a4bb329-c2fb-4eeb-b855-5d153cf5402a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdecbedf-361f-48ea-a449-2f057e228b15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53e58e17-e49d-4ea3-9196-4b96a14ad3c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cd41a37b-134d-40cb-85e3-8d9a6fc07559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c97e981-6ca0-47ba-973a-c7eac8a400dc",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e00bea11-7d93-4dfa-b6cf-530a5e32b69c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9618b01-d39d-4b1f-82e4-514b6454aa4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03124d77-b95d-4267-bc4b-293eeafa2847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2a356bc7-f92d-47f1-a4ea-5b701a7e3659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e10c11e-37d3-4802-ba3b-3b25e3b43d97",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e6c7729-d86b-433c-9593-ab3efffb3d7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df73a595-7b89-402e-a9c2-5ffc46c3d5cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31ba4541-b2b4-48f3-9dcd-5ab1899d6cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "88500481-731e-4a10-9c44-ac2b9d6a40f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "300ee454-db0d-44a2-8527-873fc96f18b5",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68cc5029-562b-4b7e-9e03-fdb2a2ecb6ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6961595-8eec-4fb1-9771-e7a6aa4cefc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3629e7c5-70fc-4daf-a249-3583b988d769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f93085da-b3a7-476b-9626-98dd3ea1b441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a417d22d-7c88-4eae-8ad7-90660174d8b1",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9b60d55-65d1-4ce6-b97d-e294bedeaf1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3f6ff2b-50a3-4d63-b271-87cf22142386"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb189823-d8a1-44f6-a748-71832b468c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0842f920-ae96-4bf2-954f-77fd3dc9e379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed700b99-e284-4463-a61c-b6a710108472",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "488c9bea-a558-49c0-946d-0adbeebc73b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddf2f2f0-9e40-4dd6-9488-fa85101f0e17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a0e119d-ee13-419a-9443-8159351f9c49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "92699745-0070-41fa-be08-2f43e66755e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "341234bd-5dfb-4c37-a69d-faec9cb9e62c",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35134b50-b550-4028-8371-7559fe07832f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e28cbda-e7e0-48ae-8cb2-c5be25ae9acb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1be57cb-f318-4787-8fb7-69c9eccfe8fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c66d93a1-dd80-493b-94f7-e24aa84addb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a281d0fd-4531-44a1-ba13-173ac52d9326",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61b5ea3b-9b02-4412-9b19-d7435ea1c4d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "481e5f8c-f416-444c-b38c-a2ea813779d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4f921df-b6c4-47b3-a27a-a49d4a656cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e992f68-9d47-462c-a2b5-8d9b928fe743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7da52a6-eaca-481e-af09-2aba61a88b73",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c50fe7b-8679-440e-b0c9-65925f5c23a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdcaa79c-8e55-4351-870e-034ee5d11f40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70bcf494-6044-427a-9e98-1d7e37cc11cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d032b38f-57ea-4006-8328-b0d0079e8f68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3165c61a-2cbb-42df-8c04-acd287fa79fd",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9752534-eb3b-4e86-b83a-8bf801bd28f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d347c48-4c09-4d19-8657-ac1fa4d6b750"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2ab0c3e-03cc-483c-b1d8-0f11a3f62630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "805aad09-5e60-4264-ad88-8639b822568e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49025d05-687b-42d2-ab68-19c81027f021",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5429a486-cac9-4af5-add9-06c21765a27a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f07e006c-4ba7-4a0d-87e0-bd3379ffdaa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b8531f2-3357-4ff3-9caa-784170bef2ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c25a1115-cc3b-4d8f-b980-ba852d0d1726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b658ab95-126a-4de3-80f8-f5bb396669c5",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fcd820b-61ec-4a0b-b48d-da53c30c49a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98b36e49-5ae4-4a61-832e-c08667697fb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "404ba444-7f37-4bf9-b2b7-03c0cc0d7175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "140b8bfc-72fa-4ad2-bee1-c81cc95eb918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b598e0ae-3133-4836-8fb1-b5d67504517f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8eaf2e4-050e-4406-beec-155d1831741b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cf393be-363f-4ffb-9908-e3380f7be02f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ebcf3da-65dd-4c8f-b137-f25d641f92e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "577ccc6e-876d-4d7b-b302-e9ba6de5cb66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a2444ab-d440-4918-83a9-036ce220e894",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5093ba4f-d81a-49c0-a37e-f296227afb1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2dc3506-a01a-4215-a34c-9940e38ebb9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4c64b00-e900-4bc9-b350-8272c4ea0820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e44eab1-906f-4d83-9d26-dfdf99a2934e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9001d1d2-3407-4be3-b167-0c431da4b614",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be6ced7-9a2c-4dc2-98ab-57d699f358d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10448cf9-86fb-4c41-b439-a84d2d8460cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e2f9b44-51c1-4dba-9270-86aaef5a55c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e68a0651-6269-4997-bf70-00da88ed68ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4c299a7-fca0-4a44-8502-2e87d57be567",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a8eb974-6811-4961-a69a-6679c092edbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b5c9516-290c-4a19-a611-bbb8ad7627ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "121c0059-5d13-42b0-a835-1773fc12eef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b1d5ae1-f306-41eb-99c1-a3c0deb455d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca7015f-309e-403c-a86f-72fe7441ff9f",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f7b90d3-1428-4c0f-a379-2beec11a60fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bb7f66d-3595-4cda-ae37-a56d2397807d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66af4bff-762a-44e3-898f-4a8e1c33c56d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc4956d5-f464-4ae6-a1e6-05ac1f23b2a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "964d20d4-d565-4699-90ea-caf0e7cfd4b2",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20170b8a-ad5d-4326-9394-4e1cefd92885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "521e04da-9be3-46a1-b45b-6b3bd498faa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9302f7e9-eb7c-4219-9bf4-bf535c5d3ccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "025dfa46-7f1b-4633-b05c-663a75784348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cbc7de7-9e51-4249-8aa3-9f3b1e5be48b",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f78634fe-320f-40b8-b3c5-b22807a9e8ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22333e16-16fa-4ed6-86b7-6beb923c15a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c666f977-5954-40a6-9a36-e69cb1d8c5c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1855632b-d143-431a-a494-17572edfe087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27c05f6e-bf9b-432a-82a4-8a9a6bc991f7",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1c81596-ff1b-4fbf-8e0f-bfea1ed801cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d65b4462-ea88-4920-b551-6c3ee0fd5fdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbf3b6c3-ad0b-406f-a201-e85293e6b7d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bad45b0-e7be-42b3-8e7f-35a56c74a7b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41c27792-30be-4859-8a02-3b9227057765",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a85b538-9f2b-4995-b9af-cab7afb5c43e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cae4e294-d337-4632-bb7f-672213f353d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a45e2af-a136-430c-a117-ec609410ebe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a8da440-fc52-4104-9942-5f0c36ce2f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6890153f-dd0b-44c5-a2e1-1b46b956e6eb",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71694ef0-3e1a-421b-b174-bfb8020d5f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6330c08-fd38-476a-a545-87f8cfaa414e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18515151-3848-4401-af29-34203a1da859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a586272a-f9ac-4867-96b8-a23f37996814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0f26f01-3697-4733-90ff-f907ce72d5c6",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c315595-b3cc-4320-82e3-5fb0cf42f9c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6e42b58-dcd6-4c24-b451-c13dfdda5c0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc0b2d78-614e-41dc-8dd9-30b3819cab60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a20c923-7b2c-4d73-815a-4a3cbd5577d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "836bf49b-9424-4497-860e-936fef5c2826",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eb5685b-2f1b-4d46-b91d-2a7d873d1177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5278f83-bbf2-41a1-91a5-75e28701a26a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "933c26a9-ecfe-4e2f-bbaa-9b96ead44019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "135858f1-6338-4160-8b45-4b77422678b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a087931e-b3b1-46a2-b4a7-f4ec87be7885",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa054404-54d7-4390-8eab-991c171c721a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6a3daf6-2629-4dfe-957a-782928e83412"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "168ed71e-fa22-4c39-8263-c417d9fbc7a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf6e9976-197b-4b45-b392-6ad3a8e855aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dd57204-9ecc-4da3-b400-18766cd6201f",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eae8aaa2-5be6-484d-be2e-6695565887c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8b49565-16e2-4e19-8e2c-47673daff994"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d24a48d9-e80a-4ebe-a798-895997e2e6ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aef19ec5-0638-4bf6-93e5-5ec64c925bb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c76986ed-97c7-4484-bf94-d0b8f5914c08",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f941574-fda1-4cd6-bde1-398e7966e8ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08f812b3-5214-4097-bf8f-a3847bcc5b39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "905886e9-79e6-4f03-a3bd-a40807efa3c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "09d7d194-411e-4a0a-b8f9-478c21134267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4733ae27-1df1-4877-b65e-2cebedcb28df",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f3978cf-5266-48eb-9c55-62cf4be83252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef7eb606-6250-4483-b0e8-a7b8108f47f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7727734-c275-483f-88f3-364df2c111c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "60f0aced-e1d3-4c07-8a06-f19a8349f09b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "201a0bce-f714-4d53-8d51-2f0128e72e5c",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68e28b0f-bbfe-4f51-8e41-11c1d271f3f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72de36a8-5e71-4012-8e7f-a35c41b61f3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d0b066-7d0f-4fdf-ba7a-d5d0e8707b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "1376b619-eb81-428c-b635-a62853458028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39ae92a9-4e69-45dd-aae4-d959093cb633",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c3d3a26-3e12-4624-b70a-79152829f5d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d273ed7-cd24-4353-9e74-14e9a185e577"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3afbfcfd-d82a-4d52-b2c7-d923782ef52d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac6b7b33-92f5-4c18-8b1a-378d4874b27d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db04020f-0efb-4168-b94f-5ccb9c989f89",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dbeed7e-9175-4913-8fca-aab99d1c1d1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45738feb-a698-4475-bb13-21d85c42aec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98e4bbc2-0cc1-4fe8-bf1e-89b77ecff877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "04b27a84-bae0-452e-99b5-bbf0d7876b30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c061f7ad-e0c9-41f2-8b27-cac4872e8540",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8299ff0d-61eb-4442-9037-986783732eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a92568e0-9457-48c0-b341-27d3b9e5abd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5043d831-6377-4127-8559-e4f0f90ca825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4fa1b2b-3804-407d-aa9d-f63d25fb8603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2604fbd5-f276-4d16-bf9e-90f0a1387daa",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9694a629-e598-4835-aa98-63050d3ba984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6eaa73f-6b16-4aeb-9086-0f8441b0cd58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea16d0f-ac16-428b-8f63-c2a442316cc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6240a92c-2814-444c-8968-bcfd0a1c5e14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3217ceb4-165a-4f3c-a9a9-e0d46d3d10c2",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b2b2674-f69a-42b8-a10f-22a5bf89f401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96f3e9cc-32fb-4da6-a692-5360dbe00ee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a58932b9-8ef6-4fbe-8fab-d6304f58a6d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "2da0b212-9032-4618-8c5b-5c97ea7935ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32820da4-7760-48a9-8c41-f468d66fb7cf",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c09d72-e19b-42b1-aab8-2391426e8d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "32f92fda-e835-49b0-94a2-e94526a9144d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3906093c-a351-4a81-b050-15ad984e223d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "13c1d971-68eb-45a9-87a2-21ddc35679ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcc6e8c5-a4ef-4302-921b-1149bcb85e9a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ccadc12-1b00-46ad-bb28-9611801e205e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e9609c6-9316-4091-856e-8781c7ce080b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d65d9426-8cc0-4120-b9ae-8803f482a306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e15f8ed4-ca66-4c05-a61c-ecab3f00e450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4383fcb0-a076-499b-bce8-018d2ec43a40",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa0227c5-d2e9-486c-b1af-e5f4c4b32a0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56345fae-c522-4e82-9028-7b2d6572a50b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e4009d-26be-43ca-b735-57c589a559b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b73ecdd2-2ede-4603-814e-2b7159e61b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d54ea44a-3e6a-4b53-9510-a1140421a6e8",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feb225bd-64b9-4d6c-9793-5149a3c7c966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb186d4d-5b6b-43ad-bf43-426e5ea5415a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a200e0a-a2c9-42c6-a461-0ed00ed644a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e40dae36-0123-4684-80ab-3812d01b6e0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b43f263c-fb49-41a1-81b9-f346da969075",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd6137ce-775f-4b4f-b970-48b80d7b07b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dc09ff0-9d83-439e-8ef0-9a1203888f65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6aa08b0-b431-4d0b-bc44-be8ca0f9e042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc76f046-955f-4506-9ab2-33657ae64612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e58d818-711b-4ee1-aa15-d4eac08ceae0",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c718aa98-8dd9-4fcf-b8a9-4c37c6f9b51c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "889424d8-fcfb-4356-a07b-e9157948b7b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1553d0dc-e065-4a26-8fde-2a8ebb6f956a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f314490e-125e-4aab-8140-04a27e135c04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c2765c9-4fa8-494d-9a7f-1f2263995ae4",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46951fc3-aa06-4515-afb5-55fffd3b5158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77600493-9daf-46c7-a31f-ceeea938d749"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad55e01-e243-4641-aacd-2577600bd48f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "acc5b558-357a-4afe-a651-e63af438c3cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cdf3316-b417-420c-89d2-ccc9a036f4d5",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae103097-9b25-401d-a93f-7adcbda374e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41ae06f5-016b-4ee3-b4e3-96680b1356e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2d1f2ab-c16d-4071-a10b-a78cc46eb79e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "812f6bfb-0a9d-4207-8111-80a683429bac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83dd8aec-89c5-45f5-b54f-90bbff1b8b94",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a60827-6e91-497e-8a01-8fc39df0b30a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f5d628c-b54f-4494-848f-6430ecd04092"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc15cb45-4ba5-44e3-b009-016be554d863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "05e7e5d2-0338-4c46-8eff-adbb8ed6adbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42dd0f23-5959-4f78-b322-d28fd5028446",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d030c02e-4a94-4d1c-a689-d921b9b95f5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb977d73-d815-44c2-86e7-884054f10695"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c882875-28f8-491f-9217-c0b6db2ae73e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbdf2bbf-a44c-43a5-8ff9-48ddf04af571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2338848-a801-4b90-abac-fb71f1ca96b4",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a639324a-cc6b-452d-8646-380fe1714d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ae8d33e-0181-44ac-9fd4-da484afc4dbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9cf98fe-c01b-4d99-966b-f0362786013d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d317395a-acfa-4349-88b4-8190f3eb5f47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e8d590d-15ff-4983-b43a-9b5fcf1a2080",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12b452d7-bcd0-47f0-a60a-646f8d009394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cee6d9f8-d155-4095-8321-79134490990f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f88ad8b-7182-4543-9325-5a7269f76477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "914a3d59-3d49-431b-baba-74e872c43a8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3265561-6254-4110-9abc-2ec581fc7fea",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25cfcb48-bd04-43d0-9135-1cbdba7b98ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35ac102b-3e5c-442d-b588-d12131405dc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1631cbb3-7e28-45c0-b7a9-54fcaccbb1f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "770c77ed-a77f-4c16-9f8a-0452ce6db695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b4f7c45-7b40-4ff6-bb76-e24999c7fb66",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c5d594a-934a-4f55-908c-4cfe4f107585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37360867-5217-4f0c-889f-d98e6ff1e63e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81619763-8e12-446b-a07e-c718c488c844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "edc573e1-26b9-40b8-9f78-163076c448ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ae55c0-09a4-426d-a683-56f3cf778bad",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d96604d4-33ef-4958-9cac-f459ba79a13f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "700b5343-f75f-44ff-af6b-9bd7df18340f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f3b513-1f58-4e1e-a4d4-f6966db8b1e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7159a558-239f-4e6a-a2b3-87be8776b133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd970138-0c10-4ad8-a041-b879b61fdd06",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "202b2d93-4792-4ba1-9a56-b9d6a9b41c16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c7346c6-44f9-4976-b618-75da7a0b3809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f0e99b3-2eb3-4d30-a651-e72f93ca148f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "c69e93d1-836f-47b3-ac02-85af7b510c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c578a327-05c9-43e8-b2d0-171b3e6d1376",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b0a4923-8a13-4c4f-8dbf-f039bcd64b04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33078a6f-b6d0-4c7b-ae21-510a7bb1622c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2b348a1-8ca8-4489-babb-19cf9e9519af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d22f59af-9f8f-42ad-ad60-1003ff0895fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2231f85-9740-4d6b-a029-3db8a966ede1",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be8317f9-5b00-4d95-85bd-af908d3628b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4696fad6-8907-4eb4-9067-0ecddece6f67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1f89d6d-deaf-420d-82f7-b63d1c4f24f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6d8e6ab-20b4-45b4-b974-7e64e11df5b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fc493f8-8c31-43b7-9837-7a51b1e39345",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef6e29f2-0754-448a-91ef-b85511ed7cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fcb8d6d-1517-4f19-8b4f-76d70d6508bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db7ae4dd-395e-4425-a387-ab701f11d47e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a71edcd5-fb6a-4437-a239-0a29c30d88e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e787b628-d71c-4a71-952f-058c67c71164",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c96d0f43-666f-45f7-80cb-2a42117ea5d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc63e279-988f-497f-9c44-ffb097c1daa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "907ceeda-358b-4377-b5a4-32c89f2b2f83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fac4df2b-6c4a-415b-8a3a-99420f58fd39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "465e6bea-887c-4253-b9fe-3d8a44bcdce1",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c820b8-6c4a-4d2a-a5ac-d9fd7c3cd343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad454348-1513-4945-a0aa-279f4fd04603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6a1c111-b670-436a-96ed-39b5279e92fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "01c7e2d5-cb31-45b4-a32d-d9cb0d8e9844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "220c50a9-6223-40bd-b65d-c375625779bc",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "122f42b1-451e-4d73-adb1-51e0ac2ffecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db151a05-d105-4cf3-98fc-d5f3bc6f3966"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38e17f12-d073-4796-9ebd-b58c7981c04e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "970f268b-a445-4ded-ba5a-5c09ce7293cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "160c99ea-83d9-4d6c-9bd6-64fa0eda7689",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bee6aa07-866c-4934-ab14-fe431b7a6516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95e7344f-92bd-4f12-93d3-f0c764e8a392"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05f3a681-3ddc-4cfc-80a6-7de8debfb991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "797747f5-fcc2-42f5-b884-670680dc02e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8deeb8b-87d6-4f8d-aea9-dd289cb16ea7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc64e09-45c1-47b9-8a9e-a83b1261cc22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38d967e6-1bbe-4f49-b83b-242b7d8e8263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc36021b-4ca1-48c5-b3ff-7b9d13670725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "152295cd-bfc9-4631-b0ca-08aa54c39a46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9e01e22-9080-47ae-8e9e-1abf81f42734",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d97e301-f177-41f8-9506-08f32c0287c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d601bb5-1dec-4347-9e47-3edbfb1e9b22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe3eee1-b529-4e9c-a750-3820a5300b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "375b7941-1ad4-4e22-8447-0c309ec81d43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88657f4c-9ef6-4156-acb1-da2b740e427b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c18efba2-64cf-45fd-b15b-cc02cccb981d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7716705-f86c-41c6-9c98-0cabe45dadb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d09d923d-5abc-4ac1-9969-33a709d30313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a0f86c8-35d1-4747-881c-d70c3181b6f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c333614d-3a13-4336-9a0b-185f3455869f",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c51f6728-91c5-443e-87a1-be9d8da2bf0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02b6ef86-9723-42c4-9053-786219c65012"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbe68a87-757d-433c-9408-5ca2e38ff981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "42a90017-fa0c-49f5-a933-a69f1c8ff720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8db8761-de0b-4b7f-9ad5-498382dd3edd",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52d51a44-c83f-4faa-9f9c-1f446c66ee53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d309d092-f863-4c2b-a011-25f95968cce5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a167b9fd-d1ef-4f45-ba29-1f093cd96de0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "86db3376-638f-48da-8456-5c4ec43a2996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "378c412f-8a15-45ea-866c-dfa1853c0cd8",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0acb9065-fa8d-469f-b3d1-a2616c4e4db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e38adcea-ff49-41a8-aef8-8a68e0291492"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8755fe25-fe83-484b-b3c4-78dad8bf00e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c959f94-807a-4206-9bf5-78afe0572663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d586aea-b63b-4987-99b9-66256225ad2b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "958dbbbb-0afc-4d85-8852-ab3075f88cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da684dd9-e76a-4daf-bf64-b6856cf84edd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0822102-1dee-4df3-834f-46418ffa6080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a85c948e-c9c5-4ea6-8aab-28c9d613110f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff4791f5-9819-43fd-a79b-bf85fede23c8",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6890b49-727c-4544-bfb3-8b805cf35ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25291d62-48ae-4d25-ae06-cbe0915dbf68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "002eeaeb-9d98-40d9-b9c2-8cc65a241575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1f515e7-d1ed-4182-a01c-9d0b7026df28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "968c12da-41fe-425f-bfd3-d14a1287c4f5",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "201ae7fc-9179-4384-8011-1472a1519cf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1bccfd5-bb0e-4e29-9d77-a8f4adb2fd59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26d3ebd3-b8a8-4d17-97ce-039d311771db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0e648628-04db-43d1-849c-b05991b9d71c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de02afb0-d5b4-4490-ba02-b017876b6df3",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "028f7034-0c2a-41f8-af4e-53d06f18477b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e4e5450-604d-4720-913e-5483a52d7205"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4f59d0a-8c25-4e3b-a60a-fbf79753efe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7f1b394-51a5-44aa-be00-a589f290bd9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "371db24b-e1a1-4feb-94e2-80ebfa11186a",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b128f8-37ae-4cf1-8f5e-5f0d399317f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "987114ec-e7b3-4f33-8dd6-09aa8494df81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0df53cd5-b16e-47de-a983-267a3ada1a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "347e70c2-a875-4728-8dbc-8e1070c96883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80fa148d-60d3-4f42-8f9d-b7ab20af8d6b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0832542-5d2b-4bb5-b8b3-513e619e11eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb02e9f4-178e-4c76-942a-79cbd4b217db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c4f0c6f-5729-4b14-9cce-6c46d6ce12c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a604ebb7-389e-4f3f-be7f-957d263e7296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6140a35c-c0a1-4ae8-8442-230ce6480c74",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d54acae5-330a-47e1-88d1-469cd4e366ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60ba7a43-95fd-4848-b1e1-6f698eed8b91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db691f2c-c385-4001-b738-10c39878c51f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d735a8f8-aded-4b0c-8d57-46c5660f165a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a61fd70-cd81-412b-9ef2-824959b12ec8",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37d2253f-dca2-4c72-8f96-4ccfa8c8b045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54a5d6c9-da2c-45e4-8a25-f38d7ff6dcb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aacc1ab3-9804-483d-8a00-769bb9490a31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f375af43-f51b-4ad0-bc34-6dd32c1ad8f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b448521f-5e6f-47d4-9c65-617319e7f5f4",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b289bb8-4fde-488b-9cc0-014c77803513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d5c53bd-b6f5-4bbc-90e3-cd3967ccf871"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b29b390-abb1-4b05-ac37-72d740993e60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "51d9cfe0-3c43-4530-8a72-960a72f9e487"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c135464a-b7f1-4e48-8f5b-09f7d1909e90",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b91e021-dd85-4f94-8449-47b9fb6d0ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa83760a-a329-49fa-bcfa-0bc05db37a0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddde0e64-69ac-491a-aea0-1eeac10442d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2dee0ab8-5758-47cd-b17c-d1dc211ee047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "973150ab-3547-4a83-bd3e-76007d78469b",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a5f1e07-1f5c-484a-b177-a009df0cd36b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c86cfaa-e69a-4bbe-b2af-aae1df94aa57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9716b085-a7a8-4651-8d19-7bd0bd5e3f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbd4ff1a-46f4-46bd-89f9-bbf526d99dc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d4e8b1-3d63-4a52-9fc4-7742627d921e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10192f45-c81c-4429-9cce-c25c10b1cc3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39a8e8a0-a308-48b7-856b-fae5231ac48b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9d72665-cdae-4bb5-8127-a435cf7509a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "59dcae50-7793-4a33-bc58-a8fec2068d99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddbef2bd-253e-4a70-a964-8b0d9183daa5",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6efe6aa8-5671-4c07-a291-533e6d7344ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "251f466a-202a-45cb-a57a-63aa95c1527c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0690581f-83d0-4379-a271-46578eac498f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "436e2d7e-3720-4b0f-88aa-fc112546becb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9470273-6751-4e0a-963d-4fb6b557ed00",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6201e4c9-f2a1-4d8a-a46b-2b1789479145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65ef9af4-8a6b-49f2-9f56-9430fb7c4a4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaee6fd4-9691-47c5-82a4-a0d46d04b0c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5d03cda-59d2-49b3-b58c-06ca1b744296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e8bee7-f04f-4dc6-8aaf-3015796ef319",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce6c31d-9fa8-4cc1-a8c0-fefea4a31833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af00b78c-47e3-45af-b3ed-a7171fa1eaf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e39e48b-20be-4217-a5da-c74e13af188e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b5ece0a2-7cab-40c5-a3ad-422a06faaeeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc10e579-ae50-4bb6-899b-4f212b996294",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef9e9dac-8a1a-4785-a5ed-7b31704c9b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1321fc48-4098-4cbc-8286-1053df4ffda6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef9ec5cb-0371-4206-860d-c14ad142b6e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ce6267d2-47d2-47e8-afcd-aaa26066c6a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d8fbb24-1d10-4976-8485-c9751b76e6f4",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ae33840-b696-48ac-a882-b80fefe90c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab2a45e7-286f-4c15-b68b-449755d235f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "154fddf7-f831-483f-b0b1-19a4facee847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d22c505-3f09-4975-9f37-a6f08392c35c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba4dd652-0c82-477f-b325-1513f0eda7db",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39d55d1c-2db4-4aec-b48f-04e99927bcef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aedfe6bc-493a-4fb4-a0e4-c1126b51c927"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ffc159-77da-4a97-8f56-1bfb43315cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "00777659-b152-44b7-96c3-1f535310d534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "387bd3c7-7039-4346-92ba-ddf89d1ad353",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aa7dd68-f151-41f0-9cef-aef317381c7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2ddd4e3-635b-41ea-a14c-81431c2795f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7229cf91-ad98-48c7-8f72-8bb5be58a6fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0834bc3-b5af-4911-a486-e92fb69b38e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7ea81b6-bb98-4dc5-982e-ebd9f8fc30cb",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fad4c32-0ceb-485a-a8ef-5dc1dfa6a316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f69e2af2-ff6d-4f16-bf1a-95c9c8a56e82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d20b1ac8-ad0c-4d4a-898c-d5cf6d6a8f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4cbe3de-cd39-433e-ae83-880faa49c12a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2687a90-3426-4171-83bc-c08bfae56881",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0e74190-4e83-426f-b69b-1e9d64c008c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5cb8e20-0575-4f8c-b1fe-712f67e0be7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db2a6999-e5b0-4da5-8406-eda808c13b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b2cea5a5-b09c-4930-a514-383c6d26e2df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e9b2acb-b53b-494a-b2f6-ad3164014873",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ef60a9-814f-4b87-95f3-9a06d00135b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7b660b0-c634-4a50-8e46-1fcd2da6e21e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a36dffd1-ca01-4efb-a81b-f7fbaf6350df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5eb8f6b3-81e7-4304-af96-521a1f7c3fcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9ec4e7f-5486-416a-8e4e-48ef0b23392d",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ca1c4a-db5e-4641-b65a-e7f790ac7c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee92b316-39a6-4d90-8d74-64f85e244fba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1f5a8a0-21e5-42de-adad-a9e3437f7542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3d921c6-1116-4bc5-93bf-e1c1807ef9bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef75c32c-1d7f-49e2-a316-a9c2a693b73f",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e7b9775-1374-430e-9ca4-2ec9650abdf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9736b96b-45ef-481b-96ae-4922314680f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d892843-26b3-4499-8fcb-e3c03855da05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "211c8deb-d370-4747-98ee-98ebe0821e46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "356e04d1-2fed-4327-990e-4ea08e4adfaa",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "276c35a4-7e02-466e-85f9-fef2cf7ff8e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a4ce039-f912-459f-9ad4-89adf8fc347c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75d19413-2429-4ac3-835b-87eab83f8e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "fd30ec82-2aaa-4830-95da-88a49fb08f38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b594d0b8-b45e-4f85-8dd1-03c7226e1d83",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62a27c54-c687-439a-851e-df014177ee63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd3b390b-5be6-4b82-8773-2e309d6de56a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d1de622-c946-47bc-af21-06c3c437dc8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a593ef85-ff15-489f-a8bc-600974b7b13b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b693a61-d42d-41cd-bfbe-abce7a7d1360",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f429503d-9a4f-46d9-90f9-ed58c134090b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebc25b75-6334-4362-b760-bffecaee7aa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bb0386d-ec03-4621-b43c-382a0fce7d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a030515-d04d-4c82-9761-8fee1bd5bc59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "268cdc2e-6b6d-4825-81e6-bf087a2b08f3",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8b05c3c-dcd8-45b7-8332-76bcbde629f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "cec45ad4-7d9b-4d93-b199-0ed5a43e9e29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15b1e87f-b2fc-4d82-b3f4-dd2f6c044eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3dfc45b0-93a5-475e-a1b0-e3595c102915"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c77bc68f-7117-4c78-b068-c8059449ac93",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2fb795e5-695b-4fce-b5fd-6364cde1f78d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ad9687-e23a-42b5-9405-631297593084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "532afb09-805b-4e7c-abcc-244bac1a8653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72acc94b-1c0d-408c-b878-d6f7449fcb03",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7de194c-5f23-43f7-8774-9f720acb48e5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc09e98f-870a-4144-b406-cddf03093e7d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f1028d87-3754-4d55-b700-c9dc52fdec5e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b117832c-8f96-4b44-ba24-47083efc64aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ab41c266-227f-47b6-8b04-5704e831e07d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d7e77a2c-a24c-484a-8e42-a6a9208cf207",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1690f10b-f0e0-43ea-8ed2-7cc4d067f727"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5888097d-44e2-4231-9880-bb16582a69b6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eb3ff369-c7b3-4b40-9e88-24d6c591a877"
                }
              }
            ]
          },
          {
            "id": "66049366-7cac-490b-9aa6-491c24834e77",
            "name": "Positive Testing",
            "item": [
              {
                "id": "edc8d9a2-3fe2-4af5-9b62-b420e3d3d617",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "31212a76-3be6-4c5a-a020-b7ecbc11e4c2",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f3096c7-ee7c-4a2c-aa6d-8859f6dba5da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "efd223df-3502-4b2a-9f86-900fa7275c8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "697c764b-88f5-4ec8-b555-0d1caf8282a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa08af5c-11f6-4747-866c-8a484aee2a50"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9be6ab0c-9e66-4fbe-89e5-537fa388a2bf",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a7d20548-244d-4f32-a993-8fbc3c386894",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "92297906-9886-485a-b42c-836ab9fecbe7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a287290-328a-4112-878d-13e8ebfcc143",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fb4aa401-c397-4b04-91e1-c1776680545f"
                    }
                  }
                ]
              },
              {
                "id": "bf51c97a-fae3-490c-934f-f7df1a4b9d73",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "336d2bf1-b8d4-40e4-badb-9dd7ba8f4000",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e19a7fae-ee42-425f-9b25-384e1dc57fd3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "34ef7556-fb21-405b-a65c-498fd5665b2f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6ac13967-fcc3-4c07-b357-70a2f7830c37"
                    }
                  }
                ]
              },
              {
                "id": "1bc55e36-d23f-4cec-97de-3327aac1e5ca",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dbcfa403-662e-42bd-911b-68a2e85ebc5f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0b26437d-0cdf-4b36-be66-5f6bd21c766b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "23396f77-a7b5-47f3-8b37-5ebfa5c2a2ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "14226625-5542-4c79-9a4b-0e4c32f39ccc"
                    }
                  }
                ]
              },
              {
                "id": "f5372ba5-e021-4f7b-8603-79da0f8c37a5",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "736524b9-8d4e-49d5-bbd6-fe2fc5f53b9b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "94a2e494-0f1a-4920-a729-94fa48169906"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6ce1bd12-e313-41bd-9c39-93415e5fd2be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "6c00396d-b862-4898-b3c6-bf9da2251f0d"
                    }
                  }
                ]
              },
              {
                "id": "770d4495-3397-407c-b5e2-d58538c40ba2",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1469c206-d854-4b76-a057-7584f6405466",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "61efbff6-0cd3-4145-89a1-23374219a764"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9aa27775-fc0a-4e61-b3cb-f2a057df14e1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "3c3a5630-5538-4dbd-a527-8b9deacfb6d6"
                    }
                  }
                ]
              },
              {
                "id": "916b103e-a897-4f46-a49a-be73e02ee5a2",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f7134513-6783-4528-86e5-655eb2caebc9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f35ccaae-a1d1-4cc4-bc19-df0ec5fe4724"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "775bd218-f22b-4d41-bba6-31ac0d68a95c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "caa94f7f-d985-4278-8b04-366b10cc15d3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8f3f95bd-a54d-401b-aca5-45118f7842fe",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "25326e28-fd8a-40e6-a8d9-fc09ee4327a0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "701b3f27-e6ac-4d51-a9f7-33e5e0f71a1d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8ee19ed4-0dd9-4a91-8133-997ee445c957"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0065958e-2f16-4a96-bee2-cfb32a96971f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "9ee51940-8114-498c-9704-bc68ec19a51a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "70ae176d-c620-4094-ba1f-514510235976",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f76abdee-b0a5-4f78-ae20-d526ee897117"
            }
          }
        ]
      },
      {
        "id": "ea01152d-f10d-46d7-9ae4-0fdc4e49ee0b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c8bafc15-024e-405f-9a64-ebf7fbb122da",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4bcefcb8-fdaf-43d0-a6ee-789d3678e46f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1b76ddec-889a-47e9-ae42-b9ca1d427a6a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aa1e1fc-425c-4fad-926c-ad2b5565b9b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46aead22-1bd3-4e43-9567-ac8846f37587"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d0b185-07f2-4eda-bf19-73b9c537cda4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8066762b-1dca-4b6a-a5ad-b4cfa3f0062b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f24f06-357b-472a-b98a-299dade9e740",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfd4dde1-4b0d-4ff1-825c-a543c17b58b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b3df7a1-0248-496a-b4ff-11c9bc2ca61e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11600979-2c22-4266-ab92-c77a7eb2a01e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a03a6ee-8e77-4a3d-b9f8-b2b179c09d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c0e3fb6-e810-417d-9164-fb935e00485c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "594804ca-5036-4ff0-8dfb-831d6f3e8da2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc096dfa-cbf3-4904-a8cd-c34be1688e56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f91c881a-2bca-4124-9249-9b9c387e8f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e85ffd5c-c5be-48ba-a251-31a2f824ff9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c8c3856-b98b-4967-95da-011c191a245f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b908c393-5d86-46ba-80f8-35dc2d9a3617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28ede1bc-1044-4a7d-90f7-c293dda5907b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb769d34-c90e-4dbe-bf48-e2a1b09a351a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6ca3b29-19c1-4fd0-9991-bcd6c71e7530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6794bde6-4f22-4b73-9266-9d7b90f8f046",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "688f342e-8845-4614-8fad-44fc8928aa1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca5d158d-35b0-4a71-89f0-9af177d7be5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82f02f6a-196b-4804-a966-fa0bdac31411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "52c3cd18-f88f-49b0-9ba4-48198083c215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "048adf5e-f88c-49a4-bb05-0643f11c48a1",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e002ab0-3b45-49e9-8c24-71958a66be35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca73c413-bc34-433a-ad41-63fc18a30397"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c84aca3b-3652-4ee0-a7d1-5d3f4c16cfd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f34ff484-2315-4a41-b4aa-da8d7c6a96a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fbf1fd2-3de2-4605-b567-dd4037556b7a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "765db5ad-cffa-4085-a6ee-2f844561f464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "788fcf76-56ed-43ec-8dd0-069e16d20a22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0829076a-629a-4634-8009-6182c1b27912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "8be30666-8818-4733-81dd-b0e5a3f4987f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2457417-1cc9-4890-8174-ad43ecb0878f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcd98f4a-2420-4203-9c8a-786dc68ec320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c64aea4-6ce7-4d54-937d-20c7c1cb6406"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98135338-5319-4d17-8151-5253b4dc99f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "53b0c99c-e88e-41b1-8cd2-70571820f253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad9f75a0-71ae-41ad-b267-ca8c881537c4",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d87f4410-7205-4929-b315-bf03f0e34f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85ab0eee-f463-4ffe-a3c8-b038320eff9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dad8d5b-3b66-4727-aca1-2d1684efd38e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "655e2eea-4c2e-4dce-b635-d3c3fb95e71a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67fc697a-4fcb-419f-a231-59372b143c6e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdd80eff-2e74-4fff-912e-c787a02d2e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c8707af-f59e-4bcc-bbde-553b981469f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10a87c66-6c3b-43e7-8018-8c431429f345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "46af6efe-fffb-481e-9781-642079e1230c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab969123-04d6-4cdf-8901-c539e0fd3ec4",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1517a26a-180e-418d-b974-629bd1b75696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf856177-18ad-403b-b851-79a8ffec7577"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0607eecf-55ce-4ac6-90e3-6b4967080da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4a13cfb9-2d6e-4cf0-a1d2-e5e7b1761c2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e122964a-542c-4a4a-b4e1-3baa5c087fa9",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "221e2067-5d6b-46c0-8798-8d80e7b52153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca9715dd-ce03-4cdc-817e-14ab289eff27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "087e44d4-b29f-415c-baec-30537e1540ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "62d20768-01fa-4a1b-9f95-6deda99270ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ccacf3c-fbd3-43b7-bd0f-cf5c04fac71a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "444ec5fb-bea2-48b7-9a35-75488a22689b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2b92579-ecbd-4e21-9d13-b7af09c691a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e757b324-5519-4aa5-a075-c6c9ba943639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "91a90f7d-d680-4c06-a30a-1020105f2e47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fa8feec-bb78-492c-9092-874c6dbada21",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "682320ba-d1f5-4a37-b3d6-5c511c118b0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faa23d69-3921-4fac-8b43-db53071dce0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "006d66c1-3c44-4224-b0a2-c76efc7fa604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "91563b91-2cdb-4d4b-b129-04e14481dd9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e7a011-91d6-413c-ba5b-0d9751950428",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "079e197e-9f32-4a02-a49f-3ab8779be3c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc91169f-4b09-498d-b6e1-b3eb416675f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd427e21-9a60-42dc-8d28-437ff0ad1483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d4edc79-ceb3-45b2-bd6d-abe0e009d765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65cef3cc-08b6-45c0-8557-feddbe4fc576",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6c123bf-4f3e-4721-9749-683492ff7626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aacb0322-7edf-4b51-bac6-3128c2f269d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "251920aa-d4b6-4def-b264-b58d6cf17001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "407cf9c8-b3cd-429c-bf75-d72f618db18d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cd4f97f-edff-462e-afd9-e33882a70c0d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18cee9fa-858a-4802-aec3-e43dabd7f218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f28a55d-623a-4193-af42-c48f70454aaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f839890-9883-4934-aeb7-8796cce87169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "85b9540a-ef20-464d-94a6-91cc17a4d796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d19bb0b6-f2dd-49dc-99c2-ac70b9a356dc",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c56e35c6-cd50-4e3e-b2ba-5f698dcfd411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99c0c91e-3bfd-4356-906d-4d47e2c1dfc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd1207e-6f6a-4fee-b583-4fb70090788c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ebe8d43-3a20-4170-b70b-cf9179eaa495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bb0d62d-068a-44ed-aaff-ca629dfdcbb6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed762d9-c142-4298-a042-d9be5aaf3ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c13997b0-e71d-4a65-92f4-619a009d5e59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be03b8f-b711-4f08-be24-f0c72b28b335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e96997e-5286-495c-804b-eed2a8c8d15b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b63f7ce-bb48-431b-a497-a9aad9b76413",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b596a4-c434-4bfa-ba74-0eb2de3d7dcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8966961-cd2e-4873-8559-53c99153d864"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "373e3b39-2dab-42d1-bbd3-7d3e67e289ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca3149d7-ae83-4f9b-8b91-fc59ec612a75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "798231ca-53c6-4bcb-b9a0-bd8fa03063b3",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "860959e6-2cde-4241-9da6-323f4afd3882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbd66ccb-28d2-416e-b693-f39ea810f7a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb39ed63-75e0-475d-bf8e-a3d89966bf7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e092cce0-7209-4a86-a217-9eafe0048ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7724881-2e2a-4250-9b0b-49d6b66bd8d0",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "910616d7-d674-4ddc-a73b-3697b3b6cd8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9ed82bf-e6f6-4e4d-8e50-255c82b2037a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480ca31d-d0f4-4632-9fcd-80713e7984e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e46f9eea-31ce-49d5-b59a-015a1ee8b6ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d02b365c-8fba-4660-86d6-061398dc6de7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcce46bb-fc06-4df7-b8ab-d520362e726c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dff3848-2b5b-44d4-bab7-0bcf9517f249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5f1678c-b097-49c9-ac2f-4eb12badcee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5337824b-a0f6-4e93-8623-ae00b859d45d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd15bd3c-40d1-47cf-a54d-539f9fad062e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c580890c-6ae7-4f41-bbc5-2a77cc1b69ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6daa88ec-38fa-44b5-9ab7-fab462de39f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0bbb538-387d-41cc-a24f-0e0e9e33e138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b737f636-0c4e-42d9-b81f-b3759ee9d899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f8420ab-df77-4fb7-9048-9122fbc832e6",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "514af529-6f6e-4b92-bad8-54622799163a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c2b3eb3-a6aa-474a-92a4-b1b7f8178c9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8782b389-b070-4246-ae8f-2fc08c26ca84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4a2da29-54e3-4b07-930f-e6fc94952df1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57483c81-c551-47cb-9693-ab485e11eecc",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10eb3d1e-08b1-4131-b648-8784378a86f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f33d620b-3779-4730-82a1-210dc576dfab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4ab5ea7-f02f-4827-a635-fdfae692cc8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "121b892f-d8ec-4f36-b3c0-492093ab3ef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b0e8555-d9d1-437b-b8c8-646d74609751",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "900caba3-7879-47f6-bd34-b29f6d1f3a9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f93255be-de82-40f4-9c7d-e70ae8063e60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf76fe73-e720-4c9b-863e-1a37a6a79e27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94ffadb6-fc4a-4dfd-abdb-4126d2386d12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c22c9f0c-ac1a-4c95-b591-81e55de5492f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f6c5ba-8442-4e21-873c-0b42f4db9666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82de2a25-e777-425d-9937-764ebe2a1247"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe61175-ac45-47e4-9695-6202c44d0c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae3e9844-3a8e-45af-a860-92259529d955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09635349-e34b-4c4e-bc7b-4ed020189c09",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e3a8b14-b7ee-42cb-9e20-e38f164fd8e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74ae3e01-1ef2-45b8-8421-72e369dd1857"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e360836f-3efa-46af-affb-21017d95b444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0e85b0d-a080-4c17-a05b-40de96d7f97e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33c4ca52-332e-43f3-928b-4145380611be",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "547bf508-fdc5-466f-894b-4ad0f6233efa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36b2695d-73f0-4ae1-96e6-1d42b4221c1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ca28e5e-ef19-4eee-a72f-765f509fd1d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0484495-2f86-4838-98a8-72d5ca02a85c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8931a9c0-ac2e-48da-8577-662432827093",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e1c8dc8-13a8-44aa-b768-a6da36fcb279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f01299b9-61cd-4b69-ae42-a00ad9c759a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42b563e8-5c44-4ae0-aa12-e95e8be4ff94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c92a57d-fb0c-45cb-9fc0-7ebedeb555a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "048e19d0-8ed8-43a2-8a34-2fb075f0f7f6",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e74172-14b5-4654-8749-1ff895970d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f2e4084-8983-45b7-aa72-ec996ddb4b65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a16f0b-7ea2-4492-9143-0102ae52a3ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fe5f0cd-7dbe-414e-8846-b976c107d2ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dbfd7b5-e56b-47b6-aa85-afe3beececf9",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f31c77-d899-439a-8e27-b0fa542bd89f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7a9da8e-41b6-407d-8032-17db570a9a25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f7fd5b6-e5f1-48cb-966f-cf0a753e168c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd282133-0a4d-409a-91aa-70ab813870a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ec261c4-c369-4195-be8d-7bde14350739",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e83fef9a-9d59-4c8b-93ea-e9a0dbdfa6a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47f2068d-37a3-4afa-b2ed-5856c90a17e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "628b645c-a551-4d0d-aa95-bfb4b5a3a8cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cdb4ca1-3eb1-45f8-a4d4-64cef0dd2eb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9f3491f-cd92-4f3d-b785-19b9982935b2",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dbae0eb-9327-4e46-80c6-731b8e174a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "085dad9d-f318-432c-9a01-e1a945db3fa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "067fe2e9-62da-412c-a2c1-8cf208fd30e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2baba659-04c1-486d-a079-e57eb13623f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3cd844b-c58e-4c5c-b7ab-a6fc885d2fe5",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37db5009-bf46-47a8-8d65-65975d9b7c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80d5a1a0-1415-4e5b-92ec-8fb763d60c3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "797c9b09-1258-48ab-948e-c87fab52cc2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "efc970b2-150b-4655-a3d8-d753f429e1e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aae700aa-6e3c-4932-8bec-414c7248a9fb",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a85d0e0d-2c69-4e28-bfd1-b45d7856214d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21e650cd-10b6-4cf9-b10b-45f268401274"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14e4c58e-60d4-4d56-b44a-71ba37377b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e5d68f7-ad46-4b18-9410-700012eca83b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "27c15e2e-bfb5-4d90-8b7a-d4f741af096e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fa73c80a-e3f3-43ec-b507-df1b7e3dd02c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da35353e-d386-42cb-b671-6c419549108b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "4bbcbe46-4602-4901-a902-f066fc5f6214"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ef5e41a-476e-4e83-9b79-28d85d8920c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f401692b-820c-4b07-8450-ae64e994ac6b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a920ac19-b12a-42f3-b099-55205e24300a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fceefb2e-11ed-4e44-9f42-b5fa6663a86f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "687393cf-da62-4c78-a2f2-b4b8efcde6f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "688ed413-9d13-4387-af78-d09712bca2dd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1fca4481-c217-4c6e-bf83-82d9a36261c7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "231aba06-f841-4a89-b1a1-6debe88e2625"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "20cf95e5-a565-4978-bb2d-6ab38a13843b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2e112adf-33ce-4c0f-99c7-0d1b5b5492d4"
            }
          }
        ]
      },
      {
        "id": "0f9d591d-b9fa-4e88-9deb-1fee6ed217c7",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "872636e1-6437-44e0-ae24-59b5258d30a6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9a3ccafd-2c74-4a0a-adb6-0549be3b21a0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7b911693-306a-4d84-b76b-8d73f95e772f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67dc5d0e-b015-466a-8666-b4cb47107331",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10c6549f-9e92-40ad-8d8d-08a34d8fcd7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0f21dbb-e270-44ec-9c8d-8e56f79ade3e",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b1a3513-9aa6-4478-9da8-56465f206ac8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c320ad5-9d09-4252-913f-878d303948e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a380e84-2ac0-443b-b586-2d91b5beae80",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e0686c-d701-4d7c-a5c2-c6082b0ea36f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b61cdca3-f63f-4bff-85cf-4cbb18d33550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1147e361-689d-4b4a-9197-96b8559ae0f2",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5148cd94-3755-488f-86e5-ed8161ce25ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0754fe21-4273-4fe3-820c-0b52704e584b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47edd07f-df26-46b3-9dae-8a89e9bfab4f",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13003a71-30de-4056-a9be-06d4496909dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d4290e7-dd00-492a-b1f3-9de6696f447b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a626525-a16e-4114-a10a-5d0eea971c9b",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d85ad81-594f-4b88-adcb-744c3c9d719e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2834fb59-fc62-468d-9d64-9821f589e74b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d13894d3-2896-421e-8f5a-53eb5107a780",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "988409ff-f46a-42ad-9f54-572cbc5cc606",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "856bb41c-9686-4bb8-aa2b-23c62e638751"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c1666d0-54a4-46bc-bc5a-a13cb09332fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d713aff5-413b-4ee9-9b2f-95623569a053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab182e56-ee35-4c38-b8c3-3337458b0882",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91f9871-7726-4e51-a634-0bdc3e2460ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db26aff2-3319-43ef-b7cd-c53b40cfad65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df9e09c-4914-468f-8ddc-d994626ca068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ea18593-8318-485b-a271-a39c66a8478e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a22fe925-ade1-4441-b2c0-a1180c8d95d4",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c69379-c1a0-4f83-9eb0-01a1a9c1dcdb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c2056e3-6962-4bda-bfa5-17811cf5d521"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "891d2ff3-df6d-48a8-be7b-82964422589f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bd2d3d5-9257-4d32-8428-23a25fd5ed22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cccb76ab-6a39-4dba-a063-d4037d81bed5",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4e9a35f-740b-40a4-b49a-9c6da1b37e97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbd8d5e2-9cc5-4193-a62d-d40116740d7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "470d692e-e0e4-4be5-be94-bf33dd4b9b85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "349e7c5d-77fd-46c7-b941-1671613fd9d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "542e509d-4ba6-4f24-93c9-cc5fe6db0a2a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5ef9952-5022-428f-aee7-0a2041ebedd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fc812ea-e25d-49eb-a8b1-09c7bbe28162"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8340a42b-25cd-49a1-b12c-153f0919389d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32ae7484-ea0a-4958-8c87-e2604bc90284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5ca0664-fab3-4730-bb9a-978308b74074",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e95fedf-28f8-4768-bfe7-ed8d05b22699",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e246849a-22d9-411e-b16e-de82ff9a771e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5738a167-83d9-4428-a673-1f95a0f75cce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3abc558-b680-4740-84a0-591ecb0775cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a34d53b3-da88-4747-a782-6ac8e9365f1c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f2ac7cb-4011-407b-a1d3-8f66161d6fb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d0f7264-e238-4bb1-a4ba-f3974c182ac1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "534811a9-39f8-4fc0-ba33-5b7a1af719e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3b94075-51a0-41c0-b5a1-f68be33d02df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d9ccc9d-1d9c-4a55-8a7e-124d00a3ab89",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8f570a2-49eb-4608-8ec3-723221a08efb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd42ce12-1d69-4bf6-bf26-bb7c8a840e60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb3abc03-8408-4d2d-9f4f-d06fb16e6b17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a16fc30-c63e-46cd-9f8f-61c553553acb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8d70c4e-21f7-476b-944e-682207c12d79",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fee9b9bd-466e-4cf2-be2e-3ffe9c614269",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62275710-51b0-4606-b6f0-1728925af89c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "807b79e8-f2eb-454b-a361-f407b6dc798f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34cbc390-83d1-4d1b-8dfe-2d6bd50df6f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "256f5782-fdd3-413e-a46d-721f48e250b6",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d7361b-1d14-4d22-aac2-57759dbf698a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d306bdb8-1da1-4129-bba6-cb9473ee0266"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0985482e-4586-4546-a6f7-c9b32f20b3d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa4d6b65-f876-4a20-8bd7-a7e4f6712afd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c48095c2-743c-4950-a524-b7b09206990f",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7757df0-bc9d-4273-8ef4-1790358a01af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5af9756e-66c7-4b4a-8182-d15eeb4ca099"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66531b10-8070-4a74-83ba-920773eeec21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09c750b7-cbd6-4c56-98b8-0628948d160a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83144194-d055-42ed-a252-57bf5cb3a3ff",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24b71a21-10c7-461d-aedf-8ab9ad77807a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0811cd07-d1a3-4b3f-aec2-e95ffef8ad10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48c1bcb4-d31a-47a6-bc18-6c2a83def7c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9184c6c-5e0d-4849-9031-469ca9e0c9be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7790b082-65d8-42b6-90f7-e7013c3374d1",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47846c6f-b624-4aa2-b8c0-9c516f13d877",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f03135a-25df-4300-be3a-3f59f16bf513"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab257870-1792-4c98-9e46-40466d676939",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc76bf9c-dc79-451e-884b-82f2f65e5d37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cab5c22-4d75-4aca-bcd1-1d2cb6fb6642",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b11c578-4282-4d4f-8d86-b7582bd4a4fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2af555d-b2a7-48c6-bfae-ccfb2c9c492d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb32f693-cc8c-4cb6-9de4-419eb5662307",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9d03f7c-703c-465e-98b9-bc71580af4e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f5bf1f5-9236-40ea-b51e-1bd4ebc4af6d",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ce2b073-defb-4c2b-a682-f9afb6c7718a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67b079e7-8276-4282-bace-9d5ec0e192ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd3f918d-9dbe-41de-ba12-17189fb00548",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d52c9943-e1f5-4f1b-86ea-21e5bb843c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b32d26-6667-429f-98d2-8b61792683cd",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12fa3663-5b08-49c9-b799-e1516f4da128",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f68d1644-3ceb-4f87-aae1-da4794d59ddc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6550baef-9615-46e6-98d4-a21aaa399500",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29323632-02f9-4ae4-a6e4-a0b3b985f28b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ecc1315-b967-4488-a9c3-033279a830f6",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e5cf145-2e4f-4a8b-8f70-72bb452c539e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "468bf755-8503-4504-a58d-90d4bd050d9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f555c63b-8ddb-43fc-9a3e-eb065f466c94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65618307-35df-4499-89ec-03333413d2a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e896c4d-f150-4da1-9ead-12be77f03516",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a58a6719-8304-43e5-a2ad-bf481bc23b6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "180b242f-44c4-4d0b-b17c-6001634676a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d9c816-e481-4bf6-a2dc-1cbd198eadc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db8e3b5e-66b0-483d-9bff-6754341181ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53efeae7-8011-4a8e-909d-cca610e33e00",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29193f03-5d4f-45e5-9695-0c7a468e561e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c789c83-e714-472e-970a-59b1073078d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c33f21af-302c-4ec7-b7f0-8c1f7f1f89f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4daa7e72-3292-46a4-a4aa-bf0aefeecca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f86c5b47-38cc-4830-8dd8-60e4e9737466",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "807a42d9-8e99-4ce1-8ff4-7836bc6c7ecf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96388c34-de75-4251-87d9-1f2736fa62aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b76eaeb-0316-44d2-8047-462ba781f829",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab52f00c-14b5-4dae-85f2-d1ebea12fa72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a65731-e6eb-47d2-82a0-93af24d98207",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14139bc9-27d3-46f4-acf1-eb5941ebb7fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dedde133-1301-40f1-9c88-34c87a08a133"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab266649-3c3c-40e0-8da4-e509fe05e059",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5590179-5321-4ded-b8a6-f1f69d06dfeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb9a57a-82f2-4575-b3c5-8abaaf7b95c6",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "180c41e6-ff8e-447b-be84-b0154d5a3f05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a8bc4f3-3074-4119-98a9-c7b6d3712fc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a41a4e-bbab-4185-8478-3c69671c4c22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69b56af6-e55a-45e6-a49a-cfd0d9b1290a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "109cef93-e40a-4488-96ff-b9c695180353",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f5eb75c-1ad2-4324-baed-47d4be7d3d7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7309b73-bb7f-4130-900e-a7bd7d825daf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbf1e38c-83ae-4c82-be22-bd6beaaaf98e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22f67071-2225-42ed-a3a3-5ab38464062a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f18a386-595f-4e7d-9df9-2dae218382b6",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3d20325-05ff-4434-8a6a-a3f0305e79bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e773750e-0fba-438e-a3d5-d7567ec905e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3390d65-a0a6-4a03-bc10-af030ba0fd6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4333fe6-d26a-49ab-b780-e2db3b010163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f9a4352-e7d5-40de-b6a9-a4f3bbec9061",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56d30d8c-adaa-40d4-afc0-92caa0ec64fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99fc7e4b-0222-43dd-bc65-c1b6bd82715a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e5ddba-c519-4760-9bf7-231e976ed64a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cc53857-c667-4727-b2ad-cb1c398de5e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee596ab-31d6-4ec6-820d-243514b8602d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e43b6567-bc7c-48a9-a653-f659c08b0a68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30b5cc87-7bec-4873-ba52-fed96db5990d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7078a35-7fdf-47c4-a20e-f2e534949e46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23f0b466-e901-40dd-bc33-6fcb50310f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4504715-17b5-4e0e-8914-5874c54e1834",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b1c7bbb-8779-4ed8-997a-84da3b46921f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ed63430-2dd2-4fbc-ab02-8d81ff7368be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b51904-3c79-4ea7-93de-8c6bd4227e8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01bc41c7-6481-4685-b4a9-e8b28ff10f52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc72a2ae-0181-4ecc-a908-7195502c0d80",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f99fead7-dbe0-434a-89e8-b542648ebe4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64becb9b-2bc9-413e-8ebf-677dbb0f5f60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12cb01de-4e49-4da7-8e3a-ca859dd52296",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f764e5b7-3938-4404-839e-b55009223391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a90d5f6a-8e00-4905-8e69-56578e305c64",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9accdcdb-2e17-4787-97f4-0b03ca885537",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb06ccf0-96fb-45ef-b30e-431f5bf5a2a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cfe1bf6-294d-4bfd-877b-4a6f66dd1432",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed4ba169-edb7-434c-9b67-0744b699c746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f43a85da-7098-4869-af10-e2621fdbb633",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "343f6e7b-2ea4-42dc-96a5-09f3b9458427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c29284ec-20e1-4a06-a3ca-522ff0ad315f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b068cd9-4dc8-4281-8e57-2bb50f64b856",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "636199f2-1c39-4aea-b153-f4ac78c4cb84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7380723e-d00a-4ce7-a872-562325211498",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f95557ac-47c7-4cb5-ad07-deb2daa3508e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ece680a-7daa-40b0-8cf0-537aa5e473df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4039119-332b-4210-b56a-3f10a6833098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff81b8c3-672a-4fe2-b02f-b5956b91af7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91cd6aaf-1926-4dc5-bbf7-b0ed3834e8ab",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec6766d-0de9-447d-a41a-13622385217f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ae5c052-1d64-4a85-a7e5-54ea4e5db9cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8410df16-b3f1-4d11-a86d-4216856ff83e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9548f074-b3f6-4b14-9921-037519b1c8af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eda3eb64-2a16-4f63-91bc-ae69d4534df1",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3897d76c-5ea3-4332-a644-4f4cd59bda13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15111d31-649b-4620-be2b-54449f373096"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ead40dad-5a0c-4200-a75d-b5cc730dc52f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f36b4bd0-1cf3-48ca-8bd3-f9d84a10d585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1df40785-b06d-4c45-866a-88d4c15dfbe9",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adec7cfd-74d1-4d39-a481-431f8879d524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5759ad6b-d53c-4643-a0d5-e0a0695042cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41b1ae3b-dc3c-4441-bb0c-d7fb991066bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68acf3c1-9798-48cd-999b-75f33460b641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16d04bca-2634-45d5-b57a-749f6f6fd0d3",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3557f62-10ad-4f09-b753-ef06c1ed1dcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc7e0eee-b823-4856-8f10-a4167c33f5ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fb7c898-db2b-423d-bfcc-3cb40187e6a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2b1793f-6a69-4783-a965-f64f23599c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b051131-f96a-42c0-983d-e66623748a11",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "093c51e0-7a3b-43a8-bb7f-7c00bbd7c217",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "539b9d1b-79e9-41ee-b903-5e6ea05e4a42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ace9f93b-426f-42a6-ae32-d46decacdbfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4a18672-bf14-4211-8656-c6e30c9050dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3407374a-34c1-4b6a-847f-a27d70a096fa",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2ad96a5-a745-4de7-9e90-35e9da489431",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "651a4679-357d-4d55-a664-524558963845"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "489e3f86-8b01-4428-a801-892e5b61b455",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9170646d-20e1-460f-a2a6-f3c01919858a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69735343-d8ff-4d81-949f-612b57b11024",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b4089eb-c7fe-4298-9762-203a2ae3c7a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4da1c44d-b9a4-447b-a8df-64f33b32e890"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99df6b51-4edb-4752-a1d4-0eee0a065a93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b33c7a6-b7d8-479a-983f-d2991d351f6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "748518bd-0d92-46e7-8f56-41310364f145",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaaab045-637b-476a-8397-5e22627d42ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d19caf1a-864e-4f5e-ac4a-161b6a3ef6b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac81f33-afbe-4535-9d42-637773241411",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d977b75e-64f8-4806-951a-788997cfecd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c4217a5-8639-4326-9473-3d36a1041f22",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66f7e419-4134-4bcc-9229-96dcdb49890d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8189cfaa-df90-4932-a8a4-7de751017351"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f057239-29d5-4a6d-90b5-90fb06891871",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71ae92cd-2615-400f-a4f3-e3f7eb9df595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5e52fe5-cabb-45a0-a5e7-9b3afc531092",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "686e2bf7-b712-4567-9622-6f4f5fff808d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d6ffecc-2f70-41e3-9d1f-e46f076eacb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "580cc3d7-03b4-4876-ace7-299714404878",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee49e5fa-4e44-43e9-b250-67b012494ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5900aae2-ae44-41f7-8663-ef338eef58b8",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08695e01-73d6-492d-88c8-a519695f1d4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a373c18-8b87-4e27-888d-3c1c3a5fc242"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28a70969-4252-4bb2-8611-85d9d111b2db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3aaf84d-55e8-4655-ad1b-1b1582b817d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceb69eaa-f6c8-4f79-a361-0ebc7cf09c50",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ddb80c7-e510-4db2-965a-278939510596",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "226b8127-4b8e-422f-9d40-49d022a1d184"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f96a8172-cd6f-4489-a99c-78c72eeaca6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "396fa227-6e2d-4129-a354-1e590d364596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3204166a-7a2a-4e7e-9563-dcbc734e6d08",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db557e2c-d896-4968-89f0-d17380750572",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd4c0947-bc97-4d8e-99df-6ff4aa89e7f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8136fb3a-1aab-4f19-9f41-017b7cc96b23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea42efe6-2ba9-4211-87ca-af8338095d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d997eb3-f5c5-4902-8a40-0be2cdfdc81b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b32e8910-e04e-4132-90be-e7be37d75627",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f139499-d643-464e-9074-bed9f0b5f53b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5dffbc-c296-4df5-9912-536cb1e8a885",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa9df361-1af9-4b16-be45-6607fce1c52e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fb041ff-80e0-46b2-b593-5f31f4a01038",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb7ee48d-5a49-43ad-aaef-1d98bfff3a58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "effdeba5-7e04-479c-8fd9-666921cee35f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac31e75f-035e-4627-a9bd-eed939cc1d51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09ce85a1-be52-4170-86b8-44808c301ece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42f96a98-ce7a-4294-aee0-0e3cfc9aff60",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb2bf0fe-7ed9-4765-952d-f92eec2cc6e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8807836-161e-4041-98fc-394c3d17b804"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "437ef467-6215-48d0-bfad-102aeb9aa791",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1091e6f5-b24e-4e14-81f6-86a6fa26776c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9828020-0755-48f5-99f9-b234697f0c02",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cba7455d-d80c-44ab-8ef7-eb538b21949c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "266f2913-c633-4e02-ba85-71944511fca3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e29275a-779e-4238-a74e-55ce12402cf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bfdf71f-e493-43f1-a26c-38bde6611d67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "882057f2-9e36-4db6-8cd4-7fb925fbeeb4",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d6590e8-1d3c-49ec-9918-3ace179240c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f54d689-0e28-453b-b410-58290d1191b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "180680aa-10c4-4391-90ea-5bc2677b5451",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2972d149-79ef-4d4a-9b80-66a46ba34c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bb51d53-35e6-4b3a-8abd-6acdbc8b6a9b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e110358-07c9-4a5a-8888-80b15235cf2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31178a16-ea20-4cd9-8c2a-a9534f2532a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "103f3d3f-f3e4-497e-ad38-6c8aa28c063e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb65b371-aea3-4cd8-9ce0-9d79ecaaf021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2baf1d8e-c538-41fb-bda6-cecb9828ad50",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81497159-e50f-4d18-8811-946dcf419aa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7236cf53-602f-49e8-a27b-18b79f86104a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa67c0ef-e129-4636-8e66-daef4813c05e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "beecb674-2d83-4aed-99b3-3eff481d6ee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3996e11b-0eb1-4fe5-80d6-ca5c677ac8d2",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6090f8e5-1ae8-4b34-a5a5-e422e873071c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c5d40a2-547d-433b-94d3-c140a3a238a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "461fd98e-ce53-4ed2-b824-12e51392a319",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d44a4fd5-d1d6-4b45-9d77-0af53ae63cc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c94bab0-f5fb-4ff9-9f0d-eef581dca0f8",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15093e3b-13d5-4224-90ec-1f8dfdb4fb12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dbee7ce-213a-4fab-a316-c3518ef8db53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b91ea46-56a6-48bd-9b10-0a409a331125",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d863286-b3c6-4ac8-b052-5d906941a199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97aacdf3-a0b9-471d-99e2-374a973820cb",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "863b9e41-efd7-420c-8e22-51119390d79c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be25488b-a7df-4c96-90b0-9e6bc91ee732"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a5958bb-9eb4-422b-927b-2bb8f9edb459",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e256e70-6fa4-4dcf-b08b-97a99d6c09d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94fa1d91-ce09-47fe-833e-dcedba50cc8e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f869eb0b-8013-4bbe-aa1a-7c717a743ef7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1b2dab6-6fba-4d63-b289-0f280df2cd89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3315bddd-720d-4b9d-b465-08385ba4e546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44f2150d-6482-400d-ba17-a3866d30d39c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ab7881-950b-4539-94bc-ee5b40bae3d8",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec4226d-7613-4899-8233-aa26f255cfc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfd0169f-8210-42fa-87f6-15655474c71f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "862526aa-d5ec-4155-8858-57163b10a101",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81e51faf-0702-48db-86ed-67aff7ae2c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82f9e0bf-7430-4704-8ac5-3856b705c908",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b0cf9b-62cd-4a31-867f-6f647d7158ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "886a0ded-6ccd-483f-900a-315096cdfa15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "877dfd7b-e923-4f90-a4bc-829e91cbb802",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "541c0ae8-6ba5-44b6-9747-e5a6431972d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fffe873-a40c-415f-a875-092f04b71dd0",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "165c43a1-711a-4a97-948b-8a1232f7b1ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6eaefd4f-9141-40e7-8467-dbbfca6a1c2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63973ed3-ec65-479c-81d8-c7e473b13fbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f172bb62-f40a-459b-8dff-61b246490d34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f0e21f5-3da6-48fa-b40d-b2a82637d081",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9948bf29-3957-475b-93ca-34a1e4d11039",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6917a61-7b44-4910-99f6-c6c6cc3d9045"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b47af501-75d5-48be-8092-8ee5daa1e7be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ca365a6-bdc8-40e8-a055-efa3fdae187c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "690ddff2-2b4a-4964-84e0-d890605ee654",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8569ce8f-a860-49c2-84e7-25a8add41c95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "621763d3-5d6d-47f1-8a1a-cc7e23be5b05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3349d738-b338-48c1-9322-ea541949a054",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4686d386-5a6a-44d7-876b-0e5313282ece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b7c2a2b-7245-4bd8-84d2-678a88cd82ef",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbdc7fb8-1d5b-48c9-a532-44eb804bef9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "147ca414-7838-4b18-8a35-81fe2ba4bcd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c358560-5440-41d5-a5b8-ecfe17a38dfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eae29e01-b70c-4b51-932d-fcf7bf6533a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2a8a8b2-cd1c-482c-b6fb-ca0550d5781c",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f9ab00a-891b-4ee2-be44-4fc433420ee1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8dc0c3f-184c-4d50-b602-6c22bf9f6979"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ce1d0f5-a8dc-42f7-b02b-ffa73bba79c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a65d4c8-c764-4e91-ae60-7089687be24e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "788d22c8-a457-461f-92ff-7b49c66e86ef",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19d91940-e149-48a4-955c-a5747507c987",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a69ce47d-d5cc-4eb3-9323-524200797cf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e1f3e5c-b5f2-43fa-8356-a754288f814b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3584a130-f17e-421b-83ac-45045bb7b217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "949d8877-9970-4a85-ac78-0fd0de19a724",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3487638-5b43-45ef-987c-9cfbd8aadc1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5322018-2e4c-4c5b-8212-48b7a931a658"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3c37688-889b-4f59-b465-1ef2f092f16b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcd123e7-7960-4323-94e8-cea9ad863737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abb890be-ae93-42f0-a7ad-cbdb4f17cf52",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb7e0a88-f3ab-440f-b78e-5a339889d4b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07bda998-d170-483f-bb25-152ce067f80d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b68245-002b-463f-9621-8f8f0130e317",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45c069ca-e257-4892-b44d-dc6e08c9c8fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4fb00d5-f165-4944-abc6-be62cc5fed6b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b07815d2-50b0-4ce4-ad46-af1667ae6995",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c2e88ef-00bf-4945-843e-3254404bca01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16776327-5a8c-473c-a2ab-c054c0c7893b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97533ef1-9e09-47f5-ae0b-46653143c1e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fa2b6b1-bfcd-4ee2-b659-030c6416c56a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc4ab0f4-f0c3-4a7b-9349-3442e2897c8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f7cb5a1-5345-40d8-96dd-535acc555092"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8abe3987-654b-454f-9526-28d50d618802",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "111f37af-7822-4d53-9fac-26785ce1d993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeb7e3a0-7994-4ac9-b609-3f6e0f9645a2",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "523b5edb-bbaf-424c-825d-697ea9358097",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a57525c-1cac-4c75-a5de-4e58e3ee13e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cedc0cb-a346-4916-aa98-16dc476f2af2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d49a1e51-b58e-4e38-822e-89b4023ab613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d180d070-8c67-4aef-a76d-d6c2bdf5ea48",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ddcd078-8195-445f-b239-113f15741cb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4e82789-4620-4c8f-96ec-b129d6a99f38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b314e8-3bca-4687-96b7-b24874d97477",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "528d96e7-0e59-4bb5-9c72-dd12a1764e64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62e91830-0fc1-4269-af22-e4a29c8bc112",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22e1d079-e763-47bb-939f-79b4a59ff094",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f913e37-7639-4b1b-b0dd-32952b9d67d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d3e9fc7-9d59-49b5-a9cb-3682ea5ecba8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81dfcab1-ea7a-4fbe-845a-2da07d21555e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd195cf9-35b0-4842-988e-6b0a9c8c6c86",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51ec1f68-ab65-41e9-b126-caacc828ee36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9866c256-c58e-4345-99a8-059bea65c455"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2708111-8d4d-4a1c-82bd-d3ad110095ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0c07e72-0b0f-4e9c-98fd-c96d1beebdb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b8cf85-833a-449f-9d7c-743ecf84b879",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85540f6f-88ac-41a5-9c71-de8febf82f5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a96224a0-79fb-4da8-847a-ad7500fe922e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "546dbb9a-311f-4384-ab7a-6241eebf7307",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6225af4f-3973-41cd-80c4-65e459db9325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddab7f8c-b786-4b11-b1c0-ddc4016637d2",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c83cc0fc-934b-40d3-812f-5c95f7e00a4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca0cbef3-29e6-4edc-ba9e-19cdffb7c121"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c48c428b-3f9c-4e90-beed-6d1f0392cc96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c7aecf4-678c-4291-b2b2-f10d5ea7d327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fb7f1dc-b188-42b9-8a60-77a3085343ad",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d0cc052-6c41-4301-9d53-b9b5314940c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "461e9624-837a-417c-aae9-f9bb82fd8915"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ceb5094-b615-43e6-820f-9848624b29cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30099626-6b69-4844-b7a6-ef9fdeea98be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d8be0dc-b4fd-48b7-848c-a9ce5cf3eeb4",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c4fd9d2-b0b5-46b6-ac41-12fd1c8b13e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d394b88-aad8-423b-bfac-7ff597a0dbe1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8882051e-140d-4096-8f82-4aaa13f08528",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfb5868a-0de0-4c39-9317-5d1a26fd2d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4fd27a-85eb-4887-bd47-218db1fa487a",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0dd6226-9892-46f0-8d6e-5d5080c4ece5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "927bbe8c-10b8-4636-9180-6415756be06d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66f8758b-9e5c-4799-851e-7c4f248901cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14ebf6d2-7480-4479-833f-ec38529fbe89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05106bb2-d65d-443b-81b8-29aa18e597d6",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c9b724e-d883-4b9a-a1b5-8a74edd7b58d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c70310d2-cb23-4ca7-ae22-c5119d5b917e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffad2689-1812-45fb-8927-36eeae282760",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af51a33f-6d04-4b81-8d10-20a560eaff9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56abc901-1deb-42de-ba16-5707fc5decff",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ed85ee7-a9aa-474d-91c8-3658320dabc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4f4be8a-efa8-426c-955c-d6c263946047"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b3ae27-99f9-4e4b-bcac-f713525523b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e3e2c3d-3d62-495a-bb0e-4dfb388e66f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "097bdb19-31ff-429c-9134-080856f39e44",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee13a8c2-08f0-45ff-803f-a4ce3d9b05b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d8e27d3-0e80-44f7-b5cf-ed66bed95069"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ee65c6-02e4-4276-b263-f3573ed0a046",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e10322a-42e8-462c-ae04-9db4a3c2972a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff85aaeb-a0cc-4abd-a9fa-556bd2af6518",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83255ced-60bb-4107-b0cb-0c89befa52ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "746a8914-1e62-46d6-a4c6-6132e165b59a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23c611bb-e202-4421-b876-6c1aca2d3fb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0981fc59-d328-4786-b44e-5a9b9f65ada0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0746fc8f-7b0e-49a8-ac8c-de6740bd20c5",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22504610-eed1-41c0-85d0-2d31cc884e16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d2ab334-2230-4618-8699-434003bc95a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76943423-683c-4e16-b200-dc80e29ca895",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e0f4373-ceda-46e9-9b5e-465dd58f07cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e5af9c4-88c9-458b-b497-c42868f7be37",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0864058-5d49-48a2-a1e6-60563764003c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94afe8b8-6ccd-4237-b1c9-7e949b289988"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e88f78cb-1130-406c-ae1f-bcc56dc0766f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "432574f6-2fa5-4d90-a543-c05ac1893cbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de196e41-ea0e-4ed0-afe2-579c3e579a12",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca4e0eb5-ac94-473f-a395-7d01ccc89a68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a24a6c7-6b07-4a02-9e1e-6c8f2f024452"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b74649d-bd0f-4ed2-98cb-e2b42378fbd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "611dd150-1e58-4725-a60b-598cb0eba56f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b993a260-b696-451f-80b7-1c56e5640807",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db3d189-5d26-4012-8f4f-aecab66f3f2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5cde562-6ef5-4524-94b4-4aab46afc65d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e09beca-948b-4bb4-b40c-784e7a68c754",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "273c7727-a2a1-4589-b0a6-5b989497adb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f73c93df-b111-4bd5-892f-e4e30565aa0c",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "610bb6fd-02de-4a65-a84f-a8b753f05bda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87d64634-9f67-4d3b-af16-4c1ec560a1c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8a7d948-9486-48da-b5d1-2ca955e6b025",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77006aa1-35b9-4b4c-9539-e72631dce8ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b5626ac-546d-443a-9248-19837501fed9",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ae63a6f-3c1b-4ff3-b972-f4a57d94c362",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7831f1b0-84eb-4464-954d-81c20335a575"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "534f872d-3421-4538-8724-1d6e45b51c0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07af3ef4-ef01-4151-9f0d-74b64d04a42a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01ce702d-710b-496b-be16-c864ffaf6fdc",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d9140d5-2bb7-474d-b3b5-6b3435e4dbf6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9da0a3ce-16e1-4ccf-ba1c-f4c42d4f54a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a4467f4-ae1a-416d-93f2-a9120be4b12d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d74c5703-22d0-4120-8be7-7615d32eb3ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2ff601d-1e09-4be0-8f31-6c03cc66f55d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d6a22e4-9342-4d04-9c06-b821a1adda4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e856719-d001-4a81-b462-2890a24865cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aeed3fe-dbc6-4ccc-858d-d39bef8e4d9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66e05674-887b-43dd-9ebb-95d516ec47ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b63c4d84-1c80-42a2-9d4b-0338b1e44607",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ece1c6-f3b4-44b4-ab20-4d372174bba9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "854c58b9-4de9-4e45-8b2a-eca56a6db6e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db63b4d2-3c96-448e-8e20-5c616d131a96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f340dc4-9a19-4260-baad-72357ed23675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdd04cae-4044-4e53-b803-23d6f2ee5a5a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb6fb36-9fed-4e08-8c00-77f8ddaf5bc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2abfb88-af16-45f9-84db-4d3bfc1d8f33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e2b45a-5f6c-4731-9866-829645610bd1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3439bb7a-b512-4c9b-8a00-5f10ef55b1ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "275e40fd-85c8-4252-b394-00b4a2f6755a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a548cd-e320-403e-8445-a1fcb5e98172",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6d6a8fd-6db9-4b8e-92ba-d4e8df6adc99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a93a9b6-3cb8-4ce2-9cc9-577be773b172",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d4289a6-0051-4545-84cf-89d66b047886"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "72e90ec4-eddb-4b91-a8cd-fc5636975d8f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2c7a8473-3028-4187-82a7-d686091324e6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "81452198-0f9a-4df4-913b-3d8de809d57d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7bf022af-1818-4497-924b-256b929f6d01"
                    }
                  }
                ]
              },
              {
                "id": "d6e090cd-46b5-4ca8-b3b1-2e7bc18f7178",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ab584fa4-6332-4019-ba9c-70e28d50f241",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96904ce0-37fd-4937-98f6-9e2f366232e8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "fcfd8d21-b9bf-4bdf-b741-dd042bba0b53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba0af82-5fd3-4f7c-a3c0-543152036d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7523fb95-7fbb-42df-9ce8-4552ba860e16"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fbc1e94d-ebe2-4ef6-8a39-f7da23a74405",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b7421bb5-6d41-448e-9123-a18198846c18"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "900d1eb3-14d1-4bb6-91f5-8cd32ece61db",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "145af438-6469-49b2-a9fc-e943bf853d20"
                    }
                  }
                ]
              },
              {
                "id": "183c3a4b-27c1-41bd-a186-fbd6486a67e6",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "08eac586-a71c-4171-baf1-a6996da3313b",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c477546-50f2-4209-82e8-258eeb7c658c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "7d3b7c07-632e-4650-81da-194536ae63a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9880dd05-4dd3-43ca-b674-4409df56b885",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a1376e9-c4f9-4dc1-a2d4-4e6307bb6a47"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b34d6090-e7b6-455c-9a17-74f1cd402434",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c9d39ddc-3f63-4db1-bc05-a442fd2921ec",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ac2eb37-ac40-49be-939c-d2f8e0057d57",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e7acec52-b0e6-41cf-a499-1a59764e7865"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f18b6376-a078-48f7-a9eb-c7f273949270",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "658133dd-c3b0-4a14-827f-11c62ffeaf6a"
                    }
                  }
                ]
              },
              {
                "id": "df737fc5-422e-4c3e-bcbd-a7e216ecbf7e",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a41c3216-2d27-4c66-81a3-e361a6576ffb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3a37446a-8e76-44c4-bfd3-f1b2f29e7051"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c217e576-4723-4a85-8b76-fb04e35a92f4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "803e5950-eba5-4508-b906-30d8a1299cc4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ebca9f35-f8a8-494f-b628-e08ac1b8b543",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "403b5a2d-d408-48dc-9129-9ee5729ad642"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d175412a-269f-4785-b3d3-f645dc3f180f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "46223b97-8193-4416-89b6-9cb81c9941d0"
            }
          }
        ]
      },
      {
        "id": "c9c6d264-1a0d-437b-a42f-f596893aeb8d",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "004f2737-d234-43d7-8230-4ce191bad348",
            "name": "Negative Testing",
            "item": [
              {
                "id": "de4741e7-9a8b-4324-873f-38ff14d15f3b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ac276a9f-2551-4beb-a9f9-5d2f2c3c8506",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6f195cf-7c64-417a-8a24-237b9768b06a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "056d40cf-5fcf-4cf8-a0f5-ee25a9e82321"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7cc1c23-e835-46eb-b3a0-7523f4622a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0d6ecb8f-5991-4e7c-901e-1c412c12b1c9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "caddfc4f-6114-482d-9f37-188b23e3c897",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1b94610c-eb77-4142-ba6e-16f9370e9ca8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d09c1997-3702-4507-9c54-a4483d53a809",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76705427-48bb-4971-af61-c0b5820ed585"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6150f6c4-61d6-4550-a1ab-2d41014db077",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8c70ec3f-b13d-4bea-91b0-bdf3e5cbf111"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "948eccc5-67a6-4934-a358-75793ea4dc01",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8acbe89c-9fa0-4d7a-9e5c-773a19390933"
            }
          }
        ]
      },
      {
        "id": "9a6a2c48-d974-4da0-b152-6f06dc660489",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "8ed13a3f-867a-4db2-822c-be8841e5923c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4c776768-6d0c-4176-9cd0-48fb930cab24",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0a319a4d-002f-4b43-b6d9-9d1669530d06",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60b05ba7-44c6-4c9b-9797-7b8723634c5f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5992087f-a57b-49c6-bff7-574d5d440a21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90d44e18-c79c-4eb2-8e22-49aa4fa3093e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "17faf3da-50e4-449b-9ebe-08d8b70fd80f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ca28387-dd34-466f-a9dd-68fced827092",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1dd19226-c761-4d32-8283-06ca96f07268"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5549ad1d-dd6a-4ee8-95d6-882fd35f08e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "86f09419-c7f2-4a82-8196-70f25d621282"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8f72de4c-95f2-4b66-a316-9f5d7bd6db60",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b5f04ad1-a596-4b04-aa44-720d45a0f426"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "49ff6fbb-231d-49ef-8f65-faee1ff9d0d4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b48d5f5c-c86b-4431-8ed8-d82d069a05c5"
            }
          }
        ]
      },
      {
        "id": "06d16425-a4b9-43c8-ab9e-582ca64d31dc",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "f40c0ca8-cf30-489b-86a6-8466e5d13714",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a7b351cf-65ac-42aa-bb0f-0ebe75296dc8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e8f18900-ad28-4fd7-9523-e6e2cd7901b9",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df03ff00-387a-4c9d-b7ad-18d2cc24bdec",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9f7dc0be-9df3-4899-b413-4872436a9c47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cafa65c-c3e8-4257-9b0c-a94dc89ebbf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "35d345e4-9ed2-40ff-bb03-bbb102a88c10"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "31b16552-325f-4835-9f0a-0cf1cc3da944",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c1800ade-a081-4ff9-8f4a-cef3981a00a3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1bf909a3-1184-4393-9163-cbf45a991c72",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c6a6f52a-3477-4402-a261-c4de042dbbc8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a6042552-caf4-47e5-81d4-db73008a8fac",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "fa43163b-93a8-4ac6-b67f-8c1c3b8675e0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ff70f72c-d857-44c5-804e-094dc90f6528",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fe40b5b6-5220-4c14-8b96-d4ccaa7857fb"
            }
          }
        ]
      },
      {
        "id": "1ea3e5ba-2fb2-4196-b875-a61072b87c06",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8388442b-3146-4f5b-b236-ee84e223cafe",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d6ac6d55-1aec-4913-94eb-d32f7e7cb5d7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "00c924ff-1c0f-44f9-b76c-1d67ff328f14",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9b6b7e8e-ff4c-4c56-a93a-9c73bb73241f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "be41aa80-eba7-4a23-8d02-a6c62b16722b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 65.02380952380952,
      "responseMin": 5,
      "responseMax": 812,
      "responseSd": 88.85001311160275,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1719794638245,
      "completed": 1719794663011
    },
    "executions": [
      {
        "id": "9cd0f0b9-ce84-4f08-97fb-56a312cb72db",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "350b25c2-1f2c-48ce-8b19-079f4d6d0ddd",
          "httpRequestId": "9e678a06-9e77-4414-9a12-877ad5a643d0"
        },
        "item": {
          "id": "9cd0f0b9-ce84-4f08-97fb-56a312cb72db",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "5160875c-a7c2-42e8-aac9-f204ad9a6de6",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 0
        }
      },
      {
        "id": "46c6ee7d-77dd-46c4-9a7a-603f2a7876b6",
        "cursor": {
          "ref": "9888b1ea-4ac6-4315-a56d-2bd6afb74b2c",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e963fd84-3a83-42b1-b8d0-173b17bbc6a2"
        },
        "item": {
          "id": "46c6ee7d-77dd-46c4-9a7a-603f2a7876b6",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "c6d350d3-e887-4d9d-820c-753ebbb8b24e",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "4fbd6d0c-c2d0-4925-9f45-0d492c153a6b",
        "cursor": {
          "ref": "9fe33589-34f1-4907-800e-428d994090e3",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c136b03b-2b09-40fa-8ccd-105553134b3d"
        },
        "item": {
          "id": "4fbd6d0c-c2d0-4925-9f45-0d492c153a6b",
          "name": "did_json"
        },
        "response": {
          "id": "2c19aab3-8e64-42ff-952e-944671b3e5cc",
          "status": "OK",
          "code": 200,
          "responseTime": 190,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cff86dc-3551-487e-a004-67e1926d9ce2",
        "cursor": {
          "ref": "e4b80ee4-4c52-49b2-888b-146b93c2c38f",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9c3856b0-d208-48c5-872a-9fc7f01f7f24"
        },
        "item": {
          "id": "8cff86dc-3551-487e-a004-67e1926d9ce2",
          "name": "did:invalid"
        },
        "response": {
          "id": "dc8e9390-419e-4b59-82d5-64ece35cfd84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cff86dc-3551-487e-a004-67e1926d9ce2",
        "cursor": {
          "ref": "e4b80ee4-4c52-49b2-888b-146b93c2c38f",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9c3856b0-d208-48c5-872a-9fc7f01f7f24"
        },
        "item": {
          "id": "8cff86dc-3551-487e-a004-67e1926d9ce2",
          "name": "did:invalid"
        },
        "response": {
          "id": "dc8e9390-419e-4b59-82d5-64ece35cfd84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1abde24c-ebbe-4f67-9bc8-4d21cfee0645",
        "cursor": {
          "ref": "2b37046d-73e8-4f4f-bbc2-fec832dc55ed",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "4f1ef1d6-3ea1-4be6-91f2-3a740c0862df"
        },
        "item": {
          "id": "1abde24c-ebbe-4f67-9bc8-4d21cfee0645",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "9b84a476-04f5-4de7-863e-45b551e9a283",
          "status": "Not Found",
          "code": 404,
          "responseTime": 156,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2235f789-1c92-422c-ac61-7de240dbb6ec",
        "cursor": {
          "ref": "57ac6452-76e3-4b1d-8c00-99f7ce11d8a6",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c2c9033b-a04a-405b-89cb-d9e298790038"
        },
        "item": {
          "id": "2235f789-1c92-422c-ac61-7de240dbb6ec",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "0327bdaf-4cbd-4f43-bf9f-5bdd1623951e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 29,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "958e2287-b402-484d-bd18-0c317a604328",
        "cursor": {
          "ref": "84d05dd6-8a14-4dda-84fe-aae35f3ff570",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "5bcfa29e-4590-48ae-a31e-d26d2eded176"
        },
        "item": {
          "id": "958e2287-b402-484d-bd18-0c317a604328",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "8d7ac331-afe0-4308-803f-2e9ed9801ee0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68750e8a-fc52-43c2-acaf-d85955e5f41f",
        "cursor": {
          "ref": "c8ee4005-e159-4a29-8bfc-544d03876b5a",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a9faa1b2-f590-4142-a6a3-c5f9958fbe61"
        },
        "item": {
          "id": "68750e8a-fc52-43c2-acaf-d85955e5f41f",
          "name": "identifiers"
        },
        "response": {
          "id": "d48e7fff-f40d-4e31-8cc3-5960025a36ab",
          "status": "OK",
          "code": 200,
          "responseTime": 225,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3f2be5f-b24f-4371-94d4-39f066c0b897",
        "cursor": {
          "ref": "d692322b-ae48-4875-90f6-7c7b3f1bba9b",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "19c36614-62b8-47d0-b8a4-f11966765220"
        },
        "item": {
          "id": "b3f2be5f-b24f-4371-94d4-39f066c0b897",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "855a5b76-6372-4e18-8364-d60446c81af0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54443875-7cc5-4fec-b983-6be5d24988a5",
        "cursor": {
          "ref": "37c7e9e7-9a93-4e0f-be00-f6066d5926b4",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6bab1997-c589-45b6-af8f-9c746670f49d"
        },
        "item": {
          "id": "54443875-7cc5-4fec-b983-6be5d24988a5",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "e4766ca6-05a3-4d0f-9818-fb275dbf2f97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c97e981-6ca0-47ba-973a-c7eac8a400dc",
        "cursor": {
          "ref": "5e8a2966-8c5d-4664-9f23-f11aea6cf5c2",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "aff75f6f-8bcb-47ab-aada-6245509965f2"
        },
        "item": {
          "id": "9c97e981-6ca0-47ba-973a-c7eac8a400dc",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "f555fd7b-18dd-4959-aa67-ed203784f062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e10c11e-37d3-4802-ba3b-3b25e3b43d97",
        "cursor": {
          "ref": "9e6cb043-86de-4431-b1df-0d98c4bfd998",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "dae19f86-991e-48f6-909c-2d73171f7286"
        },
        "item": {
          "id": "2e10c11e-37d3-4802-ba3b-3b25e3b43d97",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "13e68a1b-38fe-488e-8398-24f962373920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "300ee454-db0d-44a2-8527-873fc96f18b5",
        "cursor": {
          "ref": "4609b704-f4b0-4775-afb3-fdb1d6d0e251",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f4831107-af08-4aea-8837-e874a6e6a082"
        },
        "item": {
          "id": "300ee454-db0d-44a2-8527-873fc96f18b5",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "7a1dc298-dbe5-4e5f-9bc7-3cacb9198fe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a417d22d-7c88-4eae-8ad7-90660174d8b1",
        "cursor": {
          "ref": "df40fa59-5273-4904-b497-dfc64d065550",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "fb36b7d9-8337-4dac-a9d1-5911cc7bbc9b"
        },
        "item": {
          "id": "a417d22d-7c88-4eae-8ad7-90660174d8b1",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "40142fc0-0b29-4399-a63f-d2dbf14acde8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed700b99-e284-4463-a61c-b6a710108472",
        "cursor": {
          "ref": "a8e6e17d-8b7c-423c-ba2a-b73274ad1196",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f32c38e6-c52e-4827-aded-7fd8ac0d86e9"
        },
        "item": {
          "id": "ed700b99-e284-4463-a61c-b6a710108472",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ca3c2d5d-1e61-4387-a34c-9fddd59a308b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "341234bd-5dfb-4c37-a69d-faec9cb9e62c",
        "cursor": {
          "ref": "7274aefe-6aac-47a3-b2cd-2281133a1d48",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "fb80bf1c-9057-4498-b6a9-0f4af0377959"
        },
        "item": {
          "id": "341234bd-5dfb-4c37-a69d-faec9cb9e62c",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "cd4c6621-643b-433c-a42a-57c0ec30cb6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a281d0fd-4531-44a1-ba13-173ac52d9326",
        "cursor": {
          "ref": "5a1ab09e-a503-4e3e-a06f-9189334f2ec2",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3e33cd93-7d8c-4d74-8f51-43190cd0875c"
        },
        "item": {
          "id": "a281d0fd-4531-44a1-ba13-173ac52d9326",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "daae638f-6e71-4451-9f99-b2f8e53f2185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7da52a6-eaca-481e-af09-2aba61a88b73",
        "cursor": {
          "ref": "2c4f38b9-4a4f-4a64-b7ac-2129ebcc632b",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "1fc87cd2-6c1e-42c5-aac7-8d8764481e99"
        },
        "item": {
          "id": "f7da52a6-eaca-481e-af09-2aba61a88b73",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "0cecbf9d-7971-43af-bfd6-6ebc3fcaec18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3165c61a-2cbb-42df-8c04-acd287fa79fd",
        "cursor": {
          "ref": "b514648a-3c10-47c3-8190-99d104d6efaf",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "a7d1afb4-e055-42a8-aa18-c1966e989741"
        },
        "item": {
          "id": "3165c61a-2cbb-42df-8c04-acd287fa79fd",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "5c6215c7-b453-44c5-9e73-8912e381ee05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49025d05-687b-42d2-ab68-19c81027f021",
        "cursor": {
          "ref": "4fd0b5d1-20f1-48aa-891f-8a4c8e6bf6fd",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "10283aa9-14f1-4ab5-abae-849180a38115"
        },
        "item": {
          "id": "49025d05-687b-42d2-ab68-19c81027f021",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "792f2a49-e509-4cda-a9a6-325ea03ae737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b658ab95-126a-4de3-80f8-f5bb396669c5",
        "cursor": {
          "ref": "1c594980-3254-40e0-8df1-588970857c66",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8923f01a-5d04-4391-aad5-9119ac8c4826"
        },
        "item": {
          "id": "b658ab95-126a-4de3-80f8-f5bb396669c5",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "8af326e7-1836-49d9-990b-c5359829db06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b598e0ae-3133-4836-8fb1-b5d67504517f",
        "cursor": {
          "ref": "93e2e4cd-ea8d-4f46-b9a4-9c6ae0740b6e",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "fcf42b99-7658-44ba-8439-97fea1a4831a"
        },
        "item": {
          "id": "b598e0ae-3133-4836-8fb1-b5d67504517f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "ffd2bf85-ce44-4d47-adb6-c06fe44400b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a2444ab-d440-4918-83a9-036ce220e894",
        "cursor": {
          "ref": "b0cb5c19-54f0-4d10-b3f6-16131f7a91c5",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d2e4169d-83d3-41d7-8652-df6b5775502a"
        },
        "item": {
          "id": "9a2444ab-d440-4918-83a9-036ce220e894",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "43cf16e4-f1a4-461d-820f-1ae553308132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9001d1d2-3407-4be3-b167-0c431da4b614",
        "cursor": {
          "ref": "c3de5bd2-6166-4693-963a-1dd24fc68d5e",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "43e56e88-1653-405f-99ae-7768b02021ab"
        },
        "item": {
          "id": "9001d1d2-3407-4be3-b167-0c431da4b614",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "85749ce1-66c8-4e0b-8c39-6a3649535947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4c299a7-fca0-4a44-8502-2e87d57be567",
        "cursor": {
          "ref": "0de044d1-15bd-49e3-9d60-ca443922e7fd",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e0ddd187-9dcc-41b1-86ca-415dc6cbf8d6"
        },
        "item": {
          "id": "f4c299a7-fca0-4a44-8502-2e87d57be567",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f3cd3ae3-a63f-4c19-81b0-49e161553a08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ca7015f-309e-403c-a86f-72fe7441ff9f",
        "cursor": {
          "ref": "d9d76466-6e2d-4a6d-bff9-832d0ebccae8",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3918b4dc-76b1-4869-9247-06ba3bd4e8c9"
        },
        "item": {
          "id": "9ca7015f-309e-403c-a86f-72fe7441ff9f",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "9d4d4ab0-d1c3-4dbb-abfc-921800b90b6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "964d20d4-d565-4699-90ea-caf0e7cfd4b2",
        "cursor": {
          "ref": "dfaf1423-dfd9-4247-9845-3484ee8fa20c",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "96b59116-4162-4060-8f21-282b114d604f"
        },
        "item": {
          "id": "964d20d4-d565-4699-90ea-caf0e7cfd4b2",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "821dd58d-4ca3-437b-88bf-9142acd9ad34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cbc7de7-9e51-4249-8aa3-9f3b1e5be48b",
        "cursor": {
          "ref": "2324050f-95b3-43b3-9c62-ef6b7b10feb0",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c1375cd9-8811-4117-ae19-3933717a0a2e"
        },
        "item": {
          "id": "2cbc7de7-9e51-4249-8aa3-9f3b1e5be48b",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "2c63abd2-22d0-4471-9969-53ffc437fe4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c05f6e-bf9b-432a-82a4-8a9a6bc991f7",
        "cursor": {
          "ref": "4845d2de-5b02-4c0f-ab95-327ff11b7531",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a6dacc1b-b405-4fbc-a33a-4d3b8df029f8"
        },
        "item": {
          "id": "27c05f6e-bf9b-432a-82a4-8a9a6bc991f7",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "312e169d-5efb-4658-98e3-c699ed65cb20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41c27792-30be-4859-8a02-3b9227057765",
        "cursor": {
          "ref": "3e5fcdf6-7914-4370-bb6e-e15355fcc212",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "5744c549-179f-4e1c-aad2-e50a3ba64ce2"
        },
        "item": {
          "id": "41c27792-30be-4859-8a02-3b9227057765",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "2adbb67c-e60c-42ea-ae92-66f4ef22d53a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6890153f-dd0b-44c5-a2e1-1b46b956e6eb",
        "cursor": {
          "ref": "89174aa0-cf0d-4e7e-89b4-6edd914db126",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "aa9e5966-b984-425f-8c24-ea6212fb6aa5"
        },
        "item": {
          "id": "6890153f-dd0b-44c5-a2e1-1b46b956e6eb",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "90b96f89-9051-42d3-86c0-a7faa3c93899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0f26f01-3697-4733-90ff-f907ce72d5c6",
        "cursor": {
          "ref": "3cca3e90-264d-4f49-9b84-8d84b52a900e",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "cd030aa3-bd50-460b-bfc8-d70afc0fa650"
        },
        "item": {
          "id": "e0f26f01-3697-4733-90ff-f907ce72d5c6",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "68a557d8-7eef-44d2-bdd9-50c117292bd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "836bf49b-9424-4497-860e-936fef5c2826",
        "cursor": {
          "ref": "b4edb057-685e-4b3d-9a66-c60a1118c50a",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1610cea8-4977-404e-8d38-650418fffdb3"
        },
        "item": {
          "id": "836bf49b-9424-4497-860e-936fef5c2826",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d7c77e69-e732-4afa-8780-da3ac894b96f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a087931e-b3b1-46a2-b4a7-f4ec87be7885",
        "cursor": {
          "ref": "43378f96-53ac-466b-bcb0-0c6e15841552",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "a62d2929-1505-4920-b176-3b7a0d0cef92"
        },
        "item": {
          "id": "a087931e-b3b1-46a2-b4a7-f4ec87be7885",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "61b56bbe-eb6e-428a-bc66-d6ed6653ba4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dd57204-9ecc-4da3-b400-18766cd6201f",
        "cursor": {
          "ref": "c2395372-9f51-4507-bd10-e77e8b2d9591",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "7e6d1726-7d6c-4db2-9258-9cc6dd1f3d59"
        },
        "item": {
          "id": "7dd57204-9ecc-4da3-b400-18766cd6201f",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "f80544f2-fcb1-49f8-880d-5b894ed79e4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c76986ed-97c7-4484-bf94-d0b8f5914c08",
        "cursor": {
          "ref": "68c7fddd-48ba-4800-8f27-1702f7602fde",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a98bd45d-55c1-43f1-9e15-e6b9925d126f"
        },
        "item": {
          "id": "c76986ed-97c7-4484-bf94-d0b8f5914c08",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "82f844ff-2613-4e5e-9f2a-bc2aeb7c66f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4733ae27-1df1-4877-b65e-2cebedcb28df",
        "cursor": {
          "ref": "ea667552-b6eb-4777-903a-79f04966bb2f",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9befba25-5289-4eb2-bab9-326351177512"
        },
        "item": {
          "id": "4733ae27-1df1-4877-b65e-2cebedcb28df",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "be553368-26f4-49fd-a4a5-dbb39c2ee72e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "201a0bce-f714-4d53-8d51-2f0128e72e5c",
        "cursor": {
          "ref": "151523ae-ed8e-4f06-a82a-bdfa45860c65",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "09aacc59-7215-4af4-bb8c-30839c8c5941"
        },
        "item": {
          "id": "201a0bce-f714-4d53-8d51-2f0128e72e5c",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "cf19ccd4-33cd-42cc-9010-17628cb58881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39ae92a9-4e69-45dd-aae4-d959093cb633",
        "cursor": {
          "ref": "b5ad28f6-0959-470c-9d2d-b3d70ca4d14a",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1aefbe9f-4bb5-4cc9-8ad7-a245f6e7cfb5"
        },
        "item": {
          "id": "39ae92a9-4e69-45dd-aae4-d959093cb633",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "49df8f81-0948-4ab0-8f24-111280285c51",
          "status": "Created",
          "code": 201,
          "responseTime": 812,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "db04020f-0efb-4168-b94f-5ccb9c989f89",
        "cursor": {
          "ref": "4d059788-beb9-40b0-8e2b-b72954ec11e5",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "cc7e797d-08e7-44f1-b99a-726a0b34e1b6"
        },
        "item": {
          "id": "db04020f-0efb-4168-b94f-5ccb9c989f89",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "5b91e4ca-9929-49a2-b75b-0aff65c2569a",
          "status": "Created",
          "code": 201,
          "responseTime": 365,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "c061f7ad-e0c9-41f2-8b27-cac4872e8540",
        "cursor": {
          "ref": "19824e7c-418e-4d3f-b524-ddf329e7e320",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d1bb414d-1f66-4762-b9e2-0082e854817f"
        },
        "item": {
          "id": "c061f7ad-e0c9-41f2-8b27-cac4872e8540",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "94453798-ec15-4b12-805e-792d3486d670",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "2604fbd5-f276-4d16-bf9e-90f0a1387daa",
        "cursor": {
          "ref": "9de56c30-6a28-460e-b5eb-a0733fc985b8",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8a998f73-c5e5-4ebe-838d-b86d25080467"
        },
        "item": {
          "id": "2604fbd5-f276-4d16-bf9e-90f0a1387daa",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "ab4f9f3b-2d33-41a4-93f4-4e5a5a25aa71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3217ceb4-165a-4f3c-a9a9-e0d46d3d10c2",
        "cursor": {
          "ref": "4e5ccd54-426c-4655-8466-384f796c5cf0",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "53032650-e3d0-495a-9992-5e7ae4a31d9a"
        },
        "item": {
          "id": "3217ceb4-165a-4f3c-a9a9-e0d46d3d10c2",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "49e9f8bf-7cb9-44e8-80b0-c442069576dd",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "32820da4-7760-48a9-8c41-f468d66fb7cf",
        "cursor": {
          "ref": "020be827-82c7-4718-ad2d-11a892b0328e",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "b1cbeb2f-a937-49c9-813b-d0c843a11b38"
        },
        "item": {
          "id": "32820da4-7760-48a9-8c41-f468d66fb7cf",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "9bc37566-e614-4abd-923f-6dadbd648669",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "dcc6e8c5-a4ef-4302-921b-1149bcb85e9a",
        "cursor": {
          "ref": "7587d6d3-57f0-4c7e-9f8a-5186a8502138",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f8179a8b-1366-4d14-a29c-b7e9be7675cc"
        },
        "item": {
          "id": "dcc6e8c5-a4ef-4302-921b-1149bcb85e9a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a5c72242-83e4-440b-8b3d-5a702d720a1b",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "4383fcb0-a076-499b-bce8-018d2ec43a40",
        "cursor": {
          "ref": "f0b1a3af-9636-46a7-a98c-dd522a7c2ce6",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d4b5ad2e-2373-4503-a711-aa8e38a63f81"
        },
        "item": {
          "id": "4383fcb0-a076-499b-bce8-018d2ec43a40",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "656c2160-7915-44ee-ac89-ad2028065798",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "d54ea44a-3e6a-4b53-9510-a1140421a6e8",
        "cursor": {
          "ref": "935e3149-3cb2-47d8-a754-d486cbc93d0a",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ae569c04-e6c5-4a81-a75e-6acb8e4c8144"
        },
        "item": {
          "id": "d54ea44a-3e6a-4b53-9510-a1140421a6e8",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "1a9126aa-8d54-498d-8b93-5c5b9bfcc697",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "b43f263c-fb49-41a1-81b9-f346da969075",
        "cursor": {
          "ref": "c62bef60-7382-46c9-b46d-849715b2b0df",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2d7adcbc-6d1f-43f0-ad8e-0f782361e40b"
        },
        "item": {
          "id": "b43f263c-fb49-41a1-81b9-f346da969075",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "02cc4ea2-7989-48da-b8ae-ba2c639c3606",
          "status": "Created",
          "code": 201,
          "responseTime": 343,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "7e58d818-711b-4ee1-aa15-d4eac08ceae0",
        "cursor": {
          "ref": "df8b07e8-0fec-4a87-9c57-53f7cf96a7c4",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "1f663697-9eab-4bc2-878d-a39818ea25c3"
        },
        "item": {
          "id": "7e58d818-711b-4ee1-aa15-d4eac08ceae0",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "8f1ced37-ba91-4e23-92c3-7f4260793ee6",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "2c2765c9-4fa8-494d-9a7f-1f2263995ae4",
        "cursor": {
          "ref": "c9f74014-9bba-4a2b-b1aa-0eb41c94da82",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "5c9920b2-038a-41d7-b458-f16711000d10"
        },
        "item": {
          "id": "2c2765c9-4fa8-494d-9a7f-1f2263995ae4",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "3630f564-2b5b-4148-85a2-e40f98ba464e",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "7cdf3316-b417-420c-89d2-ccc9a036f4d5",
        "cursor": {
          "ref": "d175af86-603d-4deb-9748-d14fd07214f6",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f3a53822-1b83-4f69-94d4-3f8736426487"
        },
        "item": {
          "id": "7cdf3316-b417-420c-89d2-ccc9a036f4d5",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f733db55-07a2-4a23-b94f-103cf622c4b9",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "83dd8aec-89c5-45f5-b54f-90bbff1b8b94",
        "cursor": {
          "ref": "16ec77cf-8034-4fac-8232-646d371f3498",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "7e393201-b620-4f28-99d2-796a48fdc143"
        },
        "item": {
          "id": "83dd8aec-89c5-45f5-b54f-90bbff1b8b94",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c9dfa073-3403-479f-8c4b-b7ca77d8aa7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42dd0f23-5959-4f78-b322-d28fd5028446",
        "cursor": {
          "ref": "dffc7899-1c41-481a-be33-2dba1168e743",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "19b1c21e-a66b-4a97-8dba-2a4ca25a11c5"
        },
        "item": {
          "id": "42dd0f23-5959-4f78-b322-d28fd5028446",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "fe9d4a2a-4405-46bf-93ba-b602c21c3028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2338848-a801-4b90-abac-fb71f1ca96b4",
        "cursor": {
          "ref": "814a5272-8ba8-4054-beb9-92ba7374c72a",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "73ef28b3-6fbb-427b-87a4-a7c6986fb275"
        },
        "item": {
          "id": "e2338848-a801-4b90-abac-fb71f1ca96b4",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "bc1e0c0a-aa62-47db-aae8-beb64938badb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e8d590d-15ff-4983-b43a-9b5fcf1a2080",
        "cursor": {
          "ref": "e07fe621-544b-483a-99a1-646944116df5",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "351cb49c-7768-4111-9cdb-20ceec0b5f71"
        },
        "item": {
          "id": "9e8d590d-15ff-4983-b43a-9b5fcf1a2080",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "d11f00b5-8c47-42e5-b3d2-52a6304fa9af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3265561-6254-4110-9abc-2ec581fc7fea",
        "cursor": {
          "ref": "2c4583dc-ac6f-45b0-8000-b3ad5edea1e2",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "4ee1621b-5a19-4b8e-83ce-3dc40656c78d"
        },
        "item": {
          "id": "a3265561-6254-4110-9abc-2ec581fc7fea",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d67520ba-7a16-49d8-b3a8-e67234275bfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b4f7c45-7b40-4ff6-bb76-e24999c7fb66",
        "cursor": {
          "ref": "cd9fc7b3-3d66-4ec2-b17c-9d2b7be78696",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "9a9b37e7-23a9-4f38-988c-95b77c1862ea"
        },
        "item": {
          "id": "9b4f7c45-7b40-4ff6-bb76-e24999c7fb66",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "1ffb87c3-374b-460c-8144-7bb8be7c6968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ae55c0-09a4-426d-a683-56f3cf778bad",
        "cursor": {
          "ref": "4f092940-ab2f-493d-99dc-3d8756a43896",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "fef09f11-deda-47d7-9471-31d44a68de24"
        },
        "item": {
          "id": "72ae55c0-09a4-426d-a683-56f3cf778bad",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f388bec1-25c4-4630-915d-bf4d553f0103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd970138-0c10-4ad8-a041-b879b61fdd06",
        "cursor": {
          "ref": "ea33ebb6-3318-45c0-9bae-441f01c63768",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "183954dd-de10-494a-b353-0bf7bbd1b2ea"
        },
        "item": {
          "id": "dd970138-0c10-4ad8-a041-b879b61fdd06",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "28a7a998-f495-4bfb-b737-efc0bb6cda04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c578a327-05c9-43e8-b2d0-171b3e6d1376",
        "cursor": {
          "ref": "fb32a0d6-5fb4-4767-a24b-7c0d0906f3c9",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "1e1bb7a6-8320-4970-b902-db0f28406adf"
        },
        "item": {
          "id": "c578a327-05c9-43e8-b2d0-171b3e6d1376",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "5d9f3eed-848e-430e-8c24-84e6137333c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2231f85-9740-4d6b-a029-3db8a966ede1",
        "cursor": {
          "ref": "3ff7a6da-3ed7-4aed-9bed-a37c7443099e",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "d6856d30-8b7f-4ef8-bc15-fdb5489267dd"
        },
        "item": {
          "id": "f2231f85-9740-4d6b-a029-3db8a966ede1",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "6542aa2e-9385-4a15-8619-3760c93c73dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fc493f8-8c31-43b7-9837-7a51b1e39345",
        "cursor": {
          "ref": "d7250513-f957-41e6-95cf-7a9b012192ff",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "0b56efcc-e1bf-4510-b961-8aa0603a60ba"
        },
        "item": {
          "id": "2fc493f8-8c31-43b7-9837-7a51b1e39345",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "f72ae5af-91bb-4e59-9df4-a1196b752646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e787b628-d71c-4a71-952f-058c67c71164",
        "cursor": {
          "ref": "edc42271-ae78-4d96-bd3c-79f6577034f1",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "7b54fbcd-b04e-4ca8-910e-b4bd952f6204"
        },
        "item": {
          "id": "e787b628-d71c-4a71-952f-058c67c71164",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "76d87c58-900b-4151-b249-201f631c08fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "465e6bea-887c-4253-b9fe-3d8a44bcdce1",
        "cursor": {
          "ref": "777e92c6-2149-4972-9992-bd84b728086b",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "0974067f-3a5d-4b23-bb59-fb048b5d2448"
        },
        "item": {
          "id": "465e6bea-887c-4253-b9fe-3d8a44bcdce1",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "3cdca559-28a3-4860-88aa-5787e9714dc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "220c50a9-6223-40bd-b65d-c375625779bc",
        "cursor": {
          "ref": "0f2d6a58-7c08-4e0d-b937-0c53cafdd9af",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "094eba01-6ff0-436d-8a33-7bf5ea6cf7bb"
        },
        "item": {
          "id": "220c50a9-6223-40bd-b65d-c375625779bc",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c188e435-f2c6-49b0-85a4-cadc9af69b7c",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "160c99ea-83d9-4d6c-9bd6-64fa0eda7689",
        "cursor": {
          "ref": "83766a7a-8f11-45dc-a8f4-e79d15f98abc",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d2c5f3f0-f753-4fbc-a4a7-1d080437a3f3"
        },
        "item": {
          "id": "160c99ea-83d9-4d6c-9bd6-64fa0eda7689",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "9075d576-d46e-4b5f-a0d9-ba95f1e7fb42",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "b8deeb8b-87d6-4f8d-aea9-dd289cb16ea7",
        "cursor": {
          "ref": "0d8d653c-9801-4e64-8296-456ce8a5e42a",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "dce3bda2-2531-485e-8a9d-3e80d64ee873"
        },
        "item": {
          "id": "b8deeb8b-87d6-4f8d-aea9-dd289cb16ea7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "91c67ed7-9511-48d2-a25b-60cee8cc6c8e",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "a9e01e22-9080-47ae-8e9e-1abf81f42734",
        "cursor": {
          "ref": "caf53471-9c76-4343-a45b-95733980b07e",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "64655469-dcb4-4b37-aa9a-3b7d6b0d9527"
        },
        "item": {
          "id": "a9e01e22-9080-47ae-8e9e-1abf81f42734",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "12440de3-f9ce-4ac1-896c-291484ab5dad",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "88657f4c-9ef6-4156-acb1-da2b740e427b",
        "cursor": {
          "ref": "157167ad-daec-494c-9b0e-6415da0e0562",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "42551d0d-1450-4b5b-8968-072967c38c29"
        },
        "item": {
          "id": "88657f4c-9ef6-4156-acb1-da2b740e427b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "54989098-69dc-4252-accb-00a0e172db7c",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "c333614d-3a13-4336-9a0b-185f3455869f",
        "cursor": {
          "ref": "5e16fda1-9eb8-404e-8410-673ed358b3ac",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c96e080c-5bc9-45b3-96c6-891f1e690435"
        },
        "item": {
          "id": "c333614d-3a13-4336-9a0b-185f3455869f",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "5a3f9695-f42c-4cc3-947e-6246f99ca9aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8db8761-de0b-4b7f-9ad5-498382dd3edd",
        "cursor": {
          "ref": "4845bfa8-21a8-4ab9-9f88-80588dc04a23",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "14f16211-aaf2-4cca-9bee-7f37fa2b3c8a"
        },
        "item": {
          "id": "b8db8761-de0b-4b7f-9ad5-498382dd3edd",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "f6a6e873-0e0f-4f86-859d-5af3823bacf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "378c412f-8a15-45ea-866c-dfa1853c0cd8",
        "cursor": {
          "ref": "e9e55baf-a16d-416a-b105-8f0c463bcc4e",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "aa43dd87-87b1-43d2-ac10-bf423468ca39"
        },
        "item": {
          "id": "378c412f-8a15-45ea-866c-dfa1853c0cd8",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "2d784a43-6a83-43b6-8069-cef8c604826c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d586aea-b63b-4987-99b9-66256225ad2b",
        "cursor": {
          "ref": "1d43f140-7c4f-4fca-89bc-e18764cd53d2",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "d842b9cd-6f78-4f94-a54a-dbf242577a49"
        },
        "item": {
          "id": "0d586aea-b63b-4987-99b9-66256225ad2b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "da2972b5-6382-454c-94b5-1f5de3b1628b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff4791f5-9819-43fd-a79b-bf85fede23c8",
        "cursor": {
          "ref": "5c29de5c-bf44-4b68-bf51-684f67416ea3",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e42dc804-a64b-498c-b586-f5f7a9e4beb0"
        },
        "item": {
          "id": "ff4791f5-9819-43fd-a79b-bf85fede23c8",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "381c942a-b6a6-40b3-aca7-1068426e9673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "968c12da-41fe-425f-bfd3-d14a1287c4f5",
        "cursor": {
          "ref": "23f4286f-cff2-4845-8528-8bf152ca23ac",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "a9a87542-ccfc-4a6a-8c30-3eff0fee2aa4"
        },
        "item": {
          "id": "968c12da-41fe-425f-bfd3-d14a1287c4f5",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "82437be7-f591-408f-aa7d-025837616be1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de02afb0-d5b4-4490-ba02-b017876b6df3",
        "cursor": {
          "ref": "f479462b-f9d4-4659-ae30-b8c7b5cb2330",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "d73d7ff4-612f-48f4-b09f-a6d1b98974e4"
        },
        "item": {
          "id": "de02afb0-d5b4-4490-ba02-b017876b6df3",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "4a22be0f-a3de-49b8-a773-c699b5632e54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "371db24b-e1a1-4feb-94e2-80ebfa11186a",
        "cursor": {
          "ref": "8486b7f0-9262-4d64-9e7c-098def398aa6",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "59a8df55-28e7-46db-b715-809943ea5ff9"
        },
        "item": {
          "id": "371db24b-e1a1-4feb-94e2-80ebfa11186a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c315e69c-348d-44e1-b920-f76156b0500f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80fa148d-60d3-4f42-8f9d-b7ab20af8d6b",
        "cursor": {
          "ref": "063494a2-4b11-4163-b11c-7f88e4bae1ca",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "69ad02a1-3928-4fe6-ba96-24b98fb1f202"
        },
        "item": {
          "id": "80fa148d-60d3-4f42-8f9d-b7ab20af8d6b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "6f97e35f-b152-4008-b4b9-813b71506668",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6140a35c-c0a1-4ae8-8442-230ce6480c74",
        "cursor": {
          "ref": "91365204-4abf-4bfd-b0a4-58a443de9a6a",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "534208ff-f598-4c08-81d1-57eefcf2e9ad"
        },
        "item": {
          "id": "6140a35c-c0a1-4ae8-8442-230ce6480c74",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "774f4695-6f0c-484a-ba58-d5b98e4e3a16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a61fd70-cd81-412b-9ef2-824959b12ec8",
        "cursor": {
          "ref": "20d2143e-7e59-4d21-96e6-33e9a771013e",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "40d63414-2ae3-4c6b-94b9-59ef95e95216"
        },
        "item": {
          "id": "8a61fd70-cd81-412b-9ef2-824959b12ec8",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "f3dd5f72-14a5-4627-bc13-7707393d3731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b448521f-5e6f-47d4-9c65-617319e7f5f4",
        "cursor": {
          "ref": "c668ec88-f58a-44ae-abad-adeacb4a10f5",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "bf472c58-da17-4d5a-9902-c0780ee0f56f"
        },
        "item": {
          "id": "b448521f-5e6f-47d4-9c65-617319e7f5f4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "3adfa5d4-29d3-4023-b2b2-760c37e1eacf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c135464a-b7f1-4e48-8f5b-09f7d1909e90",
        "cursor": {
          "ref": "58a9497f-012e-45d8-8fa6-82e4d12c6c7f",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "46dd69b6-22d2-4568-ac8f-5cb1d72ddf48"
        },
        "item": {
          "id": "c135464a-b7f1-4e48-8f5b-09f7d1909e90",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "758a5a3a-b0ba-4686-8028-91349a70eb03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "973150ab-3547-4a83-bd3e-76007d78469b",
        "cursor": {
          "ref": "fb310d5d-f2dc-4611-8399-d7160797e742",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "29281cc4-008b-4087-b2c4-0dc9e86b6f53"
        },
        "item": {
          "id": "973150ab-3547-4a83-bd3e-76007d78469b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "9ace14d4-7fc4-4376-a7d4-bcce290e1553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5d4e8b1-3d63-4a52-9fc4-7742627d921e",
        "cursor": {
          "ref": "b74e42dd-5acd-47af-97a0-2d6322e77083",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "183569a8-09fb-4957-9f3c-a38014803293"
        },
        "item": {
          "id": "c5d4e8b1-3d63-4a52-9fc4-7742627d921e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "bcd891f8-9469-4646-bbd1-99793c2caed3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddbef2bd-253e-4a70-a964-8b0d9183daa5",
        "cursor": {
          "ref": "55cd43d1-9a55-475d-97ad-737010ef1a9c",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "3d9e2c14-7d82-4a9c-a0b5-e678af48133f"
        },
        "item": {
          "id": "ddbef2bd-253e-4a70-a964-8b0d9183daa5",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "556a8315-3578-48e9-8c5a-9bd13ca8c15a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9470273-6751-4e0a-963d-4fb6b557ed00",
        "cursor": {
          "ref": "ebe5d8d8-7a8e-4817-9218-f3f4e8ead9bd",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "7441ff77-a504-4d0a-95fb-97c3014dfea2"
        },
        "item": {
          "id": "d9470273-6751-4e0a-963d-4fb6b557ed00",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "ec54722e-c454-4aa3-aef3-2b28cebfdba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82e8bee7-f04f-4dc6-8aaf-3015796ef319",
        "cursor": {
          "ref": "2f3d84bc-c417-4b38-8020-bec30cefe832",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "32224322-82d6-4476-aa92-fc3d7d48bcd5"
        },
        "item": {
          "id": "82e8bee7-f04f-4dc6-8aaf-3015796ef319",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "af081cd3-0466-469f-9980-73a0ac76d01c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc10e579-ae50-4bb6-899b-4f212b996294",
        "cursor": {
          "ref": "17cf120a-f005-4ffc-b914-987223004469",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "861d07ff-3fa5-4ba5-9052-88608e9dae84"
        },
        "item": {
          "id": "dc10e579-ae50-4bb6-899b-4f212b996294",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "fc6374a7-037e-40b9-969e-adbe2e881359",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d8fbb24-1d10-4976-8485-c9751b76e6f4",
        "cursor": {
          "ref": "702eb161-3780-46e8-97e6-84e72cbce152",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "34695e96-152d-498a-8e86-d869c0e56372"
        },
        "item": {
          "id": "7d8fbb24-1d10-4976-8485-c9751b76e6f4",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "26221bd9-41ac-4aec-ac22-3d28edd0db84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba4dd652-0c82-477f-b325-1513f0eda7db",
        "cursor": {
          "ref": "770ad013-25c3-490d-9f87-394cf456b908",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "4d2adb93-6115-404e-ab40-858a8085a47c"
        },
        "item": {
          "id": "ba4dd652-0c82-477f-b325-1513f0eda7db",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "edb17d23-9190-4cd8-b933-0615f4a9dfaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "387bd3c7-7039-4346-92ba-ddf89d1ad353",
        "cursor": {
          "ref": "6190e5fa-3574-4d32-ad8c-2d8100f9f524",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "c235e730-e20e-47c0-bcb1-ce4ea6f3e4f0"
        },
        "item": {
          "id": "387bd3c7-7039-4346-92ba-ddf89d1ad353",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "cb410700-14c1-4af6-bbb6-041225307e18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7ea81b6-bb98-4dc5-982e-ebd9f8fc30cb",
        "cursor": {
          "ref": "327d547d-a582-4e15-b9b1-1186faf5e3f2",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "51d8ccce-aaf1-44ed-bd0b-4185d9894b7a"
        },
        "item": {
          "id": "c7ea81b6-bb98-4dc5-982e-ebd9f8fc30cb",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a77787ef-c7af-4fd7-a0c3-654aa2659e2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2687a90-3426-4171-83bc-c08bfae56881",
        "cursor": {
          "ref": "8c3fcb67-8f38-4d68-bd5f-08ad8f0690ec",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "cfc237a6-181e-4643-93db-ca04389eb128"
        },
        "item": {
          "id": "e2687a90-3426-4171-83bc-c08bfae56881",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "e9f7eb73-50e9-4ce8-8926-bc2693a480b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e9b2acb-b53b-494a-b2f6-ad3164014873",
        "cursor": {
          "ref": "8d8e5760-3093-4882-8629-2b8f0531dbe1",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ecc6d2a3-edac-4960-a2a1-a0b17dedf495"
        },
        "item": {
          "id": "8e9b2acb-b53b-494a-b2f6-ad3164014873",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "de7da4f9-aa49-4a31-880c-19fec0ee49b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9ec4e7f-5486-416a-8e4e-48ef0b23392d",
        "cursor": {
          "ref": "5294acf2-8d53-4306-b95f-6b412cf02e0b",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "152b1c44-2051-40a7-a8ec-cf49be2b05ea"
        },
        "item": {
          "id": "a9ec4e7f-5486-416a-8e4e-48ef0b23392d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "f8ed0a0b-f38f-4d32-ae01-88215716c1b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef75c32c-1d7f-49e2-a316-a9c2a693b73f",
        "cursor": {
          "ref": "0bf3dfad-6311-4cd7-ad70-69894b69687b",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "029b3c21-f515-48de-b41f-c888340c342a"
        },
        "item": {
          "id": "ef75c32c-1d7f-49e2-a316-a9c2a693b73f",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "c4e84ee9-59a8-4e1b-8408-84292558ff40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "356e04d1-2fed-4327-990e-4ea08e4adfaa",
        "cursor": {
          "ref": "26d100ca-1c77-407c-a746-92cb972c9d32",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "9d65fda5-e888-47e9-bedc-4884af55de5b"
        },
        "item": {
          "id": "356e04d1-2fed-4327-990e-4ea08e4adfaa",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "fe5248c7-0d08-4312-8178-68fbdf5ae7b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b594d0b8-b45e-4f85-8dd1-03c7226e1d83",
        "cursor": {
          "ref": "487ba3c9-73d5-4f80-a8c3-d92220841e65",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "84f79c0f-47fe-4ada-8bac-5227aae9db4f"
        },
        "item": {
          "id": "b594d0b8-b45e-4f85-8dd1-03c7226e1d83",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "590e30e3-9111-4af1-88d2-03f2028b1f89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b693a61-d42d-41cd-bfbe-abce7a7d1360",
        "cursor": {
          "ref": "da357f4d-cdd3-4c47-a127-a7ebaddff3a2",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "64fca350-ed7c-486f-8019-5bf5158e7e8f"
        },
        "item": {
          "id": "0b693a61-d42d-41cd-bfbe-abce7a7d1360",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a5993756-0238-4aeb-aaa9-a1b98652d592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "268cdc2e-6b6d-4825-81e6-bf087a2b08f3",
        "cursor": {
          "ref": "704bc202-03c6-42c4-9f58-a50e7859cfb3",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "07498be5-0db1-4c16-b8a2-758234cd2569"
        },
        "item": {
          "id": "268cdc2e-6b6d-4825-81e6-bf087a2b08f3",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "0921bac0-e027-4474-86f8-8f9d2520162d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fb795e5-695b-4fce-b5fd-6364cde1f78d",
        "cursor": {
          "ref": "dd403760-f452-4cf9-a4fe-ab21ea9ca691",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "f62d5b40-4ce4-4067-824b-18f8188eb4f6"
        },
        "item": {
          "id": "2fb795e5-695b-4fce-b5fd-6364cde1f78d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "87d61bcf-678d-4f99-92f3-74d9fa5177ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31212a76-3be6-4c5a-a020-b7ecbc11e4c2",
        "cursor": {
          "ref": "611bea77-1d00-4857-b1be-dd77f0d095d4",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "f533f853-d8ef-4520-8065-a7955ac175ab"
        },
        "item": {
          "id": "31212a76-3be6-4c5a-a020-b7ecbc11e4c2",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "59b97cd5-b6a9-47d8-bf75-f72e5d7f7b0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "9be6ab0c-9e66-4fbe-89e5-537fa388a2bf",
        "cursor": {
          "ref": "3d8ce3b1-8eb8-446a-871f-4e549c78723c",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "539a21a0-fc0c-4040-98c6-0bb998b3752d"
        },
        "item": {
          "id": "9be6ab0c-9e66-4fbe-89e5-537fa388a2bf",
          "name": "credentials_issue"
        },
        "response": {
          "id": "fcdec8ae-14b8-4e4b-ad30-51a3d94fe5a4",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf51c97a-fae3-490c-934f-f7df1a4b9d73",
        "cursor": {
          "ref": "652dbf5a-f140-4911-9b8d-2888dae38b89",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "a73fa4a4-c215-4fe7-ad43-3c2c2a4467ca"
        },
        "item": {
          "id": "bf51c97a-fae3-490c-934f-f7df1a4b9d73",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "75b09c91-932b-4e55-9ae6-1319f8bcde8e",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bc55e36-d23f-4cec-97de-3327aac1e5ca",
        "cursor": {
          "ref": "9ab3bfa8-c64a-46b9-97fd-2e4f85a36b27",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "8e470af6-c9c9-4456-b41e-74f445d289b4"
        },
        "item": {
          "id": "1bc55e36-d23f-4cec-97de-3327aac1e5ca",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e88253ea-f523-4d07-b2e2-cc028080a20b",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5372ba5-e021-4f7b-8603-79da0f8c37a5",
        "cursor": {
          "ref": "b565f33f-7717-463f-be1f-c7847f1d67e2",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "078d7d86-4af7-4c8c-a362-2737864938ec"
        },
        "item": {
          "id": "f5372ba5-e021-4f7b-8603-79da0f8c37a5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7cf4c015-3a29-4e65-b18b-5cbc02d746a2",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "770d4495-3397-407c-b5e2-d58538c40ba2",
        "cursor": {
          "ref": "5a0ba5f1-8194-4454-b514-dd8d87b2d6cd",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "853dde5f-5d35-4bbe-bb0b-d3fcf0864fdc"
        },
        "item": {
          "id": "770d4495-3397-407c-b5e2-d58538c40ba2",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "99182f79-0517-440e-86fd-bcc7be26d540",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-07-01T00:44:12.483Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-07-01T00:44:12.483Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "916b103e-a897-4f46-a49a-be73e02ee5a2",
        "cursor": {
          "ref": "18a1831c-9d92-4211-933c-5d783459c157",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "84c531dc-0398-400d-94bd-1f49fb6798db"
        },
        "item": {
          "id": "916b103e-a897-4f46-a49a-be73e02ee5a2",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "91fcf00b-09db-4995-a047-3679f1256d6f",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b76ddec-889a-47e9-ae42-b9ca1d427a6a",
        "cursor": {
          "ref": "16ebfa9f-7132-4b59-a2a1-f9e92a4655fa",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c6371b86-57f0-430a-ad90-90285ec0f778"
        },
        "item": {
          "id": "1b76ddec-889a-47e9-ae42-b9ca1d427a6a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e9109c7e-cfe5-4ae3-8afa-de9604862574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f24f06-357b-472a-b98a-299dade9e740",
        "cursor": {
          "ref": "570b4cbe-e107-4374-ad24-629f01686546",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c5547895-b7d7-4283-ab11-30d88f85f5ab"
        },
        "item": {
          "id": "36f24f06-357b-472a-b98a-299dade9e740",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "42c3e4e9-344d-4c3c-b34c-18b8a0868da7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c0e3fb6-e810-417d-9164-fb935e00485c",
        "cursor": {
          "ref": "8e821bb3-1a91-4f75-9ce4-273b5969ca70",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "65c44aed-dac9-402b-8695-afa5c193e1f4"
        },
        "item": {
          "id": "5c0e3fb6-e810-417d-9164-fb935e00485c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "69eea92c-1970-4146-9229-5b1210e7f9e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c8c3856-b98b-4967-95da-011c191a245f",
        "cursor": {
          "ref": "a19c0f36-90b8-4c25-8a1f-29e00936d986",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "92d08003-9238-4a1d-9040-eca3b4b25d1c"
        },
        "item": {
          "id": "8c8c3856-b98b-4967-95da-011c191a245f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e7dacb0a-c11c-408c-ae3d-40a80bc4ec5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6794bde6-4f22-4b73-9266-9d7b90f8f046",
        "cursor": {
          "ref": "2429ecbf-38eb-4973-9f75-8ad38b1a5b4e",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "05c39b79-efd6-44f5-a277-920264797337"
        },
        "item": {
          "id": "6794bde6-4f22-4b73-9266-9d7b90f8f046",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2e729f70-2756-45bc-9bf5-a848d7eb8a69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "048adf5e-f88c-49a4-bb05-0643f11c48a1",
        "cursor": {
          "ref": "a124a729-01b5-408a-9607-f3ea711ff875",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "b614dca9-d851-40a9-a45d-f48ea197bcc2"
        },
        "item": {
          "id": "048adf5e-f88c-49a4-bb05-0643f11c48a1",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "1377d6e2-0a13-43f7-ab44-31ae7f51b927",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fbf1fd2-3de2-4605-b567-dd4037556b7a",
        "cursor": {
          "ref": "88b0e446-4814-418d-b259-652f3703e76e",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b880ea9a-4d34-492c-b526-797c33114743"
        },
        "item": {
          "id": "9fbf1fd2-3de2-4605-b567-dd4037556b7a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "27b4267d-e54a-4fe0-a846-a2fa76316280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2457417-1cc9-4890-8174-ad43ecb0878f",
        "cursor": {
          "ref": "058652df-2193-4c97-8ad4-a64a60531a02",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "ff647a20-6954-4471-916a-e2072e372296"
        },
        "item": {
          "id": "e2457417-1cc9-4890-8174-ad43ecb0878f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f9c72fe2-4ff7-4d2f-8dd3-36d6c1282804",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad9f75a0-71ae-41ad-b267-ca8c881537c4",
        "cursor": {
          "ref": "71647397-4f38-4e95-af48-1200bad8a881",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "44a32fca-f087-431a-9eba-7b31150f895c"
        },
        "item": {
          "id": "ad9f75a0-71ae-41ad-b267-ca8c881537c4",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "072ab588-8703-43d3-a341-213d20ae312b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67fc697a-4fcb-419f-a231-59372b143c6e",
        "cursor": {
          "ref": "d041a3c8-5cf5-4ab2-94a5-57764ae0e534",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "af278c4b-377b-4b4f-9bb2-5c40b1d000d9"
        },
        "item": {
          "id": "67fc697a-4fcb-419f-a231-59372b143c6e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "536667ef-3533-483d-8244-ce786d1f1ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab969123-04d6-4cdf-8901-c539e0fd3ec4",
        "cursor": {
          "ref": "f87971ed-7a97-4fea-a367-008da40ee760",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "3027e321-1a88-4f06-a1f5-f40b2d76ca3f"
        },
        "item": {
          "id": "ab969123-04d6-4cdf-8901-c539e0fd3ec4",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "2905916a-c86c-43a7-8934-2bd301fd265d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e122964a-542c-4a4a-b4e1-3baa5c087fa9",
        "cursor": {
          "ref": "6056c181-93e9-4568-8694-5e0209c310fc",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "154da224-3fde-415c-a617-747ce31f73f6"
        },
        "item": {
          "id": "e122964a-542c-4a4a-b4e1-3baa5c087fa9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "cef07dce-4cec-4699-8151-c650ec0a36f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ccacf3c-fbd3-43b7-bd0f-cf5c04fac71a",
        "cursor": {
          "ref": "3ba96d37-1dbe-4c10-91dd-236d4297967a",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f82095c5-e7f2-4d3e-8760-f5220bbf8d0a"
        },
        "item": {
          "id": "1ccacf3c-fbd3-43b7-bd0f-cf5c04fac71a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "87486456-7aff-4fc1-ac21-b24a0fea2c50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fa8feec-bb78-492c-9092-874c6dbada21",
        "cursor": {
          "ref": "8613e1db-2dbc-405a-8764-d2bd94df4cea",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ea530fab-4c6b-43bc-a854-152f465b9f46"
        },
        "item": {
          "id": "8fa8feec-bb78-492c-9092-874c6dbada21",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "96735f7b-e21b-424a-9850-83613b30b2d5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "d9e7a011-91d6-413c-ba5b-0d9751950428",
        "cursor": {
          "ref": "ab144916-c9f9-4fab-a30c-6a9b5524eaf3",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "5462e550-3e8b-4193-b904-4194abbaa255"
        },
        "item": {
          "id": "d9e7a011-91d6-413c-ba5b-0d9751950428",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "97144dbb-6782-435d-b0c6-5b2e47606cbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65cef3cc-08b6-45c0-8557-feddbe4fc576",
        "cursor": {
          "ref": "4e9c19d5-9d34-44c0-8df9-0473afc5be4c",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "7df3b25e-8831-4a6b-8c78-92af46dc9c74"
        },
        "item": {
          "id": "65cef3cc-08b6-45c0-8557-feddbe4fc576",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6a384677-c74f-4704-bef4-cee960144e09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cd4f97f-edff-462e-afd9-e33882a70c0d",
        "cursor": {
          "ref": "357a8fdc-1ae3-48cd-9cba-cc78d5d4b06f",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "bcb6b501-9047-4d2b-81a5-d6e901be442c"
        },
        "item": {
          "id": "4cd4f97f-edff-462e-afd9-e33882a70c0d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2a7bb79d-86f9-4bdc-a413-8049c3a3880d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d19bb0b6-f2dd-49dc-99c2-ac70b9a356dc",
        "cursor": {
          "ref": "b1b9b5de-b5a9-4a28-8887-8610dd1c91a0",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "60d73e09-710e-41c5-b01a-2709ee845d54"
        },
        "item": {
          "id": "d19bb0b6-f2dd-49dc-99c2-ac70b9a356dc",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "2fc4c9a5-32a7-4954-b8b8-1a9bb8bea2b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bb0d62d-068a-44ed-aaff-ca629dfdcbb6",
        "cursor": {
          "ref": "d29177b3-4556-40d6-b8a4-63483e8a8282",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "a325d1a5-2b37-497c-b0dc-9c1f9ca20495"
        },
        "item": {
          "id": "9bb0d62d-068a-44ed-aaff-ca629dfdcbb6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7ebe6e15-74f4-4911-aa7b-81e1e70e58b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b63f7ce-bb48-431b-a497-a9aad9b76413",
        "cursor": {
          "ref": "c65fdf25-0430-4f01-b478-6124cccd45d6",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "415d8630-1bc6-4fdf-97bb-817daea9f16d"
        },
        "item": {
          "id": "3b63f7ce-bb48-431b-a497-a9aad9b76413",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e2e10240-facf-42a4-913f-6e1fcb370301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "798231ca-53c6-4bcb-b9a0-bd8fa03063b3",
        "cursor": {
          "ref": "44134c77-2d21-496c-a72a-0f386f4237cc",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "4a52b0b7-dfa1-4227-94ef-e21fa2f96cd5"
        },
        "item": {
          "id": "798231ca-53c6-4bcb-b9a0-bd8fa03063b3",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "12186267-a3ee-4410-9943-f9a0fe9bcec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7724881-2e2a-4250-9b0b-49d6b66bd8d0",
        "cursor": {
          "ref": "ac8436f7-4c16-4171-a948-403d14a86bed",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "505f75b4-9293-4fff-b9fa-73ac54080598"
        },
        "item": {
          "id": "f7724881-2e2a-4250-9b0b-49d6b66bd8d0",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "cb9bd55d-07b6-446c-9f3d-79e16389a6d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d02b365c-8fba-4660-86d6-061398dc6de7",
        "cursor": {
          "ref": "06786c61-a6a1-4f6f-b515-99390d50542c",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "82c53571-45dd-4c77-b0ed-abdbe59e52e6"
        },
        "item": {
          "id": "d02b365c-8fba-4660-86d6-061398dc6de7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "239b0c6c-428f-4d4e-a98b-d90a9b3596b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd15bd3c-40d1-47cf-a54d-539f9fad062e",
        "cursor": {
          "ref": "3973f2b4-2be0-405f-a008-1c7d68947fb7",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "2178f770-b310-4953-b21a-23a926f34745"
        },
        "item": {
          "id": "bd15bd3c-40d1-47cf-a54d-539f9fad062e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8fb401e6-3730-468f-83c1-f9fb19480e70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f8420ab-df77-4fb7-9048-9122fbc832e6",
        "cursor": {
          "ref": "82af4e4b-4be1-4438-9174-e9428b4da398",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "06ea6b08-8e60-43b5-9e53-6a24348bcf9b"
        },
        "item": {
          "id": "1f8420ab-df77-4fb7-9048-9122fbc832e6",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "4d34f3a3-54c4-466e-ab2d-a3c020af4f30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57483c81-c551-47cb-9693-ab485e11eecc",
        "cursor": {
          "ref": "8e9b7754-94a2-4213-831e-1dbceca695e3",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "3a8ad094-2dc7-4f65-b113-4acf02661ed2"
        },
        "item": {
          "id": "57483c81-c551-47cb-9693-ab485e11eecc",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "af277a8d-35bb-4a10-9960-4d532f2afac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b0e8555-d9d1-437b-b8c8-646d74609751",
        "cursor": {
          "ref": "7f00bc54-6048-44b2-9e3b-293b22dcfc85",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "2cf4e619-6dbd-481c-aa02-7ff0b62345de"
        },
        "item": {
          "id": "8b0e8555-d9d1-437b-b8c8-646d74609751",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c1645ff6-52ca-4e65-8447-18b4f2cab664",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c22c9f0c-ac1a-4c95-b591-81e55de5492f",
        "cursor": {
          "ref": "f5c8fbc7-47dc-40c3-8513-676df01a4887",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "69fa3189-67f2-476b-a10d-ac8fd4b9764b"
        },
        "item": {
          "id": "c22c9f0c-ac1a-4c95-b591-81e55de5492f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a174d78d-758d-40ff-abdd-3d939ddecef4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09635349-e34b-4c4e-bc7b-4ed020189c09",
        "cursor": {
          "ref": "65e1c027-098d-48a5-8a0c-509ab424b54f",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "fe0ef93a-4d43-491d-bf34-88042c3343f4"
        },
        "item": {
          "id": "09635349-e34b-4c4e-bc7b-4ed020189c09",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "55344d87-add0-4caa-8b28-57314cd37d22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33c4ca52-332e-43f3-928b-4145380611be",
        "cursor": {
          "ref": "6082c2fd-ff76-4c7b-aef6-1e645dbb88d7",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "25974fc4-7d4c-4323-bc4d-d6024b0a2407"
        },
        "item": {
          "id": "33c4ca52-332e-43f3-928b-4145380611be",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "583f100c-f947-4091-8fa8-fba704c58db2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8931a9c0-ac2e-48da-8577-662432827093",
        "cursor": {
          "ref": "8bd1d0f0-61ce-45f4-b2ce-78a0a0069965",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "689d5c8e-e1a0-40f8-b011-e57b47edd4c0"
        },
        "item": {
          "id": "8931a9c0-ac2e-48da-8577-662432827093",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "71a09458-1026-4643-a9d6-a1f87cd2b243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "048e19d0-8ed8-43a2-8a34-2fb075f0f7f6",
        "cursor": {
          "ref": "9d128804-5bfc-4859-9630-99b1f16d91ec",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "4b28f094-ad9c-47c6-97c3-041bebc9e703"
        },
        "item": {
          "id": "048e19d0-8ed8-43a2-8a34-2fb075f0f7f6",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "2f313d0c-960f-476d-84a5-53b481c5aa94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dbfd7b5-e56b-47b6-aa85-afe3beececf9",
        "cursor": {
          "ref": "e599168e-bf13-4da1-8c54-a1b670f8febc",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c9243748-973d-4068-a7b5-29109d239d15"
        },
        "item": {
          "id": "3dbfd7b5-e56b-47b6-aa85-afe3beececf9",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "f2dd9949-4062-4f28-970c-cc6a3897c00a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ec261c4-c369-4195-be8d-7bde14350739",
        "cursor": {
          "ref": "de452759-6ae4-419c-9eb0-2a14cb803904",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "5d558da0-0a80-4e8a-9619-7e572669882f"
        },
        "item": {
          "id": "8ec261c4-c369-4195-be8d-7bde14350739",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "ad36f260-e696-4c45-828e-4ea763b29b34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9f3491f-cd92-4f3d-b785-19b9982935b2",
        "cursor": {
          "ref": "19a954d4-3da2-4e0f-bca0-cb963716e318",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "9415b207-751e-44b5-8655-37c12452edaa"
        },
        "item": {
          "id": "e9f3491f-cd92-4f3d-b785-19b9982935b2",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "ec36e09a-364e-4faf-928f-84445711db1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3cd844b-c58e-4c5c-b7ab-a6fc885d2fe5",
        "cursor": {
          "ref": "d0d87927-e5a6-4f10-ac62-9192e954ac9c",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "94c32e3b-c491-4896-b8bc-9cb2f33ce818"
        },
        "item": {
          "id": "e3cd844b-c58e-4c5c-b7ab-a6fc885d2fe5",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "558941d7-36b0-451b-a9c1-8eebc9d0bc0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aae700aa-6e3c-4932-8bec-414c7248a9fb",
        "cursor": {
          "ref": "5c464272-8f60-41ea-a2af-a0014dc12a30",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "37310522-f0b4-461d-8058-f9619ea37eeb"
        },
        "item": {
          "id": "aae700aa-6e3c-4932-8bec-414c7248a9fb",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "da0e24f4-8585-41cb-9c2f-35ebb8b64f56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa73c80a-e3f3-43ec-b507-df1b7e3dd02c",
        "cursor": {
          "ref": "5e968254-cd45-45dc-8284-2051d5fda2a1",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "a09c6041-289c-4558-9d8c-46958314d92f"
        },
        "item": {
          "id": "fa73c80a-e3f3-43ec-b507-df1b7e3dd02c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b8a644bc-1c41-450e-8b0f-bd666d4a63fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b911693-306a-4d84-b76b-8d73f95e772f",
        "cursor": {
          "ref": "dd75e71f-77e2-4926-8feb-9c73148dbd8d",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "2266dc80-1a5f-470d-94b9-0053d799eba9"
        },
        "item": {
          "id": "7b911693-306a-4d84-b76b-8d73f95e772f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "744f92c0-7ac2-4485-9510-d8c20c4a7945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0f21dbb-e270-44ec-9c8d-8e56f79ade3e",
        "cursor": {
          "ref": "9db7bb62-7ce0-486e-b9d3-32847f887e3d",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "460ab592-f8c8-4159-ad3d-ae24e4985137"
        },
        "item": {
          "id": "e0f21dbb-e270-44ec-9c8d-8e56f79ade3e",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "a69ffd99-23d7-4202-bafa-fd9dcd87a9a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a380e84-2ac0-443b-b586-2d91b5beae80",
        "cursor": {
          "ref": "df7c399e-941e-4958-997b-7c514c623315",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "9d60a99f-58bb-470c-a069-0a271a951115"
        },
        "item": {
          "id": "0a380e84-2ac0-443b-b586-2d91b5beae80",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "48b498d5-b550-420a-922c-43fec89729c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1147e361-689d-4b4a-9197-96b8559ae0f2",
        "cursor": {
          "ref": "bed32d3b-b091-4614-bfcb-46804440bb49",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "735af546-c15f-47f6-b8de-b7a33e4326ed"
        },
        "item": {
          "id": "1147e361-689d-4b4a-9197-96b8559ae0f2",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "6c893c36-cedb-467f-a0f8-26d8dc70a050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47edd07f-df26-46b3-9dae-8a89e9bfab4f",
        "cursor": {
          "ref": "443b3095-0765-47fd-934e-160211f132a2",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "da755ad1-8c4c-4823-b10e-a72cbbba4140"
        },
        "item": {
          "id": "47edd07f-df26-46b3-9dae-8a89e9bfab4f",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "0138cb9a-3596-456a-aa49-31beecab0c62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a626525-a16e-4114-a10a-5d0eea971c9b",
        "cursor": {
          "ref": "412ac25f-4a93-4289-bd02-b19625bc681f",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e5fa398e-c84d-4fe3-acc9-cb8fc5e90bbd"
        },
        "item": {
          "id": "9a626525-a16e-4114-a10a-5d0eea971c9b",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3438efe8-9888-4bf0-bf78-ce680cfb6e5e",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "d13894d3-2896-421e-8f5a-53eb5107a780",
        "cursor": {
          "ref": "b93bf5f9-bb55-4824-99d2-e41551e3a114",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "1f425ef1-cc39-4170-8f37-252c01bb336c"
        },
        "item": {
          "id": "d13894d3-2896-421e-8f5a-53eb5107a780",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "63cf0ed0-43ff-44e7-b54f-b3eb2bf60a96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab182e56-ee35-4c38-b8c3-3337458b0882",
        "cursor": {
          "ref": "9de16a7e-4545-49e2-abb2-9bb64cf95097",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "24739bde-fa67-41ad-934e-545ed075b286"
        },
        "item": {
          "id": "ab182e56-ee35-4c38-b8c3-3337458b0882",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "9156cc65-d8ca-4f88-8755-ca4105b1dcc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a22fe925-ade1-4441-b2c0-a1180c8d95d4",
        "cursor": {
          "ref": "90761075-5f08-4332-b434-40528849ef65",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "1345599a-d030-4722-9754-1c2c39769b04"
        },
        "item": {
          "id": "a22fe925-ade1-4441-b2c0-a1180c8d95d4",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "1ba460cd-3bf0-4e3a-b7bb-b2b74774e8b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cccb76ab-6a39-4dba-a063-d4037d81bed5",
        "cursor": {
          "ref": "3217b761-b1fe-4dd4-88fd-e34b7f596ce3",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "57448b94-ba9b-4b0f-a4c1-fb08fc4ee3dd"
        },
        "item": {
          "id": "cccb76ab-6a39-4dba-a063-d4037d81bed5",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "c2c683b3-1766-47e8-96af-830bcc04259d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "542e509d-4ba6-4f24-93c9-cc5fe6db0a2a",
        "cursor": {
          "ref": "dcee560b-53ed-4294-9569-8b9bce3accb3",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e076dacf-d5db-48df-a7fc-0c5d5f01cc49"
        },
        "item": {
          "id": "542e509d-4ba6-4f24-93c9-cc5fe6db0a2a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "9353f522-cc55-4f7f-97e6-9d95ac2126cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5ca0664-fab3-4730-bb9a-978308b74074",
        "cursor": {
          "ref": "60f2f06e-99c0-4db6-83b6-e3733dda0045",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "6d5fcbf3-baa6-4960-b606-5dda579b2a33"
        },
        "item": {
          "id": "f5ca0664-fab3-4730-bb9a-978308b74074",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e2228735-11ba-4476-a956-8a3b1307a0ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a34d53b3-da88-4747-a782-6ac8e9365f1c",
        "cursor": {
          "ref": "9a972533-7a68-4dd5-b181-d05c06dbc81c",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "47d22720-9fb7-4692-b197-25ff6c124c3e"
        },
        "item": {
          "id": "a34d53b3-da88-4747-a782-6ac8e9365f1c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "431b2339-1204-4a9a-9f3b-15ef7550c0f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d9ccc9d-1d9c-4a55-8a7e-124d00a3ab89",
        "cursor": {
          "ref": "44a216dc-9c88-4cfa-8058-07f14ee055e3",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "cee1e50b-c0c2-4e5b-87d0-7d2932baf6a2"
        },
        "item": {
          "id": "1d9ccc9d-1d9c-4a55-8a7e-124d00a3ab89",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "393cdabc-d585-4469-ac9f-4e3961c3854f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8d70c4e-21f7-476b-944e-682207c12d79",
        "cursor": {
          "ref": "a06d477b-e7c9-4e81-b92c-81b1274ef1c3",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "7fcde624-a963-4fd8-8932-85aa550e9db0"
        },
        "item": {
          "id": "e8d70c4e-21f7-476b-944e-682207c12d79",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d46ba52e-6ca5-45c7-8e6a-4ed6f88044e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "256f5782-fdd3-413e-a46d-721f48e250b6",
        "cursor": {
          "ref": "e71af44d-7fc8-4b14-817f-f1128b4104bd",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "0a9ca95f-1da0-48d0-9825-983153e69d5d"
        },
        "item": {
          "id": "256f5782-fdd3-413e-a46d-721f48e250b6",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "48ab6150-56a6-4d96-a877-273abb7026b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c48095c2-743c-4950-a524-b7b09206990f",
        "cursor": {
          "ref": "29d6ddd1-5e7a-4f16-a472-e2e4859a9549",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "626cd583-9fb3-4bc2-bf4b-fd5a580bda5a"
        },
        "item": {
          "id": "c48095c2-743c-4950-a524-b7b09206990f",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "1650a598-34c5-465b-a027-9fb1a8cc7833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83144194-d055-42ed-a252-57bf5cb3a3ff",
        "cursor": {
          "ref": "408d15e3-4f94-49d0-8ad5-4c0030338309",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "0c0cce30-0672-46a9-a73f-9c3d17fc99b1"
        },
        "item": {
          "id": "83144194-d055-42ed-a252-57bf5cb3a3ff",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "5974f445-a518-4ab8-94e1-77a81ef6368b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7790b082-65d8-42b6-90f7-e7013c3374d1",
        "cursor": {
          "ref": "d2399168-0ca1-49cb-b681-a1c6dc16eb6e",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9cb1c14c-e740-4b6e-8f2d-03f365e80e1f"
        },
        "item": {
          "id": "7790b082-65d8-42b6-90f7-e7013c3374d1",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "fdbf50bb-a561-4dbb-94ce-706a6c096fc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cab5c22-4d75-4aca-bcd1-1d2cb6fb6642",
        "cursor": {
          "ref": "d493c5d2-c207-48a4-8401-e9e50ad38948",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "1c6a4c3a-1e5e-4e36-87bb-62a63d465d59"
        },
        "item": {
          "id": "9cab5c22-4d75-4aca-bcd1-1d2cb6fb6642",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a73ea424-05f8-41d8-9e13-c3b6e8ec2d95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f5bf1f5-9236-40ea-b51e-1bd4ebc4af6d",
        "cursor": {
          "ref": "68cc7f9b-395e-49e4-bb42-f6793dbbfe13",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a4ed933c-fb9e-46a4-9644-8a9ca54d79f6"
        },
        "item": {
          "id": "8f5bf1f5-9236-40ea-b51e-1bd4ebc4af6d",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "db355f80-e06d-4078-bb1f-ea8f32ef43a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2b32d26-6667-429f-98d2-8b61792683cd",
        "cursor": {
          "ref": "8845254d-d682-439e-9fc3-ed325745cee3",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "fd86f0d5-3c9e-4777-ad00-8e58225fed28"
        },
        "item": {
          "id": "d2b32d26-6667-429f-98d2-8b61792683cd",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "f47fb8f0-b75f-4415-b24f-37b7d0f01afd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ecc1315-b967-4488-a9c3-033279a830f6",
        "cursor": {
          "ref": "4c69a271-a9bc-4c95-97c1-044fd74e6057",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c43fd604-e98b-434e-b35b-dc47376de210"
        },
        "item": {
          "id": "6ecc1315-b967-4488-a9c3-033279a830f6",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c217f17e-53c6-417f-9d58-5966c2c7e820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e896c4d-f150-4da1-9ead-12be77f03516",
        "cursor": {
          "ref": "52fda98d-4101-48d9-9445-5fdc4f85aade",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "62493214-3330-4398-8beb-55465a73c833"
        },
        "item": {
          "id": "0e896c4d-f150-4da1-9ead-12be77f03516",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "02658186-bdd7-4339-a224-1bdd7a032fa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53efeae7-8011-4a8e-909d-cca610e33e00",
        "cursor": {
          "ref": "38f776c3-da4b-4030-8e7f-aad5cc89e73d",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "02149111-943f-4f58-9756-334ed43610ab"
        },
        "item": {
          "id": "53efeae7-8011-4a8e-909d-cca610e33e00",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "6a532582-2e73-470f-bb81-13276c4e09d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f86c5b47-38cc-4830-8dd8-60e4e9737466",
        "cursor": {
          "ref": "7115eec4-994a-4b3b-b69e-af4aaa5633ce",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "18de0cce-b6fd-44fe-9110-a17eb13488b8"
        },
        "item": {
          "id": "f86c5b47-38cc-4830-8dd8-60e4e9737466",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "727c92bb-0062-4e9c-bfb5-25515e2d1584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a65731-e6eb-47d2-82a0-93af24d98207",
        "cursor": {
          "ref": "f269d48b-23a0-49be-a721-86f06c83e711",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "10e67140-cb23-478c-977c-f1696712bf85"
        },
        "item": {
          "id": "e4a65731-e6eb-47d2-82a0-93af24d98207",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "cde33a0b-9a6e-4bad-82a7-d44c2c9620b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fb9a57a-82f2-4575-b3c5-8abaaf7b95c6",
        "cursor": {
          "ref": "659ee435-ea7f-40f4-8312-7e7083edbccc",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "2a8ca082-5172-445c-9785-0b5c93aa13ef"
        },
        "item": {
          "id": "3fb9a57a-82f2-4575-b3c5-8abaaf7b95c6",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b5dc15ee-5540-4781-93ef-b768a124a7b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "109cef93-e40a-4488-96ff-b9c695180353",
        "cursor": {
          "ref": "72bafc97-95ad-420c-a54b-a01897580d0b",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f5d63140-bffd-45ae-a863-f1a142555c4c"
        },
        "item": {
          "id": "109cef93-e40a-4488-96ff-b9c695180353",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "a7b0f94d-000f-4e9b-8849-bc952bb505e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f18a386-595f-4e7d-9df9-2dae218382b6",
        "cursor": {
          "ref": "b62b6e22-9f41-41d5-b9dc-07f534770cc7",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "ad1ade44-c39e-42e8-b2d4-3d7debbad83e"
        },
        "item": {
          "id": "0f18a386-595f-4e7d-9df9-2dae218382b6",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "6d89ac4b-9a28-466d-b0e2-75fa91590cc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f9a4352-e7d5-40de-b6a9-a4f3bbec9061",
        "cursor": {
          "ref": "7b591825-8a20-4ef9-b5b2-e4b0b055c485",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "5677f3db-8252-47ac-ba04-9c79a1cc16d6"
        },
        "item": {
          "id": "6f9a4352-e7d5-40de-b6a9-a4f3bbec9061",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e6ffdba1-1e93-484f-a317-8b6e227181c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dee596ab-31d6-4ec6-820d-243514b8602d",
        "cursor": {
          "ref": "c2d8fc73-3ed3-44c2-aad9-1e2cb9da9ad9",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "9f672fb7-4ea4-4e16-87ab-a0bc5d2f2e26"
        },
        "item": {
          "id": "dee596ab-31d6-4ec6-820d-243514b8602d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "b1fd47ea-1242-4b2c-bd51-35d3ece45f4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4504715-17b5-4e0e-8914-5874c54e1834",
        "cursor": {
          "ref": "0fbdb217-3e5c-47bc-8b4d-e4b709aa0a07",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "735babd6-f59f-4357-a27b-84f595f11a19"
        },
        "item": {
          "id": "a4504715-17b5-4e0e-8914-5874c54e1834",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "0fe8ebb1-463c-4383-ae35-4226a7c2dba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc72a2ae-0181-4ecc-a908-7195502c0d80",
        "cursor": {
          "ref": "710847a9-e961-48b6-9ac5-95d81a9c9662",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d908a201-9e15-4d04-b016-8f4814951b4c"
        },
        "item": {
          "id": "cc72a2ae-0181-4ecc-a908-7195502c0d80",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "b69946e0-db6f-497e-ac38-0e26913a02f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a90d5f6a-8e00-4905-8e69-56578e305c64",
        "cursor": {
          "ref": "17d256c6-63e2-49c3-b730-855d4e3eff20",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e1517510-1602-49b2-872a-8c0a13d7eb7d"
        },
        "item": {
          "id": "a90d5f6a-8e00-4905-8e69-56578e305c64",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "1239562e-3a5f-4c2b-8ac5-f557aa8ad08a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f43a85da-7098-4869-af10-e2621fdbb633",
        "cursor": {
          "ref": "c8a9d9a2-9ab3-454a-83d3-8c613de15ff3",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "f8a12187-04c9-44fe-be78-3f035fea01e0"
        },
        "item": {
          "id": "f43a85da-7098-4869-af10-e2621fdbb633",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "93853bec-c1d0-4daf-9cd3-784da2dfef16",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "7380723e-d00a-4ce7-a872-562325211498",
        "cursor": {
          "ref": "310b9c62-878b-4b03-934b-f7bddffdc099",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "705fe21a-65ce-48c2-9c34-61b66ff5aaa3"
        },
        "item": {
          "id": "7380723e-d00a-4ce7-a872-562325211498",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "6f91f70c-9982-4d1f-99ec-c673a70edcc7",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "91cd6aaf-1926-4dc5-bbf7-b0ed3834e8ab",
        "cursor": {
          "ref": "f8fa1007-805a-4311-9f94-2fa0ffd2812c",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b7d35497-a591-4542-a794-9a6d488872e5"
        },
        "item": {
          "id": "91cd6aaf-1926-4dc5-bbf7-b0ed3834e8ab",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "631d36e0-e48b-4e60-b057-56f9088895ff",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "eda3eb64-2a16-4f63-91bc-ae69d4534df1",
        "cursor": {
          "ref": "3363f684-b604-4c8f-af53-493be050c768",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "bbb04214-608f-4213-ab14-fcd231f7f2e7"
        },
        "item": {
          "id": "eda3eb64-2a16-4f63-91bc-ae69d4534df1",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "6a8c225e-28ba-41db-aaa0-056ecf2a59f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1df40785-b06d-4c45-866a-88d4c15dfbe9",
        "cursor": {
          "ref": "7882fb8f-2554-4fdf-9b84-3307076f865f",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "a5227c0f-11e5-4823-87c6-7ec73498eadc"
        },
        "item": {
          "id": "1df40785-b06d-4c45-866a-88d4c15dfbe9",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "3b56ce06-939f-43c5-8158-17d8645d093c",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "16d04bca-2634-45d5-b57a-749f6f6fd0d3",
        "cursor": {
          "ref": "6a66bc5d-e2e9-4a10-8379-a6f21b82d7a0",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "5900a311-4d20-4658-b602-83438c772728"
        },
        "item": {
          "id": "16d04bca-2634-45d5-b57a-749f6f6fd0d3",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "9c62d6d8-b16c-4005-9589-e309c1c5d71a",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "7b051131-f96a-42c0-983d-e66623748a11",
        "cursor": {
          "ref": "eea6645d-2a68-48d4-9717-bc62ff002336",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "b17ad490-89e2-4a09-bce8-e4978507bb08"
        },
        "item": {
          "id": "7b051131-f96a-42c0-983d-e66623748a11",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "1f9685e0-c71f-44bb-9ad7-96a136b8fec0",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "3407374a-34c1-4b6a-847f-a27d70a096fa",
        "cursor": {
          "ref": "37530ddd-a4d5-4ad8-90d4-7cbe35536a07",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "b0f0d0b1-2a94-4562-a53e-de746bf13693"
        },
        "item": {
          "id": "3407374a-34c1-4b6a-847f-a27d70a096fa",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a4be3260-332b-4655-8923-4d3eb226166a",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "69735343-d8ff-4d81-949f-612b57b11024",
        "cursor": {
          "ref": "f9c50e7d-a626-4d08-b274-5f18ded96913",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "f91fac2f-3835-4949-ad8f-293ead3c99a1"
        },
        "item": {
          "id": "69735343-d8ff-4d81-949f-612b57b11024",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "30b47f18-d3d2-4171-a6d8-d6382a0132a4",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "748518bd-0d92-46e7-8f56-41310364f145",
        "cursor": {
          "ref": "e5d52486-2008-46a5-acab-b963e0ee2138",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "a8d4aaf5-fa7d-4409-976e-95ef57f207d5"
        },
        "item": {
          "id": "748518bd-0d92-46e7-8f56-41310364f145",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0892f9da-9bfe-44f2-9dad-82cb6866b3dc",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "2c4217a5-8639-4326-9473-3d36a1041f22",
        "cursor": {
          "ref": "9ac9e892-9945-4217-bc1b-20758816b4db",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "42ea17d7-a839-4f78-b265-9cf399cc2e69"
        },
        "item": {
          "id": "2c4217a5-8639-4326-9473-3d36a1041f22",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "c83463ac-be9c-4c9b-97ef-640865db754f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5e52fe5-cabb-45a0-a5e7-9b3afc531092",
        "cursor": {
          "ref": "96a7f8d3-9d51-4fa0-988c-b3afcb418dc5",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "08392d2d-7461-4bd8-ad72-91fdf8a71d14"
        },
        "item": {
          "id": "f5e52fe5-cabb-45a0-a5e7-9b3afc531092",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d7d804f9-fdfb-40ee-aef6-9ddd48d5ab6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5900aae2-ae44-41f7-8663-ef338eef58b8",
        "cursor": {
          "ref": "7c7582ff-b724-4e71-9de7-d67dce0e96b9",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "de31736c-0126-4484-a13b-dd1675ac6e78"
        },
        "item": {
          "id": "5900aae2-ae44-41f7-8663-ef338eef58b8",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b1d6c587-bde5-4322-942f-fee4a18b200b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceb69eaa-f6c8-4f79-a361-0ebc7cf09c50",
        "cursor": {
          "ref": "494f0b5a-c699-457e-9a81-43281d23250c",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "4d2b2f67-0884-4473-8dd2-506c96a3a1fc"
        },
        "item": {
          "id": "ceb69eaa-f6c8-4f79-a361-0ebc7cf09c50",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "ea3a0b9b-c165-4369-b6d5-c6069975e48f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3204166a-7a2a-4e7e-9563-dcbc734e6d08",
        "cursor": {
          "ref": "6b6d84f0-b756-4a0e-a1a1-137e621c9609",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "5dd9ef40-db77-4114-94b3-e994e03b933e"
        },
        "item": {
          "id": "3204166a-7a2a-4e7e-9563-dcbc734e6d08",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "58d65376-7324-4bcf-89d0-30d872974f37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d997eb3-f5c5-4902-8a40-0be2cdfdc81b",
        "cursor": {
          "ref": "0b187cd0-9a58-47c4-9dad-62d1deb52ceb",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "e0a62ed8-e071-4826-8952-37abf7d3c7eb"
        },
        "item": {
          "id": "9d997eb3-f5c5-4902-8a40-0be2cdfdc81b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "9fc76987-f883-412a-9cf9-cd9225dc67e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fb041ff-80e0-46b2-b593-5f31f4a01038",
        "cursor": {
          "ref": "1b33f439-4ffb-4887-ba82-e21730bf3048",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "e37d249d-0331-45f9-b09b-a01324d8cf7e"
        },
        "item": {
          "id": "5fb041ff-80e0-46b2-b593-5f31f4a01038",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "8853c92a-57e1-484a-b746-eb816fbc9103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42f96a98-ce7a-4294-aee0-0e3cfc9aff60",
        "cursor": {
          "ref": "26defcf5-4049-4fac-acee-e1a756f68be4",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "0d662f29-7782-4725-a2ee-bf25768496fd"
        },
        "item": {
          "id": "42f96a98-ce7a-4294-aee0-0e3cfc9aff60",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ce700302-a158-4657-8fa6-09f8951f5eae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9828020-0755-48f5-99f9-b234697f0c02",
        "cursor": {
          "ref": "8147ce99-b26a-4219-970a-7d64dfc55439",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "ff97bb27-fc64-4c71-8490-a51b27ec9816"
        },
        "item": {
          "id": "b9828020-0755-48f5-99f9-b234697f0c02",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "95cdb19b-df41-48d4-8639-90e207b0c7c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "882057f2-9e36-4db6-8cd4-7fb925fbeeb4",
        "cursor": {
          "ref": "bff2f144-0f66-4817-98c4-97eccd6dc60a",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "f63c54cf-421c-4933-9c9e-c4f047bef825"
        },
        "item": {
          "id": "882057f2-9e36-4db6-8cd4-7fb925fbeeb4",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8c111b3c-55e6-4d93-8c18-1c7fc0e2b8df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bb51d53-35e6-4b3a-8abd-6acdbc8b6a9b",
        "cursor": {
          "ref": "6c2b86c8-b96b-4d6d-a7e5-5eb27a2a32bc",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "97113a2e-0e23-40d8-b80d-2d76e2b58a10"
        },
        "item": {
          "id": "5bb51d53-35e6-4b3a-8abd-6acdbc8b6a9b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "9cdcc55a-95fd-4cd4-844f-116ba4024708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2baf1d8e-c538-41fb-bda6-cecb9828ad50",
        "cursor": {
          "ref": "0bd1ad46-1e1d-4f46-8cf1-2a5a5abc51a0",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "332b8027-d03c-4312-aa4e-a9b5a5d569c1"
        },
        "item": {
          "id": "2baf1d8e-c538-41fb-bda6-cecb9828ad50",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "076a1d38-53b5-41e3-a1ac-d58c008e284c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3996e11b-0eb1-4fe5-80d6-ca5c677ac8d2",
        "cursor": {
          "ref": "38b71500-78ca-4589-ae82-1938983571d8",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "e131e794-53ac-417f-9fba-3304d9429f5d"
        },
        "item": {
          "id": "3996e11b-0eb1-4fe5-80d6-ca5c677ac8d2",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "aaa90066-1ca7-4008-9352-989235f69cc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c94bab0-f5fb-4ff9-9f0d-eef581dca0f8",
        "cursor": {
          "ref": "ba483028-f2dd-4614-9f7f-bcf0e469490c",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "dc82def5-3b7d-4067-bf5a-cfc4bfa18359"
        },
        "item": {
          "id": "0c94bab0-f5fb-4ff9-9f0d-eef581dca0f8",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "de8fcd07-1d32-497a-934d-f00bb1c28917",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "97aacdf3-a0b9-471d-99e2-374a973820cb",
        "cursor": {
          "ref": "997ac4f6-dc7d-4b63-bb22-b07ab0b30bfc",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "81a34fd1-0cef-4e8e-a646-6391a2e92ec9"
        },
        "item": {
          "id": "97aacdf3-a0b9-471d-99e2-374a973820cb",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "efae4881-aee0-49ac-9632-898fef662c15",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "94fa1d91-ce09-47fe-833e-dcedba50cc8e",
        "cursor": {
          "ref": "af7f7524-434e-492b-ac0b-d4bef6018ba7",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ba2e776c-ec97-49c2-a00c-d8846cce1830"
        },
        "item": {
          "id": "94fa1d91-ce09-47fe-833e-dcedba50cc8e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "80a41d2a-5704-403f-810f-1c4de1c1182d",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "28ab7881-950b-4539-94bc-ee5b40bae3d8",
        "cursor": {
          "ref": "26a851df-280f-41db-82b7-66ac4c07c190",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f4a11be2-57ab-4c93-9abb-54db2a285b00"
        },
        "item": {
          "id": "28ab7881-950b-4539-94bc-ee5b40bae3d8",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "e19c00da-a191-4911-bd89-937d7d19a64d",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "82f9e0bf-7430-4704-8ac5-3856b705c908",
        "cursor": {
          "ref": "51f56a10-11c8-4b95-ad37-22a97f5e8d71",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "7f2e9752-32fb-4e21-a2b2-116db31295b4"
        },
        "item": {
          "id": "82f9e0bf-7430-4704-8ac5-3856b705c908",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "a69e7e60-bbe6-4e09-a6ef-343987d1f1da",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "7fffe873-a40c-415f-a875-092f04b71dd0",
        "cursor": {
          "ref": "8485257f-501a-41b7-b1cf-f36bd5212e57",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "3fa89da4-f6f6-4ab3-a574-42d0ea896f52"
        },
        "item": {
          "id": "7fffe873-a40c-415f-a875-092f04b71dd0",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e9237410-80bd-40c1-af16-47e3bab39252",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f0e21f5-3da6-48fa-b40d-b2a82637d081",
        "cursor": {
          "ref": "688a075a-7bd3-4df0-8981-14249c06a1e8",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b5f1f355-28f6-4f05-9911-d4904b4bde4a"
        },
        "item": {
          "id": "0f0e21f5-3da6-48fa-b40d-b2a82637d081",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "483cf4b0-a439-4998-8a94-cacf39860a3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "690ddff2-2b4a-4964-84e0-d890605ee654",
        "cursor": {
          "ref": "c5f76762-5147-4945-8086-bb0d76ef86bc",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "63760fb5-e822-468e-9d9e-1f384c6bda31"
        },
        "item": {
          "id": "690ddff2-2b4a-4964-84e0-d890605ee654",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "9b845d9c-be03-4ff4-9460-affcf9d6a512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b7c2a2b-7245-4bd8-84d2-678a88cd82ef",
        "cursor": {
          "ref": "03cc5097-5b42-4978-b8bb-2dc22208d051",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "29497db5-300b-4587-9c02-0574fdb42ef9"
        },
        "item": {
          "id": "0b7c2a2b-7245-4bd8-84d2-678a88cd82ef",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "61d944df-446b-4c30-9c7e-08345125ac1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2a8a8b2-cd1c-482c-b6fb-ca0550d5781c",
        "cursor": {
          "ref": "c5147d62-d2be-470f-a6d8-62f427ad4d60",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "5502e89b-0d2b-4306-bfec-7d9ea02c5e11"
        },
        "item": {
          "id": "e2a8a8b2-cd1c-482c-b6fb-ca0550d5781c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "53f76340-4807-4707-a104-218fcb6b23ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "788d22c8-a457-461f-92ff-7b49c66e86ef",
        "cursor": {
          "ref": "90e833e3-5953-42a1-950f-9b6d093b3688",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "16aee7cb-2a8e-492c-8f40-0e7d28e5f3f3"
        },
        "item": {
          "id": "788d22c8-a457-461f-92ff-7b49c66e86ef",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "bf0bb2dd-4318-4173-8204-20e4bc1b343e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "949d8877-9970-4a85-ac78-0fd0de19a724",
        "cursor": {
          "ref": "6040cfe9-8d7f-4ccd-b653-8ae4c86ac825",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "273ac463-7fc2-48a3-af10-25bf54cf6d48"
        },
        "item": {
          "id": "949d8877-9970-4a85-ac78-0fd0de19a724",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "88d5c4a9-2a98-4ffa-a08e-08f09c48b8ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abb890be-ae93-42f0-a7ad-cbdb4f17cf52",
        "cursor": {
          "ref": "3a5a0c8e-300e-4bd8-9201-82c2d9615ac2",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4b512b50-6bcc-4cd5-a88d-da42385864ab"
        },
        "item": {
          "id": "abb890be-ae93-42f0-a7ad-cbdb4f17cf52",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "40236f9f-0266-45e2-95bf-5f746970bb6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4fb00d5-f165-4944-abc6-be62cc5fed6b",
        "cursor": {
          "ref": "d90d3d6c-f5fb-4d8e-b0cd-6db728f7f8e2",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "3f3e0435-e900-4cdf-9359-fdd92693a02b"
        },
        "item": {
          "id": "a4fb00d5-f165-4944-abc6-be62cc5fed6b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a35c6885-886e-41f3-98c7-7fc4ef206f4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fa2b6b1-bfcd-4ee2-b659-030c6416c56a",
        "cursor": {
          "ref": "ea8a2ce4-7fa3-4571-a707-3e897747b0fd",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "7a629222-d56d-4f4d-985d-b6b8a9334f5f"
        },
        "item": {
          "id": "5fa2b6b1-bfcd-4ee2-b659-030c6416c56a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "552b5c72-0087-4fe0-90be-acaa9ad3d31a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeb7e3a0-7994-4ac9-b609-3f6e0f9645a2",
        "cursor": {
          "ref": "c7988426-3808-417d-b31a-1e177795ad2c",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "5507ed8d-a95d-4e23-b9cb-e64380c02685"
        },
        "item": {
          "id": "aeb7e3a0-7994-4ac9-b609-3f6e0f9645a2",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "725e8275-d10d-4a6d-b36e-7ac47384daf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d180d070-8c67-4aef-a76d-d6c2bdf5ea48",
        "cursor": {
          "ref": "4afcac74-3be2-4ccd-9845-9ab853380cd2",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "ac739692-c8f9-470d-8a9b-46728cc47b86"
        },
        "item": {
          "id": "d180d070-8c67-4aef-a76d-d6c2bdf5ea48",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b4628b9a-9cea-41f6-abfa-c58be565cd9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62e91830-0fc1-4269-af22-e4a29c8bc112",
        "cursor": {
          "ref": "2f6a5898-963b-47a0-bdd9-aec34a36611d",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "81f7c59b-aa26-4ecb-89e2-7fcba3769048"
        },
        "item": {
          "id": "62e91830-0fc1-4269-af22-e4a29c8bc112",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "f575822c-8e47-405b-85b9-57d23ba38122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd195cf9-35b0-4842-988e-6b0a9c8c6c86",
        "cursor": {
          "ref": "c7710a1e-47f7-4075-a640-9ca78f86db24",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "e5dd012a-d53a-4ef1-be59-12b26a61aff7"
        },
        "item": {
          "id": "cd195cf9-35b0-4842-988e-6b0a9c8c6c86",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "3b1c306d-e1b8-4228-8b58-6bd6cc893a0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6b8cf85-833a-449f-9d7c-743ecf84b879",
        "cursor": {
          "ref": "d21a7e3f-2503-4fe2-91c2-3efa850e4492",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "33f81a91-420e-45de-9a28-d307b3754d0f"
        },
        "item": {
          "id": "a6b8cf85-833a-449f-9d7c-743ecf84b879",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "7d2a7c97-ec32-472d-8b16-e7d0eaddd468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddab7f8c-b786-4b11-b1c0-ddc4016637d2",
        "cursor": {
          "ref": "71df438f-d30f-41dc-8519-784df87adad9",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "ee770ce8-1453-4ada-a0fd-7ab2acb94e0b"
        },
        "item": {
          "id": "ddab7f8c-b786-4b11-b1c0-ddc4016637d2",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "4f32a13e-6bb1-4462-be14-78b1cf187d8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fb7f1dc-b188-42b9-8a60-77a3085343ad",
        "cursor": {
          "ref": "625b0d19-0b8b-4744-93c3-e50148a89ef9",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4a71aa65-2392-4126-8cf7-b3e74150da41"
        },
        "item": {
          "id": "6fb7f1dc-b188-42b9-8a60-77a3085343ad",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "24113e51-c67d-454a-8057-13142656bc71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d8be0dc-b4fd-48b7-848c-a9ce5cf3eeb4",
        "cursor": {
          "ref": "86ba3023-0729-4384-a059-8405f17fd398",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a24a82a1-5af9-4187-84d9-77eeb3bf8f32"
        },
        "item": {
          "id": "6d8be0dc-b4fd-48b7-848c-a9ce5cf3eeb4",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "eb4898ae-7757-4146-8e22-d123a0299500",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb4fd27a-85eb-4887-bd47-218db1fa487a",
        "cursor": {
          "ref": "f1e9a939-c4ec-4615-9a99-104d899de9b6",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "68522025-ea10-48f2-94a9-2d4448be4dd0"
        },
        "item": {
          "id": "fb4fd27a-85eb-4887-bd47-218db1fa487a",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "eb471c40-0f4e-4b90-9181-9e4f2eec00f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05106bb2-d65d-443b-81b8-29aa18e597d6",
        "cursor": {
          "ref": "d1985f97-fd4f-4690-a266-4716a5a9a607",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "5b9207ad-c834-485f-8ba2-3c12a04ffc23"
        },
        "item": {
          "id": "05106bb2-d65d-443b-81b8-29aa18e597d6",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9f4bee08-34e5-4ba3-bf1d-dd33cda2c0dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56abc901-1deb-42de-ba16-5707fc5decff",
        "cursor": {
          "ref": "1193a905-8d02-4e8e-8d45-bec95f69e322",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "9eb3d145-8c58-45f6-81a5-29a0c0c000b3"
        },
        "item": {
          "id": "56abc901-1deb-42de-ba16-5707fc5decff",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "359c16ed-0db1-4213-9524-65564e7c0d36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "097bdb19-31ff-429c-9134-080856f39e44",
        "cursor": {
          "ref": "e63a634e-ca88-4c45-9e3c-87cf005f4750",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "2423782f-2e14-4187-9c30-106ab7d9843f"
        },
        "item": {
          "id": "097bdb19-31ff-429c-9134-080856f39e44",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "fc5d5ed6-4b78-4eed-b263-06ef05d34f6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff85aaeb-a0cc-4abd-a9fa-556bd2af6518",
        "cursor": {
          "ref": "3aee6ef1-6a16-4240-8f98-949eeb7cf7a1",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "222ed010-9f2b-47ae-8f7b-4e91a9869326"
        },
        "item": {
          "id": "ff85aaeb-a0cc-4abd-a9fa-556bd2af6518",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "138743db-021c-4005-86c5-9a7caed5df8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0746fc8f-7b0e-49a8-ac8c-de6740bd20c5",
        "cursor": {
          "ref": "03f21425-02b1-44d1-997b-af486ee1fa66",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "b7b242c2-e21a-4136-8720-671adbc91088"
        },
        "item": {
          "id": "0746fc8f-7b0e-49a8-ac8c-de6740bd20c5",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "60ecb739-fd58-4188-a456-5caaf9b57085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e5af9c4-88c9-458b-b497-c42868f7be37",
        "cursor": {
          "ref": "a9dc2688-619d-49f3-90a2-8871f674ecc6",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "8e325b6f-2094-4ed8-84bc-17d206c8ba88"
        },
        "item": {
          "id": "6e5af9c4-88c9-458b-b497-c42868f7be37",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6fd1d06c-1bb3-4c14-a47e-caefa4de4d51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de196e41-ea0e-4ed0-afe2-579c3e579a12",
        "cursor": {
          "ref": "90a54a5a-8a7e-4e8c-ae05-6a47218b4e27",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "cf196ccc-e58f-4f58-a90c-401b7019f963"
        },
        "item": {
          "id": "de196e41-ea0e-4ed0-afe2-579c3e579a12",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "cce99fa2-1efc-4713-ab2a-69d2bbd72ee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b993a260-b696-451f-80b7-1c56e5640807",
        "cursor": {
          "ref": "e865548f-0642-450e-a577-deb924be1178",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "e33f12a7-0af8-44f9-9b9e-6ca04744ce8c"
        },
        "item": {
          "id": "b993a260-b696-451f-80b7-1c56e5640807",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "28d67c4b-6a64-4d23-8a14-344fd02d2350",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f73c93df-b111-4bd5-892f-e4e30565aa0c",
        "cursor": {
          "ref": "84b00987-43cd-455c-8522-4f43ff4d23f4",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "d3cba1a0-3ac5-4d7b-a268-09cb40e0d32d"
        },
        "item": {
          "id": "f73c93df-b111-4bd5-892f-e4e30565aa0c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "10386064-c26d-4e09-a128-5ba31a7292de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b5626ac-546d-443a-9248-19837501fed9",
        "cursor": {
          "ref": "9f25830c-f3cc-4fd7-847e-e4193f23f204",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "28dfeb32-d8bb-4c87-b0de-422efe08682b"
        },
        "item": {
          "id": "2b5626ac-546d-443a-9248-19837501fed9",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "e3714b6c-8961-4523-9356-6f693aca11b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01ce702d-710b-496b-be16-c864ffaf6fdc",
        "cursor": {
          "ref": "92094bb3-151f-47e0-9c93-549e876721db",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "97857cad-f1e2-42ca-b2e0-0d903bade688"
        },
        "item": {
          "id": "01ce702d-710b-496b-be16-c864ffaf6fdc",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "b861199d-c689-4a2a-ba89-8471a618433c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2ff601d-1e09-4be0-8f31-6c03cc66f55d",
        "cursor": {
          "ref": "b6d9997c-2dbd-4b6e-a932-4dccfb1861c2",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "53a274a9-4098-4a5e-8d20-7c4a299aff31"
        },
        "item": {
          "id": "d2ff601d-1e09-4be0-8f31-6c03cc66f55d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "1185ea07-01ab-4520-b903-245c6e739e15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b63c4d84-1c80-42a2-9d4b-0338b1e44607",
        "cursor": {
          "ref": "93af14af-2a6c-4b38-88b0-ff1cc6f5de06",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "bcfc3a16-b908-49f1-a727-1fdbea38b684"
        },
        "item": {
          "id": "b63c4d84-1c80-42a2-9d4b-0338b1e44607",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "2823e661-c257-4070-8ce5-3becbd17ded3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdd04cae-4044-4e53-b803-23d6f2ee5a5a",
        "cursor": {
          "ref": "251acee1-f14a-4a62-9948-f19bcf27ebe1",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ae7cd835-668d-496f-b884-70867a54b682"
        },
        "item": {
          "id": "fdd04cae-4044-4e53-b803-23d6f2ee5a5a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "2a53e75e-eabb-464c-8f47-a891b30bdb02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "275e40fd-85c8-4252-b394-00b4a2f6755a",
        "cursor": {
          "ref": "27cfb84f-253a-41c3-88de-887ceb3a6821",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d3f7689f-b014-4ee8-a2ba-dd05a7891dbb"
        },
        "item": {
          "id": "275e40fd-85c8-4252-b394-00b4a2f6755a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "c80b860c-0aec-4373-b5d7-cc90b9cbd673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab584fa4-6332-4019-ba9c-70e28d50f241",
        "cursor": {
          "ref": "0be1b447-539c-482c-b9e6-fd9e1bc6d8b4",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f27f1d9e-2fce-43f0-83f7-2436bc8292fb"
        },
        "item": {
          "id": "ab584fa4-6332-4019-ba9c-70e28d50f241",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "382bdca8-541a-4430-9d63-4e8fc42cfa1e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08eac586-a71c-4171-baf1-a6996da3313b",
        "cursor": {
          "ref": "6c7d9a56-3cf3-4921-8d6d-f578af842075",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "9085ea59-39f8-40f8-a0ba-2f58ac39cdd4"
        },
        "item": {
          "id": "08eac586-a71c-4171-baf1-a6996da3313b",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "074c9cd7-e3ec-493f-b33c-ca4640b38434",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "c9d39ddc-3f63-4db1-bc05-a442fd2921ec",
        "cursor": {
          "ref": "b8af602e-b5b7-4ee3-9477-e918ed75f3e4",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "1a5a8f73-fb73-4fbf-9bc7-3aa65c94b923"
        },
        "item": {
          "id": "c9d39ddc-3f63-4db1-bc05-a442fd2921ec",
          "name": "credentials_verify"
        },
        "response": {
          "id": "359cedcc-4d11-42fb-b1c8-1b67c1984603",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "df737fc5-422e-4c3e-bcbd-a7e216ecbf7e",
        "cursor": {
          "ref": "f172d05a-cf3e-4698-bd51-25a59e9ecfb4",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "50de5ef1-6979-4a5c-8061-c832e689bc0f"
        },
        "item": {
          "id": "df737fc5-422e-4c3e-bcbd-a7e216ecbf7e",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "5691432e-1e68-4333-b94c-128d4ed45dc4",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac276a9f-2551-4beb-a9f9-5d2f2c3c8506",
        "cursor": {
          "ref": "bf42a9d4-865e-438b-b383-e5bd93d67bab",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "7bd1a3e5-0b86-48e9-948d-6c70b8910665"
        },
        "item": {
          "id": "ac276a9f-2551-4beb-a9f9-5d2f2c3c8506",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "20b77d5d-4d2f-4514-be16-ca98c375f6e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac276a9f-2551-4beb-a9f9-5d2f2c3c8506",
        "cursor": {
          "ref": "bf42a9d4-865e-438b-b383-e5bd93d67bab",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "7bd1a3e5-0b86-48e9-948d-6c70b8910665"
        },
        "item": {
          "id": "ac276a9f-2551-4beb-a9f9-5d2f2c3c8506",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "20b77d5d-4d2f-4514-be16-ca98c375f6e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a319a4d-002f-4b43-b6d9-9d1669530d06",
        "cursor": {
          "ref": "c5fbf573-ba6c-4187-bb84-1bab1c0d068e",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "1ad8c054-9204-4134-b084-850198107eae"
        },
        "item": {
          "id": "0a319a4d-002f-4b43-b6d9-9d1669530d06",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "40a64407-5427-468b-8d31-3a8f6f264211",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8f18900-ad28-4fd7-9523-e6e2cd7901b9",
        "cursor": {
          "ref": "76bdcefa-bced-4292-be14-953aa25be5dd",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c4b0ca91-d95f-472c-9b8a-3b641d905152"
        },
        "item": {
          "id": "e8f18900-ad28-4fd7-9523-e6e2cd7901b9",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "bc1b6161-ed2d-4843-be1f-7504997ad28a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}