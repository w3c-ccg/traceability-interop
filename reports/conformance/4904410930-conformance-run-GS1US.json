{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "77b6fd45-e7e3-4894-9e6e-97cdab787df4",
        "name": "Clear Cache",
        "item": [
          {
            "id": "fd98f3bc-d611-4f42-8ab1-b8333d501cdf",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b25c3bf4-f12f-4355-8eda-76785a480bd4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ebcd3867-881d-4f11-a76d-413b7f0b68a2"
                }
              }
            ]
          },
          {
            "id": "25745e8a-eb03-4d18-ba89-dbb4af05c561",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "15985f45-55cb-4755-ab35-330ec306e795",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6220bbae-8074-4f26-ac52-419cf1c2193a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "171b89d4-5347-42c7-92c8-f355d44266ec",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "07819cce-71a0-48ea-82b4-7c58cd46e9a6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3f301d89-7d4c-4344-a5a4-a79fec0b8bf8",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f0fdb178-b872-4de7-9da9-2960ce20c2be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aa292197-b060-4a28-b72e-dba39071fe46"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "723d1269-8eb1-451f-90ae-792dd879d466",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7c3d490f-511e-4299-a220-ab7e703950d2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fdf6c51c-d90a-47b8-8bef-4055def01d8d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d1994ee8-8e17-472b-a980-8f92090e12f0"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "076d7349-d8c8-4233-b683-edd74984f8f6",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "2cde10cb-b073-4acd-ac3d-d83f8e531f75"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d8d74c33-de4b-4d27-8d74-be30cdabb97b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ee791e5c-1660-45b1-a4ae-52c0ed8fe7a2"
            }
          }
        ]
      },
      {
        "id": "fab64a32-4575-4411-96e7-288b28b44927",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "35f9cb91-fd39-4fbe-b57d-5f9705f88e37",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f110efd5-a14f-4b74-8331-7dafd8c5acd4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "193dbdc7-4087-4eda-9556-8dfe2b426a89",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b288474-9c15-4090-a4d8-edc66757f33e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b8bb1dcd-0673-4ba2-ba7e-3ad539f688bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1e1bbae-d880-4cd0-ba4b-f8ba274c767f",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a97d3868-fd1c-4219-ac9d-7c30fe06b988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2a47eb23-f7dd-451e-b897-973a3d8f940c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69a7874c-9a0a-4c52-9f46-98b993aa6796",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9f5e89c-58a3-44f6-bdd8-8c8a16f48ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "187a3315-a196-4661-85ef-624a468707f4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "77057eee-71d1-4b5b-aa84-74cd4374357a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "72451b06-401c-4e05-b37a-4ba715b6c6b2",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6353b4d1-eb00-47fb-8bd1-20bdc9dad148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e9637ab3-a8f1-4878-a0c3-f5cdd8ef35e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d62d4104-e2ed-41b6-b63a-d79153b1438c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35c1905b-0aca-4a29-b1e6-b392cb0aa915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c392f80e-7b4b-44c3-af0a-2505c657a4e2",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e6c0946-3926-4790-8113-0ce43a9d13fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "111dba44-de01-4cca-809a-d7d49aca7561"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f268f1b3-563e-4cbc-b748-ebb2484241c9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "267cd4e2-8b4c-4189-a594-b8f67c34a88a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c9b8671e-0cf9-403b-9d1e-b9dba558ed65",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4930eb0e-231e-4f3a-96b9-c07cad3651f9",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f6aebe0b-f343-410a-b748-c266dc78b99c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "4db78aa4-e162-43ea-9e0f-3f9e41060cb7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3ea8931d-0e2f-458c-82dd-585e9c7d04aa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "a6dcf11a-2aad-4c7e-a525-ba69111f6923"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eeca0b7c-0217-48fe-a117-b6a456926799",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0dbe2971-afd6-40b8-aabb-9a17eecc1e5e"
            }
          }
        ]
      },
      {
        "id": "f7d458b0-68f6-4925-a39b-2258a379bc24",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "4dd45fcb-560c-4343-82f5-ad913c284eed",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4cb854c8-48cd-44fc-a856-0a4485cf27d2",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "6e0d17b6-eb46-49bb-949f-da74d4edf012",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee5315dc-5e3d-4d89-be88-26e19d3ad2c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23794a53-be61-4acf-ad20-0a99f91a7d02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4028f200-2fc0-4bd8-90a8-c68548500f79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6303d665-ebf9-47be-ad76-9ebc5b8bfd21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e140ff7-f933-4383-a59d-165948de29a2",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acf060a7-3b51-40a6-9ce9-6732976ad4e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "669b6ac3-f9e3-4edd-acda-585089e7cf0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16cb1574-d7dc-45ce-aef9-4fef4ea3d0a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6b20886b-fb10-4af5-a11f-599cc50cd69f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "794e5be0-25bf-452e-8e85-8357eeeb6a35",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c85de4c-bddd-4c9c-bc45-9fc9537d9760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaa8c4cb-f83f-41e5-8245-ae210f97bd83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "413a1e4d-6bc1-4dd2-b09d-21a1dbe7e81d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1851d30c-e296-4a4d-8a47-007a63e3a3bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b10918bc-51c6-4be2-b018-1ef8bb33e117",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c3e0ff3-224a-4a09-97a7-c61b570e1611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c28ee01d-5c54-49bb-a8b1-2e2cf1ca5a04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81406a79-6186-4cb9-b77f-1af4d1111070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ec1bf79-d6f8-42f2-ac14-3399e214f244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdf81156-ee60-413d-abcd-cc56189a6e0d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a45bfed5-2712-4ff2-b2b6-ffa99af7689f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7da5f5fe-f574-4006-98ec-8920d2a4e5ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c47f823-5c5d-4f9b-b95b-643815172731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae5a8462-b530-41b6-b285-0ef71b5fdd35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59df6157-6814-4e9f-8e37-a6962c67355c",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdcd7eb3-474d-416a-9279-2b3c2922dab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1918968-d860-4dc3-af33-98b98bb9f213"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d803c19-f284-4881-97a7-b688d92fdd3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2fa3c9cf-39ed-43b8-9e5d-7c8de6ba1025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc5a731d-cc7f-4cc4-ae3b-14520b684dd0",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f05d03-ac5e-4415-b26e-b3e33be57da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc804aef-a98a-4b77-bbfa-ca5939ad05a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71ef895f-fdfe-43d6-b89c-4185916fd627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "123f75b9-7bf9-4952-be06-67d95027c17f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e370075-21b0-476b-ad96-31cb21e24e93",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47a6312e-8c8f-4d2f-8e53-51cc9ae4e66b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1bcf3f1-b93e-403e-b335-9d93a186ef24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86c4bf8c-c67e-4946-820e-6c427a47b0de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d230a89-4588-4686-996f-7a784c08c545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "217b6182-a20a-41b1-a759-db42c59dc1e9",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ba44ff2-e98c-41f3-b4f3-9da4ab3150b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc015a02-7d58-4cf3-a7a5-66bd6e154da2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21569ef1-cb10-4a7a-8513-86b6be947d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0400fae8-5f41-4abe-8d0a-58007c6bfb44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86785df6-e892-45f0-b3b9-19810fa0e9bd",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfbf8301-d16b-4e7d-a012-677aa8c28cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d38e35f-830e-4a5a-99a2-a43c6b4d42ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6da63ff1-8cd2-4c87-bdc1-0ab1af37f04a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd8712f3-a714-4ceb-8c2e-d384d088806e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac4250d7-1705-4c10-8079-7932810775a2",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c32e3f4-53cc-4d44-afd7-0f005257634e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dca05f8-ce77-413f-8f44-4f684c337295"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05f3446c-2aa5-4ad9-ac99-c97d7debb481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "167f83c1-462d-474e-8f5f-54000caeb99a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a09d3d96-971b-46e4-8c86-e094c7e339d7",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f89416e6-26e2-4444-9781-995df7ff4314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbbe7c97-15d0-41d4-bf7e-7f3a5863debe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43897526-dc43-481b-bc90-0c39208923b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4fa7f2b7-c17e-4783-a4c8-86e651fc7cb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c160af3-15c2-488f-9bba-427bbf2fc835",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35de2e9b-1b56-4472-a40a-5a1c70e18cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcdcbe74-191c-4902-8159-c3406e9fc7a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f76c2020-a3f5-49a8-a0fd-94fc865d7317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3998133c-a28c-41b4-8a59-98628ec87158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a1a59d0-44ac-48e1-88b4-9b29695bd6b7",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70e99689-52ca-4717-a4b4-ef652b15fca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "939f7b1f-8196-4d09-82d9-2c0aa4d1258d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bf04ab5-776d-4fa9-930d-72c154711468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b070f097-c591-4284-aafd-c303c3276c0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32f9e07d-81da-457b-9336-94fa208444a2",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac315c8-5e26-4557-a190-ee31e461d158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ed72147-3847-41c1-96a2-5d8574efd92a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29e77aff-7c77-4015-a7e6-5bf810fb6a35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "14232e25-9414-4cca-8a89-86a312d89f4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a210d12-b82c-4b21-bcec-1277803d0f95",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34d4e0e9-ffad-4cdd-8d38-36d76106e145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e284b07-02f1-4d53-ab2c-0ad234ba1564"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adcc4c6b-2ae8-457f-83bd-7abfcc8e676c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fb54d701-8cf7-4811-898e-3a51213f85b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e76fa58-ccdb-483a-9f01-c20966ad9ae6",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f9348d4-2565-497b-99b9-246fdbdc2c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "152c770d-4a3f-461a-8513-cd240715f9f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a0106c2-868d-4838-a94b-44fe4051d357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "89310173-ebd7-477e-9ae4-cadb2bbeaa4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abbbd446-8678-4d6a-bddb-a3db7bdaff56",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21692efe-46d3-4bdd-b5c7-7837ecbb6a21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7184062-f9cb-48d8-97fe-57f936ab478d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a423bd0-3a5d-4ca4-a910-d32378a493cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "26ffc712-326a-478f-b7a8-7626544d9431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "213976ca-cbe9-45de-a7d4-b982cb9be0ca",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60829791-649a-4c9c-96dc-43eb922270ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "143f99f7-470a-43ac-8e13-01baa49d06bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "242fea8f-f557-4477-ad3b-cb2f18f46a57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc7b1d12-d01f-42de-b247-7ffc801f0618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39ba141f-368d-451f-a0fd-7a282fe0d85d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1149c7cb-f993-4745-a1af-7a7be5ac67a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72001a3a-3a7e-4942-8f25-46e1ff99cedd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3b34f59-1583-4d66-a841-c31c72c099bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7e3ef47-0303-4a5a-81f0-e4ce13b81d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecff8b89-58a3-4a57-bb8c-7efb06f14885",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc982e64-1ddb-4163-83be-15a4ac3131b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ecde384-f24b-4b12-aa36-c713376f24af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45aec438-8cbb-444a-9ebd-092432d5fa9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a474d37-bf23-4a9e-8fa7-a2e9cbd91411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb952d0f-0832-4c1e-8321-f4de8088bd43",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbaaf24f-9ae8-466c-bbc8-bfe221d2bb98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "326612f0-9981-405f-a802-69dd640b0b2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a95dd0c1-35cd-4689-a3f8-a5ee79c434f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a26ba7b-1504-4ed4-8b15-657c9b19efd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a49b555-f959-45e7-94c0-89e46f84efbf",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2244f874-67e7-4eb5-b545-e104416a878c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a54a290a-f6bd-48b9-849a-b0dadc4a2555"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "640a5412-94d4-459c-961c-e920b850265c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "19aeaa1f-3388-45c6-91e5-aeb26e91576f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17dff87-4102-4457-8b5e-44e4b0dc1445",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce132111-3699-4ac3-b57d-15797fb6a98d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8371bab0-6f71-4847-9d67-00f389064887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3731eb92-3ae4-40f8-b4d7-725a0113242a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bf59a6c-729a-41d4-a8d3-05d24c42ffaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08097f79-6f68-473a-864d-535fcf6b4ced",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d0b231e-2fe7-4321-876b-c8442fa563bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59dc3c2f-c2a2-46cb-99ea-0a133ed4ab76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1f802d0-3ae2-47b9-87c5-091dd1b199c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b940dfc7-13b2-4428-ab2a-0907f044e44a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c3d91a6-ff09-489b-b31c-e24043736c29",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfc31853-4594-4b87-8bf1-980c4b38946c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45395efa-18c4-4616-aea1-392cbb3aa622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7650206c-20ec-4a28-9933-9e919865a460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ee3a2ee-ed46-4b35-be4a-760463cb768b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bf146c3-37ec-4c04-9002-d5e113c83d73",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ebcc2e8-bbd0-4e0d-8e52-6e0dfd5b329f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dc20c5d-2459-43f5-b860-c1dd4e626e89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9896aa21-3cf6-49eb-9b2c-02590382ca36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a535a5b8-e6c0-463b-8cfc-6acc00d536b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd3b3150-c08e-45bb-b081-579483dbfff4",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27fe5a9f-b37a-490a-82a1-b0098775b04a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2cde0bb-84a1-45e1-a945-17003214251c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25891828-e7f4-4688-ba46-97d86c3da61a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bd25e04-3b51-4126-86cf-7d4d1aa0408d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0909f032-c210-4e84-9e46-5216c6e4d26d",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cfc5154-34c8-45ae-9372-cf6394a4d7d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fccd9b9d-890e-4c92-acd3-3b9f5ace3d2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35653f50-ccf2-4546-ade2-f3ad444599e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "18b4d782-728b-4d5d-988b-a9e39984ffcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74b7eae4-6456-47a1-b826-7a6ba2ddfade",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6616ed92-3445-402c-9865-c1d3d76911aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d601a157-64de-4910-9306-95d1aa0cfd6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac45839f-544d-4472-a641-4e8c6f6805a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfb69a1d-e92a-4939-aed0-d5f100eb9b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "145f4a20-b94e-423f-b3b5-af4074403f98",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3209afe5-54d1-4197-8816-b894c712038e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77dce703-e92f-4bf5-91f0-c4502499910b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "183c7560-b5f7-4cd8-9bef-74b2306d9d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c04e2ac-f51b-4ae9-a172-7993363678d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "398f2412-3459-4927-80ed-a3d3185dcc88",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7951683e-38b2-4021-ac95-f886533cfb8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaba4e18-cd8b-43bf-aa98-e733b5c5d4e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bf23f05-c61e-4b1f-b772-41fb88004d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0e70549-26e7-46b6-9e62-99f24878c85d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a704628-933d-4321-aaa8-dcfcce5c4aaf",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47163151-6dd6-4788-b64c-bdf9e319bdf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4263bfa8-3851-4550-a460-07b6e91ba3a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0805178f-32cd-4767-a75b-d3bf92d5f20e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a7cf713-0a8b-4c5c-b2ab-c49d2b6902cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ad04c1-811f-4d88-9913-89360c9ab0b2",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a0dfaa-e774-42af-b46d-f7104e9f8e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6adec23-36a2-462e-9739-25ae4431bd70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78297bcf-0f3f-4a1f-9816-ceb91c18f95c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7754a8d8-35e3-42e1-8da9-e628eb6a6439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8313197d-0c44-454b-8762-9c4f971e590a",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d902f2bb-b3ae-4932-af8c-34a8d799b4c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1937d3dd-2253-43ce-9bed-8404c9a8fabe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "183fe24a-7ecc-419f-8805-b7b3e40a6115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "7beee273-ca52-4643-a764-cb009cc9f112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0483cc4d-038d-409b-baab-a2a3753cbe93",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72bbe2db-053e-4996-ab30-06fbce75725d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "61f39adb-caa9-4049-a84d-2c630414ecaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13a43dab-ee6e-441b-af46-db86685b8a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "49d79455-fe4e-46ae-94a2-40066d9a0a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d91a6fa-9226-4506-bf11-df115c076e1f",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4208a811-452e-4911-b716-3c20a576b8cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21a6f1e4-4ded-4103-b457-2441869b84f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1889777f-d024-4db2-b4e9-85eb93b58ca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "da329dae-029a-4561-9c0d-b13ea809739c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80c3d4e2-3a22-4831-b5e5-5afb5e500c7f",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "404bbc06-f2b0-4d47-be73-d406e100b086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a34d1336-2e7c-4790-99e3-7585ca29a9de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c079e0e3-bb19-423d-b8f9-1447d5f96f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c0d01e5-8e21-45ab-af65-d12fff503470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffd997c3-949c-4814-9bc7-8b55653ba2cc",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df5a343f-7677-4601-98b7-14e0ede17f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8bf92b9-24dd-43c3-a285-2ddc15ea6068"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1d7b875-f28e-45b0-ac45-fb52e356f630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2f25410-5831-4a5f-8da2-3e17b097bf93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f77946df-94b7-42d8-ab1c-6d1c42c0ab7f",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07312be9-eb4c-4b00-ba4d-d2576ddc21ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cee6dbe2-981c-45a8-a283-90b4b605a683"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28e23fd7-b882-4edd-9c9f-f3b68eb167de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "58a68cb1-4c3b-4b6f-935f-7a4d438b8301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75b917a6-8d8a-426a-aca7-66227ba41529",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bdfe9e1-ff69-4b7f-bee2-ba3aa7e01673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ea7fdee-10b6-4772-9680-ad0bd82fc955"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e6ab96c-d963-45be-9a32-905d4ce654df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "81991fde-e1ff-4492-80a3-3d2d40af9b41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3060f6b5-743e-455c-a9d6-d3dbc7df6489",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c438f37-84a0-4eda-8fa4-3ddd1a9acb10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36e2bcd9-ec28-4274-8ba1-7681fb13ac41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a95f01fb-2792-441e-b5be-211616ea8f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "285afe90-b227-4e5a-96dd-cfdde500fd3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce38ed3a-0672-4d92-bf4f-5047e16ea78b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b21195-0e39-4b6a-9522-53c578b324ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4d61651-2d6b-4721-9656-c140b011a6b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1653c0d-7545-4910-b68d-95c09ef1c6d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "39680f21-b6cc-4589-90df-663ae21feb6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "057981a0-4113-447d-ae24-f305b8534e67",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d24d127-e2ae-4c1f-98a2-c590f4c1d5cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d9f89e5-9af1-444e-b36c-dc11d7f9ee4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb0a3c35-2547-4ab0-a1cb-8cbb58148b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fe62062-34fd-4b16-a6e1-0d109dcfd83a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c1d7cf-5aa0-4bce-84ad-dec28973aac2",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b12063c-528f-4bfb-8002-7d94709d0991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4083f792-1f90-4ce4-bfbb-af2d7f7f80c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7810bbc7-8aee-4710-aad5-bbfeb9e1d5c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae28c0c8-f17f-4d86-adc7-d3943c5ab8f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af37c26d-a66a-4f63-9150-85b3d5fd61c5",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a903efa-acbd-4952-aff3-525f05fb1fba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7208976a-20c8-43dd-9ee0-3517d856a319"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ed006df-17a3-4e5b-afd8-3b712f686919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c777557-806f-4b1d-b526-aaa756c69123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "425dfc66-c5f4-46cd-a0ac-f884893539c6",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1470146-8136-4a50-835f-39c9d51599f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d641a36-b033-4c08-902f-68ee1e8d4537"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "496e3987-4330-4ea1-b8c3-17df9d7ea5e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "841292d0-2652-4275-a9ab-44f0f3e39304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c03643d-ab88-460c-bd65-7211b17c66bf",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82c6fb80-7dcd-44a5-9ee8-52c45cf6962a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c24af3ce-2797-4f7c-97fd-29f00deb9d32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45df07ae-7a15-4fb9-9267-eeb8f8a1bccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f82b753d-8ae8-4c16-b8ae-58ba3c3237d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98d3cba4-8083-4e1f-9f1d-11747ab292e7",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c374ae-e985-4460-9799-6fd154a6f505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51cbfe68-4dc4-4287-9b22-f6c01f21bd69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ce0f204-79d9-4395-8788-036320417ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a0f77b6-c089-45fe-97d5-c673847918d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4327cdb1-42c9-4d35-b2d6-3598cf33ba05",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75c0af68-5b13-4f62-9c0e-d13d01e27cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9724b3a7-018d-4b57-89da-966b0f7ffa41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7252f4a-5f74-4ff6-86d3-ee148c9e3a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ac838fcb-63b9-4f37-a3e4-8ea65bba36cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e7d5883-1c6b-4bfc-bb6f-b895a6665b0d",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a41fee02-155c-479d-870d-4a446fa9235a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70cd3e58-d902-4c1f-8618-6f3977be62ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd4b8c3b-688a-437f-a589-13b8f7dfdc31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfcd0191-2783-4ece-9f83-0c12f2c01f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eca3d2d-7db8-4883-83b4-92516693bc8a",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c67107e7-dd9b-4bad-852a-e63bd6ced85e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0d2c1c8-7fb3-4a2a-a64d-c3dafc4097d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "918f0eaa-ac02-4fd2-96e6-c45ca13d6730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8527f76a-c7a2-4876-8288-dace25dadb83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0d14ab2-7e51-42f7-ad98-2b2b7df82afc",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41117f0e-c912-4da2-b22a-a5fd99ccbf88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8e5323d-edfe-4983-bc1d-d7a918ce2cf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "719ebd09-a33b-4c3e-87c7-a008804b9f37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ebb56fa4-0daf-4bcc-99ad-fc2eef6c0020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb3821f1-7903-4d96-b4cf-57f8ea73a7c0",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1770206-53fa-4c4f-8d5a-7d0629f1741f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f98f7566-0293-4292-81c4-dc45f8b73c4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "531e9de4-48b6-4e66-b4cf-a0ab7cf4bd71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "07238784-4dbc-48c9-a090-c7cfa4647260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96864a32-3599-4e10-b8bb-dc1f10040316",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbd890d0-63e5-476e-8f0c-4c303934c72d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66234942-297c-4540-83b6-a5c286f1a4cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ccf4cc-d149-4a7e-9963-cf930c41f861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "54bd4c83-d135-4edb-b048-0a16ecb81f2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9279024-27d7-49b2-a28c-b15a81012afb",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31839ae1-80e4-488c-b91b-567bdc1c317c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82f44da0-956c-4f87-a432-3f2c786c9a71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c0c4c6-3ec0-454d-a3b6-bc5454fb213d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "018484b9-7ab7-42b6-a301-db9d98d8ed61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5372eeed-6fa3-45a4-b1db-d3035544ce2e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab85e81-e220-4371-a83e-5c0e41e1e2e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44428b47-9b44-4f4f-8bef-fe303c1528c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "195aacb8-4b5a-4ddf-bbc8-2b0bc27e0b06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8fd3ec9b-42f9-423e-981e-9f038c740c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4b73514-1ad1-4631-be98-871a9ed24332",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1400e022-80ef-4374-b2fe-677b0e91c198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e61efc8-a7e6-461d-94f7-49a3c7221369"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7034c725-b408-4053-b7bd-6e3fcf58b052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c84975c9-d47d-45db-a153-b082ada3c96f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed1cb82a-bdef-4212-a863-d40909b8d3c8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a39cc003-05b0-4d36-9817-c8c34f46b2d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf5bc5c1-7c50-4b58-8a52-39ba5095d858"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e27e26e3-94c7-4dac-ae0e-19caf873ab05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff11b443-dc71-4d05-ab47-fc9a0b2e988e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53fdea44-8ef7-4df5-a3a4-764752690493",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc9548d8-4bd6-454b-860a-83dab0500ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01ea1231-7c2f-47ef-b7b4-28d69a7f2b64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a04973-7e41-45fd-ba5f-e21c16dc9109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "00f787b2-de2f-4a91-bdfb-86f0e4e46cee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10482db1-d416-434a-8f9b-17b76b3f6e84",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a30aca0f-8be2-4adf-836e-7bc8992c9f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8334b53-30b5-4e44-8df0-d4644d5d8837"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6710e78e-4c25-402f-8972-97b6c6006691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f2deff2-3085-4c70-a2a0-75c68818270e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "222aa94e-f284-425c-8bba-d41f077a6a41",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b6aacd4-5801-424e-ad97-909fa7230536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ea5e380-be23-4fb7-a725-7615a6b69610"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0c6c5be-8e78-47d0-ba2c-7beff28d15cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab778185-04dc-4076-914c-a6201f3ab904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ee46441-63c9-4477-8fe1-8a5db518cb65",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85834264-6a7f-4e30-9eb1-fa3df79ea576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b521f97-3b3d-4c95-b56a-14016637cdd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eae51602-a024-4598-9c41-ba47eb7143d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebafd397-c71d-4c4f-8a90-0034fa2ad421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e73d0b0b-68be-425a-b2ce-293805aa6609",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38042c71-9af6-434e-ae1a-302c041b68bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61e99475-6a98-4084-9b04-f97dcc2d0a5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18522716-062c-4510-bbf3-96fae9bc6c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0acc39f-767c-466a-93a3-920b0d574f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f994aff5-58f2-40cc-9351-170171c7a521",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b6c75aa-7c8f-452f-8101-c39119f31923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2866a8d-e3ef-4e63-aa93-75dbd30df2ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c095ecb-c0d5-431b-911c-9487a1a7062b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e12da515-cae0-4b5a-9a4e-560c042b1795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49d97b03-eae3-472d-848d-033ed05299f6",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb9d245b-5609-44df-b5d4-dcffe15188b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af426d0d-ed6c-4bf2-ac0c-274c6fe162f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "786add21-3bd1-4f40-ab3d-8e8db144aa88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "27450304-2487-4932-aec3-7eaba64ee8d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cad8c1f-b0a4-47bd-aeb9-fa2880070042",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6115fb6-28a3-4e4c-a378-6f77a4f7eb4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00d4c462-6619-4ef8-a73d-5dd153edb434"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f00f6c4-58d8-4ee6-bc1d-867a728cff13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "62021b4d-e311-4511-8224-a556fe65ccfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e5257bf-fcc5-4dc1-8675-0c97803394b6",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ef38d85-f92f-47c4-95e4-a187658c63c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37c93cb8-d61f-47e8-a29f-861f010bff74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fee7f15f-2168-422a-b6c7-61c7507b4a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7f24a69-7266-4f69-88ac-3614a07cfdb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60a9346f-4771-4445-b5d2-b962f79d9859",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65b517da-8539-4459-959a-66f2042691d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cd0f93a-32eb-4a66-81a1-a0611a6c2911"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41693054-4f34-4ec2-8da1-3504f16d0b91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "596f51fb-757b-40f9-99fa-52789ab4dddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a16d7b69-00fe-41f9-8530-edee877cbff9",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5ebf24e-e8da-4c3f-9834-08e1516acdb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0693af0d-fe7a-4cb9-a442-d6c4ab69480b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c23d0bc-0d6d-4b50-9e21-a887c585de3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "52b0fb3b-be0c-4444-8157-d3eab00404f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "698583e0-7a0b-4898-a006-13fd75a7356b",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "691ae4e8-5cff-4503-819b-e97fe6b6a3cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d97df2fd-01c8-4864-9ec6-75274d42d9dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e58fa1-3fbb-4a97-91ad-0d9045415dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "20d40140-f9a6-4b05-bedb-5c3ddbeb9abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1c6ba1e-1feb-4952-b06f-ed2af8cdf60d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65832c21-6d59-4f3c-a605-96c6e6507d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32d40e0f-796b-4e4c-98fc-3434af13559d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4e21022-42d9-4006-b8d8-7e2959606389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc7b5042-0d74-4a79-9583-0f43386e91c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f06618e7-e26a-4659-87c0-89cd0380ee83",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10d27a32-0d1f-44a5-a7ba-9026ceaf0952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eb43b8b-d3ff-4766-9dc8-e83d311a9f93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f17e432-03b1-4c47-8999-6b31e3e17eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "71ec294a-d363-443a-a77d-bc5abc9f75cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9422ae93-9e21-405f-adad-1f7c221253fe",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6be5eeba-d379-4265-84b4-dbdd62b5ebcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4b7d74d-6c4f-48dd-a4da-273b3060eab6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b2e670f-5089-4c24-be5a-efb7d5f3c8b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ca9d6f86-48d3-488a-b8a0-d4ad400f3bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d09101f7-d680-4455-88d4-37073f26e3b4",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "512c150f-8379-4e74-8c45-e4b8068bc584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abcb5371-9130-45d3-8763-76b9a6112c0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f57e6e0-bfc0-42ee-8f0b-018d4e719c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0bd81f0-8eb0-4e58-900a-137881af3378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61ff1922-f135-4445-8e83-af6b025f4aee",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "096c8fff-7855-40e0-bd43-52d29b85ba4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5f3135d-0f1f-4468-a40e-0da23d38cdbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "682bb265-32b6-40c0-b30d-6a0a491a172a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0865b98-729b-4903-b033-aa2a5c89dad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c57701c0-5f40-4dae-bc57-8b5ce9e6ebfc",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e57802b7-d9de-45da-93b7-fe4caad16fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "911925de-cf22-44c6-bac3-5f24951cb409"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fbfa271-c41e-49c8-b307-272048df114a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "42c0eae5-5229-45cc-935e-b05612cc40ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "543991bd-e0e8-4474-b036-6fe1646cb978",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14af6dc7-88a3-4340-b21f-01966871627f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03530016-ec61-4a92-bc5e-01945ed9e048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bcf8dd7-0e68-4d56-9279-e95aceb1bdff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d7bdbf4-42f2-4074-8da6-e3515ca62944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffdc0d44-1847-4bc6-b043-528018d53d5b",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb4dd09b-c938-4aaf-9466-e9a8fcfa1ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c765c425-3cfe-408d-a8da-e92444d99751"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e4398f7-fb0f-45d6-bfbb-d1dc8b2226ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4793b1f1-f82c-434b-9261-f1c6db771b0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8128e46f-7136-46ee-bd4a-d57b388bb9b1",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "392d1255-1024-4a6f-bdb0-8a7fb887b64d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d1a9450-9707-486c-98c5-9afad2c647a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b4c1670-24f9-47c2-b477-a39ee1304a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "86d3c9f8-17db-4227-9f4a-f8901d8bf1ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e6ba632-4fc1-4a4e-9048-df2f190bf544",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20086143-4a33-4571-b453-a4535a872787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96270fa1-3c0a-4b3b-a6ad-66c06c3e870a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95461ffd-46a2-471e-987e-bb8878e14995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa6cf6e0-deb7-4b3c-9abd-d852044d8b1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af2dbfa1-fc85-402a-a246-d3dbcffdd120",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c16779c-2480-4068-9168-0093ae252546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e5d2e54-51eb-45d5-9536-94d7389b9878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98b62866-dbd2-4139-a7bc-d34919522156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d35b55d2-671d-464b-bfd4-e60063c1b6de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98182ee8-e622-4186-9724-3dc0a595471b",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a906d1-c46b-456a-97b9-a6064ed62a67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a89bb6b0-f21c-4be6-b962-3ed716ff754b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "babd00e2-e148-4170-a024-dc693d6b970a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "89de0b29-e996-49a7-b1d2-b43765a66e0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a80cdd44-9f62-4392-8c2b-bbd7a3e7540b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebaeebb4-0191-4a7b-9f8d-1ac3e06db18d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "787b2c21-f457-426a-bd8a-d006242870c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bd90298-3690-4a90-8350-57e6adb0cfad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e29fe554-38c6-4628-aa60-673a3f6a5ef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9af6be0a-702d-4456-8a17-d1adb57df614",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be63f761-010c-458d-b4a0-82c5634069b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f754e694-d59a-48fa-9a45-9dc4f381ee7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d6b0a3c-360e-45f3-9ce4-0a85761c4a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ff28a848-1dfc-4a9a-bb29-b9fbe9244c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4dd4cd5-38ed-423e-a5bf-83e430009ef3",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "218929fb-2cb1-47f6-aca3-d4e5e7faea0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49d92bea-cb55-4f30-840b-98985ba16238"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa008b92-21e7-4071-93d2-d5f4f11146d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc366d40-ac39-4f8f-9234-d2c19bdcf1b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7c62686-8095-4b4b-8c14-5f8dd1d6375e",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75080845-6d3f-42b7-b2b4-7f166ca9e885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4a9a3d3-bfca-47bb-8298-b9689ef54a0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3c579aa-ffbb-46d1-ac42-956f4d7105dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c042ff68-5de7-4515-8d95-fb2a2e62da90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecbe16a9-04dc-4998-af4b-707d0855da22",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c1e2387-b9b1-48b5-a863-6872ac9b29b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ebf812f-c14e-457e-9c00-fa76c082cfb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bb8ef97-9022-423b-8718-ac8b5becac74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "61e41f49-dc5c-4db3-9a40-9fa7b0aad51b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f46ab26-8065-4f97-942e-379ec229f036",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3c68cc1-e3dd-4736-9b65-8d4664c8ffcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd50e3ff-e897-404e-b0d8-a6959c1473a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1452448-8bdc-47c3-8046-e9d49d7a72cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f223fa5f-52a2-4783-95dd-aa7b7f55846e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e24ff50-64b6-4780-8cf5-f4198853cf65",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde8307a-c30a-4c95-bde8-80cedbb7d24a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bdcbeeb-0d4d-4cd3-afa6-7233860b9093"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a21b7b4-9a4c-4cea-bac6-6553700b1366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8a12fbd-9593-4bd2-8d2c-dbad42e4d7f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f171b37-8d0b-4498-ba86-c61fd9cd3c8c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "824fbd47-7b1d-442f-9d7f-8af32d1f1ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a06fb1eb-3d86-40b3-b578-e4ab98cbbbae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8006455-056e-4dd2-9bc3-602bba2a4d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4cf99bfb-a3f4-4d66-bfa4-8cb8887a1f11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b55f51c-85d7-475d-8506-7f15d8fda411",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8da0f7ca-b085-494a-9f46-65cf6f517cd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "24f38943-f7e7-413b-b722-87948021d5e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5abfb6c3-44b1-407e-9d20-be3214ea76ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "94f7d6ae-7a3e-4188-a87b-5b1ed52a0391"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "16f17c84-1409-47d8-9207-be5626529ccf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "83d7bc9c-3110-4240-884b-f2651b289f81",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a9d3b9-d4ce-4300-ac9e-764a91005cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "99c2a3d6-202d-4f0c-9e0f-bfb32694c364"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "221bd694-4e4f-4be0-a6a2-9312418c60e0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31cbcbc1-8f40-4744-a73d-1a3c9ab46459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b73762a1-490d-45f5-b5a6-04fca11d2019",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8afe7cdc-a5a1-4c9a-9743-be01eb025de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "473fede9-8f9d-40eb-874a-ca0a75695d82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3e34072-53f2-4cfe-9c1e-62fafb2f1fc5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "55a32a5f-568e-4133-920f-4240731d7970"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d8decc9c-a0de-48e3-a677-5825774a685b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a19e8b5-b779-455e-b72a-6991678f6fdf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "655cd7e9-7f09-4108-8a0f-4469de5dc76c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e982b64e-b103-45e3-b065-444d5065cab4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7c6fdccb-d8b1-4914-90ce-46f09fe66334",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e24447ef-7416-4d92-8660-3a19262e7c64"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2ebacf23-d956-461e-b574-95ac21d90f34",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9161438c-635b-4678-bc59-258350232ad9"
                }
              }
            ]
          },
          {
            "id": "9062fbf5-d9c3-49e3-9c97-a354ed51973a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b1a25df3-26ab-45f9-895b-93dde2068f8a",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8f02cb29-9d43-486d-84f5-54254a69abd8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cbfb025e-1777-4a3f-866d-79d20d59777e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "14c5b401-4e2b-4c15-98d9-771f48902423",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "aab7f9d9-517b-4386-9bbd-e47152446c82"
                    }
                  }
                ]
              },
              {
                "id": "957103ca-849c-42e6-bea8-abbfb45ceb61",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b12d2fd-1413-48f0-ac57-f1719ef65b03",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "92a87a0d-ed05-43c3-b44d-b3db29cd4f37"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b4c314e-5279-4b54-b513-c1f657962ccc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ae3ea116-6f39-4298-b34b-05d9d0540067"
                    }
                  }
                ]
              },
              {
                "id": "db90079c-a027-40ce-89ab-20e1fc48d85d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "12cf293f-226b-4441-9ab8-f07d06041efe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6ae94999-7789-4e9b-aa7b-ef4b31ed4d4a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6579b461-af54-41b5-b9f8-a14d1c577093",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4af965b0-6def-4884-8a95-bf3c971cdf39"
                    }
                  }
                ]
              },
              {
                "id": "a782920c-0534-4ab5-8385-d028cb3c39c9",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "86eef5a1-1734-45e3-9cf6-ccc767e06c7c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1ce3d23f-966f-4902-a893-0aee96bfa4e9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aef981be-b122-4267-815c-1c218b0144ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "258dea60-d0ab-4352-91ce-c1badcb1adc3"
                    }
                  }
                ]
              },
              {
                "id": "c09bb49d-0546-4b9d-91ee-352c87806735",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d728fbe6-df26-4c1a-b24f-d0b189804c5d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b62b4834-8c9d-46be-9286-1d8fe1ace219"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9319ebd6-524a-4875-b1b3-c9969d43e7b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "e6444e3c-c13a-4749-b4ef-25299891b57f"
                    }
                  }
                ]
              },
              {
                "id": "c242220b-7dd7-4b5a-a260-5ce5d11b5ae4",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "713f010b-d252-4b0c-a64c-7b6a1fdad917",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d2bfac49-6ed7-4a9a-9256-73504105ce03"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "577aa7af-0950-426d-864d-011086848540",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0bef1650-e70c-41a8-983c-a33f7a9f3037"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9026d5da-a46c-4fcc-b117-ca7da808a97e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "acf517cd-2238-4ca9-af5f-a6a20443e086"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "91f008ea-69dc-4310-aa93-c55890fec594",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a48e9216-7348-4973-8fb3-3bb40c5625c1"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cad85c64-23ea-42ab-b353-2b00030c5a09",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "18560e97-383b-4257-956f-0e483ae794bf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c2816c24-5b95-430e-bb29-de1e7987d2d5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "843853e9-b458-4426-8564-37503e35d04c"
            }
          }
        ]
      },
      {
        "id": "40654017-f660-4bfa-94b4-e55aa304336b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "497c02a0-084c-46fd-9b30-006df8d21eda",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7d1a4477-ae8c-46b2-9f34-719da16cc49c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bc4717d9-1139-48ed-b595-cc41e357f650",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6a14e6d-621f-4efc-8e6f-c2d2672e92e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d513dc1-ca5d-47ba-ba24-23d49bf4fe11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a118554e-6744-4ea0-83c1-c212797accaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e28bdfef-6d29-416f-b95e-f525ae4a668b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b35f83f6-4a1e-4940-8d6c-1eb4dce1f78e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf051668-1f3f-45ef-927f-baa480157a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fa5610f-8f89-41d3-95a5-65935164023f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c06f0098-1067-490a-ae91-008b8c2cc149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5bfd412-9d6b-4776-8111-9a540e48bd79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34f23345-6da5-460b-8e8f-1cd449f16c1c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6dda0fa-e3cb-46dc-ae66-6d08d76806e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfa8fe8c-d979-4571-8e7d-67555c694faf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3718c78f-32b4-4502-99a8-553be84878c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b867b8c-006a-4441-b8e5-4e9ecaa7e228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63f81cd3-172b-48a9-8482-6c255431967c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9ddf01d-68a0-470e-a9af-bd06993de53e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d5cc55c-2528-463a-977f-f4a20f842833"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e14309-b0aa-4431-992c-01821e5e920c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "38793f6c-5eeb-4d13-b1be-227ee57c0d14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c687c58-e30d-4826-83db-00afbc7ab349",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f7ee8d2-7f59-4b9f-8854-0c94be91e9b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75a9730b-ff10-4218-b463-7489b9362d8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "925fe9d2-ac24-47d2-9759-35e9edb7eeed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5543eaa-e6bb-4977-a0ac-27f57024893c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "486e4dbe-5e66-45ca-a2be-f37e148296c5",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35c6a26c-72a5-4946-86d8-9b713f62fb69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b9fb462-f28b-4dac-a035-b3f365517ba7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a200e417-3e1c-429d-952b-31b7c15d7f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cad6ed8a-e235-4343-9558-7908eeed751b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b7b62ae-ae22-423e-a799-2b796d2447c6",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c6a9e6b-589b-48cb-ad22-3349b0357cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e97cf26d-2327-47ab-b4a5-03d49d63394a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59540d03-3424-4717-ba45-bfa0b126cb8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "585a9945-7e75-4e28-93bf-7bbd32df22dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8e6bb59-5ae4-4fde-b754-34740c02eac8",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fc9d854-2ce0-4e4f-b9a9-bf2b0960d36b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8acdda9d-df16-4044-a2a5-7ac7730234d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed4831e7-fcaf-4bd1-8763-0fdd2bad3cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab969ec6-9442-4d8f-a2e1-63f6011ecdc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be7289ef-064b-4db0-a91d-693e2e1b2556",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7f79ca2-c6d7-405d-af28-02e2d9e760a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e4f8130-330b-446a-a87a-953f6d50fbb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40c38d1e-f328-4d65-80fb-3751fcfba072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fbb316d-9e69-4858-9f53-6d0468124a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e5c2ab-ef62-40d4-8547-e3be5a32cde2",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d978ea-dbfe-498b-93ba-f5776d2aec8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28ec38f9-0a0b-4fd7-9b7f-9bf25adfc909"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b43cfe20-1e5a-45d3-856b-1cd0619f1fff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e8d90b4-9d0e-4582-93de-b1396b6bd241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93aedff2-05f8-41e7-95fb-0b852f66ac4c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba39f100-a0b4-4d47-ada8-2ba78ac55316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0d96b2c-f7b7-46a5-8bb6-e6cf1d2a5673"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c3a10c7-1f7e-40f3-9859-bbfca2bb2e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2b503bef-e80c-47a7-9cf7-7e2d73ed89e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30fcc827-fd67-4564-a974-65b3d8140419",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffdd3075-0dc0-453d-ad7d-e96dd697f788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54fc103a-69a5-4a03-8117-5cb9175831da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3230dbdd-31e5-455b-a6bf-cb013d99edd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "db0dec0f-f898-4a72-b684-7a5ba37fa08d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f9ad65-1f7c-424c-8b55-5a2cc158c968",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37f326bf-67f3-4ee4-904a-e7ccf5a92ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e55cf084-7e42-43dc-a77c-e06e22a875be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8899b5c-569b-4e43-b81e-4cede83be05b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e05b33f-7954-4bd2-a9dc-bfa7c57cf714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca32a8c6-9b4f-437a-94ca-ac0e406366ad",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0deaea2c-deaf-4667-b042-efd97716058d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b1ebd58-40c8-4a5b-874b-2b56c84a8156"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ba3ae4c-3f7b-4e57-a802-5f4ee75babfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bde7fca-1cee-4991-9f29-618370204f89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c4404bd-26af-4450-81bc-c4630b6483e3",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77a67f5a-ff53-4954-aa39-487e0d03d9c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90837781-f7b1-4b95-839e-35752ba5e296"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a2ed9c-b63a-4c98-bb6b-df534e250ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a522dbb2-2c10-4232-824b-3851185a10c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4c7580-1a45-48a4-8999-44387594a9c8",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76440116-b18c-49fd-a73a-33203f1b757b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b17c6285-33b3-4150-8c1e-90691ab9d8ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f05e146-9cd5-40e8-9cff-fc7990cd0b12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa0e4c7d-1196-4dcb-aecc-0d499586f3f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d30d3f6-58d0-42f5-b429-14a5da0fb302",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42b6ad03-00ca-4b13-b9fa-a741b1a3ceb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90cd0af4-5cdb-4a20-85a8-df9ee46e8dd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cd6c34f-3ce1-468d-b513-d81cad52b343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "271aa86f-4f4a-4c46-ad7d-df36fb2a05f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50b9ea93-5f99-4f0a-b329-875fd267d8f6",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93b8015c-9fc6-44e6-905a-d052db7e6a6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0047ad62-ce3b-48c1-ad11-ff018377cad1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a332cb2-4c53-4188-aa9a-3f2b2700c3c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed421560-2faa-4f26-9009-48b390485833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1001f840-90da-42f8-99ad-56f6577cf397",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d06856f6-7faf-454e-ad35-3b807a8170b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b226e9bd-4722-4ed6-a141-8b1a06367748"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcb7b220-1907-4f17-ae1a-b817c2f34519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de0a91ae-8890-421b-ae4e-57a8c4081e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b537a28d-c9ff-4079-8903-ae05b82ca943",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4123f8e5-2024-473d-bbce-0680e5056b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d7b2303-da53-4dd4-b75a-facd1597597a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e883f114-6163-4525-a723-1ee7cda6a09a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db37be65-796c-4c9f-bcca-9fed7965bb51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b193db9e-a74d-49a6-9fcc-1b52e3d460b9",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23ad2a06-5921-441f-b85f-0d1699af7963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "690f729b-75a6-4e74-988f-348b48982d22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67aacde-5b81-4e98-806c-fd5fe3a08ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "467f637c-4f57-4274-a9ab-1d06334604a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ae5a8b-adac-4eff-b05f-c90d1e185e6f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c0a16a-4fdb-4795-ab6c-e4b26f1355e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ef49af3-e0e0-4d5f-aa4d-81505cff8e73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f79c1e1-bcdc-444a-ad6a-26e7f03ca71c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e5d793f-1cde-4f2b-8716-fead7e11d320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edf6ad92-058c-4580-a58b-99a036796f55",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce77d01a-1d35-46ce-a637-ffe41e9ef0ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4afca320-37ee-4d32-b98b-36fd70c33599"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "198db984-6108-4123-95f6-aa5632fdf696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70ac81ca-f1ed-457a-b7e3-4159b33e7836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c43f3bdf-a232-4e3e-bb75-0f069566171c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe7fcd3a-ca85-41b5-a09a-d4ca89e76165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73325976-3456-4493-991a-2cc09cf51b80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b4215a6-b192-440d-9e1d-17b0009ba6ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8828c6fb-9056-40d2-93ab-58caa1e52547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2be5fe78-afe8-4b78-92bf-20e46caa052d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc527a6-44dc-4f7c-ac1f-62bda1247785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3be5ea0-2909-4216-bb44-3fdae1bd3536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "011b8f90-3a3e-490a-8d15-bd8bd8b73e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65fb73da-bb0d-42a7-98ae-2cd5ef02b7bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a73525-8c05-4a7a-9508-ca56381a5c93",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e6dfc3f-ffa9-40c5-bad9-113b5565b5ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c338f05-63c7-4879-8b33-4d89cc41dda5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b3faec5-2653-4ad7-bf42-756e7a218490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b05ccdd6-34a4-4fba-8e4e-995383ee32b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cfe3cc7-95f0-4c3b-8d52-1f49b51fa131",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b68b00-f858-4363-a5d6-4b1eaed1e7ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64c03807-ed9a-4e2c-ba10-9d9c8a87b274"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe33b58f-84f1-4209-b14b-d4136cb1c5aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d02c2e16-3470-4cbf-a744-aefb7254fd1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c898656a-23bf-4e82-aa68-9c7fe0714897",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbb6f934-b99d-419a-a2e9-29b124122ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39f09d55-0725-4f53-a77f-29831e55895e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65cd968a-6102-4dec-906b-1cc42644f199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8aad6ac6-d46a-4acc-ab73-4d1dcff07c24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab1c12dc-c537-4045-a9fe-f396011af015",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e7f6f8-2046-45a3-b25d-3fa027b14794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6d5347f-d622-4db1-8f1d-e65f2c586de5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85e99256-f4c9-455e-9afb-e1b5f34b1bdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe5e9bf0-f661-4239-9cc2-abaa6f14680b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51aa34b5-ca9d-4733-b30b-527a2543878a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c14f277f-7e71-438d-83a7-72b0ba610f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e81d06fb-9842-4a5e-b81d-7fc9ff40e193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50d7328d-e4fe-4d2b-9d1c-4f14d3754c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a38b0be2-6d6d-49cf-9a7a-c338c3e69bd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99edf1b8-5631-46b2-a347-9bcc8e469422",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe6b6d50-b269-44f7-907f-932c6839e6e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5622a5c2-afdc-4fad-80f5-81b0ee48e6c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33133a88-4029-4895-82b9-9609c29429d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75b1195c-7aca-4691-8735-517d8cd530eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2844a969-ca3f-4f53-b9c1-fdd98fd6817f",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f92d734-6741-4035-9990-d0de0eb11025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40ccb555-0b2d-4149-9cb0-24eb74ea5eee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da893a18-c7f2-407c-a19c-60a446890a92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4c2b585-e563-4b30-84e4-c1ecef2771ee"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "eae6f288-8c46-40af-9b0d-00b60aaa804a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7deec117-15ed-484e-a95b-f26e0bb5058a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ec7e03b-3d0b-40a3-be59-fb622299d1d2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e85a88ce-a48c-40d9-bf4d-0cae27430332"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c2cd9ef-8e85-486c-9435-65fde1bdc9fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "94ec08a3-1277-4867-999c-fdd49800a959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e662d26-adaa-42d7-92db-521bd85db7e0",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a23a4ed-37ae-4266-bee6-28ba5a79b996",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9a169349-abb1-4e4e-9d56-a94d52a9accb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb4899ac-47b0-4458-82e2-19ea2cfbce0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "de4fb508-97ed-4c6f-b6c2-c855098ec756"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef9c2e18-bcc5-4e9e-b39a-a2913c3dae55",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "894a1c23-e28d-4b1e-9cde-fcb641d5f57e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "55b7f797-e6d8-4b29-991f-5d6db4e6ee8b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a87c2205-996a-49c0-8ad5-5f5704091b5a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eff9ac99-8bb8-45cd-8b84-a7028af7d4a4",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cc50300a-7607-4a91-bf77-f3d0b24b6cd0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fd29928d-8234-43b6-8cd4-046cce8e38d4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d39a6f60-e402-443e-b6db-04f00318345a"
            }
          }
        ]
      },
      {
        "id": "6262caa0-ea1c-4141-a8ff-d1e727a0cfb8",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "2643c658-6866-495a-b21c-947afb210d47",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1eb67102-3f0d-4c08-8347-7aad0e704058",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c1f000ee-a826-4c46-8dd1-5c095afd2020",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b24b0ff-b6ae-4cbe-8aa4-e987e4236fed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afea5e3b-6922-4189-a390-14537651ee10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a591e40-46ed-4ae8-b12f-2470731a6d8b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5206ffea-7c0c-4348-90fe-1922dd48d7e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6654fbad-cbff-4462-abc4-11ddbf638d6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "768e8d1e-3b04-413a-874a-7ca05c329393",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b807eeb-5504-4d39-8f22-3c00f60a04fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f83038ab-c93a-4a6e-a919-d12920b7d5b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52f6e32a-b06f-4946-8558-ace21ce884b1",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdfbf02a-937b-43a7-9da9-5b084c4b91b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eab86d1-c1cb-45f5-83c3-c18cb607165f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fa2fcb3-2411-4ccc-83d1-e6a8e53eec42",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "498b52e3-d365-4ab0-a226-9e1e4163e1f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "650ae902-3578-49a2-a6fd-49601d22a089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b7e539b-ff2a-4aef-ba1b-5725f0f2464b",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "527783a9-8444-4b12-b1ba-78d503efda8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c3cee8f-27e9-455d-b6f2-ff05f2ac3cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e8fac5d-9a24-44e1-8cd7-e1e0f185181c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb5689c5-2021-4abe-9666-d5b8b34d763e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b422a4e-2a5d-469c-9968-5441065846a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de4fe661-2f77-4965-ba1f-a142a84eeb39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8f34555-4823-40c4-a8f5-59c478770563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c34f546-9f46-4fa0-937f-08ea069d2b5d",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b2455d8-7366-49ae-aac8-2be0f1c1487f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38841f60-c516-4988-8c44-c83fd705557c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca1bbd04-77b3-4a6d-a23b-2d6a02a9d678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96ccede2-891a-4eac-b97d-92bc1cbd3aeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edf8ad11-8d55-40cf-a6e4-249300c466e3",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9cf1538-4721-4391-8e41-d366b98ddd44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df5f1e89-891c-401c-947a-abe5d16194ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbae6914-42f0-4c66-bbfe-744fc73a85b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f355b303-9b19-4acd-a199-ebd4c1d64346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d28bb5-c971-4750-96c8-48663a699ad3",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d691407-230d-4a30-ae0e-c006fd86429f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc4d0efe-2f37-4f63-ad0a-82f7de914a1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dc4d963-ec39-467d-81eb-bb7d431f73f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "700d9c86-95b5-4ccb-a01d-3b9bdcc2d534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa64e13a-808e-48bc-8644-1f7a2d8f3cdc",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49513ab0-9009-46d1-8b85-e4cc89ff6c80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3687054-eb91-4100-9091-f33ab281330a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8514294a-7f44-4505-b6f6-747c0e64bbc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0277f086-9e20-49e3-9950-6dd54200e8f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b72483-f34e-41a5-88bd-87bf2e79f77e",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c688e2d-9bc9-4d89-b934-4bc55cfc8646",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b65d4384-8375-4616-8638-551e111fe58d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5ce458c-92db-4b77-b0c6-c7e0b9cfd739",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33c722ca-2b74-4b10-b6a3-5109d05ab738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e04b303-e9e6-4b2c-a84d-ccc94ac1927c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05b72070-f6d3-4cd3-91e1-f9fcadd4e28f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d51924e4-7a28-4a97-8af8-ba5f42c7cf49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "800cde5e-73aa-4d1c-acfe-91474ffedd29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edc50150-67ec-4879-9fef-ec7af2f3bc97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0406cfed-01bb-4c74-9864-4c907612698d",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5216d1a2-d862-4b26-a1e6-68ef1b06cdfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07b6c048-1e38-48de-83d6-4a3fddc044b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3025b2ba-d439-4626-ad6c-84397b249690",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d1186ee-abc8-488f-b852-2cfbf3c73aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84615b80-2fb4-4dd0-aaf7-8166b8c3ca6b",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a402444-23ee-49b7-93c0-1450c0fdebcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f3259fb-e717-4535-bd92-ecf3e74489e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e9b13df-84dc-4edc-bf3d-cc0072766e10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f1477ee-3ddc-4389-a72a-c5e84528e648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45514134-ee18-4e0e-b585-1e2c2f14ca7a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a8eefc7-19b7-4684-9325-f7e05e06e4c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d83be08-df9a-452a-b6de-10f494447fc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3e14ecf-54c3-4919-a6d7-ea37988e66ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59730974-52e6-4d58-bd98-55ba3a03dabe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44cdf453-3467-4e11-9277-e62147681c96",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d47c377-4b9a-46bb-81a9-e80d4574a7f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6715293f-a97f-4899-97dd-10a6e83914e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f71fe0bd-21e5-403b-a8ee-a0d3181ddccc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d26a8dc0-ac86-4256-b72f-cd6551a2200b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bf4e11b-5e67-466b-bc13-5b7e2dd3e402",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08031133-e389-433d-aa19-136278724028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "798d562e-79c5-4d8b-872f-845511fd392b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "114a3bf6-ae90-4cdf-820f-f88481ca5a66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f9a184f-8493-4fd0-bd93-b09c8d44099c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38d0de39-ca60-45c0-8cb9-2d0577af5149",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a040353-141d-43ac-a9ef-c4ff3f4229cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e56af17-c3df-4667-9083-dabac1c16d89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a6389e0-5249-4072-afa2-1226c1e4a5ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3bb3019-aed7-46e9-9209-fdb85e20fcc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7142c90c-99c2-47ad-8a34-8ec23c0d4b41",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b9fbe1f-84d9-4893-b700-c4d1f0261286",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b21e68c8-08ea-4389-a1cc-56c1b86910f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "041d04c9-3b33-4b26-83dd-4fb4ddb07b3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b256da5-6de4-4e0c-bf62-b869ef78a6cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d17f4542-bd04-4047-a66d-26cc0440d658",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4a512cc-ad38-4a4e-8da6-444ec4751151",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28af2f3c-c578-4b46-84fb-b9fecd619122"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef8a39e3-5334-4d79-9c60-e1db6e57092c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48b983cb-121c-4c87-a414-77ff6f84e4d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd9b90f2-4986-4d13-8915-0bf2ecafb863",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cf79347-c6c5-4654-b41e-32ad5c06d5a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9185b539-a652-464b-86eb-0bb85df89489"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa1cbc9a-c5da-4d9b-8ff3-8b21eda3669b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87bd5983-4a0f-488c-ae7a-b41a346750ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bebe849-2440-4aee-b8fe-6ba1088bc17d",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "814f6cf1-61bd-425e-b38b-619adf930ee3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "913329d2-62c9-4000-adef-e76d7e6d9dec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16555c77-eb8f-4699-a66b-bdd5ab899b28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4f7c327-fe19-47d8-9abb-fb30d9df0881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0e6e5ef-4a88-46c6-bff1-32392b274b2b",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e42ffc3-a094-4ca0-b754-00f24f2397fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b36741ab-f544-479c-b665-5ff5698cc89c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a990d37-438b-4ac7-b045-3d27980119bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a4cad80-7823-4d04-ae2f-bc09a1f4be96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "675b1b82-f767-4fe5-90ff-b3b2b94b0fd6",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a726696d-93b2-418c-9842-ff39e21f6dff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d50c594-d68b-4452-9c99-bb654a536f25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07804955-34c6-40c7-b249-b93511532501",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24fff236-794e-4470-81f3-639f065ca452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "739eea95-35bc-4782-8b09-89b87522ae77",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e8cdeda-18d0-4a54-a2d5-4951c13de17f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e9a65de-fcd6-4d9a-a390-9f199f218a6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "221f1127-35eb-4b9d-a7b0-1b7fd4988cb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e33c1e8-d46c-4278-ae29-687a7acf1b7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73583295-b852-4260-a179-edf0b329817e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a5f0d6-8822-4817-a7df-d2626bbad80c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0684c398-6be7-46bb-b263-91b9b235137b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43f8b2d7-5b67-4228-a8cf-3875fda0137d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8b9cefd-8540-48bc-b882-203fcb0679e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7312cc32-9a20-4b60-abe8-dd4a3bae6652",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3491aeba-da7d-4cb1-94cf-46b6e3662c60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d741c6a-7d0e-4156-9a85-9710cbefaf7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfafedc1-ffdc-498e-8665-f8a0ed7e7752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f1d5e5f-358a-47d0-b1f3-0c0c83bad20e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c0cafc2-c66e-4c89-a328-d7eb7523f12e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc96af11-73ed-48d8-9e0c-d0679460912f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41adc317-b4b9-4392-bcb7-0726cf2bcbb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ae69d98-a7a1-453d-a57d-7ce241ac0643",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d355a33c-4c70-484e-8e7b-c304394f00ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d344cb6-98e1-4270-86d9-4ae222b9a0f9",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38d6ff71-af41-4780-9800-cc28a1f1b519",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0519464-51e3-4c50-bf40-47b1543f7f96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8133d32-b069-4ae7-b6b2-471d72ff0c79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44bf1431-bac0-4ca5-ae8c-583df7a36c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2584dba1-5af8-483a-8df8-50d481227574",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2428b7c1-da16-421c-88b9-22c5d215f0c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ec44c14-229b-4381-a7e3-e15028ad8ca1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d4e3c11-2ddb-4029-a459-8a7bf7256f81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cf42e50-1ae0-42dd-b0a0-ee5923194aa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3075b54-97c0-4bb2-9c73-cfbfe90af3f2",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b09df032-2766-47ce-9058-002d7c88f9d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5847473-2ae6-44a0-82ee-3619f0c72382"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e743c8ac-bd30-4f43-a56f-d040540e95e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab5ae37c-4633-4b9d-b529-97d668b802d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb116f46-5be9-4c2b-a873-1abf09b99b3e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9182ae77-eebb-49f2-beb1-e192090ce7a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4701d249-ef8e-400c-b935-e9ffed571670"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edc7c5ea-1541-4b25-afd9-adc011f3e81c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e08e06a-b780-443f-86c5-13e55aac9b4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "106cbbeb-092d-47e1-b452-0d07bca8987f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e3294f-0206-49b2-b173-e0dab348b70d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bdebf94-5a09-4ff2-9600-399c850f0c64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aafbbb4-0c4e-422c-925e-d0f82d0bcca4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4950fc62-451d-41fb-8b67-84b2105deaf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a615944-3e7c-485a-b07b-4e4e6b9536f5",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83c7dcf9-5204-4cf0-94b5-0efddf8a1ea3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28c1ca2a-59d8-4768-bf07-578fd2ed7752"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "660b9ac3-0a26-4f47-b573-f6ff126c2318",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "573294e0-bf86-41e6-9c5d-701cc41dbdd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9031f05c-fdf8-4f4b-afc0-a8eb84ffeeac",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95428c65-5d05-46fa-953b-4654c083e2bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5a43c95-2a86-4516-8126-8961f3159980"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e72cbf-07b5-49bd-a281-48167ccae53c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa38fa56-6d14-422d-9bed-ad70eea5de9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d8a698-7305-4027-bc4b-26b83a59073e",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12ca96bb-9517-49ea-be04-65a2fe8d50a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5ffdacb-f716-4ad4-8aeb-203dffa8d4b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bce3e0bc-0556-4b8d-9e19-59c6aad50af9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdff74eb-884a-4132-9f60-f6d3bd978fc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b2a20be-19c8-4517-9a95-408d2793e01d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ec9303f-66f1-4505-90b9-bc522e151483",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9016078a-ae74-4519-aeb2-73db57717785"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c50b79ab-c304-4bc8-982d-998c7e04d4a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d5296f6-540e-4d30-9f2d-4918d3a3c730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9d69139-381c-45bd-8f91-4fe454d4a013",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "628e339f-8453-42e6-bb0e-93cbadfcc193",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ad54d71-856a-42fe-ae55-32b2e3a0e6a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60f6000c-dfde-42a3-8088-ef3e568ca68d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8ec4c88-2259-476c-915f-1153b2a45baa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5de9ea0-02d8-4192-9627-f1634747b47a",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e7c5013-40ca-40ef-90be-65041ac5dacd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6855a4c-6c0d-4bcf-ac42-cbda73e85878"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a6bd8c4-05d7-4b5a-8a0d-a474f1d69368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad810f77-eb78-499b-8d16-28ccd9840338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8648927-ff76-4fa7-8204-b82ad2781daf",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1072be0f-c9ba-473e-b6fa-6ed94556fa73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "964a46a2-da73-4d8d-b60c-ba360d883479"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0935f9d-5f11-4ccf-b637-c3fc663f859e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfbfb1eb-25cf-46c6-9ab7-a1d3a5fd2068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc21a266-d0fa-4fa7-8d4e-1f89a1cabdea",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25da1f69-8985-431a-b398-6efb0560f1b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5d0cb6b-0764-4c9f-afbc-0575bae724d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c24dea6e-7357-4f9b-a783-b6df79b76a19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "122ba179-c43e-4234-a17f-b457c78a1ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27a491a5-9f98-4c35-9439-566d6d9ebb5c",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0a08f98-6b3a-486c-bbca-f5dff95ed52f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cab81b3-1330-4ea5-bcf0-703a80c16439"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "993b6e64-8289-40f4-b5b9-6cd7ff9aa2b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0846fa62-0fef-425f-a329-bab20ceeba55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f38c103-9e52-474b-a6f1-97c906d92cff",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d167c35e-1874-417a-a3a8-1b8345b91804",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce436206-fa96-44c5-9849-5f98085e22be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "182005a8-2c2a-489a-ae04-4d0908b9b9fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e41a65e-1a03-4cdc-a483-bc9374ec823a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6281aec-c343-4097-a797-c61a9ecff15e",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5718c76f-40e5-42cb-8cac-fb3234b99efb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5deb6221-66eb-4ab5-9675-ec0fa9ba9acb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65aef9e4-ed9a-49df-8f62-390615c29324",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad164fc1-c822-4e8f-8bf4-f7843542e0e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66062648-8dad-4861-aa48-dbbdb5c2cd6a",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "323c8357-7c8b-444a-abe1-20ba53fb18cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34944e39-c57c-44bf-9e6c-05051e8a7d45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c00492da-7c84-404c-a11d-a7f8c6340979",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6263e1dd-cafa-4b83-a30a-193f974bb600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a538d78-4ed3-4a40-a9c7-1b6f6256ce3a",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "216c7e28-726f-459e-9e07-6153e0be6daf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "059adbce-6c73-4015-b833-4da7ef7fb653"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea527e99-7d42-45b2-9f7c-0b0fe86aa4d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ab8b00b-26b7-4ecb-8516-f6d2892bbf40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b264d5b-7cab-484c-aa2f-1a4d6d5533bf",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f68387ed-403d-4992-8c43-ab3c91cabb8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28269601-7149-46f4-bda0-79601b223dd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0512731-dd1b-4e1d-85a6-18c150019f31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9da9968-cae3-4dfc-8b8e-16a8378c0b61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cebc4df1-fbcc-419d-b3cc-58549f8ab077",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12bd3055-123b-4876-9e6d-807e6d550926",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d478afd5-d86a-4436-b648-7eb4bca9f773"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a0915e2-079e-463e-9840-712c959779c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92505aa1-615a-4be7-9a59-ea3f29a7ba5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29ebe457-78ab-4b85-bbcc-f067cf606c44",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df658786-f5f0-4210-9d83-0d9f0b9c7737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59df885a-72f7-4d2b-a229-02ff4157873e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b551a331-1248-4961-975d-bb8533ce4c24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a11a2eb5-d542-4f60-87c5-8008915969bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8538254-6cff-4161-8adf-eeb6112bbd3b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ced8c666-6952-460d-b5ed-abf5b5e886b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31a53af1-0dc4-4693-99a1-a417a5e9afd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a11946d-5ac0-4d41-a4f2-54b47418c047",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7eb8acc-45c5-44ea-a0af-c84837e18e38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "176aaea4-1848-4bca-a26e-9fe36414f8c9",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f18fbea4-3404-4060-8f0d-6b353376a362",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2331997a-911e-497e-a812-a484042890d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b052438-56cc-4e99-9c77-46afbe30e38c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87ae0816-7ae1-4f87-bfbc-138b16894a5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd243771-5748-447a-a545-50f6b3f317b8",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef42936-6bc9-4e0e-8f47-7dd52d910ca8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f399a3c2-9932-4ee0-8176-7fa4d7cb8d8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "527e08e0-bf9f-4f85-b6c1-d256fdc6bb84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc1b672b-c634-483d-a611-4bc400e30d47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86b1e730-e45f-4c07-aed9-00c6f581d837",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75ddb673-acd8-459c-8fe1-a2af3ebf25b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fa9b989-8683-492f-a204-436a8a5b3ba7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc7fb76-0a9c-4cec-bbc3-86c28af56cc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a1cdf52-ec51-4fe1-ae79-a648a7592ddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73343f3e-7988-4499-bb7e-14ccee3dbb3e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "566b74ef-1ed9-4fcd-a6a1-836827e8a600",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5a05693-abe3-49ac-a9bc-2ac56d4e42e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bce0e81e-49b4-42fb-b8e5-27effbe09e6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c73c653-694a-40cd-87c8-4f2c33796ddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3418e82a-d8d4-4f87-bc3f-75430c009085",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc32adc7-eae1-433a-849c-8e12ed79fe21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "373844f9-bdb6-4116-8d99-9cb64090f07c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3716e103-dd13-4812-abc0-7bed956cedd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d27a5a32-2aa5-4c0b-96a5-ac968ae49f59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c0043fc-e1c3-4ae5-b06b-85bae94a4151",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "018ba971-1ae2-4019-8e21-cf2aa3880d6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcb0708a-6ac5-405d-b0c3-00035d2aaa9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad8a31d3-1069-4ff2-ab24-1d563c314e78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06c2e1ce-8715-4e08-b14b-90cb0186884e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "937a477b-cd5d-4585-a59c-6c9e40d3a269",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f14d6017-2d4a-4e82-8b5a-ceb612ce0345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7152ac9d-49be-4f35-bc50-ddeb61432a7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d5980a4-8603-44ee-8568-9cd23e735568",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fd2c735-2a78-4b9e-87a0-ee2b31b8e959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c62db87-0a57-41cd-9d38-90b29416a39e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb66723-97e9-424f-a760-ba316952356c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8afa1f36-6188-46f9-b7a6-f1725c08a8b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73e84d6c-5071-432d-a5df-5c8c59f1eaa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2b3c2d3-5ae2-4db6-949e-81c50cf3142a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccb7aa72-3154-49fe-99ff-563ef043e30c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea906dcb-c246-4db7-b50b-f7d963d0f829",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d585004-1f7d-4ce3-afa8-f7bc38051936"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f1fc0ee-6182-43ea-a4a5-5991c8125db2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "312002eb-397c-4cd8-a3cd-75ee614c8646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b22ac0a-5e1f-4d65-a461-6a4595cafad0",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66d94569-1861-4cb9-b767-1c447757708a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "847ecd39-e3fd-4d8e-bd31-ad0018c9d871"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e101eb0-8a59-498b-8c91-8d40e2057eff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1a414bf-e452-42e2-9b72-234d40fe91bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da2d8a5b-22e6-4f39-8a6f-f9fc0ce90f92",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23656d59-9270-4880-a2c0-c8b6efdc2a45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5da93cd-6167-40c5-b333-ed2481ea72ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "002b42f4-d2e0-4677-b691-ee2320be570b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "039bce5e-64cd-42dd-8dff-d0959403e65e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "720a552e-60c3-4e45-8a4f-7803f0146164",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e15c1d0-0aaf-45c7-a742-72a7acc3042c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "220da32c-4ac7-434a-aa85-d5e1c48f4e5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f81d71e6-f418-46f4-99b9-7446a2f7c1b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3d8f028-5ecb-4b63-8bba-bf76185a325f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eaa1a60-fdec-47c1-860f-6535d949524e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1211e81e-244a-496b-85f8-932ef1caca0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d552cbc-7ae8-4810-b999-41ac8058a5d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd4340db-deb9-440d-99d7-717b79e17d65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "802fefee-d331-41c6-9cc2-8268d23110cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0de85400-54bd-40e2-8442-35f4016c07f0",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66418efb-b46d-4c04-8746-43e91391961e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5e1974c-30d4-4002-a2dd-37936b5a3672"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb8bc667-216f-4a11-83c6-c8a0f1497f24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc08c947-bd7b-4a57-84f0-de450f171f37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7430817f-e742-4029-b67e-295388137ad6",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d448de9c-6377-4ec6-9083-5a425ab478c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c92a5c77-42d0-448b-a1d5-330c0d5e7bc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "853920dc-9845-4be8-80c0-8e7c704407a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d25ad1d-9c22-4508-9954-030a7acb956e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee75756-d495-474c-9692-650a7132f54f",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e8616dd-6e12-4893-bdf4-6e31eb8b1813",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62b3ac53-19e0-4060-950c-058a1f9796e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d90a6e7-740c-414c-a411-8f0c8476d33f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6b88bbb-918b-47a6-b7a6-ede59336fe9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dfda9c0-04f1-4598-a52f-4acd6f4715f9",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3689a5a7-1898-4b06-ad7c-50731a2bc1fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67197a37-4bf4-412b-94e0-eec85a07ae5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ee29eb2-83c6-4558-87aa-e21fff55c852",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "904e9ae4-a198-4c68-93f6-7efcd26e6348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75ec7659-0a33-4a35-9d8b-86a62a115001",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e311d3f9-7c90-48f8-a4c1-1d5326b6e197",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ace4fd20-160b-4779-8b84-c4c3ff734194"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89c5c179-8053-4957-bff7-ad478e5cd722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcf800dc-aafc-4b6c-9272-898c4d1a278c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "942d0486-f15f-4530-8aa5-3b41be0ae40e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b4d1689-ecc5-439f-80e4-e516f97262f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7a72143-dfde-45f6-9848-6126a192f469"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82bdb3aa-210e-4c24-8a2c-cd2e801fa92c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb63e1e2-a90c-4389-9b2b-46fcdb8993f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c41ec16-71c4-48e8-a2e6-6ecaa6389e1b",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2890804e-2768-400a-a769-d8b23449e19d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5444972-3902-465b-ae73-ae3e29bcaaf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1f382dd-4ce1-423f-a6af-7c642afe7f2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d06c48b9-5b44-4b0e-b110-07ddb35a0049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71911d52-ae3e-4f8f-bd9c-90cf677de659",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f39b7d1-8790-4a57-84b1-6bd977e09f2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0eb92816-3171-4835-b3d9-707d244f8234"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3360ed43-33a6-4378-a919-546c6383cdcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "908aa5cd-d491-4961-95b3-704fd7bbcef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68c73e17-dce9-42e5-b46b-c3962d25d216",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "130697b2-1c2a-4f56-9044-1d9f63b2443c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53d26f9f-c177-4168-8dd9-f5319c1cbefa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c440efe2-c6c8-4141-98c9-7ff74e8e2871",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24d955ce-ae50-4e7f-8e84-e8ac80471d5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4714c78-5060-4d89-9cb5-f0a7a55edfc8",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67d7e8d5-e59f-4c60-bc63-907b6f435d59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db9df356-22be-4535-8c21-59f7149962d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59cfe8d3-0b48-4aa1-8ec0-3600621d7362",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0079fdb7-446d-4d94-bee7-92574cf6bb24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a508e210-2b70-4f27-85e1-b95f8268912e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9c557a7-ff8f-4f89-857a-cdd5e9a43f54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c67f5057-0643-484d-a4bd-c55e9e2b511d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62add7e4-8788-4aee-9346-e3f9a5eedb22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96624300-63e0-4448-a226-57f69f904d20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3539c216-6122-4564-8390-6d0fa73f598b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2ff7415-90de-4d9b-a4d8-76868678508d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3058c8a8-db78-444d-9048-77c5028def7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21a973a8-cbfc-4b37-8093-3b153e5f13d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5714ce6-d122-4736-894d-e969043e8655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f68ab2-adeb-42c8-aae4-7696d4c6898a",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8733045f-10a2-406b-a3ab-b35a15099596",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "982369be-f525-42d4-a5e4-fb5867f52f3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86d758e6-d578-4fa6-8c17-b18d3a337b56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f3d3384-0fa9-4626-9433-2dadf37270e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "116a46ec-9a4b-47d2-8dbb-aba2deb3d7f5",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dba67a4e-5fde-4fb5-85c4-de2bbe441a80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "601ca59b-0196-400e-a531-7232aeaba819"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b648d3e3-7558-43bd-889f-ee9626357dd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06546f78-98ec-488b-9ad4-8a3daed8643c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30db074c-1c17-4cf7-ad25-4765cbb42164",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c86682d0-d3e0-42dd-9ca4-92adceafa34d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3de2f21-5596-4f17-b1ac-bf01fb62d50f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7664b6f-d324-4f39-9465-346ccbd0dde5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d72a487-2edd-4e96-941e-947519d8a5e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab2ab52f-f1f7-45ea-a54d-026fef1c606f",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f43b2060-db58-4235-999b-53e223e4751a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7dc2e5db-d73a-4e53-a36f-8ea696d7a56e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "410f3ac6-64f6-4cac-9735-bc36ef1e4d0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4faa0c89-b2da-4c5a-b159-21108642c0c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f90adf11-0525-47ae-a5fd-143bd2c61999",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "815bf3f0-84fe-4461-8a09-f044557c1a71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57f3b675-dff9-4c2c-96b2-9a9b5766e9f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a8fd04c-626c-4d7a-96d0-2b286ef42595",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "176b7775-0022-4d6a-9681-cbeddce30e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a34085b-44ab-432e-b334-d82b48102070",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "967930a2-8582-4bc9-bc34-729017ed7cbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5939519-4d8b-4e63-a676-2697df2f2008"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70534926-1e49-4175-87b1-a5586010ac04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9df093b4-2de7-4880-97b6-047d0dd6e217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b69040f-c2dc-49b2-9233-a70bae1dc536",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "531b3e4e-311b-4801-82ac-20df022ed08f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2be44b2-2857-4fc5-a6c8-f4c305c0f2bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1154e8a-3ca0-4026-b7d2-20c1b5d2f413",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8da1ca8e-6bbf-4a3a-b9fa-b5d0f46c67cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79c2271c-e557-4289-ab60-916cd652060f",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ca176c7-8049-4829-aa28-75e22b3fc7f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6cff2a8-ea8f-4ccb-b4ee-e5e54edb5698"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df5e7bab-bd36-4346-9c25-ba99a4fb2cf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fca4b43-fd63-4e03-acbf-6964cf8aa211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28c6d39f-d0a4-4ad6-82c0-f2a56691d03a",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb518a2-eb25-4627-84cd-3f1f79f07f66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74ee2bb4-1d28-4601-8559-598aa747013d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "013117d9-ba5e-4236-9e6f-1c88a9c35002",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e301589b-102a-472f-b87f-56c502cd781c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a6d446c-16de-4175-b31d-fbf02c5ce6bd",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6c5009d-ff4e-4244-8743-0536641b86bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf5773c0-b3af-4527-aaf6-2174726ef269"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e34af375-3aa8-43b4-9636-48a0155d6ee7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06ad2b7a-4e09-4c53-87dc-056ebec2016d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "949ef6ab-b6a4-4afb-970b-6ecb3d3b3de7",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e5410eb-d9b5-4223-be7d-1b90c2009185",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ceb6ce07-5a23-4e2f-90de-7f9925d23b2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d8729c-eff2-41ff-8384-b2f0d95833d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "469caa2a-2fc0-462c-aed3-d9972ea82ff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "713d10b6-a830-45ce-9f90-51c8c12b8631",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0368341-f2d9-4f58-9c9a-ed69560631f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cda89fc0-c0f1-4329-abe7-55498226ee29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f6a6e63-1cbb-432a-a657-08fb8ac38825",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a453dafb-384e-439c-889a-5ddb2a7b3bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bb9dffe-7a0d-4fc6-9013-d0b1bb206f36",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceac59d9-8b3e-45b4-a2b4-6d9ae617b3f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe868770-4a49-4de4-b6f4-345d0f7fa910"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35348803-3aa1-4651-8447-0f1569c58c6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41cdf437-5aea-4798-bed8-56284b4888c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b7b97c1-d71c-4c9d-bb4c-a180c8afd172",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b13ce22c-4c0f-4d31-8aa6-a25864d2d38b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79f44de1-7845-420a-b11f-a8771701c4ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d62694f-8a6a-4b8d-9f6e-f7b3d50df165",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b01efea-1158-4965-90d2-9fa8bfabe140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57f048e9-c4ab-4824-93c5-61a166a0f599",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "221345d9-4fe7-4e5a-9aa6-b98d7b7249f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3db17ec7-9952-4a5d-9460-acb616a263b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "affc7cfb-1f8c-455a-9e85-5944baee5d61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a40c57da-1c4c-436b-9342-200a91ccd47a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c41fe8d1-9df6-4579-bb04-4971e5dd57de",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e28bec10-be1a-4134-be65-071b0622c32c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d422c496-3d5b-4ed8-9bbb-40afecab95d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f3eb4d-fa2e-46b0-b0fd-af4056d1be9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb521d06-2117-408f-8231-e23abf1d9b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24184b54-055b-43d0-81a7-d60ebfe1fe31",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb13de43-04c9-4df8-8b4f-02aca1b58f0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98123cc1-4588-4c03-ab5c-9564452b3d8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f11c303-84cc-4434-bfaa-df1932046d08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f043924d-0336-4b9e-8b96-693a84543b48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57bfd943-ec70-4fd4-9afe-4d8c7712a231",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a18dcf1-8841-4083-8162-8360f4c1cc6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa46a892-bcee-4aa5-8952-bb330169b14c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95233015-4c93-4f4b-b1d3-faba4b5362e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc696e0a-0ac0-43f9-8ee4-0f86a438642d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d0484c5-0ffc-48f5-aa50-c7dd1751b694",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6dff0b1-f37c-4b2f-b390-8c914a9ed5af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6256a50d-cba2-40de-9cd9-a010d243b3c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "565eb0e9-1259-4b47-a2cd-617276a198dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6ca8bd1-cdb5-4516-a3fe-2c71fe41a2ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0f1c613-2f33-4741-8c95-0df674a5e9e1",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5471afa7-cf98-4802-9bff-ecb074988629",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6218adb-1969-4e4e-80f9-9e9304056139"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "009b0a7d-5aa9-40cd-bec1-1a02ac2d6273",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d899181a-fc74-409f-8d49-b16ea7a8ec34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4be633eb-cb22-4850-a27d-51748be1c541",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d96cac7-d302-4262-b970-274c626dda44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d8b9256-0d7a-432d-a412-e68c0374592a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96d2e95-1dc3-4572-8567-42cc719f2bd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95536538-438c-4194-9712-3406ffe481a6"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "019ea4c5-30e9-49de-b3cd-296f098a4d67",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "709c9972-79f9-4d38-8565-546aa70a6229"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5c95c05-9ec3-4ece-89bd-6b69a3009029",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "52d01dc4-bdad-4376-bdcb-699aadb12fc0"
                    }
                  }
                ]
              },
              {
                "id": "b691e73f-dcb4-404f-8485-0254e4f4fc18",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "138e588a-c5b3-4ed4-ad94-0abdb6cfd447",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d65d15a-c7fa-462c-b181-76872308412c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5045d043-05f9-41be-9433-c3dbd083964c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "724acf80-6f30-4784-b338-8b5d54c4f3c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e1f61a90-ba44-43a8-b958-da1b5b9141d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16da9692-0467-47a0-a10c-d407793bdc1d",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5168b10a-d4a3-4174-aa11-50da59a3d10f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "338a4351-a8b3-40e7-a520-3ed084655e32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb7f4d5b-b44f-4141-b946-04bc02b6bd7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4790f9c1-8d3b-415c-b209-01442b1bae33"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b8bdf8a0-a276-4a74-b5e6-555f88f74923",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "13e067dc-9ec0-48c9-9860-967fcedb57c2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dd060bde-186f-49db-a465-33daf2dda822",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d6b1e52-a575-4abe-98fc-cec78258913a"
                    }
                  }
                ]
              },
              {
                "id": "d7ca559b-3020-403f-aa80-7abb0c25e0f3",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "2602c2a1-a48a-4ac8-8ef4-994e74aab605",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20dd2b74-caa0-406e-848f-9f6348296ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "69b41d3f-da7c-42b8-9d3b-2595a0117a4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0655cb79-b61e-4105-99f0-baaf9318f6be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96c701d6-c2e4-4166-b5dd-7eb160ee6b15"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bf29408b-3baf-418d-ac8c-efbf54f54add",
            "name": "Positive Testing",
            "item": [
              {
                "id": "43756b26-31f8-41e4-8eda-a5c1bc5860af",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5894b6c7-b04e-4bbe-86f4-b3850a89354b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1605ffd5-64bf-419f-a91a-add8c85c59b3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "46f614d5-de0b-479d-a3d2-96c5fc63b847",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4844042-f853-4e82-bdcc-f43f3c308217"
                    }
                  }
                ]
              },
              {
                "id": "fe0df771-468e-419e-9bc9-89ec3586b57e",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6e28865c-47df-4572-a2d6-67e0fd9c6dcc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "66c50184-583f-4124-955d-22b1ed72fd36"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f2041068-30c7-420a-ac6e-ed4fe8c3997c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b1984419-9fdb-463c-9f9d-cb158d12fd1d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b2c1b470-4a4c-40ff-88dc-db3cd8a0b72e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "efee6138-acf6-4f70-8faf-be38bf59551a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "54137e94-f475-4a09-9c8c-4cd8e1d1d0cf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "663989bb-365e-4213-8ac2-dadceab3aa5a"
            }
          }
        ]
      },
      {
        "id": "759c3ef4-b8fa-4a6a-a629-0f04252f9c55",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "dd1217f1-fdda-4695-9185-e6e19348ffa8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d92cc908-18aa-46c3-825c-f9c2737b1f4f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "feea25bb-8e7a-4a91-905a-67a5fedaa338",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4331ec4f-6afe-435f-95e5-f2e6ee4aac33",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "11673a04-900a-4d5d-bd4a-272260c059a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe44948d-a4d1-42af-b216-00507b37b286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6aa1c07e-7419-44c3-b5a5-ddccb5d746f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e5d226-a6a3-4388-859f-1b69d2511888",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b63e8950-8d8e-4e8d-9cd5-2a9030bb7c5b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "554b14e2-4339-4a72-8fee-79c897b269a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f405d267-8515-444f-9b8f-7b89905956ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "677955c5-7e18-4595-9d98-957f3b7844a1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "104e2c13-c5c0-4b5e-909f-cfe3663a8889",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "24be942a-15fd-4460-acbf-a047cb3fee57"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d9e4c100-58dc-4107-a12e-8ae6bcccdc94",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "347cafff-3c3b-4a96-a88c-8ea8fa3bc1af"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "41991f94-052b-48ca-8c94-6e91337235cf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "005ae130-de03-4521-a4f1-6ec14e89e658"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e00253e2-82e0-4d70-8dd3-338c057b7c02",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c3563a84-a2c8-4697-b845-d1b2e52214fb"
            }
          }
        ]
      },
      {
        "id": "f14cbcc4-8bc1-4cd2-929a-8abaa44ed8fa",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "ee4716af-2dd5-45a8-9b8d-d0931881dbe8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "77f05085-9b58-4e0e-a773-9a35138a4c45",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "335e1639-56ec-4fd5-bbc3-35c097b98290",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de99aa1-b154-4cdc-b779-c1f1e48954c0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a36694dd-dcd1-4374-9c61-b529612195a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a16b62d-6da4-40e5-9c8a-3d94c32526f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "69be3807-52f6-4a5c-9cd8-4935b39d3969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db73ff41-8515-4403-82b3-d4ba909760fc",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b62ad1d-b945-4a7e-8d63-f7cd25a2c4e2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "47bb935f-8e82-4d54-9443-4c5b5fa11ab2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f7acd85-6437-433c-aa1a-55d36697f889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d694b084-b134-4bbf-a211-ad14846c1c81"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0976ba89-a1f7-4b22-a00f-47b7cdf6fbe5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4c2683e0-f4ba-41fb-b662-f1e6ebc0fc20"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d68d842-640c-4fd7-8e37-d8aef7a6c5a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "47a5a15c-d2b0-44eb-86a4-374e473fd159"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "99424f2e-09b0-4f62-a969-a8b368f66a46",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "41eacd76-40d7-4d4f-aa3c-c9d13641fd34"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0ddaa584-47dc-436a-802e-1f41d8b50da5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "48d5a0fc-280f-49c2-b8e2-3741e8a9d432"
            }
          }
        ]
      },
      {
        "id": "e3b9258b-52c0-424c-8520-a2f9d3762799",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "7737bff2-433e-429a-a01c-1d33b98daf52",
            "name": "Negative Testing",
            "item": [
              {
                "id": "454a0c68-ef0a-4e8b-a487-be31efc48c01",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f94452ce-5e3c-43d9-94d7-2f1657455066",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ac45148-5a3f-4de6-912c-07bf04319462",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "060faa96-126a-4e2b-b74d-796cf1e830a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6838f8b9-ff96-4745-a499-6af6ee0678d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "160b561d-1d78-4037-9cf1-abadae1ad57c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbfdaffd-80a0-4cb0-8b87-7f74cd3b6d3c",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "414c4c32-0228-46d9-9dd2-28a0fc16aef3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "80d98e13-26db-4aa4-bd00-8e812b2f8faa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5cd1bfa-cb6b-4c6b-8204-e7545063eb46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d837837-98ea-4afb-92ac-228fe578c779"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "88bce9f0-3559-44e4-8d45-90d00a062612",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f51181f6-b8ff-450c-948c-6a8fc51e26c2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed46812e-7548-4707-9f42-bfd0a67d62a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cb64f369-2e8b-4f44-adf8-dcf95c4397e9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "809c3734-19bf-4ed4-bbd5-abea8f975475",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a4441aad-ec4c-4d9b-9c3d-c6873fb26674"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2d28a815-0405-4c28-82cf-1a758a5595c4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8f95bbea-b4d8-4131-9b18-d338ee1cd133"
            }
          }
        ]
      },
      {
        "id": "1d5f34ca-f9f0-40e1-8d5f-3a0f52795692",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ed38a628-d4a2-48f2-8b39-b3990b3aed35",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2d433f4a-f81f-418b-9691-a0262da21ee8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "1233f6d7-86fc-40ad-b8df-9b0fa4805cab",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b79eb82-6696-4d43-bd3a-839cf4764536",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3b66da3f-87c0-4b24-b36b-8a4d4f2af78e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 237.98076923076934,
      "responseMin": 6,
      "responseMax": 6106,
      "responseSd": 714.1501374787712,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1683419918456,
      "completed": 1683419992067
    },
    "executions": [
      {
        "id": "fd98f3bc-d611-4f42-8ab1-b8333d501cdf",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "13bbacfd-52b5-4419-b8ef-5ae7f1a62b46",
          "httpRequestId": "97f6db44-c273-4c30-b677-9c80b725c2ac"
        },
        "item": {
          "id": "fd98f3bc-d611-4f42-8ab1-b8333d501cdf",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "bd7cbbfe-9888-45d3-9366-fea5f0105673",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 0
        }
      },
      {
        "id": "25745e8a-eb03-4d18-ba89-dbb4af05c561",
        "cursor": {
          "ref": "a40f3ed0-0108-4c02-9cdb-73196d3d131b",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "99ddd226-56f3-4b26-b46c-68e3145bf706"
        },
        "item": {
          "id": "25745e8a-eb03-4d18-ba89-dbb4af05c561",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "68c9bae8-40db-4d15-b804-f7f6ae863df5",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "3f301d89-7d4c-4344-a5a4-a79fec0b8bf8",
        "cursor": {
          "ref": "84bc62d3-e575-4824-a78f-afdcebb108b5",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "10a68663-0a9e-4aee-a49c-79fc3e93f30e"
        },
        "item": {
          "id": "3f301d89-7d4c-4344-a5a4-a79fec0b8bf8",
          "name": "did_json"
        },
        "response": {
          "id": "13a16778-0e7e-47c8-9614-90510259ea63",
          "status": "OK",
          "code": 200,
          "responseTime": 546,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "193dbdc7-4087-4eda-9556-8dfe2b426a89",
        "cursor": {
          "ref": "61df1634-02d3-4d35-910f-a47b1c75f61b",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "514ec282-4e16-470c-ba2c-e6bea5acb94d"
        },
        "item": {
          "id": "193dbdc7-4087-4eda-9556-8dfe2b426a89",
          "name": "did:invalid"
        },
        "response": {
          "id": "72c288a6-dc3d-44d7-a6b0-cfe82e71d3ef",
          "status": "Not Found",
          "code": 404,
          "responseTime": 861,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "193dbdc7-4087-4eda-9556-8dfe2b426a89",
        "cursor": {
          "ref": "61df1634-02d3-4d35-910f-a47b1c75f61b",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "514ec282-4e16-470c-ba2c-e6bea5acb94d"
        },
        "item": {
          "id": "193dbdc7-4087-4eda-9556-8dfe2b426a89",
          "name": "did:invalid"
        },
        "response": {
          "id": "72c288a6-dc3d-44d7-a6b0-cfe82e71d3ef",
          "status": "Not Found",
          "code": 404,
          "responseTime": 861,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "d1e1bbae-d880-4cd0-ba4b-f8ba274c767f",
        "cursor": {
          "ref": "54caeb74-bd7f-4803-868a-dc6554411821",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2b3439bc-89a8-4480-bd1e-124ea9dd4304"
        },
        "item": {
          "id": "d1e1bbae-d880-4cd0-ba4b-f8ba274c767f",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "98698e99-eebf-42df-af51-b75efa29ab94",
          "status": "Not Found",
          "code": 404,
          "responseTime": 32,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69a7874c-9a0a-4c52-9f46-98b993aa6796",
        "cursor": {
          "ref": "64df049c-c465-4054-ad57-f8eb5b196455",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "36e5ca13-68d2-488a-990c-a0903712985c"
        },
        "item": {
          "id": "69a7874c-9a0a-4c52-9f46-98b993aa6796",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "5c117e5a-c814-499b-b537-863a74330091",
          "status": "Not Found",
          "code": 404,
          "responseTime": 45,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72451b06-401c-4e05-b37a-4ba715b6c6b2",
        "cursor": {
          "ref": "b7f95fba-0348-4d4b-a08b-3772495d8394",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "28aae364-ad6b-444e-b6a6-29d45c1ea109"
        },
        "item": {
          "id": "72451b06-401c-4e05-b37a-4ba715b6c6b2",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "dc888fad-4f6b-49db-9cd7-0c105c5dda7b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "c392f80e-7b4b-44c3-af0a-2505c657a4e2",
        "cursor": {
          "ref": "db36da21-fadc-4fd4-a8e7-8059dfa0a487",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "49f39df7-c145-472f-aacd-98f0aa989486"
        },
        "item": {
          "id": "c392f80e-7b4b-44c3-af0a-2505c657a4e2",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "24337deb-1e69-41a0-a671-73d55781e7bb",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "c392f80e-7b4b-44c3-af0a-2505c657a4e2",
        "cursor": {
          "ref": "db36da21-fadc-4fd4-a8e7-8059dfa0a487",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "49f39df7-c145-472f-aacd-98f0aa989486"
        },
        "item": {
          "id": "c392f80e-7b4b-44c3-af0a-2505c657a4e2",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "24337deb-1e69-41a0-a671-73d55781e7bb",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "4930eb0e-231e-4f3a-96b9-c07cad3651f9",
        "cursor": {
          "ref": "f8c9ffce-4520-4c20-8841-bef4cce4206b",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "8d1bfc4d-195e-48fa-b0d2-c28aae9827b4"
        },
        "item": {
          "id": "4930eb0e-231e-4f3a-96b9-c07cad3651f9",
          "name": "identifiers"
        },
        "response": {
          "id": "fff869cb-4eb2-467c-b286-2c10628da38d",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e0d17b6-eb46-49bb-949f-da74d4edf012",
        "cursor": {
          "ref": "1e80d29a-5f13-406b-a2a8-9e986ccb38f9",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e7ece2f6-a830-4f80-a418-d4211e1874aa"
        },
        "item": {
          "id": "6e0d17b6-eb46-49bb-949f-da74d4edf012",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "55ff4387-1874-4e34-b9c9-2ca7cd4dcf5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e0d17b6-eb46-49bb-949f-da74d4edf012",
        "cursor": {
          "ref": "1e80d29a-5f13-406b-a2a8-9e986ccb38f9",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e7ece2f6-a830-4f80-a418-d4211e1874aa"
        },
        "item": {
          "id": "6e0d17b6-eb46-49bb-949f-da74d4edf012",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "55ff4387-1874-4e34-b9c9-2ca7cd4dcf5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e140ff7-f933-4383-a59d-165948de29a2",
        "cursor": {
          "ref": "60b71d9f-26e1-4abf-95b2-a52757594cc5",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "42feacbc-505a-464a-a8ac-caff5311d497"
        },
        "item": {
          "id": "6e140ff7-f933-4383-a59d-165948de29a2",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "01b709e3-4ccd-4bcc-970a-28020bd630da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 135,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "794e5be0-25bf-452e-8e85-8357eeeb6a35",
        "cursor": {
          "ref": "74574514-47d1-4985-ab6a-39a7b36e0bae",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "fdbea1cf-b5b0-4ba3-b892-99fb34b2b115"
        },
        "item": {
          "id": "794e5be0-25bf-452e-8e85-8357eeeb6a35",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "0179c2b7-1b4f-4558-a5f4-84f6fbac644e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b10918bc-51c6-4be2-b018-1ef8bb33e117",
        "cursor": {
          "ref": "db4947b6-6e3b-4ab5-994b-01abdce31ce1",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "28fca6a9-8e05-4048-af5d-a4b760f42b81"
        },
        "item": {
          "id": "b10918bc-51c6-4be2-b018-1ef8bb33e117",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "85cf73ad-e89f-4a99-abe6-e87de60da4f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf81156-ee60-413d-abcd-cc56189a6e0d",
        "cursor": {
          "ref": "0f009816-26cd-4383-9511-18dab0127589",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8f018c4d-c26c-446b-9337-1921ab7aded3"
        },
        "item": {
          "id": "bdf81156-ee60-413d-abcd-cc56189a6e0d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "07b0fa8d-ac01-4204-b26d-2ac2a4184199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59df6157-6814-4e9f-8e37-a6962c67355c",
        "cursor": {
          "ref": "674648d1-a35e-4785-8a20-a99600cf5600",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "60168368-bc10-4d9d-aff8-7453aad30792"
        },
        "item": {
          "id": "59df6157-6814-4e9f-8e37-a6962c67355c",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "0802216d-5be3-4b8e-b9c3-3f3e46d1b84c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc5a731d-cc7f-4cc4-ae3b-14520b684dd0",
        "cursor": {
          "ref": "0892ab0e-9639-48fe-b01c-81987eb03b51",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "482a1aa1-2402-452f-a63a-ff003e0974b3"
        },
        "item": {
          "id": "dc5a731d-cc7f-4cc4-ae3b-14520b684dd0",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "e60ae709-6138-4572-9f28-d22ca64d53c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e370075-21b0-476b-ad96-31cb21e24e93",
        "cursor": {
          "ref": "21670436-c1b7-4503-a3cd-29774fb83c1d",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "488b474a-9c56-42a7-b938-5839c3b34245"
        },
        "item": {
          "id": "1e370075-21b0-476b-ad96-31cb21e24e93",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "d288afd5-b646-4071-a49c-2256019e928b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "217b6182-a20a-41b1-a759-db42c59dc1e9",
        "cursor": {
          "ref": "794373cb-916c-4e5f-988a-a4b301014a1a",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "2b1ba7bc-f599-4dc0-be13-4c261241c622"
        },
        "item": {
          "id": "217b6182-a20a-41b1-a759-db42c59dc1e9",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "485eb122-3f38-4556-a70b-a1e8f4eff1bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86785df6-e892-45f0-b3b9-19810fa0e9bd",
        "cursor": {
          "ref": "64c9a1d6-521b-47b4-bd7c-3e27fa29bdb6",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "692da458-81db-4fc3-b229-64be03596c15"
        },
        "item": {
          "id": "86785df6-e892-45f0-b3b9-19810fa0e9bd",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a0d276f9-8aff-409e-be96-cc3a2f928ca9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac4250d7-1705-4c10-8079-7932810775a2",
        "cursor": {
          "ref": "e9a884ea-1df1-4e28-8316-1df5272fc5f9",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "0bc2e704-f1e3-4b4b-9552-bc383cd77dbe"
        },
        "item": {
          "id": "ac4250d7-1705-4c10-8079-7932810775a2",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "8b5deecc-2528-47c1-9a5a-3329a954f20c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a09d3d96-971b-46e4-8c86-e094c7e339d7",
        "cursor": {
          "ref": "143b745a-8b37-455a-ae6b-43ef90adb6ec",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f63ddd75-1521-4d4a-b802-2098d8954832"
        },
        "item": {
          "id": "a09d3d96-971b-46e4-8c86-e094c7e339d7",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "7693d0d5-4016-4398-9076-ffda794aa0e7",
          "status": "Created",
          "code": 201,
          "responseTime": 756,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "7c160af3-15c2-488f-9bba-427bbf2fc835",
        "cursor": {
          "ref": "a73669ee-c18c-47dc-ad8a-9a692b201cec",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "acec9509-3e04-4e40-9acf-1646b3bc7491"
        },
        "item": {
          "id": "7c160af3-15c2-488f-9bba-427bbf2fc835",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b3b6c4a6-16c4-4f07-a818-1ffd7560b235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a1a59d0-44ac-48e1-88b4-9b29695bd6b7",
        "cursor": {
          "ref": "33f2ae8b-4b94-437e-ba59-efc30605b1a9",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d87906d7-319e-428e-a920-eb1bc7e65b5a"
        },
        "item": {
          "id": "5a1a59d0-44ac-48e1-88b4-9b29695bd6b7",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "9ecaeed1-ee63-4301-9d7f-904a8c3c40f2",
          "status": "Created",
          "code": 201,
          "responseTime": 6106,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "32f9e07d-81da-457b-9336-94fa208444a2",
        "cursor": {
          "ref": "2123db0e-92a0-4496-afbb-59580e198081",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "95bd7630-c336-452e-a66c-d049e9804c87"
        },
        "item": {
          "id": "32f9e07d-81da-457b-9336-94fa208444a2",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d4d9c2a8-44ce-4501-af3a-91644a795f31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a210d12-b82c-4b21-bcec-1277803d0f95",
        "cursor": {
          "ref": "71ff3e05-f717-4a60-b226-d1718f63279c",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "08f0c645-2685-4e93-9a1a-352fbe44ab3f"
        },
        "item": {
          "id": "2a210d12-b82c-4b21-bcec-1277803d0f95",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ca69e5d5-7113-414c-a568-144045e12763",
          "status": "Created",
          "code": 201,
          "responseTime": 3866,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "2e76fa58-ccdb-483a-9f01-c20966ad9ae6",
        "cursor": {
          "ref": "bb1e7e5a-d00a-48be-b89c-dddee837d42f",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "a13be1d7-6fbc-4af2-9f53-2c49c7eff848"
        },
        "item": {
          "id": "2e76fa58-ccdb-483a-9f01-c20966ad9ae6",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "2637b333-e26f-4ac0-8ada-e15d2f0d6cd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abbbd446-8678-4d6a-bddb-a3db7bdaff56",
        "cursor": {
          "ref": "07aae5c6-341d-4942-aaff-2a68d859b115",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c6b0aa6c-b06f-4af0-8534-e987eca60119"
        },
        "item": {
          "id": "abbbd446-8678-4d6a-bddb-a3db7bdaff56",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "04b1d525-dc5d-41e9-806f-5b3f44969c36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "213976ca-cbe9-45de-a7d4-b982cb9be0ca",
        "cursor": {
          "ref": "b474899c-d989-4900-ac1c-c7310b8a16e4",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c9e000eb-37b8-4eed-82cc-60aa2a79102e"
        },
        "item": {
          "id": "213976ca-cbe9-45de-a7d4-b982cb9be0ca",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4e3ae0d5-222c-4dc2-883d-d088c95b7c02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39ba141f-368d-451f-a0fd-7a282fe0d85d",
        "cursor": {
          "ref": "a630782e-5ed6-4c43-9524-0fd2a7511633",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "af2d8938-84ea-41d8-a094-f147c7990d44"
        },
        "item": {
          "id": "39ba141f-368d-451f-a0fd-7a282fe0d85d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "8f1f37ce-4010-459c-973f-b9fbdcdcd760",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecff8b89-58a3-4a57-bb8c-7efb06f14885",
        "cursor": {
          "ref": "fd3f22f3-0b79-4084-8c20-566039164bad",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "bb736a0f-6258-42f7-b72d-fe59cce0cfd1"
        },
        "item": {
          "id": "ecff8b89-58a3-4a57-bb8c-7efb06f14885",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "d6fbaaf4-103c-46e8-bcc7-6b1f157a190c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb952d0f-0832-4c1e-8321-f4de8088bd43",
        "cursor": {
          "ref": "be72170e-a9b2-487c-96bf-67cfb6eed8e3",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a426171d-19b1-4f2f-9062-ee024ef1dd9a"
        },
        "item": {
          "id": "fb952d0f-0832-4c1e-8321-f4de8088bd43",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "2c84e119-ff7d-4848-aa47-99916e53ce45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a49b555-f959-45e7-94c0-89e46f84efbf",
        "cursor": {
          "ref": "000599b8-dbcb-4fda-ada1-12756858471f",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "86ed264a-0647-47d1-aebf-6b2c68d99a1a"
        },
        "item": {
          "id": "4a49b555-f959-45e7-94c0-89e46f84efbf",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "d6405a7e-a0bc-4aee-a82c-c6d77e2fb445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17dff87-4102-4457-8b5e-44e4b0dc1445",
        "cursor": {
          "ref": "15f54706-0af0-46a9-84ba-4ac00aa7eda3",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "bf31c15f-1f84-472a-a275-0e2b43723d37"
        },
        "item": {
          "id": "a17dff87-4102-4457-8b5e-44e4b0dc1445",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "d5ae35ff-d876-4967-b588-b1a351f0cf44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08097f79-6f68-473a-864d-535fcf6b4ced",
        "cursor": {
          "ref": "cff79591-d7a8-4251-ae66-57e6d51a7bc3",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "539ff9cc-f645-4ac8-906d-fc6059d74e34"
        },
        "item": {
          "id": "08097f79-6f68-473a-864d-535fcf6b4ced",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "0ec1bcdc-7fd2-485b-b2e2-dd5c061a88e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c3d91a6-ff09-489b-b31c-e24043736c29",
        "cursor": {
          "ref": "009830cb-9e4f-4f5f-86c4-4636460531e4",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a426fe11-0c69-431e-90c8-371f011373f3"
        },
        "item": {
          "id": "8c3d91a6-ff09-489b-b31c-e24043736c29",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d31c1826-6e57-4cdb-82a6-33eaab944185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bf146c3-37ec-4c04-9002-d5e113c83d73",
        "cursor": {
          "ref": "2edf38fa-9acf-4eec-a969-9c56b20695a4",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0ce9b606-8129-40fe-b6a9-6b17e2253156"
        },
        "item": {
          "id": "7bf146c3-37ec-4c04-9002-d5e113c83d73",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "46e95d60-9da9-4c6d-a1af-f216ba4b4669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd3b3150-c08e-45bb-b081-579483dbfff4",
        "cursor": {
          "ref": "b8ca0c9f-e51a-4421-85b6-7daffc945c45",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a8b76d82-f28c-4ae6-87d7-13efe3b903c8"
        },
        "item": {
          "id": "fd3b3150-c08e-45bb-b081-579483dbfff4",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "0b824720-30f1-4ad8-bb4d-8d6951a13374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 793,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0909f032-c210-4e84-9e46-5216c6e4d26d",
        "cursor": {
          "ref": "5b3d870e-4d70-4310-9b04-b7af4597a570",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "5873d6a9-aa4c-4f14-9caa-2f6bfc6dd7cd"
        },
        "item": {
          "id": "0909f032-c210-4e84-9e46-5216c6e4d26d",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "884efeae-9270-4b3f-b25a-c8b19ee8449c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74b7eae4-6456-47a1-b826-7a6ba2ddfade",
        "cursor": {
          "ref": "16afbda0-ca16-461e-87d1-05d1a5dba250",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "703e37ca-efcb-4022-990d-70ced1de1aeb"
        },
        "item": {
          "id": "74b7eae4-6456-47a1-b826-7a6ba2ddfade",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "70076173-77f0-4cee-9a45-a063a5dee1ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "145f4a20-b94e-423f-b3b5-af4074403f98",
        "cursor": {
          "ref": "acb66e0b-97db-4c60-a386-3b71c75694bd",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6e742d17-7a84-40c0-9d70-687fbd40304b"
        },
        "item": {
          "id": "145f4a20-b94e-423f-b3b5-af4074403f98",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "33e3cef0-65c0-4879-82de-abc9cecee46b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "398f2412-3459-4927-80ed-a3d3185dcc88",
        "cursor": {
          "ref": "585cc557-6d0f-4f38-ba9f-8d3332155d37",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b8c3df1f-d1e8-43a9-924e-af7b9d01bffa"
        },
        "item": {
          "id": "398f2412-3459-4927-80ed-a3d3185dcc88",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "f66ec180-556e-4625-b58c-dd0831e39c4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a704628-933d-4321-aaa8-dcfcce5c4aaf",
        "cursor": {
          "ref": "2d510f9b-347c-4276-b2d7-d96884304a0b",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "a0cc0868-f999-442f-a78e-1709045230c4"
        },
        "item": {
          "id": "1a704628-933d-4321-aaa8-dcfcce5c4aaf",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "12e983fe-d4c5-4acb-8642-5da5fbc0c94a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10ad04c1-811f-4d88-9913-89360c9ab0b2",
        "cursor": {
          "ref": "a1e743f3-7423-462e-aad4-383a4e9439c2",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5d7459e3-930f-4852-b497-3fe5b54bcad6"
        },
        "item": {
          "id": "10ad04c1-811f-4d88-9913-89360c9ab0b2",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "3f5c2b2c-2131-4d27-a061-e3c986aea945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8313197d-0c44-454b-8762-9c4f971e590a",
        "cursor": {
          "ref": "426335ba-80f2-43d4-a5c4-52aee0a1bed4",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "21144369-aac4-4df2-9f68-70a2259a55f0"
        },
        "item": {
          "id": "8313197d-0c44-454b-8762-9c4f971e590a",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "11399145-3552-4f2c-8352-a327ebdee2cd",
          "status": "Created",
          "code": 201,
          "responseTime": 2761,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "0483cc4d-038d-409b-baab-a2a3753cbe93",
        "cursor": {
          "ref": "793d7c66-61e3-45fe-810b-b9fc7fe53559",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f5b1c80b-0298-42f8-aa75-602351cc5fc1"
        },
        "item": {
          "id": "0483cc4d-038d-409b-baab-a2a3753cbe93",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "12c997b0-0ef3-4057-9a2f-548ba6836a4c",
          "status": "Created",
          "code": 201,
          "responseTime": 2632,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "5d91a6fa-9226-4506-bf11-df115c076e1f",
        "cursor": {
          "ref": "861ec541-74fd-41dd-a0c6-03d1349e08ed",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f96899fd-a9c6-4eee-905b-0610d6ca603c"
        },
        "item": {
          "id": "5d91a6fa-9226-4506-bf11-df115c076e1f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "31951b03-a9cf-4672-b7c9-d1efad30b79d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80c3d4e2-3a22-4831-b5e5-5afb5e500c7f",
        "cursor": {
          "ref": "04071c84-6f2c-45df-9f89-acd6a7499beb",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "7fcde76b-15a4-412a-a60b-0dc92a57ba68"
        },
        "item": {
          "id": "80c3d4e2-3a22-4831-b5e5-5afb5e500c7f",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "d8a020b6-6230-4a83-abf9-b666ce4b6538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffd997c3-949c-4814-9bc7-8b55653ba2cc",
        "cursor": {
          "ref": "1f9a390b-94e4-418b-992e-253ae559c597",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "50fa09be-7814-4362-bf25-e7b43c2c67f9"
        },
        "item": {
          "id": "ffd997c3-949c-4814-9bc7-8b55653ba2cc",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "5da768f5-c086-422a-9075-0c401d4e1054",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f77946df-94b7-42d8-ab1c-6d1c42c0ab7f",
        "cursor": {
          "ref": "0d389e48-9e8b-4a54-b640-e5c42c8903d5",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "65bca3bf-f0c2-484a-82c9-50fe5fa50841"
        },
        "item": {
          "id": "f77946df-94b7-42d8-ab1c-6d1c42c0ab7f",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "0be24d80-9be1-4094-861b-5529c780a169",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75b917a6-8d8a-426a-aca7-66227ba41529",
        "cursor": {
          "ref": "957c4f63-022c-4739-afa7-8710a84a882f",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "47e95b21-a791-4511-a1fa-1aeacf843e6d"
        },
        "item": {
          "id": "75b917a6-8d8a-426a-aca7-66227ba41529",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "fd66a1c6-a8c5-4552-8043-860b579f94dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3060f6b5-743e-455c-a9d6-d3dbc7df6489",
        "cursor": {
          "ref": "7af14896-2c2f-4705-bfca-168f717bc20d",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "8877eacf-3783-4208-994b-e1b333e52b4a"
        },
        "item": {
          "id": "3060f6b5-743e-455c-a9d6-d3dbc7df6489",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ed4e6451-fe93-4354-bb1e-184cdb5eef80",
          "status": "Created",
          "code": 201,
          "responseTime": 2660,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "ce38ed3a-0672-4d92-bf4f-5047e16ea78b",
        "cursor": {
          "ref": "9c77f4b2-aaf6-4e27-a60c-1d5a1c645ef3",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "32ca03fd-9985-4c72-a253-9810dc241afc"
        },
        "item": {
          "id": "ce38ed3a-0672-4d92-bf4f-5047e16ea78b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "8499111a-0bf6-4fa5-9e0c-fe97d7301d39",
          "status": "Created",
          "code": 201,
          "responseTime": 2834,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "057981a0-4113-447d-ae24-f305b8534e67",
        "cursor": {
          "ref": "3014c526-c077-4aba-a0a6-781faad7bbcb",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "34a202ee-749b-40a3-ae58-752f543a01b7"
        },
        "item": {
          "id": "057981a0-4113-447d-ae24-f305b8534e67",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "3644cc10-6989-42c2-884a-bbce53d102de",
          "status": "Created",
          "code": 201,
          "responseTime": 1937,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "d7c1d7cf-5aa0-4bce-84ad-dec28973aac2",
        "cursor": {
          "ref": "d0834c1c-6462-4a8f-ae23-48c96b4ff053",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "857c2180-4511-4b06-9db9-214bc1f1b9c4"
        },
        "item": {
          "id": "d7c1d7cf-5aa0-4bce-84ad-dec28973aac2",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "01f091f5-1ae1-4b63-9fd2-2bc96215bb39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af37c26d-a66a-4f63-9150-85b3d5fd61c5",
        "cursor": {
          "ref": "b9be2ea0-2032-4b76-8c3e-6037f29eb5f3",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "77034448-427d-4990-85c3-e19429b70adf"
        },
        "item": {
          "id": "af37c26d-a66a-4f63-9150-85b3d5fd61c5",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "6c78f4b8-864f-4d5b-b216-8f065d47c2c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "425dfc66-c5f4-46cd-a0ac-f884893539c6",
        "cursor": {
          "ref": "ca917bf6-168a-46de-960e-e1a2848e14ad",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "18138bd3-6edf-4ea9-a402-9cc37fcf4091"
        },
        "item": {
          "id": "425dfc66-c5f4-46cd-a0ac-f884893539c6",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "40085ec4-f5a3-488b-ad48-d5b835316e2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c03643d-ab88-460c-bd65-7211b17c66bf",
        "cursor": {
          "ref": "e03ce3ec-276f-4476-a32f-687a31ba13b0",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "5f7b25ec-9b51-4fc1-ba9b-8b0f9330ad90"
        },
        "item": {
          "id": "0c03643d-ab88-460c-bd65-7211b17c66bf",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5d50c135-59b2-4f46-96fa-882bc31f2654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98d3cba4-8083-4e1f-9f1d-11747ab292e7",
        "cursor": {
          "ref": "a95cecfc-4b39-4b15-acf7-854f9f0d6d49",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e18b4555-56d1-4cbe-adc0-d587a291303f"
        },
        "item": {
          "id": "98d3cba4-8083-4e1f-9f1d-11747ab292e7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "ffe0e9a4-6b08-403d-904b-7e3791a8f4c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4327cdb1-42c9-4d35-b2d6-3598cf33ba05",
        "cursor": {
          "ref": "ecacc7e5-bcce-486f-8eb9-f569c4c722dd",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "234f9add-7034-46af-87c9-9a333c037911"
        },
        "item": {
          "id": "4327cdb1-42c9-4d35-b2d6-3598cf33ba05",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "74065dc4-0d02-49ab-8dd9-194b4a39cab9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e7d5883-1c6b-4bfc-bb6f-b895a6665b0d",
        "cursor": {
          "ref": "2a400ba8-57b5-46c4-ac37-1a89c0f85a21",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "03868657-7db0-45ce-a871-82c017f0ebd7"
        },
        "item": {
          "id": "5e7d5883-1c6b-4bfc-bb6f-b895a6665b0d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "192ea788-f89d-41f8-a9bf-a19590addaf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eca3d2d-7db8-4883-83b4-92516693bc8a",
        "cursor": {
          "ref": "d6a93f4d-7735-44d4-a4e8-a13da5ac8dc5",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "8b966b49-c7ee-42b3-bae6-cfc87c27a89e"
        },
        "item": {
          "id": "2eca3d2d-7db8-4883-83b4-92516693bc8a",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "99cefc8f-6214-40be-86c3-53dcae74a50f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0d14ab2-7e51-42f7-ad98-2b2b7df82afc",
        "cursor": {
          "ref": "a94f46af-dfbd-4d0c-a99c-c21f707655a5",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c5834cf3-31f4-4b2d-ba53-bb95e79ac2ae"
        },
        "item": {
          "id": "f0d14ab2-7e51-42f7-ad98-2b2b7df82afc",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "4cc271d9-57ae-4124-bde3-589703f06e05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb3821f1-7903-4d96-b4cf-57f8ea73a7c0",
        "cursor": {
          "ref": "f9952481-8c6c-4cf7-88b6-b6e6140fcf8a",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "a12664c6-35ca-48be-9b33-b684b60ffe3d"
        },
        "item": {
          "id": "fb3821f1-7903-4d96-b4cf-57f8ea73a7c0",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "db007f8f-153b-484b-98ad-14cdab49b300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96864a32-3599-4e10-b8bb-dc1f10040316",
        "cursor": {
          "ref": "510d14fe-6474-4319-aa42-7916ee5b2132",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "60a69df2-63d4-456c-81af-83b0a49a1ada"
        },
        "item": {
          "id": "96864a32-3599-4e10-b8bb-dc1f10040316",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "cb0bcb2d-9471-4476-be42-6756e057615f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9279024-27d7-49b2-a28c-b15a81012afb",
        "cursor": {
          "ref": "3b9c9e23-575e-4b6c-afa4-b13a33476cc2",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "cc2c5430-9f8a-45ca-9dd9-786fe53299f2"
        },
        "item": {
          "id": "a9279024-27d7-49b2-a28c-b15a81012afb",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "7cf989e6-ce25-4f38-a1df-7b1bf0db8dcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5372eeed-6fa3-45a4-b1db-d3035544ce2e",
        "cursor": {
          "ref": "c9066545-eee1-46b6-9e61-e3b63813de1c",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "faadc173-212c-4ba5-a159-c169d9567fe3"
        },
        "item": {
          "id": "5372eeed-6fa3-45a4-b1db-d3035544ce2e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "dc8e07d8-c28d-4f8a-add0-e8940a48032f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4b73514-1ad1-4631-be98-871a9ed24332",
        "cursor": {
          "ref": "3c758244-d8f9-497f-ae08-d031b4ab4cb9",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e83490ce-45d9-4d99-9685-b017e99f05f9"
        },
        "item": {
          "id": "d4b73514-1ad1-4631-be98-871a9ed24332",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "666b870f-eb10-4d4e-afb2-6c1a34c75f9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed1cb82a-bdef-4212-a863-d40909b8d3c8",
        "cursor": {
          "ref": "90ec8c29-a08f-4635-ab15-65239a78d321",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e48d2e8e-0e31-4092-bee5-1d14d50caf39"
        },
        "item": {
          "id": "ed1cb82a-bdef-4212-a863-d40909b8d3c8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e401b410-10df-4358-8f07-ba80300d0f51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53fdea44-8ef7-4df5-a3a4-764752690493",
        "cursor": {
          "ref": "31e2d935-ad72-4248-bb54-e522a0aadfdc",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "7fb8c9da-0c51-4fda-b76a-88a294309c8d"
        },
        "item": {
          "id": "53fdea44-8ef7-4df5-a3a4-764752690493",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "15e553c4-8533-46e6-844e-5f2f93ca30c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10482db1-d416-434a-8f9b-17b76b3f6e84",
        "cursor": {
          "ref": "db971cb6-04ac-4c2c-9533-25b7b69c1583",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a322aeea-58c8-41fb-9ec9-30dbf07650da"
        },
        "item": {
          "id": "10482db1-d416-434a-8f9b-17b76b3f6e84",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "51de4769-bb98-4480-a0b6-cfac44e3655c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "222aa94e-f284-425c-8bba-d41f077a6a41",
        "cursor": {
          "ref": "93dfa854-0cc6-456e-9527-2274b49e14bd",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "3acc74de-9009-470e-9cfc-52093ffeb9b1"
        },
        "item": {
          "id": "222aa94e-f284-425c-8bba-d41f077a6a41",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "85e87356-7147-4bcc-85e7-f9173c722055",
          "status": "Created",
          "code": 201,
          "responseTime": 1897,
          "responseSize": 976
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "2ee46441-63c9-4477-8fe1-8a5db518cb65",
        "cursor": {
          "ref": "527eec26-57d6-412b-8b1c-d505503b8e88",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "21c16859-3090-404d-b40c-7a42c3b947a2"
        },
        "item": {
          "id": "2ee46441-63c9-4477-8fe1-8a5db518cb65",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "3751f733-5a0f-4d2b-a838-a9fbf837434d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e73d0b0b-68be-425a-b2ce-293805aa6609",
        "cursor": {
          "ref": "eb5834f9-db30-4726-b9e0-f74b722e0669",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e2ba4e26-690e-4697-8f19-971d56305494"
        },
        "item": {
          "id": "e73d0b0b-68be-425a-b2ce-293805aa6609",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "4b81084b-edf0-4f77-96ef-77d9bb53e088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f994aff5-58f2-40cc-9351-170171c7a521",
        "cursor": {
          "ref": "feb73fa7-15ea-400d-84b5-268f61a5a26d",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a5c9ca88-4d99-4479-84c0-59af0c256749"
        },
        "item": {
          "id": "f994aff5-58f2-40cc-9351-170171c7a521",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "a4b1b582-a558-42c4-8daa-e21f8b00a78b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49d97b03-eae3-472d-848d-033ed05299f6",
        "cursor": {
          "ref": "ae5269fc-e34f-41b9-85d9-2bb2371baca2",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "c0531f15-6fc6-46fc-9b9a-d3b09b72942c"
        },
        "item": {
          "id": "49d97b03-eae3-472d-848d-033ed05299f6",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "234fc467-fb3c-4025-b6b7-185db778c8ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cad8c1f-b0a4-47bd-aeb9-fa2880070042",
        "cursor": {
          "ref": "1143d0f5-c887-463d-a30d-53eef6225320",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "d1c762c0-8b45-4109-85ea-2fdfdb2d0144"
        },
        "item": {
          "id": "1cad8c1f-b0a4-47bd-aeb9-fa2880070042",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "cefb768a-7757-46c2-94cf-b8b0e90909a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e5257bf-fcc5-4dc1-8675-0c97803394b6",
        "cursor": {
          "ref": "d1ed0a7f-580e-4c9a-90c3-793d50f43f17",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "bcf7b086-3698-4796-a5a6-cf24e71f787d"
        },
        "item": {
          "id": "2e5257bf-fcc5-4dc1-8675-0c97803394b6",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c7b3f42e-d209-473b-9f69-133c2fd11781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60a9346f-4771-4445-b5d2-b962f79d9859",
        "cursor": {
          "ref": "02d3bb65-acd1-4e4f-af84-1447d6d03b40",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "4b36791b-379b-4faa-862c-aa4dbbc579cf"
        },
        "item": {
          "id": "60a9346f-4771-4445-b5d2-b962f79d9859",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ac57c5f1-0d0c-44d2-8c91-b5d987e77dd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a16d7b69-00fe-41f9-8530-edee877cbff9",
        "cursor": {
          "ref": "3e5914a3-8f00-470b-b9f4-4858e6891496",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "7d4ea4c8-c5fd-4c1c-9179-1fb9c2b29e34"
        },
        "item": {
          "id": "a16d7b69-00fe-41f9-8530-edee877cbff9",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "f112ec28-78e0-4fad-b2f2-7db39d8b259e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "698583e0-7a0b-4898-a006-13fd75a7356b",
        "cursor": {
          "ref": "ff85521d-4d44-47f3-badb-d532c6c86675",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "92138ca7-3e16-4751-ba04-01408581c50c"
        },
        "item": {
          "id": "698583e0-7a0b-4898-a006-13fd75a7356b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "5695f336-e5a5-4c5c-9080-800b4675f769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1c6ba1e-1feb-4952-b06f-ed2af8cdf60d",
        "cursor": {
          "ref": "7b6c44d0-d4ae-4b41-a432-fb8f05cf19e8",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "77854da2-5abe-4e04-bb6f-1157230ff1a3"
        },
        "item": {
          "id": "d1c6ba1e-1feb-4952-b06f-ed2af8cdf60d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "7bbcf2fe-15f7-4fec-9c11-81b168627b08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f06618e7-e26a-4659-87c0-89cd0380ee83",
        "cursor": {
          "ref": "292490cf-457e-4ee8-88d3-5096b9cc0b11",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "31dd0bbf-4edb-45bc-a256-4a46b7da14e5"
        },
        "item": {
          "id": "f06618e7-e26a-4659-87c0-89cd0380ee83",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "491c2d1b-bfe5-44b9-aeba-9c411cb09905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9422ae93-9e21-405f-adad-1f7c221253fe",
        "cursor": {
          "ref": "05eb0336-0732-4316-ac6e-c2c2bfa551e3",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "e2bd9869-b106-4309-a112-a00bc699032d"
        },
        "item": {
          "id": "9422ae93-9e21-405f-adad-1f7c221253fe",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d9f4aa8e-4439-488e-b2ea-9581ee2c49d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d09101f7-d680-4455-88d4-37073f26e3b4",
        "cursor": {
          "ref": "4a116a01-be9d-4d86-bf79-c143e7f59b8e",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "6e09f2db-b545-4a5b-818e-167c3cd511b7"
        },
        "item": {
          "id": "d09101f7-d680-4455-88d4-37073f26e3b4",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f89508ea-550f-4bcd-a6ac-bceb01dbd7e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61ff1922-f135-4445-8e83-af6b025f4aee",
        "cursor": {
          "ref": "f65b472f-818b-4e00-8d76-f9be37f44d0f",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "bacfa747-30e8-48ce-be77-cfa3074be1b6"
        },
        "item": {
          "id": "61ff1922-f135-4445-8e83-af6b025f4aee",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "965525c1-6cde-474d-83ad-77939413c96c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c57701c0-5f40-4dae-bc57-8b5ce9e6ebfc",
        "cursor": {
          "ref": "69e0dd81-649a-4b6e-b2fd-a851f22c9d88",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "9c05bd2a-f680-4939-9232-f37ae96eee9f"
        },
        "item": {
          "id": "c57701c0-5f40-4dae-bc57-8b5ce9e6ebfc",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a1ce5e7b-e66a-416b-bd17-ae1569f605bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "543991bd-e0e8-4474-b036-6fe1646cb978",
        "cursor": {
          "ref": "e5cebcc1-3118-41ee-8827-6dc8ea95d6f8",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "32e6e269-70d2-48e3-bb81-dec058a05bef"
        },
        "item": {
          "id": "543991bd-e0e8-4474-b036-6fe1646cb978",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "59e90b4a-5abd-4c9d-8dc4-805c1fbf7915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffdc0d44-1847-4bc6-b043-528018d53d5b",
        "cursor": {
          "ref": "1420dfdb-b163-4e11-848c-1cf3481c2902",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "3f05948c-a626-410d-aa78-5002a807cc00"
        },
        "item": {
          "id": "ffdc0d44-1847-4bc6-b043-528018d53d5b",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "bc496fe8-c6d0-439a-b42b-d83a341273a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8128e46f-7136-46ee-bd4a-d57b388bb9b1",
        "cursor": {
          "ref": "8be2912f-a19d-4c5e-b4d6-3d53a61eb9b2",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "2d6b8218-e87e-4b32-9a40-d334c75fb555"
        },
        "item": {
          "id": "8128e46f-7136-46ee-bd4a-d57b388bb9b1",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c51205a2-c588-4036-bf52-2d7d7acd23c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6ba632-4fc1-4a4e-9048-df2f190bf544",
        "cursor": {
          "ref": "9cd81f87-d826-4d09-b1fb-2f8f2ee452d0",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "c0449bc9-425f-485c-8a71-5d60060ee564"
        },
        "item": {
          "id": "9e6ba632-4fc1-4a4e-9048-df2f190bf544",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "7101e472-a6ce-4d5a-9990-fa6fb94db253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af2dbfa1-fc85-402a-a246-d3dbcffdd120",
        "cursor": {
          "ref": "53872093-e837-48f9-85b7-acf339040d5e",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a3268720-796e-4c7f-b9b4-5858358d7c80"
        },
        "item": {
          "id": "af2dbfa1-fc85-402a-a246-d3dbcffdd120",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "6f8097ba-17e7-48f0-a7c1-51ce8b28b9d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98182ee8-e622-4186-9724-3dc0a595471b",
        "cursor": {
          "ref": "d830db19-98e2-4b16-bbc0-b55bd990349b",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "4536bf37-a374-4f37-bc09-67a28fcad9e9"
        },
        "item": {
          "id": "98182ee8-e622-4186-9724-3dc0a595471b",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "5d15e8af-bc5d-4954-aa23-fe02626443ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a80cdd44-9f62-4392-8c2b-bbd7a3e7540b",
        "cursor": {
          "ref": "e15a8902-5717-4a4e-9309-d5d58d9f9f87",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "6e90a566-4f14-4a8a-baad-45134574226a"
        },
        "item": {
          "id": "a80cdd44-9f62-4392-8c2b-bbd7a3e7540b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "516b6c27-a22a-4441-bd44-1465bf214472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9af6be0a-702d-4456-8a17-d1adb57df614",
        "cursor": {
          "ref": "15ab68fb-f93c-4bb7-8ca6-d53d66361f7f",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e59dddd8-2791-438e-83ab-404bc6a078bf"
        },
        "item": {
          "id": "9af6be0a-702d-4456-8a17-d1adb57df614",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "2fe012ab-5f8b-4982-9bde-e5282c1bafa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4dd4cd5-38ed-423e-a5bf-83e430009ef3",
        "cursor": {
          "ref": "297f5540-c7a0-41ad-a608-b189666b172a",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "43d99ff7-2c29-48c8-847e-2c2ac762464a"
        },
        "item": {
          "id": "c4dd4cd5-38ed-423e-a5bf-83e430009ef3",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "7610fe3e-43a3-4068-b8a2-7956e13275a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7c62686-8095-4b4b-8c14-5f8dd1d6375e",
        "cursor": {
          "ref": "6c274e21-3528-46b4-9409-e9aeaaaddd6f",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "899dbfe6-079c-43dd-b770-d5157c5a9173"
        },
        "item": {
          "id": "f7c62686-8095-4b4b-8c14-5f8dd1d6375e",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "9be8da6d-35a6-40d4-9337-bbf14b75ab04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecbe16a9-04dc-4998-af4b-707d0855da22",
        "cursor": {
          "ref": "289a8c64-1fe2-4a13-84eb-0a1ba0feb17d",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "27de2fbb-59e4-4bd4-b3fb-47aa9987b39f"
        },
        "item": {
          "id": "ecbe16a9-04dc-4998-af4b-707d0855da22",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "2ee6b763-a187-4cd1-b1e3-02bb471023c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f46ab26-8065-4f97-942e-379ec229f036",
        "cursor": {
          "ref": "041d5256-1eb2-4741-887e-66a2480d4f11",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "c0987727-b1c3-43c3-8f93-b6813943c59a"
        },
        "item": {
          "id": "6f46ab26-8065-4f97-942e-379ec229f036",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "45868c4e-6510-4655-8716-36fca553e22c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e24ff50-64b6-4780-8cf5-f4198853cf65",
        "cursor": {
          "ref": "e36423c7-4448-4b14-8900-bc2771a0ea90",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "8e452f68-30f6-480c-a41e-95ec775dcf7a"
        },
        "item": {
          "id": "5e24ff50-64b6-4780-8cf5-f4198853cf65",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "29100262-fd8e-4071-bdaf-7b992aaa85f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f171b37-8d0b-4498-ba86-c61fd9cd3c8c",
        "cursor": {
          "ref": "164002c4-838d-4dbb-99f4-df4ef2430d19",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "1fd9c056-a03d-4071-9def-5e69fc56dc21"
        },
        "item": {
          "id": "2f171b37-8d0b-4498-ba86-c61fd9cd3c8c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "17ce8c5e-080b-48a1-b2e5-f39c8e56c65d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b55f51c-85d7-475d-8506-7f15d8fda411",
        "cursor": {
          "ref": "a3d2a9b2-4efe-43ab-b394-43749ba683c6",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "90533383-74a2-41d2-bf47-697f5c2353ce"
        },
        "item": {
          "id": "9b55f51c-85d7-475d-8506-7f15d8fda411",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "1ea82623-6943-41dd-9756-f6cc534087a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83d7bc9c-3110-4240-884b-f2651b289f81",
        "cursor": {
          "ref": "6d4bf43c-b2dd-460b-8b5e-fff6d570e010",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "443a1065-b8f8-48cc-b03e-3477b60249c3"
        },
        "item": {
          "id": "83d7bc9c-3110-4240-884b-f2651b289f81",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "6f4b129d-36e5-472a-9660-ee463b229f61",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "b73762a1-490d-45f5-b5a6-04fca11d2019",
        "cursor": {
          "ref": "5aba9f91-84cb-47d8-bfa7-47dbc81163f7",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "274cbee6-1e1b-4267-a279-1710a7177e0e"
        },
        "item": {
          "id": "b73762a1-490d-45f5-b5a6-04fca11d2019",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "67e02269-7c38-4971-aea8-141f978b7e49",
          "status": "Created",
          "code": 201,
          "responseTime": 2217,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "b1a25df3-26ab-45f9-895b-93dde2068f8a",
        "cursor": {
          "ref": "cb35760a-dffa-42e9-a651-4e71166eaf84",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "3535406b-d369-4dae-87b3-839b50547bee"
        },
        "item": {
          "id": "b1a25df3-26ab-45f9-895b-93dde2068f8a",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b01b8b4e-166a-4eaf-bb17-90a3c4e2f83c",
          "status": "Created",
          "code": 201,
          "responseTime": 2410,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "957103ca-849c-42e6-bea8-abbfb45ceb61",
        "cursor": {
          "ref": "210916c6-186f-42e2-a5b5-c10faab46dd7",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "21792f09-f21e-4fe5-a09a-ba788b9d9ab7"
        },
        "item": {
          "id": "957103ca-849c-42e6-bea8-abbfb45ceb61",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "94357d2f-dc54-4fe9-8027-35d7a7616b46",
          "status": "Created",
          "code": 201,
          "responseTime": 3557,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "db90079c-a027-40ce-89ab-20e1fc48d85d",
        "cursor": {
          "ref": "53ddf867-09d3-4e8d-9b84-f9d86943ce58",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "87dde56f-a93b-4a8a-b4f7-bd7a5b508386"
        },
        "item": {
          "id": "db90079c-a027-40ce-89ab-20e1fc48d85d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "6fa66dfe-35e7-4ac2-9922-08e33618b62b",
          "status": "Created",
          "code": 201,
          "responseTime": 2389,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a782920c-0534-4ab5-8385-d028cb3c39c9",
        "cursor": {
          "ref": "38c0f71a-83c3-4ca4-ae12-3f548ce5a4f2",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "8120c031-b284-4c74-8309-cf13b846e8aa"
        },
        "item": {
          "id": "a782920c-0534-4ab5-8385-d028cb3c39c9",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "6980c445-8113-4337-9d90-e8b2c37d3c2a",
          "status": "Created",
          "code": 201,
          "responseTime": 2363,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c09bb49d-0546-4b9d-91ee-352c87806735",
        "cursor": {
          "ref": "ff93b66a-5113-4904-b07b-f91cefaa7231",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "ed428883-86ee-42b3-ae8c-cdf06b8ef93d"
        },
        "item": {
          "id": "c09bb49d-0546-4b9d-91ee-352c87806735",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "5f6493ff-7409-4ff4-88c7-90457d97a719",
          "status": "Created",
          "code": 201,
          "responseTime": 2321,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-05-07T00:39:30Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-05-07T00:39:30Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "c242220b-7dd7-4b5a-a260-5ce5d11b5ae4",
        "cursor": {
          "ref": "edd13691-bf45-47e2-8334-a423a725799e",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "fe00d318-8a9e-49ad-8096-b9a0bfca2e3f"
        },
        "item": {
          "id": "c242220b-7dd7-4b5a-a260-5ce5d11b5ae4",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "66adb76e-a519-4ecf-869a-9e9be117d31e",
          "status": "Created",
          "code": 201,
          "responseTime": 2291,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc4717d9-1139-48ed-b595-cc41e357f650",
        "cursor": {
          "ref": "9a3e407e-e6a2-4feb-9808-39e47348e436",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "289d5317-9536-4a6c-bc9c-3b2c00e2ad2f"
        },
        "item": {
          "id": "bc4717d9-1139-48ed-b595-cc41e357f650",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "896895b0-448b-417e-b8aa-e4f6dc8688fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc4717d9-1139-48ed-b595-cc41e357f650",
        "cursor": {
          "ref": "9a3e407e-e6a2-4feb-9808-39e47348e436",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "289d5317-9536-4a6c-bc9c-3b2c00e2ad2f"
        },
        "item": {
          "id": "bc4717d9-1139-48ed-b595-cc41e357f650",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "896895b0-448b-417e-b8aa-e4f6dc8688fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b35f83f6-4a1e-4940-8d6c-1eb4dce1f78e",
        "cursor": {
          "ref": "db4d93d1-e4e0-4392-9f9b-a20a156247be",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "553bef30-751b-411d-a732-75f7e33f86c0"
        },
        "item": {
          "id": "b35f83f6-4a1e-4940-8d6c-1eb4dce1f78e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "15381b88-8a4f-4e0f-a3aa-ac71f1e1acb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34f23345-6da5-460b-8e8f-1cd449f16c1c",
        "cursor": {
          "ref": "e3d17689-be36-4143-a72f-aeb0bd69e952",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "5585b2e8-6e2e-4180-89e2-627eefa4a6b0"
        },
        "item": {
          "id": "34f23345-6da5-460b-8e8f-1cd449f16c1c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6d4ca55e-c0de-4abe-bef8-105e0b415a25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63f81cd3-172b-48a9-8482-6c255431967c",
        "cursor": {
          "ref": "e2532bc7-975a-4fb2-8159-01c2dec8bc36",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f133fb71-8c99-4342-941c-bfba011db7bc"
        },
        "item": {
          "id": "63f81cd3-172b-48a9-8482-6c255431967c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1e02dc9b-fb80-4be2-8068-702e55a2cfc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c687c58-e30d-4826-83db-00afbc7ab349",
        "cursor": {
          "ref": "7654970a-6a0a-4021-8191-5f62e201cbf4",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "dfa94028-98d7-4c96-a51b-29cddf9be34f"
        },
        "item": {
          "id": "6c687c58-e30d-4826-83db-00afbc7ab349",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "397c1496-5dde-4a4d-899c-7759333ee7f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "486e4dbe-5e66-45ca-a2be-f37e148296c5",
        "cursor": {
          "ref": "c80208ed-1e4f-475f-8ca3-2cf22fc844f1",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "f49c76ae-403d-46c2-8eb9-dc8ae3bb2098"
        },
        "item": {
          "id": "486e4dbe-5e66-45ca-a2be-f37e148296c5",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "442e3e57-ca02-409b-9285-64712b6a60b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b7b62ae-ae22-423e-a799-2b796d2447c6",
        "cursor": {
          "ref": "c3b232f7-2ae4-467a-84f1-3aa9a0a31460",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "247c803e-0e85-4c42-826e-a8bd2cbb555d"
        },
        "item": {
          "id": "7b7b62ae-ae22-423e-a799-2b796d2447c6",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "686993f9-7ac8-4866-97a2-edde12383bb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8e6bb59-5ae4-4fde-b754-34740c02eac8",
        "cursor": {
          "ref": "01414c71-cd8f-4de5-9ce9-b18e7e366cc1",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "47b61c95-666f-4121-9aef-5d66cb88950f"
        },
        "item": {
          "id": "d8e6bb59-5ae4-4fde-b754-34740c02eac8",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "cd3f35e1-139c-42d7-bc7b-0cec5e3ddb30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be7289ef-064b-4db0-a91d-693e2e1b2556",
        "cursor": {
          "ref": "518cf11c-b44d-4008-85de-df85910dcd7e",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "93d1b830-a5d4-4100-a2e9-2ed2dc69c9e0"
        },
        "item": {
          "id": "be7289ef-064b-4db0-a91d-693e2e1b2556",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3c3c0c6b-04f7-46aa-9bf3-d4552001a273",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e5c2ab-ef62-40d4-8547-e3be5a32cde2",
        "cursor": {
          "ref": "d99ff621-34d8-447b-aa29-125316409fae",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "472e0d65-0b9e-41d2-9189-6ebcd140ec55"
        },
        "item": {
          "id": "78e5c2ab-ef62-40d4-8547-e3be5a32cde2",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a80a4243-006b-49fc-9047-00bb00805603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93aedff2-05f8-41e7-95fb-0b852f66ac4c",
        "cursor": {
          "ref": "dd6ed08d-5bc6-4da1-aab7-e46f2860a1f1",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "0a977978-75c9-43f1-9b8f-a076cada8cae"
        },
        "item": {
          "id": "93aedff2-05f8-41e7-95fb-0b852f66ac4c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c4d839b5-9e32-4624-8f18-04a466fcc32a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30fcc827-fd67-4564-a974-65b3d8140419",
        "cursor": {
          "ref": "e0e07fe2-4d5a-47c4-b451-888618282e57",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f5e12ce0-3412-4053-9b27-b9e7f2f9bfc6"
        },
        "item": {
          "id": "30fcc827-fd67-4564-a974-65b3d8140419",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "220a4c32-486e-4794-a63b-e07bfe56291c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08f9ad65-1f7c-424c-8b55-5a2cc158c968",
        "cursor": {
          "ref": "391c919d-0d24-423b-afa8-0de90143cfc6",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "5c72b590-868b-4281-a4b7-2d744b4c5f42"
        },
        "item": {
          "id": "08f9ad65-1f7c-424c-8b55-5a2cc158c968",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0fcaf970-5e02-45e9-b0d9-0d63d78ab21d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca32a8c6-9b4f-437a-94ca-ac0e406366ad",
        "cursor": {
          "ref": "c41ef7a0-05b6-49c8-a301-6e5a7dc56a6e",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "7aa45b8a-af8c-4fe5-b0ae-be59e6ecd571"
        },
        "item": {
          "id": "ca32a8c6-9b4f-437a-94ca-ac0e406366ad",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "133bcccd-de3b-4f89-9715-ef8cf15beab8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c4404bd-26af-4450-81bc-c4630b6483e3",
        "cursor": {
          "ref": "31b8e1a1-64d7-4ee5-96b7-46b8f19f94c7",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "1063b2fe-dbbd-41d7-829c-ac41b29d8d20"
        },
        "item": {
          "id": "6c4404bd-26af-4450-81bc-c4630b6483e3",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a51b67eb-f8d0-4090-a1b8-ed43fb6c0026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb4c7580-1a45-48a4-8999-44387594a9c8",
        "cursor": {
          "ref": "8e3c2023-b3ee-4142-baef-aaee7344b7c7",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "bf224dd3-98b0-43ab-9391-d1c5e75cef7f"
        },
        "item": {
          "id": "fb4c7580-1a45-48a4-8999-44387594a9c8",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d6ee1100-2c66-4bc6-8f6d-73b2f09b3a98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d30d3f6-58d0-42f5-b429-14a5da0fb302",
        "cursor": {
          "ref": "4719904b-050c-4c5c-83fe-3e9288833c80",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "7b9d1fc6-8a2c-4bfc-b7b6-c90484e01388"
        },
        "item": {
          "id": "2d30d3f6-58d0-42f5-b429-14a5da0fb302",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "cea749c7-a622-427f-99ef-c801eca31e2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50b9ea93-5f99-4f0a-b329-875fd267d8f6",
        "cursor": {
          "ref": "7747dd92-2ec0-44db-9999-2932c14104a7",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "fa46b061-8bc1-4679-8fab-cb301b372d1b"
        },
        "item": {
          "id": "50b9ea93-5f99-4f0a-b329-875fd267d8f6",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "645b079f-651e-48ae-8b4e-0d198eb389ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1001f840-90da-42f8-99ad-56f6577cf397",
        "cursor": {
          "ref": "44007a99-04bb-4e29-80f0-ce326c3aff0f",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "053c8639-bd8f-48ad-82a7-a61162e3a6cf"
        },
        "item": {
          "id": "1001f840-90da-42f8-99ad-56f6577cf397",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4343c404-c5b7-4f1f-bf1c-c626a719b71e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b537a28d-c9ff-4079-8903-ae05b82ca943",
        "cursor": {
          "ref": "e8e10575-75cb-49e3-8398-2141b314445b",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3733abfa-9059-4b25-86bd-b27f37d060bc"
        },
        "item": {
          "id": "b537a28d-c9ff-4079-8903-ae05b82ca943",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8ccf9eb7-95fc-4013-81fb-1106a9082fd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b193db9e-a74d-49a6-9fcc-1b52e3d460b9",
        "cursor": {
          "ref": "ce73a3c3-06a9-4c55-b232-c9186d766926",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "fcc1a885-20c0-4915-ba28-78e6d02e7ed0"
        },
        "item": {
          "id": "b193db9e-a74d-49a6-9fcc-1b52e3d460b9",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "7115b4a0-8276-445c-ab78-3ab737a3048c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ae5a8b-adac-4eff-b05f-c90d1e185e6f",
        "cursor": {
          "ref": "0d8d9c89-4a13-4f01-930e-8bf200313f0f",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "404ccd26-b2e0-48e7-9c67-ea12507747c5"
        },
        "item": {
          "id": "c6ae5a8b-adac-4eff-b05f-c90d1e185e6f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9dee77b1-70b6-4cc6-bff0-c54c64f74739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edf6ad92-058c-4580-a58b-99a036796f55",
        "cursor": {
          "ref": "8e6b7d7b-1885-4392-901d-dd8f5ca5c97b",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "641520e8-cc22-49a0-bf36-2759eb4059c7"
        },
        "item": {
          "id": "edf6ad92-058c-4580-a58b-99a036796f55",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b71941ae-c83a-405a-9545-81611f02183d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c43f3bdf-a232-4e3e-bb75-0f069566171c",
        "cursor": {
          "ref": "c76e40b0-0a9b-4aba-84ba-8beace212045",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "387fd33a-e926-4935-a231-b39357787f54"
        },
        "item": {
          "id": "c43f3bdf-a232-4e3e-bb75-0f069566171c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "fda41cc9-5db2-4b32-b572-093498b810aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2be5fe78-afe8-4b78-92bf-20e46caa052d",
        "cursor": {
          "ref": "b58a4f75-0724-4e2e-b282-1281c2db7e22",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "b10ef3b2-d411-44ae-b19a-4693e48a8080"
        },
        "item": {
          "id": "2be5fe78-afe8-4b78-92bf-20e46caa052d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ce263bec-2c37-474d-bfa0-b42900eabdc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4a73525-8c05-4a7a-9508-ca56381a5c93",
        "cursor": {
          "ref": "198fa4f2-f160-47c3-928b-f0c53745dc24",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "2f4d7b48-4fb6-45b7-9989-b5a5f2d1f372"
        },
        "item": {
          "id": "c4a73525-8c05-4a7a-9508-ca56381a5c93",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "0a2b118b-5bf4-4e59-9a33-6723cb90265c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cfe3cc7-95f0-4c3b-8d52-1f49b51fa131",
        "cursor": {
          "ref": "6b14de38-69d5-4ad6-a221-5648f4a111ba",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "377ca952-4835-4484-8ab0-3b05060f4268"
        },
        "item": {
          "id": "4cfe3cc7-95f0-4c3b-8d52-1f49b51fa131",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f091f3a6-0e90-4442-a6f1-cee56ee5ea76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c898656a-23bf-4e82-aa68-9c7fe0714897",
        "cursor": {
          "ref": "bb7ecdfb-a042-43ba-ac2c-5ddcd364bbb9",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c4d61713-c180-489f-88e8-34cd9635935b"
        },
        "item": {
          "id": "c898656a-23bf-4e82-aa68-9c7fe0714897",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "8e6d5901-64fb-4e0c-a3e0-69b6c808be4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab1c12dc-c537-4045-a9fe-f396011af015",
        "cursor": {
          "ref": "d61f377e-7a6d-45ec-beb0-f241bfd8cebf",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ce74d07f-e3be-4bee-bfba-04cfa86270f7"
        },
        "item": {
          "id": "ab1c12dc-c537-4045-a9fe-f396011af015",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e86e4c35-86c6-4d6b-8534-6b456ad1217f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51aa34b5-ca9d-4733-b30b-527a2543878a",
        "cursor": {
          "ref": "ae05abb2-ec53-4198-82f3-f128f9c79fd1",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "1f96449c-d74c-46e9-8c3c-3ab2d598112e"
        },
        "item": {
          "id": "51aa34b5-ca9d-4733-b30b-527a2543878a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a62e8387-d252-45ee-bc7a-3afb423a762b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99edf1b8-5631-46b2-a347-9bcc8e469422",
        "cursor": {
          "ref": "10ad8730-4c9a-4739-a8e6-8557d3c21485",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "6d6228cb-04bc-4057-9864-510bd13c0b8b"
        },
        "item": {
          "id": "99edf1b8-5631-46b2-a347-9bcc8e469422",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "595ef61a-719c-4268-a470-c114e46a0dd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2844a969-ca3f-4f53-b9c1-fdd98fd6817f",
        "cursor": {
          "ref": "c284e582-e7f9-48ef-8655-93018bb5a416",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "db3de93a-3ad3-4677-a929-3f1f94f8a3c5"
        },
        "item": {
          "id": "2844a969-ca3f-4f53-b9c1-fdd98fd6817f",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "cde0ba4d-8db0-48ea-a1bf-d2d2e422a1ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7deec117-15ed-484e-a95b-f26e0bb5058a",
        "cursor": {
          "ref": "b5a73c7d-5cf8-477d-ab1a-45cc070e4d60",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "44a4b6be-6c32-48cf-ad21-a9028f78df36"
        },
        "item": {
          "id": "7deec117-15ed-484e-a95b-f26e0bb5058a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c6dae4d4-2584-4b15-88f3-0f011cd29183",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "5e662d26-adaa-42d7-92db-521bd85db7e0",
        "cursor": {
          "ref": "d2cc2c74-d1df-46cc-8ae4-01e965dd9637",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a082c735-5db4-4e09-957d-878df7550438"
        },
        "item": {
          "id": "5e662d26-adaa-42d7-92db-521bd85db7e0",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "e0e32e1a-ff76-49b3-8c24-1ae558cb7e0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "c1f000ee-a826-4c46-8dd1-5c095afd2020",
        "cursor": {
          "ref": "e1bfc520-88bd-46cc-8479-7fcba5381d57",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9ce8b848-e9b5-414c-9bc4-42e7b823fb4e"
        },
        "item": {
          "id": "c1f000ee-a826-4c46-8dd1-5c095afd2020",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "2972e4d5-340e-4cc7-ba05-fe3c195db3b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1f000ee-a826-4c46-8dd1-5c095afd2020",
        "cursor": {
          "ref": "e1bfc520-88bd-46cc-8479-7fcba5381d57",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9ce8b848-e9b5-414c-9bc4-42e7b823fb4e"
        },
        "item": {
          "id": "c1f000ee-a826-4c46-8dd1-5c095afd2020",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "2972e4d5-340e-4cc7-ba05-fe3c195db3b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a591e40-46ed-4ae8-b12f-2470731a6d8b",
        "cursor": {
          "ref": "edbf7f2e-b2a9-4c5a-920b-4919cba6d36b",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "26acb4d0-447c-43bd-867e-b13a35213d4d"
        },
        "item": {
          "id": "6a591e40-46ed-4ae8-b12f-2470731a6d8b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "cfed699f-641e-4988-a925-b1f7063e31ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "768e8d1e-3b04-413a-874a-7ca05c329393",
        "cursor": {
          "ref": "0e08d63a-8ac8-467d-a3b1-505f23d7e0fc",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "5d13a5ea-8a9b-4c51-9e1e-b6b7a510493f"
        },
        "item": {
          "id": "768e8d1e-3b04-413a-874a-7ca05c329393",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1381383f-3510-4cb5-a31e-e4d3c2184257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52f6e32a-b06f-4946-8558-ace21ce884b1",
        "cursor": {
          "ref": "986bc983-fdbf-4e3a-9764-94c197f255ad",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "03a1cee4-8467-41db-96e4-d8123f9e7b73"
        },
        "item": {
          "id": "52f6e32a-b06f-4946-8558-ace21ce884b1",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "aa165b24-19db-4a6c-ae49-c4de83eda82d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fa2fcb3-2411-4ccc-83d1-e6a8e53eec42",
        "cursor": {
          "ref": "e99f8717-cb74-4e4c-8948-cd9e89b8cb9c",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "c5606e16-b218-41f5-8101-21f5b59424e2"
        },
        "item": {
          "id": "1fa2fcb3-2411-4ccc-83d1-e6a8e53eec42",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "6e2e8f1a-d194-4894-8ed7-c2413f68b3eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b7e539b-ff2a-4aef-ba1b-5725f0f2464b",
        "cursor": {
          "ref": "78240090-d750-4194-928d-49f1c5dd3940",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "09289ff0-cbb9-4a2d-9554-8e9f8fa191d1"
        },
        "item": {
          "id": "4b7e539b-ff2a-4aef-ba1b-5725f0f2464b",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "624a2d1c-b8b4-4c04-aa79-d50bcdc86040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e8fac5d-9a24-44e1-8cd7-e1e0f185181c",
        "cursor": {
          "ref": "3660f511-33c4-4e00-8057-3c24e4baa695",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "3c8acf0d-dab3-4ad6-b9ca-d1e80fe3c6cc"
        },
        "item": {
          "id": "9e8fac5d-9a24-44e1-8cd7-e1e0f185181c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "e43de220-ebc5-46aa-88e3-4016d648552e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c34f546-9f46-4fa0-937f-08ea069d2b5d",
        "cursor": {
          "ref": "0c171b66-e3ee-4602-9c40-7d6704b6838e",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "af83ada2-d13c-4bf8-bc54-386e0fc6a8b1"
        },
        "item": {
          "id": "2c34f546-9f46-4fa0-937f-08ea069d2b5d",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "0fc1ecdb-0dba-4305-836b-e1e116587540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edf8ad11-8d55-40cf-a6e4-249300c466e3",
        "cursor": {
          "ref": "c3c305cc-3954-43e8-a6d1-811bae0cec4d",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "20d597dc-bce8-44cd-818f-d33bb8fdaca0"
        },
        "item": {
          "id": "edf8ad11-8d55-40cf-a6e4-249300c466e3",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "4d33eaf5-7a19-4acc-9e37-971a4d657eb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d28bb5-c971-4750-96c8-48663a699ad3",
        "cursor": {
          "ref": "96b630df-674c-4c1f-afa2-a523600d61ca",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "33c288ae-e5ce-4ed1-bfef-7fda022bf5ba"
        },
        "item": {
          "id": "55d28bb5-c971-4750-96c8-48663a699ad3",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "995f3e87-5cac-4c02-90e6-39e78766cf2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa64e13a-808e-48bc-8644-1f7a2d8f3cdc",
        "cursor": {
          "ref": "96f72e4a-605d-49b7-beed-e9d63c037d37",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f62a576a-73f0-4d83-902b-f87b91bc031b"
        },
        "item": {
          "id": "fa64e13a-808e-48bc-8644-1f7a2d8f3cdc",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "b5481384-7cce-4ce5-818f-fb3686a35c26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b72483-f34e-41a5-88bd-87bf2e79f77e",
        "cursor": {
          "ref": "20fbe74d-505b-4692-b26d-e9054772ca35",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "def657a7-f59a-4699-9c68-8469c1e514f6"
        },
        "item": {
          "id": "d9b72483-f34e-41a5-88bd-87bf2e79f77e",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a4917e03-0d56-4770-8cee-037bbadc9678",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e04b303-e9e6-4b2c-a84d-ccc94ac1927c",
        "cursor": {
          "ref": "2a22439a-99ba-46b3-b562-3861ab15ad6e",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f99e1fe7-2efd-49b4-98d9-178ff26022e2"
        },
        "item": {
          "id": "8e04b303-e9e6-4b2c-a84d-ccc94ac1927c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "3d807dad-c577-4cf7-9b61-f1393c7f7f89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0406cfed-01bb-4c74-9864-4c907612698d",
        "cursor": {
          "ref": "2fb15158-0fc3-4269-ab83-70ec02f29e17",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "85f7f64d-60a0-42e1-bc1b-f0144387b0bc"
        },
        "item": {
          "id": "0406cfed-01bb-4c74-9864-4c907612698d",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f79fe9bc-a186-423f-b85f-0074fc003d42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84615b80-2fb4-4dd0-aaf7-8166b8c3ca6b",
        "cursor": {
          "ref": "a6479a82-527a-49f9-817b-a920766d7e40",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "153f6563-345d-49ee-92b3-3354688a0758"
        },
        "item": {
          "id": "84615b80-2fb4-4dd0-aaf7-8166b8c3ca6b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "7b62961c-f799-4f2f-8cea-ef4e843d11f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45514134-ee18-4e0e-b585-1e2c2f14ca7a",
        "cursor": {
          "ref": "7fa25d02-62b5-4fd0-8df7-46f772e571de",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "6404f1bd-2c69-4de9-8464-f448fe86a321"
        },
        "item": {
          "id": "45514134-ee18-4e0e-b585-1e2c2f14ca7a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "d1b30c39-aa09-495e-a935-37d8ef26fb8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44cdf453-3467-4e11-9277-e62147681c96",
        "cursor": {
          "ref": "6e4e5a2c-6fc5-4e45-af63-834f8009e61e",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "d93fc20f-2726-470c-9c0b-578a7018a4c5"
        },
        "item": {
          "id": "44cdf453-3467-4e11-9277-e62147681c96",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "bc71babb-c1b9-46e7-9d9a-aa498b63cf95",
          "status": "OK",
          "code": 200,
          "responseTime": 450,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "9bf4e11b-5e67-466b-bc13-5b7e2dd3e402",
        "cursor": {
          "ref": "413616ca-cd38-4a17-8d26-ed66edff3590",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c73fb3c3-3084-4a73-b0e0-91692e462491"
        },
        "item": {
          "id": "9bf4e11b-5e67-466b-bc13-5b7e2dd3e402",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "413f2c20-81da-4b37-b7e9-d4cc7a6eed7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38d0de39-ca60-45c0-8cb9-2d0577af5149",
        "cursor": {
          "ref": "058a34c9-7dd6-4967-9f32-d1eb2883658b",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f0cb23dd-e5d5-4859-a712-bc09f084f3f5"
        },
        "item": {
          "id": "38d0de39-ca60-45c0-8cb9-2d0577af5149",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "866d4b2a-8614-46a4-90e4-57d85700968c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7142c90c-99c2-47ad-8a34-8ec23c0d4b41",
        "cursor": {
          "ref": "6a757c47-c33c-4bc3-9428-85665673af88",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "3eb67b7b-6706-4bb4-bc5e-b0ab1bb08c7e"
        },
        "item": {
          "id": "7142c90c-99c2-47ad-8a34-8ec23c0d4b41",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "acde02e2-fd9c-418f-a355-64be3abc29ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d17f4542-bd04-4047-a66d-26cc0440d658",
        "cursor": {
          "ref": "b4a1f675-5a74-4892-beea-a0767806a4ac",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f7a4679e-a9fb-43b8-a841-9fb092f1656a"
        },
        "item": {
          "id": "d17f4542-bd04-4047-a66d-26cc0440d658",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b931969d-8e85-4414-a0a9-6c9aa0b0410b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd9b90f2-4986-4d13-8915-0bf2ecafb863",
        "cursor": {
          "ref": "2138f8f2-3982-4d24-8e8e-241835b2fa42",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "1e427aa7-b508-442c-9489-5d06abe2cef8"
        },
        "item": {
          "id": "cd9b90f2-4986-4d13-8915-0bf2ecafb863",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "ad343c35-3889-43a9-adba-a453f9b73131",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bebe849-2440-4aee-b8fe-6ba1088bc17d",
        "cursor": {
          "ref": "e8da7956-9f2d-4f3e-b7e1-c52cdb0bcceb",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "fa28b02a-498b-41e5-b7d6-70c5a34c61f2"
        },
        "item": {
          "id": "5bebe849-2440-4aee-b8fe-6ba1088bc17d",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "0909fa3b-2cf9-4570-bdd9-0bdc1b462881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0e6e5ef-4a88-46c6-bff1-32392b274b2b",
        "cursor": {
          "ref": "e72c71b8-9057-439d-95be-4679a2983387",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "80e2e9b8-0a11-4078-9bbe-51ca25aed0c8"
        },
        "item": {
          "id": "d0e6e5ef-4a88-46c6-bff1-32392b274b2b",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "83d98bc8-5d0d-4ffd-ab42-07b8eaaa0df6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "675b1b82-f767-4fe5-90ff-b3b2b94b0fd6",
        "cursor": {
          "ref": "3613d556-2fe3-4115-8165-5cc4eb7fc5d5",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "dc23d9bc-09ae-4832-9989-40fb2c24b1ee"
        },
        "item": {
          "id": "675b1b82-f767-4fe5-90ff-b3b2b94b0fd6",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b8e3d73c-7f78-4805-89e3-371cae0926cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "739eea95-35bc-4782-8b09-89b87522ae77",
        "cursor": {
          "ref": "b6f163b1-4090-41e4-a1de-0784bb064d4f",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "846b3121-4bd3-465e-8b0f-9fb459484729"
        },
        "item": {
          "id": "739eea95-35bc-4782-8b09-89b87522ae77",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "0f225d0a-b558-4c1c-a818-af0c9a511e24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73583295-b852-4260-a179-edf0b329817e",
        "cursor": {
          "ref": "18338671-9245-4fb6-b526-9e386fe34447",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "131842da-b117-4467-8a33-bfe5a7d0c3c5"
        },
        "item": {
          "id": "73583295-b852-4260-a179-edf0b329817e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "04d1ba6d-dace-4112-a1fa-0a564e450741",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7312cc32-9a20-4b60-abe8-dd4a3bae6652",
        "cursor": {
          "ref": "2d263cc5-a6ca-45bf-9ba1-e730a5fe43e5",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9e38626f-8e91-41f0-8dfd-783e5895c3ee"
        },
        "item": {
          "id": "7312cc32-9a20-4b60-abe8-dd4a3bae6652",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "0b5dd709-a356-4884-89a8-9a999f5195b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c0cafc2-c66e-4c89-a328-d7eb7523f12e",
        "cursor": {
          "ref": "2532d68e-39c6-434e-83e5-c928e3136461",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "38a4b48f-a6a3-43e9-8f52-057d48ce86be"
        },
        "item": {
          "id": "1c0cafc2-c66e-4c89-a328-d7eb7523f12e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "a3b626ac-4369-42cb-ba66-510651370ff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d344cb6-98e1-4270-86d9-4ae222b9a0f9",
        "cursor": {
          "ref": "c9eaaa21-3cc7-4ed8-9594-3968eb9994b9",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "915328f9-a74e-4c31-ac94-be06fac9e061"
        },
        "item": {
          "id": "7d344cb6-98e1-4270-86d9-4ae222b9a0f9",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "2a6f3d9b-7952-43ba-baea-735fa237167a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2584dba1-5af8-483a-8df8-50d481227574",
        "cursor": {
          "ref": "3498b645-57fc-4cc4-aaf8-726039201344",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "20c57073-a816-480a-83ab-066d0f321cd0"
        },
        "item": {
          "id": "2584dba1-5af8-483a-8df8-50d481227574",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "9ce3831f-fa9f-4a9a-856d-3ef134ddb311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3075b54-97c0-4bb2-9c73-cfbfe90af3f2",
        "cursor": {
          "ref": "91eb309e-0585-44cf-86aa-5c192a201ca2",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d2d9bd9c-39fc-419e-b02e-eb0f5a4ee96d"
        },
        "item": {
          "id": "c3075b54-97c0-4bb2-9c73-cfbfe90af3f2",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "fe37d3e3-c678-4449-99df-8a23d21787dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb116f46-5be9-4c2b-a873-1abf09b99b3e",
        "cursor": {
          "ref": "133174db-e90f-43a2-9148-743de44190cd",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "27bbd5ac-4625-4d7b-bb22-6e8e39bb3f6d"
        },
        "item": {
          "id": "bb116f46-5be9-4c2b-a873-1abf09b99b3e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "31a78df0-83ef-4d59-969e-49bd15e4f74e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "106cbbeb-092d-47e1-b452-0d07bca8987f",
        "cursor": {
          "ref": "7b90a6fb-d7b4-4ae4-9edd-bf605ec7057b",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "8a1196df-5f23-42c6-a883-18017a3d42dd"
        },
        "item": {
          "id": "106cbbeb-092d-47e1-b452-0d07bca8987f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "7450009f-e92d-4989-a9b5-e58af94e9160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a615944-3e7c-485a-b07b-4e4e6b9536f5",
        "cursor": {
          "ref": "75d90595-f64f-4b52-acda-3f20bf354742",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "8704c9bd-c471-4503-a45a-bc3178233e3b"
        },
        "item": {
          "id": "1a615944-3e7c-485a-b07b-4e4e6b9536f5",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "24ce5142-68cd-49b1-8aa1-d0624359e8d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9031f05c-fdf8-4f4b-afc0-a8eb84ffeeac",
        "cursor": {
          "ref": "b3383d8d-6cf6-4146-8e79-6a3d79ac27be",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "fcad45cc-50c4-4503-adfc-5b770f1263ee"
        },
        "item": {
          "id": "9031f05c-fdf8-4f4b-afc0-a8eb84ffeeac",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "4a980ec2-e082-45d4-aed5-c83a940d0013",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2d8a698-7305-4027-bc4b-26b83a59073e",
        "cursor": {
          "ref": "2ead9a73-dedb-427d-b8ab-c473faaef4f0",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "b0c98931-cf99-4192-b3f2-afd4f7d64631"
        },
        "item": {
          "id": "e2d8a698-7305-4027-bc4b-26b83a59073e",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "de6a833d-8b26-4d09-865c-1f78acc5d4be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b2a20be-19c8-4517-9a95-408d2793e01d",
        "cursor": {
          "ref": "d2fa1147-9f89-430a-90a5-e6201dd8ebce",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "83f01b4e-ab32-4e41-8858-c88fe8e67b36"
        },
        "item": {
          "id": "7b2a20be-19c8-4517-9a95-408d2793e01d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8d17e4ac-e47b-4e49-84b1-dc4a63ceae36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9d69139-381c-45bd-8f91-4fe454d4a013",
        "cursor": {
          "ref": "c8e6d9da-791b-4b57-92b3-24da6c938206",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "65ef4d0a-2997-4435-9793-2ff25ca0ed10"
        },
        "item": {
          "id": "f9d69139-381c-45bd-8f91-4fe454d4a013",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "715efbad-d92a-4215-885b-d18581b63123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5de9ea0-02d8-4192-9627-f1634747b47a",
        "cursor": {
          "ref": "02f273c1-6433-40cb-910a-084fb634c9fe",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "45f14a01-51d2-45b0-b852-cc88c9be2972"
        },
        "item": {
          "id": "e5de9ea0-02d8-4192-9627-f1634747b47a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "9acb46a8-deb8-4e32-a7a6-e21766b68b34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8648927-ff76-4fa7-8204-b82ad2781daf",
        "cursor": {
          "ref": "dbfda144-be34-4c05-9658-6eb96eed492f",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ae23ec8c-63fd-4a5b-bbaf-85ad99597d54"
        },
        "item": {
          "id": "a8648927-ff76-4fa7-8204-b82ad2781daf",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "266cbe27-f8ae-4711-a2e1-56533df0ef0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc21a266-d0fa-4fa7-8d4e-1f89a1cabdea",
        "cursor": {
          "ref": "8894885f-e158-48eb-855e-1b63506cbfe7",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ca6f82e4-99ce-49cb-b21a-a97a7e69d81f"
        },
        "item": {
          "id": "cc21a266-d0fa-4fa7-8d4e-1f89a1cabdea",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "de22d60e-be9c-4fa5-8edf-72b81abc68b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27a491a5-9f98-4c35-9439-566d6d9ebb5c",
        "cursor": {
          "ref": "dc4b6fce-d4ef-4a27-b484-5c020b0c5ed0",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "985c6c79-1a92-49b2-86f6-5177e1236e93"
        },
        "item": {
          "id": "27a491a5-9f98-4c35-9439-566d6d9ebb5c",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d0236f1f-5777-409a-8f22-a001ec00d455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f38c103-9e52-474b-a6f1-97c906d92cff",
        "cursor": {
          "ref": "235a96e3-57ca-4070-b42c-c0d3ec7b4464",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a735db20-bc49-4672-8af3-b8e1271beb66"
        },
        "item": {
          "id": "3f38c103-9e52-474b-a6f1-97c906d92cff",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6d35bed0-5ffd-4985-85db-0ffa9b1bd7bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6281aec-c343-4097-a797-c61a9ecff15e",
        "cursor": {
          "ref": "67e59558-519c-4657-b29b-25b30abcea68",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "b1a7ea2f-2b31-4571-b94f-dc91e77c2ca6"
        },
        "item": {
          "id": "c6281aec-c343-4097-a797-c61a9ecff15e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "bbe59907-01d5-4c02-8fd9-4d0f58f2934b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66062648-8dad-4861-aa48-dbbdb5c2cd6a",
        "cursor": {
          "ref": "458b1eca-d06e-4ec9-ae63-7a9af1199490",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a1896f8c-36a2-4130-8d90-c56fc40ba33f"
        },
        "item": {
          "id": "66062648-8dad-4861-aa48-dbbdb5c2cd6a",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "45ea6bc9-9b72-40f4-92b7-5fce8cf1ab23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a538d78-4ed3-4a40-a9c7-1b6f6256ce3a",
        "cursor": {
          "ref": "01f7b81a-a5b3-46e4-9cd8-6beac0a79e57",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "4502a762-934a-4c7e-99ee-648ce47c7b9a"
        },
        "item": {
          "id": "1a538d78-4ed3-4a40-a9c7-1b6f6256ce3a",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "3ed04f59-0f7c-498b-b1a4-79eaa93bafdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b264d5b-7cab-484c-aa2f-1a4d6d5533bf",
        "cursor": {
          "ref": "753d9f30-793e-40c2-b91b-40afe5f0709b",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "16154e43-4e8f-4bd8-a96c-4860218ba53b"
        },
        "item": {
          "id": "1b264d5b-7cab-484c-aa2f-1a4d6d5533bf",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f9df5b4d-06b5-431f-a233-0ff05271256f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cebc4df1-fbcc-419d-b3cc-58549f8ab077",
        "cursor": {
          "ref": "021fb4bc-b525-418a-bb61-7d58f7596514",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "ce4b4d6d-d3f4-407e-ad43-3aef1cd32651"
        },
        "item": {
          "id": "cebc4df1-fbcc-419d-b3cc-58549f8ab077",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "a11df484-6638-4d42-8631-bcc03e1a40e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29ebe457-78ab-4b85-bbcc-f067cf606c44",
        "cursor": {
          "ref": "aa32a7b8-6917-4816-aecc-26193cc3f70d",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "5fde9b76-215c-4d2f-8af0-3f3c38f4b1e3"
        },
        "item": {
          "id": "29ebe457-78ab-4b85-bbcc-f067cf606c44",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "7574b09a-0cb6-4fef-8e70-4c6f5b3827dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8538254-6cff-4161-8adf-eeb6112bbd3b",
        "cursor": {
          "ref": "00884397-4603-4cff-bfa9-1ea9b880770c",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "f49d15f3-3849-4e6d-be23-1fc99a94a925"
        },
        "item": {
          "id": "e8538254-6cff-4161-8adf-eeb6112bbd3b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "9798b433-578a-4167-affd-448e768d9b9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "176aaea4-1848-4bca-a26e-9fe36414f8c9",
        "cursor": {
          "ref": "caa8e68d-c271-4e33-86b5-d4f05f393cf6",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "3624e0a8-6f45-4390-bddd-41b544e2d267"
        },
        "item": {
          "id": "176aaea4-1848-4bca-a26e-9fe36414f8c9",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "a329c7c5-98b9-4b84-a5ba-2d6671d0a4af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd243771-5748-447a-a545-50f6b3f317b8",
        "cursor": {
          "ref": "db320cfb-91bd-4720-b97c-1e0cc240f90d",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "6e8754b3-9be7-4d27-901e-2d899e9139aa"
        },
        "item": {
          "id": "dd243771-5748-447a-a545-50f6b3f317b8",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "d5c9bed7-898c-4563-8c49-62cd265012b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86b1e730-e45f-4c07-aed9-00c6f581d837",
        "cursor": {
          "ref": "74d20366-b454-490b-8d4d-28c152a3df4c",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "e51c5c06-0828-4968-9ab2-80696d235f4b"
        },
        "item": {
          "id": "86b1e730-e45f-4c07-aed9-00c6f581d837",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "055c2d47-b126-4435-9c7f-cdfa11afb050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73343f3e-7988-4499-bb7e-14ccee3dbb3e",
        "cursor": {
          "ref": "c4cc4e93-01c2-4270-ad06-6df7dca1d2b3",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "6ddae613-58de-4ae4-b042-b3a804e83eea"
        },
        "item": {
          "id": "73343f3e-7988-4499-bb7e-14ccee3dbb3e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "4a98ef42-2df6-4740-88cb-0952a7c1b9de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3418e82a-d8d4-4f87-bc3f-75430c009085",
        "cursor": {
          "ref": "232499be-fc7c-485b-96b5-09e229830cfc",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "c8bed482-7459-42f8-8b9a-1cae247a4bb9"
        },
        "item": {
          "id": "3418e82a-d8d4-4f87-bc3f-75430c009085",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d1a84d57-9eac-4edf-a310-0cd0b376c9a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c0043fc-e1c3-4ae5-b06b-85bae94a4151",
        "cursor": {
          "ref": "011c8b94-9fa2-4122-bc02-6ba7843337f5",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "19e930ae-16d3-4f4d-b8c9-d4b287f6f55a"
        },
        "item": {
          "id": "6c0043fc-e1c3-4ae5-b06b-85bae94a4151",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "fb410169-9323-4896-80fb-87807e99c8a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "937a477b-cd5d-4585-a59c-6c9e40d3a269",
        "cursor": {
          "ref": "965ef2bf-c5d9-4f25-96d5-d93a3994ee10",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "34918a0d-53c3-4140-8fd4-e58a221e6a6a"
        },
        "item": {
          "id": "937a477b-cd5d-4585-a59c-6c9e40d3a269",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "c10a343d-ac72-41b5-9700-b7ab75ad2c54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c62db87-0a57-41cd-9d38-90b29416a39e",
        "cursor": {
          "ref": "7840c89b-486d-4be9-bc16-2274ad3a8e73",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "89eda113-5ea9-4336-8c56-cff801bc1264"
        },
        "item": {
          "id": "4c62db87-0a57-41cd-9d38-90b29416a39e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "47b243f3-4542-4425-b167-d21e577ddf0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccb7aa72-3154-49fe-99ff-563ef043e30c",
        "cursor": {
          "ref": "46539a3e-6c89-4f82-a3ff-f925e3d99cf4",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7270a15c-cf57-4065-a368-8414b2097903"
        },
        "item": {
          "id": "ccb7aa72-3154-49fe-99ff-563ef043e30c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "7a6d7cb1-f278-4c3f-b174-55969b98953b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b22ac0a-5e1f-4d65-a461-6a4595cafad0",
        "cursor": {
          "ref": "b84cdfbc-7b53-4c17-85e8-368135fa781c",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b3422279-1dd9-4c71-ae88-7598f1da276f"
        },
        "item": {
          "id": "6b22ac0a-5e1f-4d65-a461-6a4595cafad0",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "d9acc5fd-eb9a-4b60-85d3-b69da3c05079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da2d8a5b-22e6-4f39-8a6f-f9fc0ce90f92",
        "cursor": {
          "ref": "386c06be-00b9-427d-800b-6415b7fda9eb",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "31ae220e-533e-4f37-9ace-52ef75d322a6"
        },
        "item": {
          "id": "da2d8a5b-22e6-4f39-8a6f-f9fc0ce90f92",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3ed408b3-e586-4194-a630-bdf3875e090d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "720a552e-60c3-4e45-8a4f-7803f0146164",
        "cursor": {
          "ref": "9bd3d785-6f94-476e-8771-df5c530ab2b6",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "5aab5fcc-6a0d-4d37-82f1-ed42611a28de"
        },
        "item": {
          "id": "720a552e-60c3-4e45-8a4f-7803f0146164",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "8bc08bfa-70c4-42f8-a0f1-e36148ab499c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eaa1a60-fdec-47c1-860f-6535d949524e",
        "cursor": {
          "ref": "13e7f707-3f69-46e8-a0b1-32ee89762fbb",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "0cc9380f-f653-47e6-ab33-5f33153dfa97"
        },
        "item": {
          "id": "6eaa1a60-fdec-47c1-860f-6535d949524e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "85d23530-af15-44e7-83ed-84c32758cca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0de85400-54bd-40e2-8442-35f4016c07f0",
        "cursor": {
          "ref": "b22df7e5-86a7-4a74-91da-94a22ed6dd89",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "4126f994-702f-4a92-b62c-7d0e461dd7e9"
        },
        "item": {
          "id": "0de85400-54bd-40e2-8442-35f4016c07f0",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ec93006f-371b-498d-a09e-98e1db8dad64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7430817f-e742-4029-b67e-295388137ad6",
        "cursor": {
          "ref": "3d3bb317-ffa6-46e6-abf1-069ec92b99a4",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "6a1bc9a6-daee-4660-a523-f476dab25654"
        },
        "item": {
          "id": "7430817f-e742-4029-b67e-295388137ad6",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "9a1a4f00-816a-47fa-abbf-f4b52f61f438",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee75756-d495-474c-9692-650a7132f54f",
        "cursor": {
          "ref": "a141e77c-50ee-4187-a1e5-82710cbac90f",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "123e1ace-e75a-4ccd-a5bb-ebd461e43f0f"
        },
        "item": {
          "id": "1ee75756-d495-474c-9692-650a7132f54f",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "044d4bf1-90aa-40fa-8222-ce33e372a536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dfda9c0-04f1-4598-a52f-4acd6f4715f9",
        "cursor": {
          "ref": "ea29580c-4d54-4ce8-9b49-f7185d7ed91a",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "9730421e-0d4a-4764-9da2-f1b254a65437"
        },
        "item": {
          "id": "1dfda9c0-04f1-4598-a52f-4acd6f4715f9",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "c89be702-8cce-4e1a-8abd-248eebda6b1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75ec7659-0a33-4a35-9d8b-86a62a115001",
        "cursor": {
          "ref": "cdb93432-94d6-4228-aeef-f55ab4eca5a8",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "99f4bebe-c604-4131-a86b-7a1ca9200b53"
        },
        "item": {
          "id": "75ec7659-0a33-4a35-9d8b-86a62a115001",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "567e4002-1aee-4bc5-938d-31639043fa88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "942d0486-f15f-4530-8aa5-3b41be0ae40e",
        "cursor": {
          "ref": "3562e617-f3f0-4115-bd64-537a4d6beb0c",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "461e1c41-9e16-489e-a673-c8c0085a5877"
        },
        "item": {
          "id": "942d0486-f15f-4530-8aa5-3b41be0ae40e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "e6f2505c-0ed9-4a38-b747-0bf656cfe0c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c41ec16-71c4-48e8-a2e6-6ecaa6389e1b",
        "cursor": {
          "ref": "85852f40-4b2f-40e0-91dc-5fcb329087f7",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "39c5a823-a192-4261-932a-27bdc1cbd3cd"
        },
        "item": {
          "id": "6c41ec16-71c4-48e8-a2e6-6ecaa6389e1b",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "a2904888-d3d2-4005-a9c2-cd83a621df0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71911d52-ae3e-4f8f-bd9c-90cf677de659",
        "cursor": {
          "ref": "67c51ec3-8f9b-4de6-8d95-8f52ee7e75fb",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "aaab22dd-f3d4-4ae7-9725-005be6c7be9f"
        },
        "item": {
          "id": "71911d52-ae3e-4f8f-bd9c-90cf677de659",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "1e9095da-ea12-47a5-8e03-2204d2e2b18d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68c73e17-dce9-42e5-b46b-c3962d25d216",
        "cursor": {
          "ref": "57379538-ac9b-4c77-ae4e-88abf13b4e2a",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "26fb9cb6-5826-42b6-8e35-8550f9507865"
        },
        "item": {
          "id": "68c73e17-dce9-42e5-b46b-c3962d25d216",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "77fb5d26-76da-4fdb-8139-021b85486f2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4714c78-5060-4d89-9cb5-f0a7a55edfc8",
        "cursor": {
          "ref": "93f8c879-1f10-4ef1-9320-45a6949419ce",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "eca28e17-8186-45b1-a6ae-a506219fec17"
        },
        "item": {
          "id": "f4714c78-5060-4d89-9cb5-f0a7a55edfc8",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "8b2f521c-6c27-4c04-9d4d-8ca918d3c561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a508e210-2b70-4f27-85e1-b95f8268912e",
        "cursor": {
          "ref": "9eb1c69a-8735-4152-ac8c-c1cd7d5ae748",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "92694a77-7457-4bea-8070-e84c652135d5"
        },
        "item": {
          "id": "a508e210-2b70-4f27-85e1-b95f8268912e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "6fb0a817-4a5b-4d27-96db-b287595f8fb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3539c216-6122-4564-8390-6d0fa73f598b",
        "cursor": {
          "ref": "57b2fc05-a245-4fa8-b5c7-b5bf852cf338",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "5170d9df-b560-4d74-9f65-5eacab95c2aa"
        },
        "item": {
          "id": "3539c216-6122-4564-8390-6d0fa73f598b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "964a42df-c488-4af7-b2ef-ac66cdbba91f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68f68ab2-adeb-42c8-aae4-7696d4c6898a",
        "cursor": {
          "ref": "79a0e724-33af-4fe6-9046-2a4663ce61ef",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "66989d67-1967-4009-8bce-50d106ee6fb7"
        },
        "item": {
          "id": "68f68ab2-adeb-42c8-aae4-7696d4c6898a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "93012f00-a305-4f54-a467-3a2918828a1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "116a46ec-9a4b-47d2-8dbb-aba2deb3d7f5",
        "cursor": {
          "ref": "fb8f8e4a-11df-41c6-839d-2e8a103be784",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "e55fd5dd-a288-4f3b-b5ce-c99f23197f80"
        },
        "item": {
          "id": "116a46ec-9a4b-47d2-8dbb-aba2deb3d7f5",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "a9b98009-3f21-4534-8f0c-963e773fac6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30db074c-1c17-4cf7-ad25-4765cbb42164",
        "cursor": {
          "ref": "4776be23-ddc8-450c-8117-cac8fc02f72f",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c70769b3-91c6-47ea-ae2f-00caae77ed40"
        },
        "item": {
          "id": "30db074c-1c17-4cf7-ad25-4765cbb42164",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "deed5d59-112f-4e3d-ae1e-262cd776a05d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab2ab52f-f1f7-45ea-a54d-026fef1c606f",
        "cursor": {
          "ref": "44fdea32-9d54-45ee-994b-7ca7dffaf765",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "44b4efae-7e49-489d-b53c-340e6e1250fb"
        },
        "item": {
          "id": "ab2ab52f-f1f7-45ea-a54d-026fef1c606f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "4dbd58c1-d10a-4c1a-9099-421145ed3614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f90adf11-0525-47ae-a5fd-143bd2c61999",
        "cursor": {
          "ref": "37785829-05e0-49e8-9d3c-268375516c3c",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "af6a66f0-d6c2-4f73-a45f-a6b81bf8cd99"
        },
        "item": {
          "id": "f90adf11-0525-47ae-a5fd-143bd2c61999",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "225bb261-b68f-4d61-9c88-754db9ad9c76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a34085b-44ab-432e-b334-d82b48102070",
        "cursor": {
          "ref": "86d272fb-e08e-4664-aa5d-3298864543cf",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "cd70ec33-b286-419b-b20e-21b01206454a"
        },
        "item": {
          "id": "4a34085b-44ab-432e-b334-d82b48102070",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "34a28bc4-4e4d-498b-a3b2-a492d9570abd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b69040f-c2dc-49b2-9233-a70bae1dc536",
        "cursor": {
          "ref": "786c1e2a-12c0-40d3-bf95-1951ec45200b",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "5b190912-9307-4f16-8845-5d1100e7eeaa"
        },
        "item": {
          "id": "4b69040f-c2dc-49b2-9233-a70bae1dc536",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "19c7c7e1-5e97-4b40-b7e3-90a81f660a47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79c2271c-e557-4289-ab60-916cd652060f",
        "cursor": {
          "ref": "06fbe225-7478-45ec-ae33-b080484d7f4c",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "1548fa99-a675-4ebe-a584-68855c056510"
        },
        "item": {
          "id": "79c2271c-e557-4289-ab60-916cd652060f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "bfe38661-2c08-4a1e-9db4-e0bb1edf56a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28c6d39f-d0a4-4ad6-82c0-f2a56691d03a",
        "cursor": {
          "ref": "ef5338ca-ae1c-493c-b6db-a85bb3b2b6da",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "436dbc52-5973-4d2e-91cc-978803b16466"
        },
        "item": {
          "id": "28c6d39f-d0a4-4ad6-82c0-f2a56691d03a",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "77c167e8-9886-445b-ae87-f19c8c9aafdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a6d446c-16de-4175-b31d-fbf02c5ce6bd",
        "cursor": {
          "ref": "66724166-5da4-4b1b-a2e9-f65b3d4262f0",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f6c6f6ce-dd7c-4f60-ae78-bf22875eda9d"
        },
        "item": {
          "id": "8a6d446c-16de-4175-b31d-fbf02c5ce6bd",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "aeab4140-8eb7-4034-a696-c30c6c685aa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "949ef6ab-b6a4-4afb-970b-6ecb3d3b3de7",
        "cursor": {
          "ref": "2f949259-fad6-494b-a928-3b603fcf0435",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "683b413d-c29d-43f8-a882-04ac2d91454a"
        },
        "item": {
          "id": "949ef6ab-b6a4-4afb-970b-6ecb3d3b3de7",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "138eb986-c81d-44db-abcc-01c8595a582c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "713d10b6-a830-45ce-9f90-51c8c12b8631",
        "cursor": {
          "ref": "35f101b6-8290-456f-bbe6-a32a0cfd3632",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "258bb4a9-b4d3-4732-8921-d3028a96ff8f"
        },
        "item": {
          "id": "713d10b6-a830-45ce-9f90-51c8c12b8631",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "85a48363-77d4-411e-8ebc-1a23e7197392",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bb9dffe-7a0d-4fc6-9013-d0b1bb206f36",
        "cursor": {
          "ref": "487cdbdb-57a8-4ad3-a7fe-991487897e82",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "368a6044-0943-4a0f-8641-0fb2479bc25f"
        },
        "item": {
          "id": "8bb9dffe-7a0d-4fc6-9013-d0b1bb206f36",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "acbcade8-c895-454e-9442-3a2dc7a71596",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b7b97c1-d71c-4c9d-bb4c-a180c8afd172",
        "cursor": {
          "ref": "c499da1d-37cb-42ef-94e3-f686245b2925",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "25570b89-dc61-4851-a626-d63925ed345a"
        },
        "item": {
          "id": "9b7b97c1-d71c-4c9d-bb4c-a180c8afd172",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "405d0cc8-381c-43b4-a59c-5cb47340fca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57f048e9-c4ab-4824-93c5-61a166a0f599",
        "cursor": {
          "ref": "2538db85-62fd-475d-bc97-3415a8068fe5",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "5e41eb84-1e9c-4d8e-8d33-5d26ece60e5d"
        },
        "item": {
          "id": "57f048e9-c4ab-4824-93c5-61a166a0f599",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "51194252-ab4a-4e17-8e11-04e7a7f32968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c41fe8d1-9df6-4579-bb04-4971e5dd57de",
        "cursor": {
          "ref": "516b34ca-d474-4bac-9277-1e6c2e74a920",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "18a12a34-bf29-497a-b4de-c2246574b341"
        },
        "item": {
          "id": "c41fe8d1-9df6-4579-bb04-4971e5dd57de",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "50fa5c85-b102-4270-b78b-b190e30daca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24184b54-055b-43d0-81a7-d60ebfe1fe31",
        "cursor": {
          "ref": "7188f905-1520-49ac-946a-642dba3d8f17",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "14029145-6631-4303-a261-7dbb5b92ee3e"
        },
        "item": {
          "id": "24184b54-055b-43d0-81a7-d60ebfe1fe31",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "ad52449a-1429-4110-b234-585e707eae6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57bfd943-ec70-4fd4-9afe-4d8c7712a231",
        "cursor": {
          "ref": "d61570f2-d42c-4432-a657-52384ca45d2c",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "922f2fe8-2890-4f4a-a4da-7b34df639894"
        },
        "item": {
          "id": "57bfd943-ec70-4fd4-9afe-4d8c7712a231",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "f0b1367c-ac1c-4f9c-b76f-6e066ed38279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d0484c5-0ffc-48f5-aa50-c7dd1751b694",
        "cursor": {
          "ref": "140e2fe4-1e36-4900-82f1-c30ffa0d8e1a",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "2ab5c796-e599-42ee-9a21-e0a49b0877b3"
        },
        "item": {
          "id": "7d0484c5-0ffc-48f5-aa50-c7dd1751b694",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "b1af556f-ef3d-4449-a393-e7bdc3857e95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0f1c613-2f33-4741-8c95-0df674a5e9e1",
        "cursor": {
          "ref": "1cd0bdd0-5cd2-4ec0-a6c5-98a480e4f5ac",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "aaecbefa-ca7a-4324-9c97-6ff94d369ea3"
        },
        "item": {
          "id": "c0f1c613-2f33-4741-8c95-0df674a5e9e1",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "fa300c11-5036-4959-8044-312bc6714390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4be633eb-cb22-4850-a27d-51748be1c541",
        "cursor": {
          "ref": "9672f6a1-a9c3-4df7-ab84-eb89e6924e71",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "71efaa9f-173d-4595-ab69-31585a4a5dae"
        },
        "item": {
          "id": "4be633eb-cb22-4850-a27d-51748be1c541",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "efd59b3f-a0ec-4670-b663-4ad45ad3f03f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "138e588a-c5b3-4ed4-ad94-0abdb6cfd447",
        "cursor": {
          "ref": "10ee48e0-da6d-4ec8-bd9f-24184425d09a",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "368c25aa-f9a7-4754-920c-54d018aab18c"
        },
        "item": {
          "id": "138e588a-c5b3-4ed4-ad94-0abdb6cfd447",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "2fc26ec6-8873-4cf5-a657-044a67acd7cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "16da9692-0467-47a0-a10c-d407793bdc1d",
        "cursor": {
          "ref": "58d021f2-5e4b-49ea-b715-485aacc16be5",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a3a8be8c-1884-413d-9e77-8611c58cf2bc"
        },
        "item": {
          "id": "16da9692-0467-47a0-a10c-d407793bdc1d",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "ad81ac2a-300c-4b3a-a697-0f4edaa7208c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "2602c2a1-a48a-4ac8-8ef4-994e74aab605",
        "cursor": {
          "ref": "99fdb562-2277-432c-a558-bf8b1d6e9603",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d6b742b2-6d3a-4cf6-8667-8d6afe34259d"
        },
        "item": {
          "id": "2602c2a1-a48a-4ac8-8ef4-994e74aab605",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "4552b18d-a86c-4277-bdd6-5cf4fdfb4df4",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "43756b26-31f8-41e4-8eda-a5c1bc5860af",
        "cursor": {
          "ref": "1b52bd7d-14d6-411f-a8a5-60be753e06bb",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "54675f53-4d0e-43ab-b459-0c873469c6b9"
        },
        "item": {
          "id": "43756b26-31f8-41e4-8eda-a5c1bc5860af",
          "name": "credentials_verify"
        },
        "response": {
          "id": "5967ed41-92e5-4cac-b719-939ebb33058b",
          "status": "OK",
          "code": 200,
          "responseTime": 1693,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe0df771-468e-419e-9bc9-89ec3586b57e",
        "cursor": {
          "ref": "98f3c74b-e386-49a0-8c1d-e67d67c8cb19",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "6c2cc13b-9a69-49ba-9039-e5944bb20180"
        },
        "item": {
          "id": "fe0df771-468e-419e-9bc9-89ec3586b57e",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "418d5ae3-e70b-45e2-bc07-f685a830a161",
          "status": "OK",
          "code": 200,
          "responseTime": 2150,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "feea25bb-8e7a-4a91-905a-67a5fedaa338",
        "cursor": {
          "ref": "a2db1a4c-9787-4c28-a21c-859814a6a284",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "747bb40c-25bf-4ffb-a928-251aea6617cd"
        },
        "item": {
          "id": "feea25bb-8e7a-4a91-905a-67a5fedaa338",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "89706ea0-b6d6-4a4f-8d1c-7242f57041d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "feea25bb-8e7a-4a91-905a-67a5fedaa338",
        "cursor": {
          "ref": "a2db1a4c-9787-4c28-a21c-859814a6a284",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "747bb40c-25bf-4ffb-a928-251aea6617cd"
        },
        "item": {
          "id": "feea25bb-8e7a-4a91-905a-67a5fedaa338",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "89706ea0-b6d6-4a4f-8d1c-7242f57041d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "feea25bb-8e7a-4a91-905a-67a5fedaa338",
        "cursor": {
          "ref": "a2db1a4c-9787-4c28-a21c-859814a6a284",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "747bb40c-25bf-4ffb-a928-251aea6617cd"
        },
        "item": {
          "id": "feea25bb-8e7a-4a91-905a-67a5fedaa338",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "89706ea0-b6d6-4a4f-8d1c-7242f57041d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "33e5d226-a6a3-4388-859f-1b69d2511888",
        "cursor": {
          "ref": "cc7b2905-fcaa-4cfb-90d3-d55648380e9d",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c28b1d9c-4553-4bd4-ab86-681ef6412d0b"
        },
        "item": {
          "id": "33e5d226-a6a3-4388-859f-1b69d2511888",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "98de83e7-1626-44aa-9cf7-d7e029391742",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "335e1639-56ec-4fd5-bbc3-35c097b98290",
        "cursor": {
          "ref": "3dd10398-c523-4be3-a298-55882dfc655e",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d2d526b8-76a1-48a6-91b6-f079f4d21915"
        },
        "item": {
          "id": "335e1639-56ec-4fd5-bbc3-35c097b98290",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f2f0ccde-2b40-4f99-b1f5-dc9e11512988",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "335e1639-56ec-4fd5-bbc3-35c097b98290",
        "cursor": {
          "ref": "3dd10398-c523-4be3-a298-55882dfc655e",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d2d526b8-76a1-48a6-91b6-f079f4d21915"
        },
        "item": {
          "id": "335e1639-56ec-4fd5-bbc3-35c097b98290",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f2f0ccde-2b40-4f99-b1f5-dc9e11512988",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "db73ff41-8515-4403-82b3-d4ba909760fc",
        "cursor": {
          "ref": "109bcdd0-23a0-4743-b4a8-208cc250607a",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e9d9a011-7ac1-45de-94a2-00593563596b"
        },
        "item": {
          "id": "db73ff41-8515-4403-82b3-d4ba909760fc",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "23a36cf9-6342-43a7-a3f8-58c61ed7003d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 117,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "f94452ce-5e3c-43d9-94d7-2f1657455066",
        "cursor": {
          "ref": "6ca7c7c5-b586-4be1-bcfe-47c289abf2a7",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "2232a72d-9ea4-48cd-9c92-21a1d8586791"
        },
        "item": {
          "id": "f94452ce-5e3c-43d9-94d7-2f1657455066",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "499e5692-c585-46dc-95b5-8a61bea1f942",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "f94452ce-5e3c-43d9-94d7-2f1657455066",
        "cursor": {
          "ref": "6ca7c7c5-b586-4be1-bcfe-47c289abf2a7",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "2232a72d-9ea4-48cd-9c92-21a1d8586791"
        },
        "item": {
          "id": "f94452ce-5e3c-43d9-94d7-2f1657455066",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "499e5692-c585-46dc-95b5-8a61bea1f942",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "bbfdaffd-80a0-4cb0-8b87-7f74cd3b6d3c",
        "cursor": {
          "ref": "246e9491-1fd1-46cc-ac46-1ab5e05949d7",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "1cbd262d-8ce0-4451-982a-f064881e994a"
        },
        "item": {
          "id": "bbfdaffd-80a0-4cb0-8b87-7f74cd3b6d3c",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "7a733cf8-c6e8-4317-b488-07dfae37d1cf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 100,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}