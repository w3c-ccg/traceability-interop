{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "15e285ee-01cd-476e-9ffc-47d580e0a768",
        "name": "Clear Cache",
        "item": [
          {
            "id": "46fbfbe4-91c0-4481-9008-252e62d7f04e",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1f208ab3-8504-46c9-8ac5-f7c1b7d60935",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d6f102a5-e21a-499f-8072-4ff0bd95c53b"
                }
              }
            ]
          },
          {
            "id": "523696f2-3741-4f7b-8efc-38240e103a77",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e4dcdaa6-5703-45dd-a0ac-c3c829549c73",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "da62e98a-f342-405e-a1cf-6da7c96dfc90"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b2b9e996-5cad-4679-b735-2ba8b35e58f1",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "9579dac8-6085-4c9c-a08e-659d306828cb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5a2edd2e-464f-4b37-a8f5-ca352b616426",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "469a65bc-7ae8-49e2-9ba3-5e211f688c0e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "17def295-3d90-4193-80ad-bc99dc50a6a2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c50ddd76-6451-4a5c-b812-37e149639c89",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "92af1e8c-ed15-491e-afea-fab6a1d8054c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "45a4e4fb-47fc-476b-8db3-cb616c376107",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "46d410b0-092f-4acd-a343-6e317a0a13ec"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fd08ad24-d4f9-4ee0-98f8-2a059201483b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "3541682d-9fe3-46fb-ad24-653da6d7f915"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dcdf8deb-5d95-4d04-80c8-52ff7d6d82d3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9379c78b-f6c4-4dee-adde-1ad538706fb3"
            }
          }
        ]
      },
      {
        "id": "e4f7cb48-74e8-471e-bf72-2d14623f93ee",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "3ef6cce3-7f08-4284-8b33-d443dc0d21af",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e065221e-5946-4d96-8ac2-ce8d8351044b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6f91019d-a976-46e6-8f6d-d683047286fa",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf4cfdfd-7885-4f78-aac4-11b9a689e138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bd61fb2e-2525-4294-a853-18599a4f1b36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee8ab3a-7cd2-431f-b036-25fa02d81917",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28f04d49-1505-4a82-9949-c80f4748792e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cff241c5-4195-43ae-8ea8-4a35a814152a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29f5cffa-1b2a-4815-a7e9-2d7370325a12",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae776d3-dd45-4918-ad9a-2d1ec65c3804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9f848ba3-e4ac-4466-9ff7-f52590e7a844"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8b6473d1-a35f-477a-9f0c-b8d0125dca5a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "81ce50ae-6e12-412d-8929-222198582b4c",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11feab80-96ac-4759-b2ff-15aa2ed50c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c0e73f69-1765-419b-94a4-c25eddaf245f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa0083f-124b-47f9-9c3b-a3b4ce0b1cb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c31abcd-ef1b-4cf8-9916-630fe37eeee4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e6fb2203-b7a7-4950-ba01-a5ebab320367",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a0069848-07a6-4c76-b9e0-41e9f56f6b25",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b96ff745-7803-4f99-b976-2cc71df67b48",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "a3514227-07a9-4aa9-96d5-f1fbaa615f7e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1d049b8c-a578-429d-8d24-227675cbd8b7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "769266eb-a44c-4514-bbbf-535d2f99c78b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7a893c6b-560d-46bc-9bcb-dc6b1fb936aa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c6881340-cd79-403d-b4e2-e963675cab2d"
            }
          }
        ]
      },
      {
        "id": "16f5dc7b-5961-429b-8d32-1925f4fb656e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "950905b5-0c84-43e7-933a-53b124379f1d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b0365b97-8d23-4a4a-8735-95d91becc03d",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "79f63d64-ab8c-404c-a0da-7de29a4e8ff3",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7df7e62c-87cb-465d-92c5-1eaa577ac78f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "740e1ad5-d1a4-45ee-a9d1-5065cbba3a61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f9da2b7-b2bf-4d6b-bbda-622fa5f96c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c08a0ba-f8e0-47f8-8269-4633b810b9e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbefab38-a8df-4519-9749-49ad9e060e41",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "472880f6-b20d-4cce-95f5-e1f8f5eca949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34117bd5-ca41-4159-af0c-e528d8b00ddb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecfa361f-96d5-4edb-9fae-5b9fda7242d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fdf26ddf-d090-4958-a38a-da184fe7fc5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c43610-a6d1-4b86-947a-6c32060681f6",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebafa995-af2a-4b0c-8d12-ba5323ec9a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e460e599-5b49-40cb-8b09-28f83bb79a22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc25d5d-d85c-48bb-9ede-1793a727f687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95268688-c3a8-4e31-9450-a4be4a1ea2a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea17aba5-8879-4072-b991-fcf6cd2c8aab",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ebf57e3-e5b6-451d-8a4a-d559fc87c7c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1123d66-df47-4263-a0b8-fd9755d42b04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a207d0a8-f98a-4d54-9777-ff320e221c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d9e68b4-4018-44b6-891f-33e02a9e11f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97179511-20a6-4bfe-a45b-9de7c3d46bcf",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98c38fb7-8bd2-49f4-adfe-2592374526c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf13f055-dfa8-44c5-802a-c94bc2eb76a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2945ac76-d272-441a-a6e9-cf7c45a79d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "15a59238-7d5d-4a14-a321-409e9a376768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5a5795f-3462-42de-ae2c-b83aef77423a",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c9321cd-7b72-4430-96b2-a66dff434025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfcad745-3ff8-4d82-86f7-4bc32f769261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b608fbc-4921-40f7-91cb-d1a3e342b267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e2f6c8e-a8dd-4b40-be21-1752e55b5dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e901982-c013-41d7-b8c0-9cd691dd2e91",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0420f330-7010-4561-a3b6-2398aab6fa91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8f26e86-c80c-4282-99ae-c724be7c4da8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb7b468-9724-41d8-85a0-f2bc0a0c6031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7719b3f9-909b-410d-8ba0-4750aca5f7de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d18bb1ce-9a0c-4702-a2af-d00ec624aa94",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6a7fed2-41d2-4421-aecd-b258cd1744ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5862222-f02a-46d1-b957-dbd7845adf66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32e3b91d-ead3-4c9e-844d-d20aee6cc4e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "93cc8e38-206b-436a-b950-57ea806c237c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0872fd6-f9b8-4814-942a-de32437ca6f6",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "047aa25c-b42e-4be4-8b01-11d5daf70031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "068c77d5-0961-411c-8a98-ad1cc4297999"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d59d9d38-9f24-4077-bbf6-96b69a8bb286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9c6da71-4286-421a-b6ef-dfba08779472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93e296a9-985c-4e90-aeb4-f5fa844c5c59",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9648e31-a5c6-409f-bd80-016d80b79164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4773316f-d3a8-4700-8b88-417fc01822d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7948d43f-65d8-4e44-82ca-bc91559829c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae31c4c4-e61c-43ad-ba83-c3d0ff15fe53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b9297a7-f5d3-4b5f-9608-d414f2ede710",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab92a6b-0564-4155-91a1-d814d9798725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6337a579-44ae-4961-99b8-ad8d2b43a67e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a5f5e2-28cc-461b-96e5-ecadb811c8da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4dd5fd1b-e9b2-4554-9b5a-472da942f718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e3b49de-92e8-4364-8969-abc15bb165f2",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49868ec1-389c-4221-8b53-d3b5d1f500f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4137041-a0b0-4707-98a1-b2ca1c057720"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f25f51a9-da58-4e78-8053-293075bc7a21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5dfeb97-dfe3-4323-bdcd-12c26a320202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a22126a-f819-428b-8723-2988ad778f0b",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b41d4c6-781a-42e7-bf72-a0b437936133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74e969d4-f4bc-41f5-96b4-632c108a8855"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbbdbb36-8018-4768-a524-f78138c92538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c0367af-be6a-4e7b-8951-648a374f0097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "411d827a-0329-4cc9-8103-c726dad1d521",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "225ba14c-5306-4dce-afad-840baa0a2bf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b03acee8-f44f-4f73-b694-17a94ba8e7b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4692f8f3-2206-4bd1-9a57-25b5c4036638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc247b55-a79d-483f-83dd-8434ac165e88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d57e1e0d-d308-4a4b-9046-5afd68f2aba0",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e0d8909-db33-491f-bb1a-6c557fa202c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80c91371-4dad-4ff0-8f91-1593d34f2c49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2372637-450d-427e-8119-9e54e9ed252b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2d5cee06-952e-468d-9743-6a6aaf690177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30cffbc5-f6e4-4cb9-9a48-55cc539003d4",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77a50935-3594-4615-955a-c72337fd62c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4450d69-0939-4025-a960-e360e0ad1457"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8614ce0c-8075-4a10-bc98-1de3355d5231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef8d4661-c80d-445e-8d0f-e48cab6ad492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dc2dd49-bd31-41e6-8939-e579494c6b2b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62ee8bca-1be9-4fdc-ac48-d9bee1ee7dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "255596a2-fe65-4874-a6ba-80addc18ab60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c37f3f20-997f-4ec7-b410-4816233dcf86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae5f119f-d249-4519-8266-96c672ad3f15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c5aef20-e95c-4097-96e1-f4c196f21ab2",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45462e9c-4694-4c8f-a297-562fb3b908cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b6d3373-f260-4855-9681-83f68cfe64f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96c2474f-947f-43d1-874d-ce24b0c9f5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a21b45f5-e7c7-4b3a-bfd1-6be2da8fac8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d35eb7e-646c-41db-a3a0-8a4825ccbf44",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "756bc252-df0c-4c60-b35a-81968ed28884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6b0ec7a-7616-4fe9-873a-5dad650f2dc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd5b7015-0a6e-4b82-9fcf-10c0d4bef0a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e66e94d6-6dfe-4d5f-9bbe-cf26ec5eb0e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5e8d596-da48-4b22-b94d-612582239a52",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c83b773-164d-4165-aed3-604f0864c16c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00c35c49-fd24-4f02-ad67-62dcf9252428"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e0f789d-2baf-4297-b3cd-1e33ded64107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c4d4de9-f474-4078-b481-10f31fcb7234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1dce1fb-de63-41a1-ae83-ede8e6b940c2",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f88caa82-3d94-48ac-8edc-6272438d096d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba50e662-8c38-46aa-83fc-ad2b18229fa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2de0d27c-d214-44d0-bdcc-8125ee2a5cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0f0f3c5-351f-460e-96ec-fca8c73b8357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cb60f1a-040a-46a6-b145-fff1ffa22b9a",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "049797eb-0cb3-4efa-9c54-312d910fdfef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39dc659c-0702-4409-9b8d-2c3a61d954b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34be6af1-9276-4029-b284-1ae5c9727d96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "83f01edc-5f73-4788-9a03-e108fcee5102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "506d9f43-aaa4-4964-8c1a-cbec918ece5d",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a806a05a-aa8f-4c52-a346-d6030cccdb59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c138cf48-3d64-4b17-a0d7-cbc39b414ff3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "299e0f5e-5346-42e5-b4f9-be4563ece094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1e5ae7b1-7d7f-46cf-9687-bb319b2b744d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "863ba892-8b4f-4ee8-ae57-f23d83dbe58a",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aff2bada-d7b3-40f6-9360-a983962a1057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0c76d19-748b-432a-9d51-d20b0eb9bf36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87ed90b2-b849-40ca-bce4-a3e2a51b3ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "19098da9-c4b8-40fa-a82c-9974b289a28b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb7ce85-a415-44aa-b48b-8b5121e6821b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23c01b81-95bc-43fb-b967-f1cf18f0f37a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93d31e35-58aa-49e1-a9c9-c539d2e7bd82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eb85bba-be59-44c4-898f-c050fc415ddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c6c059a-2d35-4913-9468-14f8ff677b25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84fc056e-02f2-45b4-b1b6-1cbfa3347aca",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d678c140-b78f-4d75-b58f-78330a996e1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "091e83bb-289b-4658-bc0c-8ae100392606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fbc3132-8770-4572-8a97-b465343fad9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0714dcd8-05dc-483b-b39b-5192764d8184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "098ba86a-7d7d-4df3-80a1-3dd872dcd6cf",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3318a0a8-229d-44ea-af6a-2bac5c0d76ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60d353a1-5f6c-4cbf-9f16-7028ea8a5c22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "710dac65-fe5b-4a7a-aaee-c859204eaa03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f3941d1-e55e-4627-b7e3-1375a7f1a1bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e377ab4-9f3e-443e-b3c1-3f14648d9d6a",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5be6e83-8a50-42a0-9fb5-581ed895e988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2921f120-1b29-4373-852d-2419c46acc86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "185e39c2-7bac-4c82-b5d5-dad89ca2f90e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e43e9029-f560-4b65-b167-ec591aed703a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "382422f6-3752-4ac3-8a94-068e97708d57",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ba6eb31-82c1-4de3-8bc8-e444913166ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35515904-03ab-478a-bb92-64f104335c82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b83482cf-6bd6-419f-8214-afda400739e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf6369d1-3776-4572-a50c-208f06604d5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "836eb234-34c3-45af-a628-c205ee58ea83",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba1570c6-b0a5-4ce0-8cac-857b735c800a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89775ed9-41d7-4340-baea-205c06e59f28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84d4b17f-dcd8-4954-b007-8a03bffd3422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "a61b5f77-b6c1-4a0f-9516-dbcece0f70e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b69763d-4c79-4a67-9bd3-b03d263cecb4",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9c87b71-31e8-4977-a308-384dd8266274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eac84af3-e9ac-4e3b-90ec-075842323790"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1554e8e2-6d14-430f-ac1f-949387b641b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6786877c-48e7-4b2c-b5f0-1d038855cf29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0d69261-0249-48a8-92d9-61e7cd3ca987",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22e2d65b-8cd3-425f-9962-2854f85cd62f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9d35c80-a187-47ee-ad1e-4f60e0daac84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a39242e-ee3d-4d1b-8604-08e8ff953600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6904d54-0549-4b1a-a85f-1089cb67cf72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03fca7a3-f24d-4430-800c-ecd380b549d3",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "024c2d1d-fa51-4b7c-9c05-0b11a12c5518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "314ef61e-43ae-4fec-a389-483b71a8a4f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ddec0ff-065c-4728-8c99-3a6f56633ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2821b5e-5e3d-4907-9e0f-089aecc2d81e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5852e4c2-7318-4d21-bfce-c4ec41769109",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d4718f-e8f5-48fd-8d94-4b916445d9b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ca316bb-0c07-4ca6-a922-de1d11d81416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea868ece-f9a2-47c1-8a6c-eb7da407e603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "15e1499a-2015-4477-a16e-1afcd8284fa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc8125d6-e32f-46d8-af18-2969d2586482",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c880e106-9868-4028-abc8-d2acbb76e947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd90da95-16c6-4aba-a5f9-6ceda36a228d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8503c26-c264-4fb1-b36f-0b007a6af1a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ac2be257-2e30-404f-9574-8db5e51c5268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b26bf19f-4349-49d2-8768-c5619f8b38c1",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "294badaf-e7cd-48e6-b2f0-ab7ca76f577c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "45a2c584-c71d-4fba-9629-c5175468e25c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32f48f62-5883-4e21-b615-c36c4d4839a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "39e06501-d2c5-4d6d-8e93-803029264ece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfe3db0a-6294-4d6c-a516-8b956319bd38",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b94307b-5366-4d28-9677-e00e64e56daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9192680-29aa-4fd1-b753-77ce36d1e8b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0bc721e-2f97-4778-9498-0d9ea7c098cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "91d4841f-475b-4e17-a027-0824296669e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6094d40-6712-4846-a13c-8bddf2dab1cd",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3ab0d67-2817-44b9-b535-34b88582b400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa2d4145-4685-4034-8a04-9796adaf6146"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f20169-3bcb-422b-b3e3-3d301eb0dbfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c01c323a-922d-4f00-8520-0e21ab131cc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cedf447-f093-4132-8234-aba83e4b77fb",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e5d035-71c4-4c7f-ae5f-110427d9ce77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a547449-2d12-4e97-9221-d820c36863a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff4076f1-9530-4125-8b63-1c60e54c01ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4182fbb-f426-42c0-bdd5-3b9928a37155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5ef84e0-01d4-4df7-af2e-dc657078d2cd",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31e5685d-f75a-4e17-b79f-5a3f7ce263fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "993bccf5-3e2d-41de-b454-0ac71c120949"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19408bd6-5a5f-4328-88fa-81fb1c0f9b02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4894a5ad-ceaf-49b0-86b0-0934cf37a7de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f5d7cf3-79e3-49ed-87d2-2af2c1db062c",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2adcdee4-ed3f-4d4f-9d69-1efc55414803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "638bc743-39bf-4bec-b8e0-842d6767e629"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f76ce4d3-20c3-42f1-bcee-550feb0f0b1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c918d68c-1eb2-4546-8867-94c19dfd1f93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ce03a84-1133-44c4-a4b8-8c7588e8d7cf",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59158a03-884e-416d-b61f-e302ea3dcf9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc0a597c-dfa8-4c83-a423-49f92266cb6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18b4580b-7e3e-4361-b772-c96a590fa660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "9c71a277-4129-4ab8-bda5-04e637bf8c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "675c8811-e77d-4179-a90b-e5b912992eca",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd994eec-edc6-40f9-9d68-4e34d24be07d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6840b75-e2a7-460a-8cce-2e3795315599"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65eca52d-680f-4132-a890-8ecf35cd33b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "37478a17-ad1a-4999-b223-d2a545be6ae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "015b416e-eea4-4cfc-ba3a-5a6d6c425330",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "092343b5-1057-4127-88a0-09316b5fadf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b95f7665-2d08-485b-ba1f-262c9b536bbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8441cb30-7157-4f4b-94c1-bf2b04442b8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c855f3b-cf9a-4a3c-8e01-ee705ccb4403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cec777a-a940-4465-ab99-6ab8b9aed955",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd775ff-c96e-49ab-974d-d9c02ba74a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1fc5f4a-032f-4f74-ba6c-2417942424dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08c16f2d-a9d5-40a7-8997-dc29e0d617a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f327fd5-b330-4c4d-86ac-1c87a2009dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65eb58cf-5aac-4460-9760-7aa63bfc74c0",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83df54e2-3a07-4107-9e9a-a47c40f56f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3dd5e8f-64c7-420f-be55-e45d2c016924"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7afc6e30-4004-438a-bccd-6f29596c2678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff083d35-152c-4f3f-9130-c15b87c30320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f2df4dc-6e8d-4e45-a636-899d5f256a32",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "897d06d4-768b-46b3-8d9f-a20088343d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dd1af31-c1d4-481f-a9b1-fb56617ff1ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ed933b2-fda7-4b61-8c46-a41ff8a32f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "beca75c5-d0a5-4a3b-b964-e1feb873c812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f457b14-1c5f-4d04-b31a-a1840edd8a06",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4651f4dc-6d74-4fe0-ae87-1b521f5d376d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "537b3840-f129-4bf3-a679-261bdd686775"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b508cfd-f692-44b9-981c-f4815b25ee77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c07692d7-8082-481d-a55b-5ff5755e9b26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48ca5d64-172a-436e-b2e6-e15dcdc260fa",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "397bb86c-1dea-48dd-905a-a1b3610c849b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a745f2af-219b-45b2-9825-714802a3c5c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bfd0ad2-c8f6-47a6-8847-6d5dfd158676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0829b32a-4679-40d2-ba68-aa39f074fd30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a648074f-c9f0-420f-9ac6-f9ab0c2e2655",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac69772b-bc12-4f68-b444-ff87e962ab26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85f25a38-3549-4bc0-9e98-d969714f560b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a750e90-b1f4-4d71-a470-c9894db8c435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d3099d75-2853-4369-9ad8-254360608b0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c10da595-46f1-4aec-9583-8a19bb911622",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6af49d68-af69-4c8c-97c7-f4a010bd0f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31c4c541-8f9b-4d6f-b0d5-d8d712dee6fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5edf2c12-0bfb-41cd-bbf7-9da4a1baf5c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "a351759a-d7f4-4145-9a3a-25115763f69d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "492bd546-64a2-4d01-8a7c-c08a0d9d9c0e",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c66e0aa8-b8ba-4569-9cde-92554551ed1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04174e8f-127b-4510-99a6-c1ae755dd055"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a09ab6ca-83b0-429b-be8e-cf5f561b186e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2657b83a-80fd-45eb-9f04-a46064ffdd16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb1c05be-02dd-4fae-a059-ec0614de7a7c",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aede341d-e062-47a1-82b1-6769b4f89ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42f1b9b3-086e-42d2-bf29-33a83f9969d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27dd1cc2-471a-4d4f-9465-52602aae6fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e48d4da0-b88f-4e37-b62e-6cb69cd0f9e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1678ddc7-d1e2-4cf4-8ef9-df1e0dda739a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e2152f1-0992-49e9-b4ce-8ecbfedc9062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5daf04a-3cae-4f93-8683-931fb3c2abfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da1df7b-9f46-4a4f-8d44-e8b233a9cf0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b74e4e9-32d8-4cc8-90e5-fb1a2fa5acb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea4ce67b-eded-4e75-a1dc-6fe1175f6905",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd4a1cdc-839d-4a20-b6da-f3fb2d1eae07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "062bbe2c-13c5-426a-9569-811e141da2cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dd72e21-5489-477f-ae9c-7953ac00355c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "15e8c24c-4e05-4749-9175-1e66516711a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cf2fcb4-2d66-46df-8526-2edefd5cbbb5",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84a9aebf-3e12-4e56-95db-b8c6e703db59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6b420e2-f1c1-4fc9-947d-bfa355d21bf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac9ab85-803a-48a1-9ef3-896fc013ea95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "eb85d232-29cc-42a0-b576-7b8654629fa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee56dcd-464f-42fe-acdf-2e062d827411",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1caff1d6-d2b7-437d-9c37-8f6d6151b0b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dda67a55-e7b8-4b46-b919-f3c264f5b56b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "454a71b9-9749-417c-9ae0-67cee2ea6d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "71f2d760-6212-40a2-83d2-0b0963c1df53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2378d4ac-8651-4d82-b90f-c3b8d710b928",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf2df946-071a-4712-a581-918892f9744d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21011bdd-0c0e-497c-ba45-bbfdc05db23f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bddc4ce2-516b-4004-b1b3-6e709cb71daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5972737f-0f35-4e82-92f7-be0535bbb95f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b30c4758-3d77-46b6-95f7-4b7501ccbdae",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fa1e1a3-2370-49ba-89ab-9f1c702234e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1bf11ba-b35c-4505-bcc4-6e8231fc68a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aad861ad-fa94-4145-9a47-a66013f82489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "18d47fe6-e150-4282-b567-0fc6249c1372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d323774d-2e01-4baf-a96e-6b313a34a5fc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c0d181-2d07-44cc-97fb-d8a46193fc97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4815b41f-3ccd-43e4-92e2-c84ef8d119b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1f9749f-a8d7-4fa9-b250-0bd52ec501c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f03619e-53a8-473b-914b-065d9acdccf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f108e1d-829f-478b-96c3-e59ba54ca587",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f01845-f5fb-467b-b7d1-1fe2b2377eca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1883520-a3c6-486e-ba5c-73724f70c9d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be8b5b69-ee8e-4cbb-89e0-cd3c4090c685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "663ba619-73d8-48b8-b3c5-89ff16e97fd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fdbc8c3-c24f-4fb1-a51b-f6f86c6d501a",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83283bb6-13b8-4b4f-b1c3-5d453c926f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6366786b-f9ff-4403-9a9d-28ca4d459d13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5e2579a-d7c6-4322-99a5-a0a1b9dcad41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6ec6122-9d0c-485b-9d6a-e4387d97463e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cd7efa3-1b52-448e-8072-c869b3d0c6d4",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "020dfdd8-43d6-402b-85b5-d7d9c3073cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b938a7d3-42f5-437d-bd26-232c58a4cc09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb6b882d-064a-46d0-855b-02c1b0b18fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "25bd2977-3696-44a7-bdb9-8db34ed0d402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26522dfb-86e6-45ab-9be0-b3d7a0b7aaf5",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e50628e8-1ed6-45a0-80a3-67ca524e0676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3397ede1-2141-455b-a855-3c9dc2f27816"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4576bb79-afcc-4036-9cff-5d19d068d3e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f95c08ef-3b27-4c6b-af76-52af5b1ef007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab0b131-6d3d-4b86-ba53-184546c650be",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dba9691b-b951-45ae-bcb0-ae18ab4b5c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be759d46-05d1-4c3d-b076-8c28f86d9fb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "820d6362-afd5-40e2-a3c0-7627b6fba7e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "530b93e1-0287-4ebb-bb0c-27c8f65c7732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e189d32e-7d34-4a9f-99ea-0f0a1f421ba3",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fe80c8d-bed7-48d1-9ddf-288e0556b6df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18d1f532-5479-4785-8ad3-adb7b6310f8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc4e223d-7f1c-44fd-a457-23ce606b6c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d10e1821-dc8d-4f1e-877f-3afaedfe6eb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9630d3bf-859c-4ec8-867a-eb746749ed7c",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1116fa66-bf97-4f6c-942b-454abe340064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a412737c-eac1-469b-bf7d-dc6ab6ae82a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a7761f0-2cd2-4fd4-a62d-f8288e0d4cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "acb217ca-ec04-4af9-88d9-24750a9992f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8d70ece-5576-4b10-9bec-b7ec71364769",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac6bc9a9-77b3-4a3c-a7e6-4ca232f8680e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ec0d078-fd78-42df-bdba-0d21e9784ff3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7135ba1e-1328-4478-b93b-070bcdb09f7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "98dc4a34-477a-4064-8346-f10a90ba5789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee5219e-b00c-4b3e-a765-6e99aa882fb8",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fadba2a-135b-4f7b-8638-1078d65090ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4ac77f3-5820-4908-bafe-6033336028cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1994d66b-b0ef-4a38-834d-676ab561af70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a93f64d2-4eb5-4da1-a8c9-8d2321ea2d2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d546a6c-329a-4cb3-80af-b84b41c9162e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d3f3b18-0792-4d68-a85f-7da3114282fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e3a5ed2-28ef-4b46-81b7-e2d4e7c15a16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d164631-bf5b-403c-9c80-9f02d6b216c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7293db2b-ac43-4af0-af81-4243740a9740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "786c4888-5114-4167-af95-21f00c480e02",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0184cf49-b0a0-480c-8b5f-fb3f5bc53e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d54f4b7-3fd7-418a-8920-0e307a25c6c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d0d6ee6-8a9e-4a5b-94a1-b41da49e295e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ebe89bb0-e6fc-4b28-b405-ef0e085164a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5e914de-b1d9-455c-b3e3-2fd1b615b2ea",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e6a714-3f89-44cf-9bbf-39f212b628ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9bf3382-36c5-401f-8620-df575584fe4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b1a217-7ecb-4c02-b23e-9ca4ff0ecc71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0b4fdcd-0446-4f24-bb8f-4e793b3125e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a89363f-a6cb-49aa-ae72-9590118927ca",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a253552-cac6-4ecf-ae65-873429663bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13232eae-b385-4d4f-af54-a936f901abda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0da37c8-8c9b-4e93-81db-e5e8d7277b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce6372e7-28e6-4c1b-baf1-bdae2f5de228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9ca0490-cbf7-4321-aa49-9d3e0120776d",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f501c88-1bc8-4e01-aeba-47aea28b9955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2b3d1e8-10ff-4300-944c-df7b9def966c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6682671-b859-4dc7-bc8c-8e0b541b905c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "75bb39c6-7872-4c07-b8be-dfa71f83f7da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f6f65f-770c-44aa-bfa8-a97e0aec1c64",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aa00298-0aed-488a-ad00-41e3dfb6d732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2286f543-71ff-4bc0-8b78-b1b860e72f9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a26beda3-1a3d-4e91-a75e-55125ee71258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4db6ff5a-18eb-44ab-8568-fbd8ca7422a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb379aee-3388-4942-8e40-23b725ebe736",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9451b961-9332-41a5-9911-48aa244197fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9be69f26-c73e-4446-829d-222a11bc2e88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5efc6dfb-0db9-4c32-a95e-664484982471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f50d1b19-74d4-42c0-a6f4-f46a2d95fd02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21a545f0-57b7-45d7-8752-5bc8c16ec3e1",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8eeece9-ab3c-478c-b648-cdae9f6aa5d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23ae5ea3-507d-48d6-a4da-2a57edc6593b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74dc20d1-5f58-47d7-a438-c5e40bb4b36f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e28ef0c-ace7-4420-a0c8-682f743ed51d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37e464ee-04bf-4ae7-b605-63a5bc367a3b",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a32311d9-ded8-4a04-9550-7bceab232a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2adb29c7-8158-4b07-b7fe-6d6c6043b1a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5aa6e4f-6825-4d36-aea3-10c826691c03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7bffed6-9eae-495a-a184-f5a9b5d96e3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "945c11fa-e28b-4654-a68c-48c5817c6717",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3e3db4e-c099-439e-848a-9d46d2688590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d0a32e7-9e21-48e0-b839-035693a3b965"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0d2f6ad-3ea0-4926-b3cd-3f0980a67852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0050c5d9-3bb3-4e21-b6f3-89cfda5df0c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "304592de-24f4-46c4-9e00-c52567ee9b57",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dc56f3a-5d68-4521-80d7-ac2f7f11da39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfeeb70b-bae8-418c-a265-03b0409ce437"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0baccdc-59ef-477b-ab48-7b7047c38908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ec382d37-3c32-49ea-b065-23f9d653a811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fd9f2e0-54b0-4793-a19c-2d49d967e357",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf16894-5f0e-4331-8af7-ea2be59dd50f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ebf596f-329b-4521-b8b9-c38644906096"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a669a438-0cfb-4f4f-86e9-d0b89f201f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdcbf4ee-100b-4ab1-bd9e-9f7c4a8ae11d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b5c2f2-16d8-4d7e-a2ca-d56b49b71dd6",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaf18722-b259-4b22-8e5a-9771ec773732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c6960d3-1c82-47ea-b090-6e4eb0b19469"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eab81f7-fd85-49cb-8de1-6696be4987b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a11536a5-7d06-4eea-bb96-1bfb11638757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4463face-aa3b-4700-9abf-fa6d4f3dc41d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a720f0-d63d-432d-a012-89efb06ead1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d166917-151a-483a-a650-27286c92de4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c89b1bd8-4564-49ba-9473-284e9664073e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c10f6dcd-13d5-465f-8b15-61450b56003d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42635fd5-9d7d-4c36-a351-ac0fc84ff33b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "063a7a77-7bea-46a3-bb6a-ab10d6d5702b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cafdc3b6-f09a-41f9-9769-1374d659cf01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f80d74e-e390-4d8e-9112-f9ed7927d1ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "350a2658-282d-4402-a2d2-5f4261466395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27b6615b-1bf6-45c8-9bd6-d52d3fbaa013",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0677da12-bd33-4987-a5e7-bddce3ad8111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fabf378-1d1d-4578-ba1d-04b46c7d1039"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5088f29d-8bf0-44bb-97f7-81f43b499afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9d823b47-f6dd-4a43-bbd8-c1ee23210223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08302526-52d6-4fe7-87bd-726e72d038c5",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f5c3294-23ca-44d4-91dd-7d504b71be7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e3da4db-a4a7-49cf-930d-754fb99d0ddc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4625e5ca-5e95-41e3-a1af-73987cda751d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ada413f-02c6-48cd-8694-20e013d69ac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b00e0c36-f606-42a6-a7c5-9edd887fe992",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "125c0123-34c1-45dd-8ce2-c188ffde798d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3305c86-c2b2-42d7-8b2f-cc25da65df48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb4d722f-0394-4aeb-8647-4776869bdcbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a9ea212a-333e-46b8-8f8b-e03100eb7a9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68226a98-dc3f-4a91-befc-2f680a975ac0",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85d3aa3a-9e7c-4aa9-ae0a-58b08e920c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1d05e3f-0863-4790-b961-9ee3aaea99ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b742d080-7ca6-411e-a52e-602fe20e0a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5301fd42-2f5d-41db-bc18-cde1abbff1dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16674889-0eeb-4b58-98c5-72a4c4e5e03c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72166ddd-f155-47c3-9316-64c20defabc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c04f4c90-e1fb-4429-bf37-d35fa2f8b266"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78ff58bb-83ae-4ef2-a9f8-52b15ae57d3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "738a4706-e5bf-4e34-bd61-4793486fe738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0454ada9-e5d7-439e-937c-1cfe98318349",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75c383d3-a1c7-4a27-87e1-1e96db834e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe926aee-6c63-4a80-8a2b-300ea317f57a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86e7989c-f7e7-4d3a-a04f-29fbf3bee9da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "46e04aa2-02a7-4635-ae0d-fb1e2401837c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ce7debb-a91c-42da-91bf-d62322f8bb90",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2d0bc76-0f08-4bfe-97ad-7f647aebd114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0489ef35-13fd-4ce6-94f2-28303da96099"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e7724b5-bab0-45f5-8538-9d7deb320c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6ddd2ce-9b6a-4802-b68d-c05e83f0c009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3bb9bd-e74e-4452-9ae1-14d1bb6ab6de",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "144ab6e6-0f76-4b6c-b184-69c8de7ee7a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5684adf6-4825-49bc-ba8f-d73a1c8173ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc7c876b-9526-4f6b-abce-3e50a6dc9144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d46414c2-fde4-4f8c-8157-69e3e9bcb797"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "87348bd2-22fb-4dde-9400-a6f42f206af2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0ac39c16-28e0-4b06-892e-c669e1b1bc0b",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3c64ff1-6482-4461-99f6-e1f86f1faaa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7b3264b8-a2dd-4e8b-8212-866157800740"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7130b0e-5149-47b8-a892-05242d3f8dd4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6927cd49-6430-450f-93ec-2fc3a539ed00"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8d25de7a-7ba4-43fb-8b37-793a42fae790",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "569a01ea-0872-4717-ae57-c293f4bcd358"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "18e7e5db-c13f-48c7-ba9e-125ed187810d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de85646a-1375-4f9f-bdf8-0243c9eb2fe4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "25ab6ff1-51cd-4710-95c1-a828f3fcacc0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3151fa65-4e19-4952-88dd-767e305a5af2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "48471af5-e244-4d32-8082-09d2b6b5c43c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f091e7f9-243b-4220-a00a-0c3bef88dde3"
                }
              }
            ]
          },
          {
            "id": "16bd538d-f6b8-4f8d-9bd1-474a5e490a85",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4b55b22e-d1fc-4f3d-9824-41e2e34b51f8",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "e135b3c4-af47-449b-af75-7d00ece6dd4e",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a52d6ccb-c218-4ad5-adba-18de46d2a1f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c9a0ac45-b4ef-4c0e-9520-087389bab892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a43ea484-9742-4db5-b2d3-6da5b710b3ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e821e727-95b5-47c7-b5ad-04fa94620c08"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9a7ea33f-95cd-4fd0-80f9-e37403e00520",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e39e853-44b9-4c64-bc1c-a36cfa58b8f2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b2788944-56cc-4269-9e62-17ee397a562c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0abaabbf-a61a-4886-8ae3-18bc8832b8f2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "404f642b-2b85-427c-804a-a7becc5f44f2"
                    }
                  }
                ]
              },
              {
                "id": "89d48cb1-b8d1-45f9-bc80-62789d977708",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7b2dbbc9-7b45-4d0c-9ea8-b6176dcf2741",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "758b27af-277f-426a-bb97-6904e3bb0d45"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9cb8b4d2-32ec-4359-a05a-d25f185bb09b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0a99d1b0-ef4e-4774-afbe-806de0023830"
                    }
                  }
                ]
              },
              {
                "id": "b7ff2013-03e1-4c0d-b3d5-fcafd655eb3a",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e24829a0-2bcd-4c34-9844-135c452efc45",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a2937523-eece-4169-8412-40ea87e6efbd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b9985131-5fd9-4c39-a320-087e3211a123",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e6925bad-ee0a-48e5-9990-940a4e37ea69"
                    }
                  }
                ]
              },
              {
                "id": "65738bbf-4f29-47ba-a11b-117c24a97c33",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d62c4a0-ef9d-4113-b6c2-b88f61a0ee74",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "15d20a27-bafe-479e-b0a9-b8636c410e20"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "964a1c43-11e0-4699-bdb8-e2506e75db27",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "779827b1-080b-4872-8cae-9dc783c2458c"
                    }
                  }
                ]
              },
              {
                "id": "191aa521-f496-484f-a92c-23ddd749f9be",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0acbf61c-b3f6-4136-898f-ab5c4ff899fc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2a52334e-2a3e-44ce-b516-cb8b416866f3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "708c8cbc-7014-4b94-b99f-bba46ec43f34",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "74194566-a4c9-4c44-ade1-07240447beda"
                    }
                  }
                ]
              },
              {
                "id": "97a891a0-d532-4bbb-a003-4bbd9506c8f9",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d858096f-ce62-47e0-9f48-2b86fbfc262f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9c683b6b-a33f-436c-95d9-b81ed3113509"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d9b829f2-b317-4a53-a2cd-964a9a9ad614",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "99129bac-5be1-4bb0-b4fe-aa91dbe4e42f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e32aa4de-ad99-4b7d-b8da-ac736fe043c7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "256fb8b0-7039-4754-a121-6695937cecc3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d66a36d2-c7ec-44f6-aa00-9da56efbd783",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fc583c0b-116a-4420-9ebe-b6f2816818aa"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e0855cff-70fc-4042-9ba9-40e71a65f9ab",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "6897aa8b-169d-40c5-a584-2c19d1986918"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "233f4015-d26d-41d5-8c9c-9742f000d9ea",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f938cf97-b875-4ab5-924c-034c789efd57"
            }
          }
        ]
      },
      {
        "id": "8d35cb23-627c-4e01-8a5d-fcd95264044b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "23d30ec4-03b4-4702-8e2a-d3fa1614aea4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0e094fb2-7157-4004-8562-e91b136e5fec",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a1ba4b73-2674-4689-b2fb-482a49ca570c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e0c0248-b27f-429b-b53b-d4c8ad76a6f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd30e1a8-3a47-4450-a979-86faa66e38ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c8fad9f-1126-4c73-baab-29dbb569b4eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5f18d86-8735-4c78-870b-ad00bc366825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1587d937-caae-459c-85a6-7f0194c3695d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf1d49b-99c2-4075-8184-c9f8adb5da48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "344264c7-7844-482c-88b2-c1740ee15576"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff2be51b-fb16-4718-bfc9-bac2efe50d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "50cb2ec2-68a4-4e34-888b-a954dea9a429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08fed573-a53a-460f-b597-706449922d08",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f30f844e-690f-4ab3-bb25-87f044cf56ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee8efbaa-716c-4ad4-b687-6e8d9353edfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcd25f95-b49f-4230-89fc-b4f0149fe2a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "985df5dc-b5e7-4647-89f1-e0ebdb9d378c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "906f219c-f318-400a-8e5c-c9f38a62969c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f1ad2b-cd83-4710-ab91-cf1ab9f22ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eaca86e-b07a-4d07-bef3-3f1579ff5694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f98ef29-2a94-43a2-8b5f-1c1c92f1039a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "654e4fdc-7e18-4eda-aca4-14f16435447d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76bc6654-2806-4666-9301-b26686efa349",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4ec7f0-bf54-4fcd-a9c0-4fa46ee03b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "594e3395-df99-45b3-9cf1-eaedcc8a110a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6816198-cb59-4e09-af36-2cf2d1881c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc32cd2f-97ef-41b7-b010-5ab6cafe575a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d59c76f-f4ea-42fe-b1b6-5e0d392414c4",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47c24b6d-c2e2-4ed5-82f9-6f42da04a1ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "214fca67-a87b-490e-99fb-dc4624936a45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "839491eb-41c7-4b89-b92a-a315905c0b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f211c6d0-e1ea-49ea-9e6a-995c3b1c2b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80916518-6b20-4de8-b538-9806cee8242a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bdbebd7-0d36-4377-b773-e0c7476c1eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cb22626-b303-4d1a-9ccb-bc2ccce0d7af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7e8cf21-97b8-45ab-8050-81cc3cc1086f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "75b32cf1-e7dc-46e2-8388-74c713b61781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56cd1d95-6a04-42fb-b80c-bfeeab3858a7",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dddfe9bb-ec09-4791-be64-8a9971ee6dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cee6b5f0-3a19-4940-ad45-00182c6f7eaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f551405-bb4f-452b-bfee-d5a70f0e1bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9995d3a6-c14e-4b30-894b-5f6ecdfba857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3dfdcf2-68cc-4fd0-a1ae-890f3f5ccde9",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6fc2032-dfe5-40ae-99c8-e870d3259e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "369b46c1-ade9-4e4e-b4b1-c0089502df71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecbb85ef-e644-431a-89ed-c4a25c561249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f381eb23-63d2-4b51-85c6-a1ad89956c19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "928145dd-aa13-44f9-94d9-4305ace0e67a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7551179-8616-49ee-aee6-b9a51614653a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdba0d96-835e-47b9-8b84-7a0dafc2d0b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdbe79a5-77d5-4711-8633-5f1433c68845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b655f280-fcd0-46c9-8ab9-d14716c4a175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6113766c-2c61-4953-b68d-68896a3c05c6",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f58a79-8427-4c57-b52e-3c40a4d779f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f08654dc-1744-48e4-9a5b-941bd40d2f5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83147a17-7460-49e9-8b15-4e6ec595c3f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "78334b9b-7b32-478a-8fb4-17b36b768ffe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a55a161e-75ab-4133-95f4-afda9c33168a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "208b4846-e9f3-4f4c-a162-278c1ed8832f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5835d1f3-e568-49b9-b626-b496bc347afb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f23233b0-f785-4b91-abf5-f64192a2ea76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "40ef3993-d13c-4825-8026-6f1a8ed72881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "380b4ce1-6be8-424f-ae0f-95802781c6b8",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f644647-6794-4bb3-8ac8-515b3dba68e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46e53cb2-0098-47ca-805c-12bee85b9b2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c577c005-aa60-4c90-b340-b253818cfd94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "18265899-8366-4ac5-bb20-b5fcf90e2e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae59e564-40a6-4b33-a65d-af7e55257c11",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d83162c0-32fb-475d-8186-09dd572745b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f74bac1f-1248-476f-9bbf-d54324054a68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de0deb9a-2b7f-4f02-8dbd-bc0222e9f85c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ae1f684-69c0-4418-b02b-07de187290a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2216465-a292-4b9e-8003-ebbe1c2dd01d",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6570c10-808a-4bdf-8d82-3cc8fbdfc1dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa283550-e528-4298-aa0a-f35faa84abe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b496140-65e1-436f-aa06-a0d1f233b91f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "df00cfda-2e92-4802-ae95-c18ce64dfb35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1aa6d0e-4820-4709-be99-e7ca531df12a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c0fd0b5-14ef-4398-95a6-8cacaa3800d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f039ece5-54d3-4557-b685-ff6c75dddc90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3903321f-a46b-4ccb-b083-b2c20bddb7b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "4003e555-3b48-482d-84a2-5dc825f851b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac62996f-51e7-4eb5-ae80-c493d0164573",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "605d7502-8847-474a-b0d4-e3e98d7724fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ea589f1-dc25-4551-a3de-496a178d99c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a60ca79b-074c-4b01-9660-dc0684ef42e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "535cba30-8024-4692-a8f4-8d1b48fa74fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "725734bc-fa6e-4e5f-9e19-c6369a994dc6",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3131ab14-347e-453b-a9a8-9c90c4bf7b55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f66b248-a14f-47ce-b4c2-2873776efa58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7802540-b499-487f-9fcd-5c2ddc9f5f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "30cdacb4-85a3-4c9b-9e91-fa6c08d13cec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "667cce5d-df89-4554-9f60-fb758e66daa5",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "159c9601-d90c-4aa5-9bfd-e7f5edb1e1b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb043dd6-5cd7-44bb-813d-00afdc517def"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "407f495c-b714-4919-a956-94e609185e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee7a082d-5416-4b35-b1cf-b1cb0a4e2314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31a16810-ce49-4392-b140-d66e0d636a28",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2503fdce-ee4e-4da0-b4c1-c6d74e839ec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b705cf6-314b-4be2-92cb-5b9769544fbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c690c19-b606-4e07-a4dc-89cf82bae470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e936dd1e-3c40-4b5f-b282-473d1bca777b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faf20b49-136d-4945-be9f-9cc8368597e9",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a61d7a-5706-4253-9761-1953f469d1ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7c1ad07-c0b5-4a7b-9aa6-b18333f18734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "344c3238-953b-4813-94a2-f00bc5077737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56a2951f-4935-4814-9e58-e1c10e9b19b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9bbeeba-cdc3-47ac-ae60-2a15608ecd53",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa5b4065-aa9a-4f2b-9440-906575c762bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01c50ff3-b4f2-4aff-bc73-505a5732f32e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a446f2d-d651-49ff-84f5-b1ff7ad3c90f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f56bf174-91aa-4e18-8efb-4c6e907ebfa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a3a188e-6597-4dae-aa2c-6afaba9ab845",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "490a6f42-2c2a-4ddb-bb5b-10d8a6dc25af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38e45d36-9950-4e11-94a3-fb5a08b165bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd86bfc3-52dd-47cc-9a28-cd5563f40f71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de33bc1c-2cee-4e87-af34-858cbfc4c533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bb0c47e-a3a8-409e-b35a-1f378c97de58",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2369861c-9c3c-475d-a8d9-822c5f2efdb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1ee322e-4857-4baa-9ad4-bf79fef2d33d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e4f986d-ed53-42b8-a61d-65478dc33a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "044e05ff-128b-408c-99ce-a1305efff842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa83fe9-7b22-4013-ba90-3f52a7bf453f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ccec710-0fc3-4055-b621-94a4a8986383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "978d1772-90fc-41ec-bcbf-5ee5a34d7d97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28d977a5-778d-457d-849d-ca819652db76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e01f0449-80b0-4d8a-b69a-fb4dd69cc230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d394bf3c-f26c-4bed-a921-a0d9066d34fa",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7972036-2c26-49bd-9421-7d4cbe5d22f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1f2518e-aac2-45db-8bae-065be65f5164"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77c8308b-6331-4189-8f6a-3f60dd1ae2c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8358f7a1-3cfe-438f-a138-ba9ad2998554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88a407d0-fc43-4cf5-a3de-ed8173db73a4",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67e4221c-cc28-4a2b-9442-052aad577a67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eb43a49-03a5-49d7-9ae8-30413cb0bb39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "937362be-d01d-4e3b-aca4-6b63b34255a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52f63830-0d82-449c-8dd4-2f6961490925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3433494d-b211-45fe-bc5a-af76daad81b3",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c1e00b-af79-496b-bda0-6b773303cfb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4500af6-31f4-4bb9-9f13-cdb5d6338ee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f2cf7d-83c1-4901-9c52-8de1404d620f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "16257b9b-3355-441b-bdba-badd90cf9596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e759b351-efc0-4b52-be2e-b0c8242a1caa",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1446a83-9fda-493f-8930-dfe727566c49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca03150c-5514-4e3d-8666-0fed85d820bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7065ff51-5f2e-45df-b7bc-c92d4fa379ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69dadd99-24aa-422d-a90d-42ce74659213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7dbafb3-7f84-43a3-b622-bb17ef211c82",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef3a692f-9934-4472-9fb4-002eb69f10b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47e3c0a4-f088-4ff7-84c4-c8f5d41b9cfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d2e4d11-185b-4b42-81bd-3b127978b715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6b52f90-56a3-43b3-99e5-a23e2ca2bd5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d104ebb-9a3c-47f0-b58e-5182819e17d1",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52060f19-ce8e-443e-badb-11f04e26109e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28a0a3ed-82e8-4984-a29b-c1b6bd507a63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc46f8f4-09b4-4503-bdd9-17e792a78f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e08a888-37be-43c1-959d-3f53194ab0d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80d85315-e6c9-40ae-8896-b9af3df873ce",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec651743-5b3d-4b44-92f3-608ec98b5a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd70661c-e6c0-40a4-934f-f00b55fda2f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33bcf262-4cc1-480e-978d-82ef2d954cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f132bb7-c6da-48f2-9ee0-7d01f8e2d7c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7051d52d-2ea3-4bdd-9641-cacabcf89b35",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42b5f3ad-1e37-4397-a101-891f0776a634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9512ae1-0726-49f7-a1ca-9c5b7d8701e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc96dfd-011b-4a9e-a50a-78b4a27637bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec0017c5-b473-4716-8a5c-03d18188cb40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5af8f682-ef4c-4b43-9ef0-a3587b25965f",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e055153c-39f4-41cd-99f3-a9965e5d14b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb94a720-f05b-4a0e-9676-6023a3fe52dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44f10639-df48-4a63-8b2e-c4349abd92d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c328f07-4d13-45a4-acb9-4b276e419707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8592584-9d61-4ff4-89fd-ff025574a5a1",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f3d011c-baff-4732-b129-fd008ddf6df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf627c93-6e98-47d3-a3ca-cdc35b9254d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7351309-18c3-43ff-a635-04e41fbaaaca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d10d777d-1a7d-452d-a87d-c515b4631a30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "529f7e68-73cc-4b5f-8d1b-4ba957b20f7c",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cef22005-7f5c-4ff9-b860-95f73414a403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0cb3568-8fdf-462b-bfaa-596f4f91ac38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eb17f5e-389e-4f71-a32f-ee0dacebb3fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7f1f188-5ad1-402b-a53b-f5da2174c48d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df7c665f-58d4-4db4-83f5-ebfe4911f491",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a219a7ef-427c-48f3-bb8b-7e2a0029c241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6334539-a124-41a8-b193-27b9251b4dc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6240413-6257-403b-a76d-355065251960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da7167d0-ea69-4b87-9732-29c3347464c7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "82ab2247-ee53-445b-8386-0ef4686292b0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cf7d2aa3-d83a-4015-9ed6-94d15154236a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db249c0-5175-463d-92fe-15cd99d8f5e3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8e40c8f6-e2e7-4742-a15d-bf8ad63aa012"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab3237a7-835d-43f1-97cd-a875d283b0e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "29ee2705-5f3b-4464-91d5-7b4f49815522"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "874f4283-ebc6-4574-90c4-9e82cf26d7c0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dea5a349-bb5b-4ba7-9275-78ce5abd274c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9575308a-fef5-4415-b633-d0c9dcb598e8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "32048c0a-264b-47bc-a2a1-cdbbe5987836"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9bf97ca5-0a7b-4851-8dd6-164c524312cd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e6c5ae41-329e-4ecb-b9f5-a16bf2ee65df"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "04c2b750-8713-4a94-b19e-90d4df933377",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "37677ac2-4087-4adc-add1-4d5cb32ccf11"
            }
          }
        ]
      },
      {
        "id": "4e84f913-5ea3-490e-aec6-e6106938c730",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "05fb76ca-48fd-47cf-b28a-1d2c69573471",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7006bb33-a6ad-44d3-9e18-41466817d787",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9bdac435-6a0a-41de-9ce6-6ab286299f8a",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8f41d69-6834-4df7-9ac9-796f478e2e48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2da040d8-5fe5-4617-9757-88a54627d787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04d1e2df-259e-43e5-9db9-ed0d10b14ae3",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8b47d26-45f3-4346-b50e-cd031266838e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f17e2b4-fb6f-4bf5-b833-d166f1055175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7177e55e-cfba-4c66-a3a9-445e4abac187",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7dda505-27c3-4509-ad8a-fc0f7c96f69c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9790f0e-d2ca-4287-8864-87d7c83f2a77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae1178b8-02b0-4987-b3f8-be880bd54293",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "180b4179-6206-4a60-99f0-2da432e264e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49e09931-1bec-48e3-bcfb-66e224b2bd73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b870a79-1144-4618-b4b4-8b44558bbd91",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5baa265f-f9b3-4b2d-a866-92c6dfd85141",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c12b260e-3961-4cb1-a820-7772cb62a050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ee5fc4-2677-48c0-ad92-6e8eddfaeab1",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f78082c-ceb6-4a1a-8702-4e5ddcc729cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2a30c13-2041-424d-9db5-7f88ef34cc6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e46d0b40-c3c5-4798-8036-608dd0635d6b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abb513b9-1cd9-4c36-b08c-317639db03fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a082d156-117e-4f7c-86a9-c12718294c8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c8601a-6176-404c-8513-5fc667b5a58c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "065748e3-8b2c-4b7b-9bb6-ac6dc0842f29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bf5928b-a063-4143-80c7-041a9fa7e17c",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db45febf-d4c1-494c-a616-401338f56ee8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2de06ccf-abd0-4737-9b8f-1d079991559a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9a8489b-07cc-4aa6-b50b-f53515af7137",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1564b761-1131-4a5b-a082-b12c0a06fc12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5268e3e8-8761-4c55-ba3a-9fe5d7c17d6a",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d488f2c-b2cf-4f9d-9a06-e83eb5d17bf1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12200288-226e-44d2-a281-b9685abb266e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e234f7ed-6c58-495a-8178-674447233277",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "785df5f5-d120-49f6-8da6-5ae4a5de9da3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62f7c6b9-f872-4639-ab90-a8de19476b3b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55fcd65b-3d35-4907-8433-2b3be9567e13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c951dc74-cb17-49b7-b0b4-dadcdac13332"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15a2e3ae-28bf-40b2-9ed2-31f5c4b320e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99cf4b76-62c4-4e3c-913a-80cfd591306f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e723261-ffdb-4ecf-881c-ba53f21a09b5",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "896631a5-3ab7-4f74-8cd2-1f59e40192f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c33cc05-ea88-4e61-9d49-05d1d6722184"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b555aa24-f125-4645-ba17-4b6211086f27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a7f9f2c-a39c-4d20-a7d7-63b5668b56a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09ff25d2-acc9-4950-b79b-fc265a26c667",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41362900-3598-4669-afb9-4db53a1de22d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59656e1c-ff0a-43d2-a80d-2b4a4112799b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e642715c-91c2-4c86-bddc-3416a350a62c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3906f28-59c6-4776-bd83-1931457980a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b186c6d-892f-4ac2-af59-689d3674e630",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f6ac7fd-e194-45fb-b447-59762855c888",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80020491-1ecb-4c00-b5b0-277520fa38af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53ab9495-e175-425b-ad41-1be7450f0c9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b1ce79b-e858-4af6-bcce-190f637dfa96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c8c356b-d58a-4173-9cca-6296b57ebe69",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8190a3ed-29bc-403a-884c-1d0bba635803",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f17d0f35-4b57-4714-86af-31122e3cf56c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e981c841-4049-4aaa-aa6d-7974e1838f1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52b19a93-72ee-49f1-b685-6e29f5fabe60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca66ff49-8e33-4436-ac9e-1011a93b8e20",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2bebcba-6650-4e5d-85cf-17c3222d1895",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73d533b0-85bb-4273-bb71-db6137fa2dc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cbbe83b-4a7d-4b2c-9b25-e83d2d07f9db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "995712a5-2171-4a44-baa7-d72b7ce76a38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37041e36-ce2a-49b3-80a5-22480c08cc14",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdf36c7c-1aaa-44c1-b6ad-3b294822c3d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "246d88c2-1d17-437f-956b-45f58460f8a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ac6035-d26a-48f4-8254-171ad425c9f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44cf2dd2-5f2c-41d1-aad0-744d7f6d9c4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3275d4fc-ba3b-42b4-844b-2077abc3834f",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20eb75a1-6447-4f9b-b122-0a8a9d75de55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9b6e2d0-64a9-4929-a0a7-dfdb8a5f94b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b48057d6-6f1f-4b03-bf5f-b35a75e4cfa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75170c0f-14ca-43a0-84cc-bad91e92be6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c76d5c9-fa92-46c7-ac00-b8fd2d36dca2",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce6159ce-90f8-4a77-af4e-5ee2fc33c314",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "591b8df9-cf91-4018-9a33-2d134d973569"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c2594cc-9d9e-4138-ae19-f5dbf5146e07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f3bc9eb-ff61-49be-bb74-4b4e9d799ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03861172-b54c-4ea1-8944-6568755833ba",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04b2eb52-cfef-4af5-b41f-059fe9b157b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c19560fe-2291-4686-b01c-c925f58023da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69d04d2b-efcd-4a03-bc73-bf5a97c9f621",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4691e16-def3-4688-95b7-1f080f003fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c02904a3-342f-4df3-bcc0-8a602e83c1ea",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a656eb6d-3876-40ba-beff-6ba1b998302b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbbb25c9-5bdf-49bb-a40d-28dc9307f7de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90cbf732-f67f-4e60-8eee-674505203957",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d022e86-3fb7-4ee6-ad0c-0bf093f0194c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "151261de-63e7-47fa-a080-1d8038221390",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7eefb51-5725-4fa2-9f9b-6cdc618afcfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0877b65b-984a-4442-bf6d-4f61b18f81e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d4bce9-9486-4a39-b764-0d8631fbcbac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05332e1c-9a72-4a6f-a38b-152fb5fa8d65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efca630e-7a88-4bd9-8508-adaeb29bea7a",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7593d51-64a8-48c8-99b7-51b5f73480f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc77e54f-2d83-4bf4-8932-7b4c7bd501ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b72f7ea-eb6b-4f34-9e42-989bc9e7ee14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "443224a6-217b-4376-b44d-9dbc35d6903d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e3f4237-0e13-4f08-8348-2b52888066b8",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8efb6bb3-5c4c-44f5-8dc8-fcc3145815ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6a60602-6fa6-48c2-a323-a2e8fddee7f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40166701-3e49-4216-8905-309b12ff18c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02925130-cdc6-423e-ba6e-90057ff0b261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5293b304-2ad3-4652-b878-855fc8909263",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "298b1169-6d80-4a56-8f9a-871dbee27876",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc579fc2-8963-4522-9a2a-ba62d3e481c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0a9cba-0dd5-4400-9efc-d26e94984957",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a0a4ca3-faa2-4b3d-856d-5db3f041e9ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea440d17-8da3-43b7-a61e-b9c8ca5e6df5",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b1483a2-a238-4f2e-928c-859bc71e6ae5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7b16be0-e7d5-45ba-8e4d-5a2274c84757"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c533f8a7-a10b-4f0c-b926-b088efd0550c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75c4bf70-c59b-4fc2-9e0e-503a942c2b62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2faefca-48d0-4403-895c-945e6087099d",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ce68ccf-0620-42eb-a73b-859669c28c2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf749f97-1e2c-4ab7-bfd8-c4bc8b88bbab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d821dcf-ef1b-4e81-81a4-0fd4f27a6abd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7528a36a-bd18-43c6-bdc8-fe8324b22186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49edecea-d41c-4da5-a97d-b06e916de018",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b72ffd4e-3090-4022-b312-2b080290fb7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc4e1c3f-c2af-453c-8a6c-70d4e91f4d6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9150b5e2-d22a-4381-a3a7-7d79430de77c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a488b2f4-c6d9-4b85-857c-b609468d4a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bb7ac82-89d6-4936-bfbf-f955e199ef07",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf9003ef-4dad-4ccc-b463-fff823084e2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55b558fb-808e-47ff-8ac6-3c72e083484d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "173a9885-9c3f-4b92-b378-43fd529c36ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ae52d50-f0c1-440e-81c4-81f90a4919da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fd78fba-90b1-4208-85bd-3f660fd1f6d2",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7556f5a4-17cf-4810-a3d6-51066b267bc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "570b1f2e-ea3d-4951-a49f-db9470b0058c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6867679-e536-49e6-add5-84c357939503",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "344de868-81bb-411b-a4aa-e2d01889cae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aef8c29-9285-4d99-aa4e-6305556f9844",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce08f406-7270-4193-9d97-eaafcc266fe9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdf49815-b759-4166-a775-8c53f8e7db7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eed9653-1478-4771-b6bd-3d76ab4d6915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f2a321a-2b53-4966-9b2a-285f34e44d23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58e21e8f-717b-4f69-8094-2fedec5b1332",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc40a049-c640-4284-a638-6f40ecc11cec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "859f3ffb-59de-402d-bdc0-fb24a3328477"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fe0a263-5e6d-413b-8632-9a141aba5417",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b46e60f4-b59d-4545-9223-7ba9a15f73ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2b56ed4-75d1-49b3-90d0-970d8466ba92",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23df45c9-7609-43b9-a9b8-f7e78326f386",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f2f3166-a387-488b-a846-123c216c00a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff654a5f-e109-439f-92db-5e7003e20eb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "329ab0e4-370a-4714-a620-287bda09157d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4461ebb-eaea-48c0-b866-8cbc50f08ef1",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e550ee4-999d-460b-9525-0673eb216c21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03a5b434-9463-470d-bbbe-8976fc3387e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5108cf6-ea88-41e2-b052-4962ba8ec2e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "752b2eab-402d-4813-91e8-e07a4485acfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "858be4b4-be1f-4ba6-bbdb-dbc6f408f855",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dafb0379-a92c-4580-8120-1d277cf9c618",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c73b1be1-fd11-42dd-a168-5975027b404f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50eddd37-4b53-49e3-9d24-9265f020cc98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62afeb05-1c53-4de5-8ba7-921a3f5fe674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a511068-5286-4bea-baf4-7346facf5be5",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d164d4b5-a571-43ab-a542-53c2890f7540",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c927c714-9b0e-421d-85f8-32826b5720e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19985412-1d77-45fd-9eb0-874346cf4b5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd17a9db-5d6f-4265-bbf9-3bc51ca16c0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3056070b-44bb-4309-b56b-7e6c1ca4b2fb",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b180269-ba06-4efe-a408-bc42ab621431",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1f65d85-5718-4c99-862f-e557295a5efc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f675c36f-c2d7-409b-9ebc-3a4d36276ff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8fdc5e0-2449-470d-9f7e-3f6ccef6babc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfce6db2-f30a-42f4-8724-1ba5333d5680",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aac50fa7-8680-4d4e-8dad-4f5c72af47ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "264951af-8813-46a1-8e14-9aedafce2b18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c20893f-90c9-4c76-960b-9baf855cb7ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dea5d6c-40d5-429e-8282-6df2d24fb543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e466f71-a87f-4786-a243-6218d8878f38",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "465321da-ef31-43d8-a8bf-cd7a5cfe6f60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c713a636-37dd-4983-afdd-4ac6a95b5d0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "589d609f-4b5b-4387-8699-ea6400643fd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0752d000-45b0-49fb-bb50-f95f5147452b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b4b4263-3a3a-47a1-b639-9ffe248dd44d",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36343b40-483c-41b7-87b6-4611424bad03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef993d22-f40b-4d8d-9d6a-9c7eeda947bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b30f3b3c-b77b-488c-bf16-d3005a4f19f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1da0d08c-4578-4d09-9798-5d9cceafe853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf017c4-31dd-4993-8b5a-c20152c9b8af",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5efcda5-073f-431e-9297-d1c527fd215f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bf980fe-535f-485e-b2d0-73ee943da094"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d495d0a6-bb85-47d0-8670-8ab79f2b5f62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00d578df-44ff-4b9c-8713-9b6a90af3559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "175a2d65-de41-4097-9970-938a511d7b14",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62274e8c-2e17-4b20-9f52-ce280bfd68c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c39075ff-8019-4a76-b1f8-8d51286f4b12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbc92da8-f39d-41af-85f8-1b1b099e7394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5dd4358-be7f-4b09-a460-b70d5adc49a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3aa8a9c-7e5e-4b79-9ffd-57ea3aaddb27",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bebd30e-903d-488c-acd2-e85494ee47a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ec608e4-35c1-48df-8fe1-11d3ceba606b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5378332e-4513-43c3-9c04-21296a85d7a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ee5022a-f3e0-46cf-bfe8-e7b317a8b273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cbb9972-2cb5-4ba7-b540-eacbbaec1418",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4ef9bcf-1ead-49f5-be77-e85e00f3ff20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6df71fe4-fc66-4866-8479-e45d280888f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f511bcf0-989e-4d82-afd9-244685b27a8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fb7b747-d445-40e7-91e7-f85a86b25396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c0078c8-0635-441f-ad22-02c9456d491a",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cacd9217-ecad-4ba2-a96e-f01c78cf2706",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc65c7ed-b3bc-40e4-a1d1-97e56bcc43f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14ea76ef-d545-4e7a-a1ea-d1f88a679cd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc4cd5a5-4767-4526-8497-0b6428be0590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b16f2d1d-b69b-44a8-b8b7-3f00ecc3e7cd",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a54c5b2-db77-49d8-a7d4-e78c4a040b29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d58001f3-3e7e-40aa-b4e5-66c170b022ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d86c193-d322-4239-8bf4-a9d8b3ff3554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff010a48-6d78-4018-87cc-0b1ecc185a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3b76282-1980-49a6-b618-7c75a619c6cc",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f96af1b5-05ef-4e44-97d0-0b3a4bf040fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3781494-62c2-4b40-b46b-f67e68a88ee3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1499df1a-e994-4670-9eef-142df11d8ab9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8366e4cd-37d1-49b9-91dd-5ae2b591f245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0446230-ada2-4e03-875b-5d50c703030b",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1da4e70-2630-4d3a-87c0-b33a640cc3cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ea6d7d9-4306-4ec3-acb8-f7cffc036c56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1ebfc0d-8d3e-49c0-81cf-64f86a33c299",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d90ed33e-ec1b-4de3-a556-2bad9e7a8bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85daf279-ef8a-4b2b-bc64-90b6da9c3af8",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc7b848-b507-4e67-a961-f1142bafe36d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6977feab-b03a-40dd-8de7-50c73699a43a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2506646c-66b8-4a38-a87f-10a222d140b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37a80cf5-09a1-4955-9370-2263e93a1c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4aa7ac3-adec-4ecb-a58c-327e697664d7",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e31299b2-67bc-45e7-8dd3-c98d5615cdf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e6d74df-0b49-458f-80ec-2581e396c9b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37952b0a-1b47-4807-952c-032287492dd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98ddedcb-3ab3-43d1-9e74-6de4e16250df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69c84cb7-541e-404a-a7b3-714ea317b1a9",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef65916c-3c90-4d88-8f86-8a54cf7e4e9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a43c07e9-1a5e-42c2-bd8e-d2c8b76ffe93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83f25d3d-2129-4d1a-a663-bd1e96ea79f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f1f8704-bc6c-4047-a3a8-e33149ffc2aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b04b0626-c5f5-4136-848c-998c0d007252",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb74a04f-1be3-4b0b-baee-ea1a41403795",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e82c3ef1-fcc7-4788-9e71-239063c4be49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc76f3c-7cc2-41b8-ae3f-8825f0fb7502",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a19c723b-42de-477e-8bfe-7e286dbd8eb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0acc345-22b1-4c66-8488-88d9bcac953f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db669862-f429-4f48-8fdd-1c9a496d2ad4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c45305e5-70e5-4d27-9f9b-d5e4e9b26575"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7e419fe-23d3-405a-aba8-71e3223e7f33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57f61d5c-26b0-44c4-905b-16f82d396901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "247a9f14-fe19-4e5e-b03b-821a01bd7deb",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17fb39e2-5aff-4a99-904b-c8e1dc713e98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8316a680-f942-4187-a1a5-fc8a60581ea4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b0a6cb1-227d-41d8-8b9a-b4be81f6d056",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6fe0cc5-95a1-40b4-99de-d330db33142f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ab406bd-b634-42c3-85e9-e8fa203f0df1",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c67f15d2-82a7-4807-ab06-6bad86a2fc8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e69d8e2-f778-4153-b03a-fd75d0575bab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b3a2a8-a5ae-43c7-bba8-53d999cb7c12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53a38605-0c6d-4694-897b-f0cf60a5d5c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "324ecbe3-70c2-495f-8c15-06498489e475",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b74b79-d746-4847-9fad-e9c6cca15e0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0870d2cc-02c7-45a2-8111-485e142e2e6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cfd12a2-d11f-42bf-93dc-0cb824ce3f4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6bd47dd-7e60-4399-97f0-105cb3317755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d79fb116-f3d4-4383-a896-3b25f198b24a",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1024fb3f-95ab-4b5e-82af-8d5ac98e86f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "029bdd1b-fd39-4c95-8329-eb4acf1f1427"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f74b46e-9a8c-41c8-a4bd-59f3387e2068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44fe6a62-4e62-4d59-9d68-251bd224b781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19dbadd8-11e3-40ae-a9f1-a1f992301176",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "131bc30c-8d5f-421f-8ad6-09bbb6fc694d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d341504d-043e-437d-ba5b-dde405fb137b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ef53589-5892-44d7-bd37-bf627376399d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d250c23c-c552-43a3-923e-20c9f3346506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93e37838-92c0-48d2-8dd6-a145e2c3a0e7",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6bd9519-3f9b-499b-b1a1-554f6ee41711",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2474852-d677-46fa-9a4c-9796ade7b848"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07c1e57e-55d6-440c-aa46-5753dc2216d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5c6afd8-d265-468c-9225-5f857829187e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b4d98f-b6f7-4f62-ada8-284baefe8e26",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af54baeb-c0f5-45a9-b5c0-17887fab2a14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "030a75e0-c818-4e2c-b51f-4568f2c92e60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77e51729-cce8-4a4b-bd0b-39185d51d5fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58ae98b2-b6fd-400f-9eca-7d6384913772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13e5d344-9357-4415-ba16-1d285eb94176",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84bd6625-7bc9-4231-be5c-d1c9395dbcc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11526857-3ee7-4fce-8067-1cca1150e915"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "570e307a-ef78-437b-aef1-e33d2da4b6e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fb63ba4-58e7-41da-a2f4-e09866a624a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ac36ed-0ea2-4b3d-899b-d4572a3b5d7e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52354f21-5908-40c3-9b7a-790362f1cf42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c271a38a-55df-423c-b17e-72e0f48125ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4152f9ce-e701-4a07-ac67-3b2ab670fe45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a358cbf1-bfc5-4ffc-82e3-f295b25434d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd5e5232-07d5-41fa-bddd-0b2633d11793",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15843e75-5414-4404-91ec-2223baae7451",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb944b89-b826-4ee1-bc92-8df5077a8e05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6082462-f357-4eac-b327-a2ce2cf6516e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60b64cf2-3d11-416b-be8a-ea8da64ac5f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29e3695f-00f7-4d37-b85e-2ca90a5f1012",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6fdc0fb-93d1-4010-acd2-989ebdee8109",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90bbfed5-578e-4814-a801-f62cdd2528c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2e7bfed-3753-4526-a5ed-fd0c88161d02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5e7ca6b-87c4-4011-b640-573318d80cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b555a65b-c704-4e6e-8287-031d4660823f",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7edbc41c-8306-4ecf-a3f8-8e1665e9ca45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7eb7ecda-12f7-4b9a-a114-59ab97707a5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a776898-5840-4bf6-80fc-f32b3b0e9bee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b026dec8-e93f-43e2-919c-c740a546f4a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c785c098-6443-4e29-a385-207dd2558c9b",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4750d2bf-9ca7-4e7d-8c5b-83771b0532f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77a41d24-9eaf-4488-8a4f-9b0c724cce20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26e06e9d-d664-47d4-ac26-f7cd7a6618e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66ed0454-ae80-4b4a-95c6-41bf04cabf7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82dac85e-778b-4487-867e-d2a85d19876e",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2cacb0e-0ea3-47f7-9a82-ddad36293638",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf2c3da6-130b-42e2-bb19-5d89308ad239"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3399009-4fc0-4a7c-8818-d495ca7f9384",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84d7d452-4e98-4028-ae40-ac696711194b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faf74641-2ab5-49d8-9af6-2cc2a0ecb6b0",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85cdba5f-bce2-420d-b4b3-891f6419dfff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba2108ef-4ffd-4a4c-93b4-09faf5ee4cc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b83f0964-d021-4334-9b8c-750cf88c2482",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "961c832b-e5f3-4ad0-8249-cd14844b648e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d110cf16-0a69-4095-9748-913f636874d4",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9582aaa7-ec6e-4db7-b4a0-8b27c9f0790d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4dd98a2-4fd3-457a-98da-6fb86513fb3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b9ce7f0-89eb-413d-be01-7294a866bc02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8af4aedc-25b8-4ffa-aaf7-617690fdcd5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a40a3c-3ed2-4f8a-8f71-ed2327c1845b",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef257cb2-bb2b-44ec-b9a3-8df7884698e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c73606b-44fe-4e7e-a890-fe103e2e50c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a0417b0-da68-49b9-bac4-15b58b5d7894",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "324f0f2c-1431-4ab7-b3bd-f1ad294050c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d96c14ea-ad7e-4471-b81a-ad848d6cd613",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9efd1879-ba40-4650-b0b4-8365a6bb4d4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55093b64-c0c9-4ac0-b9bf-273c46683362"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54fb845a-55f7-48a0-b782-d95caf2cbf03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a81e6ca5-e1f7-408e-832a-44e389ed6c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e2dd040-5010-40d8-8255-953b56242225",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baec43b8-5b39-4999-b7b0-8284316e022e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e33d221-9c86-4a0e-a0b7-83cb80f4d08c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df8a1e76-5e2e-4f60-84cc-27b67a80c42a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81f7ea15-ac48-428f-9111-9b82b6385352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20981d83-50cb-404f-8fa7-b78437151fd2",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fae289ed-30a7-4bb9-a3a7-f3b3c58976c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92bc3bf4-aa1d-4a4c-a5a5-547a29bf7e4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86c53278-5788-491f-a970-c4c5622c855f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3035eab5-6b00-490e-873d-2ea9859d9c92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c81467f-389f-40e0-9738-3ba001069d1e",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "511d2e19-a8ad-4cab-90f5-dbf1efc43015",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "badacedc-ed26-4200-ac30-69d942632ec8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0306d82f-f4f1-48f1-8452-70ee4de8d59c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64008666-3c0d-4255-ab5d-bb48da15a0f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3faca1f7-c101-45eb-abcb-62013ae870d3",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddce43c1-a696-4faf-96c8-f55cf6bec292",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0da41c9-9354-43b5-aade-75db98e7fc4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "398e9488-5343-4fa4-b774-6210c740d618",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7c138c6-2ae0-4278-9e5d-692c64f9582b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a67021f3-1776-4935-b678-00ed121ddfd2",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9466a1b-076e-4569-a775-57a091f22dce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be790674-a545-407c-a917-5a95ebc0316a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaf4264a-cd4e-4107-b0fd-756a7a1d3e06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "659cd3c7-7d63-4ece-9894-12cb191f4f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c4b71e6-3f52-4452-9d96-a12655605483",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d86d10-b745-4c92-ae36-21195a1f28dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1855bec9-9722-466f-81a0-f048065634ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1345836-563b-48f5-8190-12c47f493284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a21c0d5-9646-4ad9-9465-2e70a1974e4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad483999-0922-418d-b439-8f1cf1a61b46",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aa6dff8-c1e7-4811-be9c-1e6ace00a25b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "907c43fa-763c-42ba-afa9-c85b45408541"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bddfb8c7-7748-4069-8337-0c41d7f6d34b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78376caf-5dea-4ba6-9ef5-a6f614755eb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "721e86e6-045b-4387-adf7-0d6e6c03ad7b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94caf5bb-2f2c-41fc-ba7f-fc12989d9997",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f7cec71-3906-4949-950f-d3b6eadd9740"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b58bc3e3-36f4-4236-8514-f4d53da9d915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6f011fa-19bb-4bc5-b2a0-5a8fd769f585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d0575ea-ccc0-48ce-a2df-f8a126ca4718",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2721785-a354-4521-acf6-af7f613f028c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06badf03-662a-4f85-ad3c-7bfab1ec8cb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21e158fc-5b8c-474a-ae4f-b062928640e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "972fed40-a04a-46b3-b159-e6e212d9a4b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51f0818b-743b-4cdd-b447-57f9b900103e",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a6f407c-85f5-4e64-b4bf-f1354d77c622",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d87c017-b002-4258-b70a-5f8241abe947"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2332d3c4-b65e-40f2-b818-ae4eae7dbb77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "767623a8-39cf-4631-9d00-8d9090e8cbd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f11e75-7fb4-4aa7-adb5-de593fffb3fc",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84196940-5465-4998-8ecf-098f3142c734",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5092323-4515-40fc-8789-21e82893e86e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8062b4a-1237-4bb8-89ad-06a3222a063c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a9be874-bceb-4928-b056-f4ff0768095a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f660485b-792f-4799-aeaa-c6dd7633bbb5",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ac278b-119a-497e-8ec2-2d6c845fef12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b231eb6-90ad-4b02-87ee-39a7ff15a433"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "582df6d1-9e5b-4d2e-a028-a3c6dd41c960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab64b560-a1f5-4170-a572-a6d889f4d52c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dabba852-e137-4e7f-97eb-4981bf6466c2",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8896d1ed-839f-4081-ada6-810b474c4b25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0755f279-639f-4e10-a66f-71f1cb2ee511"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ed717fc-4d29-4c63-a29e-62cd30f2897b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32a3aef0-622c-49ae-8e3a-77da9f295701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8f5c5ee-ca4f-413d-a0a2-71de04065d7b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "017fdcc1-a69b-4083-9ad0-e76d0e319b12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53deca3c-966f-4c8e-a6f6-ca5c3f948c53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb8ef2c9-0286-478f-af9a-55433dc7d6ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efe06beb-40fd-4994-a0b0-bc0d1149bd64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73145574-210a-4491-9fe3-87072d33fbfa",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ca294de-d0c2-4aa8-b5c0-0b24dfd767d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1304b39-1dd5-4c34-9270-ed38def0d65b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "557a11e6-ebd1-4393-b78d-65e789e2314f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "141df5a9-645c-46a4-9a05-94b369c62222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55c2715e-bd3a-4585-b0df-9f88b238f963",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c7dc935-5acc-4d30-8d56-76d4e628b97f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9250be6e-b9d5-42e4-a444-7d6881679ace"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c5bfdc-6e47-44e8-a187-7882ce790b57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1131b01e-25bc-4ee7-b994-9e918774f22e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07a36369-a5cb-4911-a809-6c0e0ef00c0b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f029bb-df35-449a-8c44-fdece7d986c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16b7bbbd-4b51-4165-b5f5-06ddd2d5b4f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc1804e-3a5c-4662-888e-6fdd8ff5defd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0745c33e-c4bd-4039-a5e0-62d40caa8677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1659c25a-12e3-4848-9e09-215b9a1afc20",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a0addb2-b4d7-43bc-8186-b420c43ad28e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2af8bc3f-543d-4dcb-bc18-713afde3adaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9452a0a-448f-4f43-9d53-8af7dad134db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78f4984a-a794-4d24-992d-b9840660a676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dab708f-2162-4a43-b194-1623f9c63a3d",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed409e18-4c8f-41bf-a393-f81b78e97cf3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1190f9d-1b2e-4bb9-9f16-ef5a91af80f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3196105d-3988-4699-8a5e-367c5a18dcc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72ddab32-684b-4bc6-9f88-8e88805f700c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48963dfc-07d6-44d2-ad3b-d0349617e82d",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48a6bd70-98ae-4be1-9e6f-de8722c9ff02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9294255-a6a2-4d23-8dcc-3ce9de477395"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6000f729-93aa-4fa2-b1c9-66ecc7a15a31",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0356e5aa-4b42-4cc7-98bb-59bfc58adf66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d46f35a7-2017-482d-be0f-9e7fbc40400b",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97b1f19a-36b6-451b-be39-9e7daf98d0e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3095253c-f39f-472c-b83a-9356933c43f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5231ed16-9bd1-4ac5-9749-4a69cd66d9a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97e34a8b-a6f8-42dd-9c58-e6864a7e419f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2300c844-16ea-4b03-afae-1ac58e7b705f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9194a148-e9d5-4719-a69e-10963a8379e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "546edaed-e1a3-4fdc-9670-b14bb5ff7dec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c973174-59c3-4d10-8294-efecd6631018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2555691e-41fd-45c1-9992-3a7539140afd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3d5d9a0-b1d7-4646-a851-d83fdf8e61f1",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d9fbfc3-f184-40f2-b0bd-14bd25fdb5ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83ccec6a-8fda-463d-a928-c64cfee66750"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ab9f26-74cc-4930-bd24-54ca8285690c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8e40853-8290-42b2-b36e-9c28c1298f7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d71ce3c-f626-451d-8f4b-e21bc58b2d96",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84c0a9dc-c7bf-4dac-bcd0-574573555bb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a06a3e8-e512-4b31-b2a2-d33d7ae1dd2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "757b56fc-1461-4665-bae7-84bb0b7f752d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ace9388e-8903-4041-abdc-904178e7d827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0411154f-1588-46c3-943d-da74ce32ff60",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b09ce75-94de-4c3e-9fcb-5a4ad2acd7a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94c15464-5ddb-4837-929f-a420f043ca14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60744db4-bf1d-4b92-8e65-9e3aca2b45d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "603c3252-1d4d-4bd5-8a2d-99a80a654511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7431438-9506-4837-a670-4dfc00d4b13b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0cb4f62-ad31-4e40-a274-4a3fff596c96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "478383cb-5dd9-4f1d-8f1b-55705704ffc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b555488f-e7b3-47f7-8e25-33ac067f4d0f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "646086cb-8171-4b1b-b5db-d3efbdd25c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c59b09d-2f73-4b45-b8c4-fa61e3920101",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b64cb7d-2912-420a-8bd0-2f48128d1c4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae92c788-c638-47c7-b43c-f0b6f8efbffc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adce6c3a-6426-4432-b1a8-f01df7a6e90f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f282cab-5c24-4f78-a02a-e3fcb82eabcc"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "843ce989-ac4c-4f79-95d7-5f038c984681",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8633e5c7-cb51-461f-8113-11d95b5b5b7d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "43b26454-38d2-4622-9cc5-c9b320d61dac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "54d8b59e-6df6-4ee4-a379-60962eb6576a"
                    }
                  }
                ]
              },
              {
                "id": "c813ce66-50b0-4ebb-a47f-020fc64a387b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5efdb6af-da30-4237-b3e8-c4cd14fd5a7f",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb83e47a-bd6e-47ef-a628-65b348bff01c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a26262bc-84d4-4b8a-9036-fa159325d87c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "732ec758-6175-420d-b9a9-82db5d085543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "41e90ebd-005e-4f2c-9e5e-17304b215dfd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b7a9b356-a396-4a20-be94-0ae5e3da8d95",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "330c8bf1-c5ff-4a5c-999c-5d6e1dc221e7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5dd7adf6-139e-4f28-a037-cd1fb7223acc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e83987a-a80e-42de-b83f-0a2874722711"
                    }
                  }
                ]
              },
              {
                "id": "83b24ee6-7e75-4ecd-bdca-425e3bd4c866",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "272b3ca7-d88c-414f-aebe-14931b3bf8e9",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "628f7866-72d5-4e23-ae5b-7ae9531f78d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "8a9a1c96-f972-4446-aa35-c4fa4a70efea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2895f6c5-8e08-49ad-9a12-6baca00c2c2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d281393b-b09d-4049-a6af-584b489b1f82"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3c3a7ce9-569b-4ddd-8c27-896272023a9d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "096294ac-a657-44a8-a2d8-371df9eb8f78",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aeb68f88-ddca-44a3-b876-7051c60ebd07",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e781604a-6dc6-4239-94c0-ee0a22f520aa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "162ea720-5997-406a-ba49-428af5efb32b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e43fd7c-be8f-4cf3-9a8c-e11c28a93164"
                    }
                  }
                ]
              },
              {
                "id": "0d492d2a-1706-4fd2-9edb-152c8e1620b7",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "368b4c6c-73e3-47cf-9534-6749ef9a0459",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a6defd53-c3b7-450c-ac7a-f8313a5bb051"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "72617c97-4905-4797-b108-78aa239f9c72",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "37bc36ad-149a-40f5-bde8-ada250587c70"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a0796f6b-6caf-4f4e-9911-081fde22bae0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "ec750a19-e4dd-4f4d-ae60-b80c22011a9f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bcdd53d3-a47c-410b-bc51-5c8cf0474204",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "302053e6-d283-435f-8276-70fea12332dd"
            }
          }
        ]
      },
      {
        "id": "df621993-95d5-41a5-baba-f28ff22e8b33",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "94b75f6e-ce8a-4bc2-8b02-ac1bcaa528bd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bc2bf985-339b-43db-a670-25ebc090e48e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3c26aaf1-b446-4a77-ba51-3ddb53e4c22e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3ab73df-a06d-4049-be6e-2f7c474380eb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "abd6fdd4-995f-4477-929c-b0f4400e0122"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e92ce3fa-c90a-420a-9fde-0baf3f3e6753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "568cf6ab-07a8-4f8c-9136-9556a9db66ab"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f232b68-bfae-4e46-bf22-8ab89e6196fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cfd0f0a5-7e6a-415e-9c0b-99eb5fef8c44"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "79f83bbc-750d-4327-bf4b-c606b28c79f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "28347331-a211-4b4a-a9a5-d77b5d9d9932"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "72006117-0d86-47f9-a0da-456c9aa6bc7c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6f02a37a-7174-4317-90d9-b5048f066a1f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7e39e272-7e23-4609-841c-70493a1c13ab",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "88c4223c-3d6f-457e-ac7f-cc4e9845acee"
            }
          }
        ]
      },
      {
        "id": "d42de00e-496b-42b3-a2e8-ab8a31923263",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1dcae3dc-d138-4726-81eb-1dbf7eac73bd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9aea7571-7ae5-444c-8c3e-278d01a46ed8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8070ca9a-0f68-4e94-985a-6577af8e3e5b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39cdd97c-b224-4fc2-9e16-987dafcd6ade",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c8e574b9-9211-43b0-a107-18ee50260f59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56336fdf-b6d3-4eac-af8b-37c92bcac206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2daaefbc-ccad-456a-8093-7440a5ad743c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b1b1dd23-71f3-4c3c-a76c-3de50f548e43",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e47cefd-4df9-4de6-8306-93535412a09f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "454ec5d3-edc3-4191-91b8-5e921584fd82",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68b117a3-d9b7-4cbf-84ca-f09c0e80de18"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3a837cd9-8faa-431f-8d50-cb7e3e50d440",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0f55673c-31db-4497-8da8-2e9e20c74cdf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2ec9a74d-aaf8-44be-9a5f-c3d49e172baa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5e5e12f7-5e9e-478b-b75f-fd064e49ad03"
            }
          }
        ]
      },
      {
        "id": "4ce8f781-2b73-41d4-8733-a9e8ff3d9970",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "6c6bf6e4-eee5-43c1-a751-f558d0a17431",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c45ec968-2cc6-4099-b4a6-8f26ca2e16ff",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8bebf20d-89b0-48fd-a1b9-6db5a16c24b4",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "321e881c-ff85-442e-b036-8598d81e9134",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "27aca5d5-6ac8-47e3-bc76-f0677d6bd9c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f45f8079-968d-4e01-b561-7686d5eea5d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "77eeeb78-61f7-4f86-bc52-4eecba5db048"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b13218a5-75a0-4838-a71d-32d2d929a849",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79af17a1-cfb4-4f3d-a545-21196c529800"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8534a457-8ef9-426e-abbf-5de427f261e6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8fc9635c-dc44-495b-8874-b573a6c0ce8f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "516dedf1-b439-475f-ab79-7a6cc598b5e2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c1bb3031-8224-4d0a-88e0-c91cc014ca25"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f46a4db0-eab9-4f8b-aec7-fbca9f97fa06",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6203a1a7-c697-4483-ba8d-b67139a144cd"
            }
          }
        ]
      },
      {
        "id": "f39dd076-7f81-4c86-9b95-ccb513902468",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c64167d3-3fb0-42f3-ac00-5f5005d73506",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "50e61834-3c61-4340-85db-5f0b137bf571",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "31b50925-32fb-4e75-baf2-9d843bb099bb",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2c95871b-29b3-406f-93bf-8f9c457448b5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "116a5f55-a327-41e2-af3c-e5ab204f0e47",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 264
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 120.6269841269841,
      "responseMin": 6,
      "responseMax": 1024,
      "responseSd": 93.3056280416023,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1721867987606,
      "completed": 1721868026655
    },
    "executions": [
      {
        "id": "46fbfbe4-91c0-4481-9008-252e62d7f04e",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "bfd040af-e00f-4e75-9a62-423f67605df5",
          "httpRequestId": "20777a6e-2c52-4423-9a3e-ed1eca3601cf"
        },
        "item": {
          "id": "46fbfbe4-91c0-4481-9008-252e62d7f04e",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "c2e69998-d656-4555-a343-4f20374d159d",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 0
        }
      },
      {
        "id": "523696f2-3741-4f7b-8efc-38240e103a77",
        "cursor": {
          "ref": "ee27c60b-40de-476c-931f-e78228f29675",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b7bf81e9-9908-4222-9bc6-3835b53369b2"
        },
        "item": {
          "id": "523696f2-3741-4f7b-8efc-38240e103a77",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "d8c7152e-6d97-4e8e-93ea-e204c36760e9",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "5a2edd2e-464f-4b37-a8f5-ca352b616426",
        "cursor": {
          "ref": "5e2114ea-3f97-4f20-846e-10d0ed806ff4",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "bb8ab79f-f51e-41a7-a0a8-30c6537c81d9"
        },
        "item": {
          "id": "5a2edd2e-464f-4b37-a8f5-ca352b616426",
          "name": "did_json"
        },
        "response": {
          "id": "8c68b0cb-f223-4a72-bcec-e4c5efed96bf",
          "status": "OK",
          "code": 200,
          "responseTime": 324,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f91019d-a976-46e6-8f6d-d683047286fa",
        "cursor": {
          "ref": "86f2e103-5b7c-49ba-9398-afce51c972dd",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e8bbedde-574c-44dd-99e0-e5a23346f8b0"
        },
        "item": {
          "id": "6f91019d-a976-46e6-8f6d-d683047286fa",
          "name": "did:invalid"
        },
        "response": {
          "id": "3aa53048-671a-4f76-987c-d19e21d5158f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 267,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f91019d-a976-46e6-8f6d-d683047286fa",
        "cursor": {
          "ref": "86f2e103-5b7c-49ba-9398-afce51c972dd",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e8bbedde-574c-44dd-99e0-e5a23346f8b0"
        },
        "item": {
          "id": "6f91019d-a976-46e6-8f6d-d683047286fa",
          "name": "did:invalid"
        },
        "response": {
          "id": "3aa53048-671a-4f76-987c-d19e21d5158f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 267,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aee8ab3a-7cd2-431f-b036-25fa02d81917",
        "cursor": {
          "ref": "b36c296f-8889-4275-b6ab-e460ebc38230",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "99a42b83-c83b-4374-8fb0-4688685a70c1"
        },
        "item": {
          "id": "aee8ab3a-7cd2-431f-b036-25fa02d81917",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "6e9cf5a2-a849-4074-b8a7-bfe918855bc7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 138,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29f5cffa-1b2a-4815-a7e9-2d7370325a12",
        "cursor": {
          "ref": "b18465da-aea5-4f5b-856c-0b8a0d4f7ae3",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "1234aa7b-b7f2-44dc-85db-8285f4c9b7b7"
        },
        "item": {
          "id": "29f5cffa-1b2a-4815-a7e9-2d7370325a12",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "56d68e1b-ad86-4481-9e89-5fe08942380e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 90,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81ce50ae-6e12-412d-8929-222198582b4c",
        "cursor": {
          "ref": "4424a18a-0674-43dc-8f80-177690be7693",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "9933ebf6-c48c-45b1-8787-5ba10c2849bf"
        },
        "item": {
          "id": "81ce50ae-6e12-412d-8929-222198582b4c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "bb662836-84fc-413f-bf72-6578eb4f4f53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0069848-07a6-4c76-b9e0-41e9f56f6b25",
        "cursor": {
          "ref": "303d87f8-c399-4681-9c47-543b772139c6",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7d7b1726-15aa-4a1b-90c0-55ac16a1ef92"
        },
        "item": {
          "id": "a0069848-07a6-4c76-b9e0-41e9f56f6b25",
          "name": "identifiers"
        },
        "response": {
          "id": "2b18b6f1-1da9-4d52-b1d4-f5a9d27faf45",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79f63d64-ab8c-404c-a0da-7de29a4e8ff3",
        "cursor": {
          "ref": "cd306291-13cc-4ea9-acbb-f200ed7c05cd",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "96d8a79b-f8d6-4005-af77-1825337f9c1c"
        },
        "item": {
          "id": "79f63d64-ab8c-404c-a0da-7de29a4e8ff3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2cef21f8-efd9-47a1-87bc-7b70e6b69e7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "bbefab38-a8df-4519-9749-49ad9e060e41",
        "cursor": {
          "ref": "8374d7b7-3d8b-4291-8f14-375a8fd23e9a",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c4cd0a75-d53a-4ef7-934b-2c45df7e3c7a"
        },
        "item": {
          "id": "bbefab38-a8df-4519-9749-49ad9e060e41",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "e4a9c8b8-c041-4626-8764-d531de1cccca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "51c43610-a6d1-4b86-947a-6c32060681f6",
        "cursor": {
          "ref": "603fb585-7db2-4913-bae1-277f145f7fe5",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ee10a936-428c-4d10-b375-32d40c28f9f8"
        },
        "item": {
          "id": "51c43610-a6d1-4b86-947a-6c32060681f6",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7f34f203-7522-4749-b269-ba1dc7cd835c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "ea17aba5-8879-4072-b991-fcf6cd2c8aab",
        "cursor": {
          "ref": "0af38636-bf0e-415f-91d6-7e09a6b3e071",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f889a419-13db-4b78-b0b6-58356a19225a"
        },
        "item": {
          "id": "ea17aba5-8879-4072-b991-fcf6cd2c8aab",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "3ec10a4d-ceb5-420d-b1d7-3f77f9d32263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "97179511-20a6-4bfe-a45b-9de7c3d46bcf",
        "cursor": {
          "ref": "5f911517-779b-40e0-ae72-ec6808d899bc",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4da8fb35-4be2-4c00-9d04-a11b4c8895c9"
        },
        "item": {
          "id": "97179511-20a6-4bfe-a45b-9de7c3d46bcf",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "b65a172c-e9df-44c2-b55a-3409cecbd569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "f5a5795f-3462-42de-ae2c-b83aef77423a",
        "cursor": {
          "ref": "c3da675a-1eb9-4949-9acf-7aba3512bf01",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "86eb5917-5b3b-45aa-b925-9d1c45b53337"
        },
        "item": {
          "id": "f5a5795f-3462-42de-ae2c-b83aef77423a",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "eabe480b-e4ac-4c07-817a-dc284a787276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "2e901982-c013-41d7-b8c0-9cd691dd2e91",
        "cursor": {
          "ref": "fd665bf0-9134-42e6-9eaf-14165b16f984",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "eb0d458b-3f3d-4614-a5ca-99fb65d39776"
        },
        "item": {
          "id": "2e901982-c013-41d7-b8c0-9cd691dd2e91",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "0d239287-bfa3-4d6f-8bc7-cd525bf69036",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "d18bb1ce-9a0c-4702-a2af-d00ec624aa94",
        "cursor": {
          "ref": "9c004172-32a8-4a55-a1b0-e5be05652d21",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "cba7c892-7a91-4adc-a29d-42b213022102"
        },
        "item": {
          "id": "d18bb1ce-9a0c-4702-a2af-d00ec624aa94",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "2ad9a259-374d-4941-9190-77984b22ec2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "f0872fd6-f9b8-4814-942a-de32437ca6f6",
        "cursor": {
          "ref": "5d0a31ce-a4a7-4c86-9271-44feed8ffc01",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9a3aa2a7-c1e1-4895-b53c-2b59c5fe59b7"
        },
        "item": {
          "id": "f0872fd6-f9b8-4814-942a-de32437ca6f6",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "253ec946-e3b0-41a7-8bef-fd8097e5c90f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "93e296a9-985c-4e90-aeb4-f5fa844c5c59",
        "cursor": {
          "ref": "0bc7f531-0ae3-41e6-b94a-85f63addb8e3",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "23813afe-db48-43ad-ab5f-cacf2fbd349d"
        },
        "item": {
          "id": "93e296a9-985c-4e90-aeb4-f5fa844c5c59",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a909bea4-6848-4c15-9fc1-11ad9d9ef8de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "9b9297a7-f5d3-4b5f-9608-d414f2ede710",
        "cursor": {
          "ref": "725c02a7-8fd6-409c-80c9-f516f6f45e34",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2667eda0-c9b3-4304-9a38-f5a453b758e9"
        },
        "item": {
          "id": "9b9297a7-f5d3-4b5f-9608-d414f2ede710",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ec0070fd-73d0-43c4-b60d-b94430a768b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "7e3b49de-92e8-4364-8969-abc15bb165f2",
        "cursor": {
          "ref": "b378c198-ce99-4708-b5b4-11cd6a55019e",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3a9d25b1-e85d-462e-804e-71e2fcb486a3"
        },
        "item": {
          "id": "7e3b49de-92e8-4364-8969-abc15bb165f2",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "ca52dd1c-55b6-4365-9c73-046313afae59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "8a22126a-f819-428b-8723-2988ad778f0b",
        "cursor": {
          "ref": "2b75b50c-3549-4059-8582-df6b1873fa15",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "80c9ef27-92a2-469d-9831-8afbc9e74ee0"
        },
        "item": {
          "id": "8a22126a-f819-428b-8723-2988ad778f0b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "4682d143-f24d-43b0-b8cb-1be60461c782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "411d827a-0329-4cc9-8103-c726dad1d521",
        "cursor": {
          "ref": "088a93ce-b736-433f-8a9e-a145c65f777b",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "34343498-6507-42ba-853d-5293e0b42487"
        },
        "item": {
          "id": "411d827a-0329-4cc9-8103-c726dad1d521",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "feb74579-9e11-4169-822d-91dec2faabed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "d57e1e0d-d308-4a4b-9046-5afd68f2aba0",
        "cursor": {
          "ref": "de570cf1-3075-4072-be51-215aa96fb054",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "702198f3-e602-4b84-8e01-2db12d12e3bf"
        },
        "item": {
          "id": "d57e1e0d-d308-4a4b-9046-5afd68f2aba0",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "c2c6c115-6067-44d7-8e82-d4309ee438d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "30cffbc5-f6e4-4cb9-9a48-55cc539003d4",
        "cursor": {
          "ref": "f343a53c-5e49-4def-963f-a1b0ddddf154",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "6e89799a-8662-4fd1-9cbf-79c34e762d59"
        },
        "item": {
          "id": "30cffbc5-f6e4-4cb9-9a48-55cc539003d4",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "37fb7322-82ac-4591-af89-cb5d41529542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "3dc2dd49-bd31-41e6-8939-e579494c6b2b",
        "cursor": {
          "ref": "46931b02-4e32-44b0-9507-5852e0b72c76",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "43685e9a-5e30-48a8-aa1d-4ee8038ea647"
        },
        "item": {
          "id": "3dc2dd49-bd31-41e6-8939-e579494c6b2b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "0d232ce4-5531-45d2-ab78-f46cf73a1e14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "3c5aef20-e95c-4097-96e1-f4c196f21ab2",
        "cursor": {
          "ref": "1fe668b3-d363-4082-922f-6bedc3ee9151",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "78dc0cba-989a-4df6-95a9-b8a14abaec59"
        },
        "item": {
          "id": "3c5aef20-e95c-4097-96e1-f4c196f21ab2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "62428d3d-f009-4e10-96fb-da5c7a00d049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "3d35eb7e-646c-41db-a3a0-8a4825ccbf44",
        "cursor": {
          "ref": "21523654-28a3-46a9-b4c1-1a19d646e41c",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "1df39881-21f2-4e4e-bd4c-ab60d47b5758"
        },
        "item": {
          "id": "3d35eb7e-646c-41db-a3a0-8a4825ccbf44",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "14bee60e-64e7-4437-999d-e9f862cde324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "c5e8d596-da48-4b22-b94d-612582239a52",
        "cursor": {
          "ref": "a07139ac-b512-45b1-b91a-73b6df24d793",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "28c73a6c-3489-44c0-9c25-bda2552e0092"
        },
        "item": {
          "id": "c5e8d596-da48-4b22-b94d-612582239a52",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "2cbf5e23-9788-4c78-b441-7a70a42b6799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "c1dce1fb-de63-41a1-ae83-ede8e6b940c2",
        "cursor": {
          "ref": "e12abf81-1f00-4689-96d0-2bb10d3ccd97",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "be93659f-75d1-4825-a37d-c2c6bc78c95c"
        },
        "item": {
          "id": "c1dce1fb-de63-41a1-ae83-ede8e6b940c2",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "3091e3f7-7857-4d76-9896-ab511243933c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "8cb60f1a-040a-46a6-b145-fff1ffa22b9a",
        "cursor": {
          "ref": "c5489e15-73c6-4cd3-abe3-a743a33b06c2",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d6267b72-5ab4-4578-a191-c7f2682fd386"
        },
        "item": {
          "id": "8cb60f1a-040a-46a6-b145-fff1ffa22b9a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f59973d3-8ba9-4ce5-a9d8-20916c296728",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "506d9f43-aaa4-4964-8c1a-cbec918ece5d",
        "cursor": {
          "ref": "a92b8c13-3e36-41bc-9a5a-7811040b33f8",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "97c5d43c-d18b-4f45-ae1a-659874b0e422"
        },
        "item": {
          "id": "506d9f43-aaa4-4964-8c1a-cbec918ece5d",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "c8ef2765-a901-4380-b173-ce522a42ceec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "863ba892-8b4f-4ee8-ae57-f23d83dbe58a",
        "cursor": {
          "ref": "1c618fe0-315e-4a51-93e0-102f90cf83f6",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "81deb2b6-5f76-43d6-afb7-de8931edb942"
        },
        "item": {
          "id": "863ba892-8b4f-4ee8-ae57-f23d83dbe58a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "36c2ac09-7a3b-45c0-b266-e89f00842ac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "dbb7ce85-a415-44aa-b48b-8b5121e6821b",
        "cursor": {
          "ref": "3e84ae65-e3dc-45d9-af21-5622eb7ea83e",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "dff32051-6785-41ed-8d95-1c37cd6aa569"
        },
        "item": {
          "id": "dbb7ce85-a415-44aa-b48b-8b5121e6821b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "96f2cd2f-743f-424f-8a64-55766983b116",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 176,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "84fc056e-02f2-45b4-b1b6-1cbfa3347aca",
        "cursor": {
          "ref": "678380bd-1c0d-4049-82dc-1f31e458a994",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "46787d54-e683-4c05-b9a8-5a9aa415a132"
        },
        "item": {
          "id": "84fc056e-02f2-45b4-b1b6-1cbfa3347aca",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "948616b3-b22d-4ec2-a3aa-bc3024a71265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "098ba86a-7d7d-4df3-80a1-3dd872dcd6cf",
        "cursor": {
          "ref": "58dd1cf2-2738-4c79-b7f5-34acb8c0e798",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "f4dc0847-8302-480c-ac88-7f7506424228"
        },
        "item": {
          "id": "098ba86a-7d7d-4df3-80a1-3dd872dcd6cf",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "24a5a52a-c119-49c3-9847-a5e446bd74ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "4e377ab4-9f3e-443e-b3c1-3f14648d9d6a",
        "cursor": {
          "ref": "56b0dfa5-ea5f-428d-85dd-727732fbb9c9",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9d4464a6-e2fa-4cd0-9501-2fb0653ac9f1"
        },
        "item": {
          "id": "4e377ab4-9f3e-443e-b3c1-3f14648d9d6a",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "0e84d514-74db-4a95-a8b1-84ed88ac25c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "382422f6-3752-4ac3-8a94-068e97708d57",
        "cursor": {
          "ref": "9b3bde52-de9d-4a48-8f6c-ce4e250a8961",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "24bb247d-924b-48d8-b360-10e24e59d907"
        },
        "item": {
          "id": "382422f6-3752-4ac3-8a94-068e97708d57",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "8566bba8-1fdc-4153-a545-5d2b727ec7c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "836eb234-34c3-45af-a628-c205ee58ea83",
        "cursor": {
          "ref": "a1218d02-54e5-4979-8cac-2615c5ef1fbb",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "1c9f0f77-496e-4d1d-b77e-d6334c72b54f"
        },
        "item": {
          "id": "836eb234-34c3-45af-a628-c205ee58ea83",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "33361eee-7a7b-478a-8b21-be168cf75c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "2b69763d-4c79-4a67-9bd3-b03d263cecb4",
        "cursor": {
          "ref": "89ec3315-b10b-4191-bc52-804e2ab55e18",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6baddb71-2da4-4129-8e6d-bbe12919f575"
        },
        "item": {
          "id": "2b69763d-4c79-4a67-9bd3-b03d263cecb4",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "758d7dd4-f1b9-4af5-b183-96db64abc6f4",
          "status": "Created",
          "code": 201,
          "responseTime": 1024,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "d0d69261-0249-48a8-92d9-61e7cd3ca987",
        "cursor": {
          "ref": "e8b71009-4290-4054-9ea9-c9fc19e7f2bb",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "93c4c57c-337a-4234-9fbb-eee3a546595a"
        },
        "item": {
          "id": "d0d69261-0249-48a8-92d9-61e7cd3ca987",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "9b7eaaf6-cbaa-4eec-90ac-949106201f77",
          "status": "Created",
          "code": 201,
          "responseTime": 342,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "03fca7a3-f24d-4430-800c-ecd380b549d3",
        "cursor": {
          "ref": "31869ad2-dbd4-4438-a750-5a50d49b3d05",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d46e9191-bf94-4f28-b36d-177e923bedf1"
        },
        "item": {
          "id": "03fca7a3-f24d-4430-800c-ecd380b549d3",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c2c96a23-00bc-486b-8f53-1984f0b89a6f",
          "status": "Created",
          "code": 201,
          "responseTime": 324,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "5852e4c2-7318-4d21-bfce-c4ec41769109",
        "cursor": {
          "ref": "3e78e7a3-1494-4bf8-ad62-0fa01a4f30db",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "21c273c4-0329-43ca-8b99-1980997ea48c"
        },
        "item": {
          "id": "5852e4c2-7318-4d21-bfce-c4ec41769109",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "9f57db89-71e6-48ae-8636-cbdb33308607",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "fc8125d6-e32f-46d8-af18-2969d2586482",
        "cursor": {
          "ref": "a0f8fec6-225f-431c-aaae-e42a9aaae219",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d956936f-7dbd-4191-94e9-cffe7071b9c3"
        },
        "item": {
          "id": "fc8125d6-e32f-46d8-af18-2969d2586482",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "3d8601b0-c05d-4c12-95cd-2ee757e85092",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "b26bf19f-4349-49d2-8768-c5619f8b38c1",
        "cursor": {
          "ref": "281f79c9-0933-4752-acf6-f08fff83b976",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "5f1bde25-4ce0-4b6e-b393-793dbf76fcc4"
        },
        "item": {
          "id": "b26bf19f-4349-49d2-8768-c5619f8b38c1",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "667f670e-7a4a-46ee-9ee7-e75943cf4c4c",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "cfe3db0a-6294-4d6c-a516-8b956319bd38",
        "cursor": {
          "ref": "7695b40e-348e-4e30-b3df-31f0d0bc5adc",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c609794d-d935-465b-bbc8-5fbf6e948445"
        },
        "item": {
          "id": "cfe3db0a-6294-4d6c-a516-8b956319bd38",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a9e1d8a2-6601-4bd6-ba31-1b481441e4d6",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "b6094d40-6712-4846-a13c-8bddf2dab1cd",
        "cursor": {
          "ref": "b4292ba2-ce84-42f6-9ff1-97c712c573ad",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "8da1cd63-2aca-4c67-aa63-211538cb4202"
        },
        "item": {
          "id": "b6094d40-6712-4846-a13c-8bddf2dab1cd",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "ac67c70c-2849-4e01-a932-97f63ad22233",
          "status": "Created",
          "code": 201,
          "responseTime": 373,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "0cedf447-f093-4132-8234-aba83e4b77fb",
        "cursor": {
          "ref": "cb3022cf-3f9f-4181-9236-a04f49d2bb75",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f2ab874b-1673-42c8-b6ed-bca4b3e3bfdd"
        },
        "item": {
          "id": "0cedf447-f093-4132-8234-aba83e4b77fb",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "97ec6357-5592-4fb0-9894-d597264789b3",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "a5ef84e0-01d4-4df7-af2e-dc657078d2cd",
        "cursor": {
          "ref": "48c4d5c1-651b-49fc-8edc-5f91a23c89ee",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "87e24a19-cce5-42d2-962c-7848c690e83c"
        },
        "item": {
          "id": "a5ef84e0-01d4-4df7-af2e-dc657078d2cd",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "7f1be3b7-6118-4de8-8dfc-55c3509f1141",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "4f5d7cf3-79e3-49ed-87d2-2af2c1db062c",
        "cursor": {
          "ref": "afe720e3-bc28-42e8-af4b-91f1c7c9a324",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "045c278f-0dae-4ed1-a871-b1d2dde06c95"
        },
        "item": {
          "id": "4f5d7cf3-79e3-49ed-87d2-2af2c1db062c",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a2b46fa9-286d-42b5-a930-c83b4ded2e7f",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "9ce03a84-1133-44c4-a4b8-8c7588e8d7cf",
        "cursor": {
          "ref": "b9f49f7d-7ca7-4efc-a16f-eb12144abf52",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "ebd03e13-b64b-49fb-bdef-5fe075d5b239"
        },
        "item": {
          "id": "9ce03a84-1133-44c4-a4b8-8c7588e8d7cf",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "29713167-cde8-4a5c-9d99-6bbfef1b3911",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "675c8811-e77d-4179-a90b-e5b912992eca",
        "cursor": {
          "ref": "cb3365b6-04bd-4bd1-ba77-98df48343634",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "8303e58e-bad8-4955-abda-3efc30d594bc"
        },
        "item": {
          "id": "675c8811-e77d-4179-a90b-e5b912992eca",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b2e2ecfa-fac0-48b6-ab59-a7cc3527f7a1",
          "status": "Created",
          "code": 201,
          "responseTime": 342,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "015b416e-eea4-4cfc-ba3a-5a6d6c425330",
        "cursor": {
          "ref": "f07b6e0f-2227-4f28-9e2d-388a7e9d6f7e",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "314d7976-2464-45b0-a5a0-4e02b835d7ca"
        },
        "item": {
          "id": "015b416e-eea4-4cfc-ba3a-5a6d6c425330",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6227666f-fba0-4255-a3c6-ca05f82485c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "0cec777a-a940-4465-ab99-6ab8b9aed955",
        "cursor": {
          "ref": "e3214050-ce24-4371-acdf-ad57b8f81903",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e9ef815f-5f6f-4c8f-a5ff-74210f57cae3"
        },
        "item": {
          "id": "0cec777a-a940-4465-ab99-6ab8b9aed955",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "2c06ccb5-6f3a-4d45-874c-b691329c644a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "65eb58cf-5aac-4460-9760-7aa63bfc74c0",
        "cursor": {
          "ref": "50323cb2-8809-4d29-8d95-aa91a7792cc5",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "bf3153a1-7c1d-4dae-8a98-06219072b1bb"
        },
        "item": {
          "id": "65eb58cf-5aac-4460-9760-7aa63bfc74c0",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "441feb19-3970-4da7-b670-7feeb83d9340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "9f2df4dc-6e8d-4e45-a636-899d5f256a32",
        "cursor": {
          "ref": "98c8cc59-1baf-462d-8bf9-5f8d4c0df667",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "aa7e5c21-adef-4e27-aa02-bc20b55ca8e2"
        },
        "item": {
          "id": "9f2df4dc-6e8d-4e45-a636-899d5f256a32",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "18342f2a-ae96-4eb1-be3d-38a3d6c73428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "0f457b14-1c5f-4d04-b31a-a1840edd8a06",
        "cursor": {
          "ref": "4be4719c-067b-49c2-bb94-1218dfb49bf2",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e7c6cac2-83ac-4dac-b0a7-ef9ca0f682e2"
        },
        "item": {
          "id": "0f457b14-1c5f-4d04-b31a-a1840edd8a06",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "dc093285-e7a5-4a1a-a91a-2b4a4256bf77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "48ca5d64-172a-436e-b2e6-e15dcdc260fa",
        "cursor": {
          "ref": "71c04779-5937-4cc6-aa7c-4aa3c2832f74",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "d89987de-7dd2-4402-a69d-3314bf6cea2d"
        },
        "item": {
          "id": "48ca5d64-172a-436e-b2e6-e15dcdc260fa",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "c1ee746b-49a1-4cc9-a3ee-772b9cea8abe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "a648074f-c9f0-420f-9ac6-f9ab0c2e2655",
        "cursor": {
          "ref": "722fbc65-3d8e-4e71-ac1d-4e496ff7d01c",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "572f1a48-7fdf-4248-b327-923ca82c0d36"
        },
        "item": {
          "id": "a648074f-c9f0-420f-9ac6-f9ab0c2e2655",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "54abee02-d822-48ca-8525-0c879851208f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "c10da595-46f1-4aec-9583-8a19bb911622",
        "cursor": {
          "ref": "8d821047-92ed-480e-8f9b-ba765dda6c64",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "c052152c-6a75-421b-addf-dad46ec37b90"
        },
        "item": {
          "id": "c10da595-46f1-4aec-9583-8a19bb911622",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "b6b3ebc1-95a3-4e11-8196-ee83c6d142df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "492bd546-64a2-4d01-8a7c-c08a0d9d9c0e",
        "cursor": {
          "ref": "58253ed6-a41a-40e0-a20f-5d0f05a78286",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "7fb9a253-2248-4a73-9912-e60293378aca"
        },
        "item": {
          "id": "492bd546-64a2-4d01-8a7c-c08a0d9d9c0e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "bc824bc1-06d7-4b8a-9c2a-3d888dfdb59a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 197
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "eb1c05be-02dd-4fae-a059-ec0614de7a7c",
        "cursor": {
          "ref": "3ead5aca-ae2b-44fe-9b5a-ef6305558e57",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f449eaea-8db7-4af8-8f8f-20daa489afe0"
        },
        "item": {
          "id": "eb1c05be-02dd-4fae-a059-ec0614de7a7c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "c9546b6f-b1ca-437f-bb53-520e8ca2a1c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "1678ddc7-d1e2-4cf4-8ef9-df1e0dda739a",
        "cursor": {
          "ref": "437d61d1-6abb-4fc9-95c1-845d9f279819",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "0f77e0df-0860-432b-81df-45accdbfaa49"
        },
        "item": {
          "id": "1678ddc7-d1e2-4cf4-8ef9-df1e0dda739a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "fb937045-10fd-497b-b626-13a72c60a736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "ea4ce67b-eded-4e75-a1dc-6fe1175f6905",
        "cursor": {
          "ref": "f3827b02-103d-4827-87a2-d6212dac2371",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "828c9ecb-7357-4bc1-a043-c4d2e5000bb3"
        },
        "item": {
          "id": "ea4ce67b-eded-4e75-a1dc-6fe1175f6905",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "8b151430-83ea-4f26-a52c-e9f43f66318a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "4cf2fcb4-2d66-46df-8526-2edefd5cbbb5",
        "cursor": {
          "ref": "c8f4f9fb-30c2-44cd-ad83-44f4aaf3936b",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "682a75fd-0603-465c-aa56-ff59d7c0fa2f"
        },
        "item": {
          "id": "4cf2fcb4-2d66-46df-8526-2edefd5cbbb5",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "de33e344-be78-42ee-a7fc-2a2722d97249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "aee56dcd-464f-42fe-acdf-2e062d827411",
        "cursor": {
          "ref": "03a58718-cdfb-4325-8fe4-d9648af46caf",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "576df871-ef07-4caf-8049-205e687c3e90"
        },
        "item": {
          "id": "aee56dcd-464f-42fe-acdf-2e062d827411",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "58e01547-1ac4-466c-b123-5979a0e6639b",
          "status": "Created",
          "code": 201,
          "responseTime": 373,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "2378d4ac-8651-4d82-b90f-c3b8d710b928",
        "cursor": {
          "ref": "667c9460-6c27-4f41-8901-0d0470fee191",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "5010fdca-2340-41e7-9f05-da8d59114ba0"
        },
        "item": {
          "id": "2378d4ac-8651-4d82-b90f-c3b8d710b928",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "9ae2d691-f116-411b-9cc9-87cae872494c",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "b30c4758-3d77-46b6-95f7-4b7501ccbdae",
        "cursor": {
          "ref": "615e12d9-4e49-41c7-a215-6ce947960265",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "c9abc7f6-a4b4-4235-b865-4e1f32968ae8"
        },
        "item": {
          "id": "b30c4758-3d77-46b6-95f7-4b7501ccbdae",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "c8540208-9878-4ea9-b77c-71e2608bc22e",
          "status": "Created",
          "code": 201,
          "responseTime": 329,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "d323774d-2e01-4baf-a96e-6b313a34a5fc",
        "cursor": {
          "ref": "93b0e7ee-1cb1-4ee6-a6a5-f9cd480266f7",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "621ffe2a-2fe2-491d-9608-5c9679cc4cd5"
        },
        "item": {
          "id": "d323774d-2e01-4baf-a96e-6b313a34a5fc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "094ffc4b-83d3-4366-b36c-028eb0bbc4d6",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "5f108e1d-829f-478b-96c3-e59ba54ca587",
        "cursor": {
          "ref": "ddf432c3-ea31-4747-8699-8c3a02046ad6",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "8fff9549-d6a0-4e39-b1a3-42e4f716dfa7"
        },
        "item": {
          "id": "5f108e1d-829f-478b-96c3-e59ba54ca587",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "abab01ae-dd24-4451-82e7-b16d4fae888f",
          "status": "Created",
          "code": 201,
          "responseTime": 368,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "1fdbc8c3-c24f-4fb1-a51b-f6f86c6d501a",
        "cursor": {
          "ref": "63a68967-ac2e-48ae-a001-094c44c86e13",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "96d8c8f4-3c42-435c-aa48-387150f49702"
        },
        "item": {
          "id": "1fdbc8c3-c24f-4fb1-a51b-f6f86c6d501a",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "8b5cdcf5-ac1a-4acf-8c79-597be097e65e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "0cd7efa3-1b52-448e-8072-c869b3d0c6d4",
        "cursor": {
          "ref": "159ce310-6b2c-4961-aa61-82008f72953e",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "e9e2fa99-e66e-4e38-9b3c-eda7c979a559"
        },
        "item": {
          "id": "0cd7efa3-1b52-448e-8072-c869b3d0c6d4",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "bb43dc52-778e-4cbb-89fd-48e5c70740af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "26522dfb-86e6-45ab-9be0-b3d7a0b7aaf5",
        "cursor": {
          "ref": "476954f6-938b-4305-9671-ff1fa8c079d1",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "fdd5b93d-5dd4-4e76-a07b-8a6d0e1f93ce"
        },
        "item": {
          "id": "26522dfb-86e6-45ab-9be0-b3d7a0b7aaf5",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "0b69eae8-ca14-447d-82d3-6de479c65e4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "aab0b131-6d3d-4b86-ba53-184546c650be",
        "cursor": {
          "ref": "25c68043-3e5a-43da-80ef-1f02eb466042",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "9b3c7865-a1bb-434f-ab5a-316791b967c1"
        },
        "item": {
          "id": "aab0b131-6d3d-4b86-ba53-184546c650be",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "f57a4cc7-97c4-412f-8e34-afd73b070866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "e189d32e-7d34-4a9f-99ea-0f0a1f421ba3",
        "cursor": {
          "ref": "3b725d72-17e4-4e60-a66f-f2eea5784633",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "61112fce-598b-4060-83f4-3bba7910fa96"
        },
        "item": {
          "id": "e189d32e-7d34-4a9f-99ea-0f0a1f421ba3",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "159782d2-a383-4e5d-944f-43b19cdd8f98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "9630d3bf-859c-4ec8-867a-eb746749ed7c",
        "cursor": {
          "ref": "06909cc1-56ad-471e-97a5-af8edba2f217",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "0493c2f7-50ba-4c91-831c-e285ee810427"
        },
        "item": {
          "id": "9630d3bf-859c-4ec8-867a-eb746749ed7c",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "e2e196db-101c-45e0-9abb-b0cf6cca2ee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "d8d70ece-5576-4b10-9bec-b7ec71364769",
        "cursor": {
          "ref": "d5eaed73-963f-4c7f-afb1-12f64b6686a3",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "bafb8f31-62f0-4232-a723-8c1abf5233b2"
        },
        "item": {
          "id": "d8d70ece-5576-4b10-9bec-b7ec71364769",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "67f7c6bc-df01-48ae-8441-41b56f7bfaed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "7ee5219e-b00c-4b3e-a765-6e99aa882fb8",
        "cursor": {
          "ref": "806bd54d-c400-4c4f-bbeb-75d561cd53d0",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "681e80af-9679-4d26-afb6-b0e585b7d098"
        },
        "item": {
          "id": "7ee5219e-b00c-4b3e-a765-6e99aa882fb8",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "994208be-ff4a-4fd3-acd1-7e7252c75fc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "7d546a6c-329a-4cb3-80af-b84b41c9162e",
        "cursor": {
          "ref": "431b54c0-8875-4eed-b304-835a9e387ae9",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "1b36ea2b-21f0-41a5-b2b2-54d7c7ff3efb"
        },
        "item": {
          "id": "7d546a6c-329a-4cb3-80af-b84b41c9162e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "6d4ca8d2-e217-4f3f-946f-fd71a99cd9dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "786c4888-5114-4167-af95-21f00c480e02",
        "cursor": {
          "ref": "ce7623a5-6305-4239-964c-da07e54ed56d",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "9d4914c2-f417-4b63-ac4f-72e944145178"
        },
        "item": {
          "id": "786c4888-5114-4167-af95-21f00c480e02",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "c2091bc7-b1f2-4c1f-84d0-980bfa4eec85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "c5e914de-b1d9-455c-b3e3-2fd1b615b2ea",
        "cursor": {
          "ref": "f7b45acb-42a9-4ada-a839-d102f72f7ba2",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "642ab6c3-b35d-4f2a-84d2-1a19149fe04d"
        },
        "item": {
          "id": "c5e914de-b1d9-455c-b3e3-2fd1b615b2ea",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "e0862e6a-baca-44ba-84fe-b143ceba7830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "2a89363f-a6cb-49aa-ae72-9590118927ca",
        "cursor": {
          "ref": "43f40f5a-73cb-44e8-8238-bdff66199fe9",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "0a56525c-12bb-4c99-b3bc-42869514129a"
        },
        "item": {
          "id": "2a89363f-a6cb-49aa-ae72-9590118927ca",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "9934fe59-ec43-4d55-ac48-d7571ec7e9bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "d9ca0490-cbf7-4321-aa49-9d3e0120776d",
        "cursor": {
          "ref": "5b2aafa6-2301-4194-81ad-0cbd773d75bb",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "c83d7702-8372-4580-8ff4-20ddcfd84bd2"
        },
        "item": {
          "id": "d9ca0490-cbf7-4321-aa49-9d3e0120776d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4062a304-c272-4b5c-a634-1eb3e45faafc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "68f6f65f-770c-44aa-bfa8-a97e0aec1c64",
        "cursor": {
          "ref": "d790a3e6-fe17-4e2d-88ff-ac485d25e70b",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "fbcbb98e-0f70-463d-bcbe-60525ef3c4f8"
        },
        "item": {
          "id": "68f6f65f-770c-44aa-bfa8-a97e0aec1c64",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "36ea0208-56f4-4c76-bf29-03d6f5555147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "cb379aee-3388-4942-8e40-23b725ebe736",
        "cursor": {
          "ref": "104d12a2-033f-4ba4-bbf7-a1b50a8fb0e0",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a52fea75-429a-4e33-8dc8-9d05a763eee8"
        },
        "item": {
          "id": "cb379aee-3388-4942-8e40-23b725ebe736",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "3acd09d3-08ee-43b2-a11a-d586bdf0bf89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "21a545f0-57b7-45d7-8752-5bc8c16ec3e1",
        "cursor": {
          "ref": "61710d42-28ce-4723-ba81-e17bac07ffb4",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "0fa5af4a-4222-48c6-b7d1-832e55e6e936"
        },
        "item": {
          "id": "21a545f0-57b7-45d7-8752-5bc8c16ec3e1",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e377c6cc-3311-4f4b-9bd3-f31a8f1b38e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "37e464ee-04bf-4ae7-b605-63a5bc367a3b",
        "cursor": {
          "ref": "743ef507-dcb9-4be5-8f42-ea2dc89664c5",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "3ed40ddf-4cd8-4081-b41c-a54a7da25617"
        },
        "item": {
          "id": "37e464ee-04bf-4ae7-b605-63a5bc367a3b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f5f31aa4-911c-43cd-9e14-1d28638f7391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "945c11fa-e28b-4654-a68c-48c5817c6717",
        "cursor": {
          "ref": "7d3e3dba-25d5-423a-92ee-706498342830",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "45f7a42c-9c15-401f-bd79-052cc3c1e717"
        },
        "item": {
          "id": "945c11fa-e28b-4654-a68c-48c5817c6717",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "aaa2ef3f-9ed7-4c9d-a0d7-a0041dda5e17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "304592de-24f4-46c4-9e00-c52567ee9b57",
        "cursor": {
          "ref": "0cfd9e8d-9802-4a96-bf65-9a3853a3f936",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "b3f766e7-5976-49be-8133-9c7764ec6586"
        },
        "item": {
          "id": "304592de-24f4-46c4-9e00-c52567ee9b57",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "270c18be-6ace-4b1a-9f92-f941a541e223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "2fd9f2e0-54b0-4793-a19c-2d49d967e357",
        "cursor": {
          "ref": "54abe5a1-9e4f-4e31-9564-3cc7c874cd45",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "6b3605af-cd25-4dff-9e38-18225cccc4c0"
        },
        "item": {
          "id": "2fd9f2e0-54b0-4793-a19c-2d49d967e357",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "916614c8-5c21-4fd4-9b52-189ffd141a8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "c6b5c2f2-16d8-4d7e-a2ca-d56b49b71dd6",
        "cursor": {
          "ref": "c25d2c18-9eb5-4cf3-9d8c-cbb2f711c5c6",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "fedba971-51c4-4c9a-afd7-5ccc77c77cb3"
        },
        "item": {
          "id": "c6b5c2f2-16d8-4d7e-a2ca-d56b49b71dd6",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "6143712b-36be-492b-b8e2-16915db6ac2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "4463face-aa3b-4700-9abf-fa6d4f3dc41d",
        "cursor": {
          "ref": "240d2029-172e-40cb-9679-6d198dafcb07",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "d210bc92-127c-4629-8f1b-5e12d5f87b1a"
        },
        "item": {
          "id": "4463face-aa3b-4700-9abf-fa6d4f3dc41d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "178baace-e53c-47f2-a7fe-e17c2ae50f0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "42635fd5-9d7d-4c36-a351-ac0fc84ff33b",
        "cursor": {
          "ref": "752bb769-9c51-4971-af5a-e5ba4d71339f",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "0b8e5fbb-149e-46f2-9b03-b352b7573a83"
        },
        "item": {
          "id": "42635fd5-9d7d-4c36-a351-ac0fc84ff33b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "434f25e1-955e-4cad-ace2-7089893b4187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "27b6615b-1bf6-45c8-9bd6-d52d3fbaa013",
        "cursor": {
          "ref": "661eb5d1-70ae-4d85-82ef-981937c0dac4",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "1c51b39e-4a6a-449e-aeb1-6406e1e2e0f9"
        },
        "item": {
          "id": "27b6615b-1bf6-45c8-9bd6-d52d3fbaa013",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3c1ccd36-f8f4-45ae-8187-1e1167f3a1f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "08302526-52d6-4fe7-87bd-726e72d038c5",
        "cursor": {
          "ref": "bb4fea18-35eb-4fd0-b83c-87fedb9047c7",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ad6075d1-8abb-44e3-bd08-90ed1be0e264"
        },
        "item": {
          "id": "08302526-52d6-4fe7-87bd-726e72d038c5",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "9342cf6a-e3e8-43a2-bfa1-97d9560f9ade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "b00e0c36-f606-42a6-a7c5-9edd887fe992",
        "cursor": {
          "ref": "44fbfa5d-d1cb-42c8-9fab-51db5a29b432",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "2ea29832-5ed0-41d5-ac8e-5bfa176bf2c6"
        },
        "item": {
          "id": "b00e0c36-f606-42a6-a7c5-9edd887fe992",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "541bd01d-b7be-4dc8-8dd5-09ba01ae5d20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 221,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "68226a98-dc3f-4a91-befc-2f680a975ac0",
        "cursor": {
          "ref": "a90a8fbd-0de5-49f5-a865-1380c235cae8",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "e6c0f618-fb32-4df7-b2ae-3e5c65a9174a"
        },
        "item": {
          "id": "68226a98-dc3f-4a91-befc-2f680a975ac0",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "935c2b6d-e89e-441c-9e48-5fab53fc3959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "16674889-0eeb-4b58-98c5-72a4c4e5e03c",
        "cursor": {
          "ref": "6d298118-3618-4388-86aa-677c07aeed94",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "d5ca35c7-037e-450a-bbd1-aed3c9635ef4"
        },
        "item": {
          "id": "16674889-0eeb-4b58-98c5-72a4c4e5e03c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "85c6e53c-5ca9-47ba-a66a-29c95197bed8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "0454ada9-e5d7-439e-937c-1cfe98318349",
        "cursor": {
          "ref": "1b224517-12f5-42e6-adfd-5c1c7556a2f4",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a3c2bdb9-312c-48e7-8bb3-18e74f3e36e2"
        },
        "item": {
          "id": "0454ada9-e5d7-439e-937c-1cfe98318349",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "911c4e2d-38cb-40b9-9434-b818a4b3b950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "4ce7debb-a91c-42da-91bf-d62322f8bb90",
        "cursor": {
          "ref": "1e36d6c6-b2b6-4760-ab84-496817fec5d6",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "9f4932d6-b083-4c19-900d-795c800eab47"
        },
        "item": {
          "id": "4ce7debb-a91c-42da-91bf-d62322f8bb90",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "21529807-d7e0-43ed-837e-613ad266c2ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "ed3bb9bd-e74e-4452-9ae1-14d1bb6ab6de",
        "cursor": {
          "ref": "6fd3bcc1-75eb-441b-ad71-7f1e94e34744",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "b4910be3-eaf4-4a55-8fcf-348f6772c411"
        },
        "item": {
          "id": "ed3bb9bd-e74e-4452-9ae1-14d1bb6ab6de",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "aef478a1-7c9f-4004-b35e-91c1061dc69b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "0ac39c16-28e0-4b06-892e-c669e1b1bc0b",
        "cursor": {
          "ref": "00bb6f86-7d98-42b8-abe1-16ed077990ef",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "1f543213-034d-429a-b4cb-9c766458ab96"
        },
        "item": {
          "id": "0ac39c16-28e0-4b06-892e-c669e1b1bc0b",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "4bd07aff-55fe-4981-942e-99cfff087ad4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e135b3c4-af47-449b-af75-7d00ece6dd4e",
        "cursor": {
          "ref": "0b9deda4-ba0c-4bd8-b780-0f87873d5b49",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "a282dafb-77fe-4585-b129-d0b1361f96cb"
        },
        "item": {
          "id": "e135b3c4-af47-449b-af75-7d00ece6dd4e",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "fd103a38-664a-471c-837a-3bca1bae00fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "9a7ea33f-95cd-4fd0-80f9-e37403e00520",
        "cursor": {
          "ref": "671ca006-092b-449b-8d53-a18b94f9fbe9",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "5bb636a7-59e5-4f46-a30b-56e9932b777d"
        },
        "item": {
          "id": "9a7ea33f-95cd-4fd0-80f9-e37403e00520",
          "name": "credentials_issue"
        },
        "response": {
          "id": "72bbee5d-8658-4917-a94f-70a5ec22f7f3",
          "status": "Created",
          "code": 201,
          "responseTime": 350,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "89d48cb1-b8d1-45f9-bc80-62789d977708",
        "cursor": {
          "ref": "633a314c-eaf5-4dc2-bf9f-a3bfd99099c8",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "5a6efb4d-d21f-4225-b2d4-84da31369611"
        },
        "item": {
          "id": "89d48cb1-b8d1-45f9-bc80-62789d977708",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "61efa182-f578-462b-8e42-fc691c7c5d2f",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7ff2013-03e1-4c0d-b3d5-fcafd655eb3a",
        "cursor": {
          "ref": "f16a6ee4-0688-4fb3-a700-9353955f04c0",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f693f05e-220a-4cee-a6ad-5b224544b4dc"
        },
        "item": {
          "id": "b7ff2013-03e1-4c0d-b3d5-fcafd655eb3a",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a34088e0-00fe-4828-a2be-1dc16371cfe5",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "65738bbf-4f29-47ba-a11b-117c24a97c33",
        "cursor": {
          "ref": "e89da406-1ec7-47c5-bad0-7287e1955725",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "cac16b4b-6846-489d-8a7b-cd35ed0fb073"
        },
        "item": {
          "id": "65738bbf-4f29-47ba-a11b-117c24a97c33",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c11f79c3-2e27-4f67-9260-db55c5a9c50b",
          "status": "Created",
          "code": 201,
          "responseTime": 326,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "191aa521-f496-484f-a92c-23ddd749f9be",
        "cursor": {
          "ref": "9ff3e9dc-d652-4e32-a4f4-b1fcaa111633",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "df17046d-c702-42fa-a475-98279ab5ea8e"
        },
        "item": {
          "id": "191aa521-f496-484f-a92c-23ddd749f9be",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "3188d816-e201-4838-95bb-8a77c59b9d36",
          "status": "Created",
          "code": 201,
          "responseTime": 393,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-07-25T00:40:07.819Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-07-25T00:40:07.819Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "97a891a0-d532-4bbb-a003-4bbd9506c8f9",
        "cursor": {
          "ref": "1c645da7-86b9-4f72-ade3-fccb76c5ac74",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "7e9445c6-444b-4100-844e-7beec1967972"
        },
        "item": {
          "id": "97a891a0-d532-4bbb-a003-4bbd9506c8f9",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f417f8fa-b535-4a7d-b71c-c0fddf3a37c4",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1ba4b73-2674-4689-b2fb-482a49ca570c",
        "cursor": {
          "ref": "fcc1e1e7-eab9-4aab-aa65-9f76dd653750",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "0e423143-4945-46cf-afeb-75120f57b7e2"
        },
        "item": {
          "id": "a1ba4b73-2674-4689-b2fb-482a49ca570c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4140c781-25df-4555-8fc3-a659101bd7be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "1587d937-caae-459c-85a6-7f0194c3695d",
        "cursor": {
          "ref": "64ac292b-cf86-4a97-a063-188a63be688f",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "961b83ef-d871-4155-bc9f-7892c68b2102"
        },
        "item": {
          "id": "1587d937-caae-459c-85a6-7f0194c3695d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ea98f58c-372a-449c-a569-08bd7a814986",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "08fed573-a53a-460f-b597-706449922d08",
        "cursor": {
          "ref": "e95cb2d1-6553-4b67-a00d-f24ba29726f7",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "07e361ca-71d8-4a75-8f4e-b4aafb000752"
        },
        "item": {
          "id": "08fed573-a53a-460f-b597-706449922d08",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "86b19a29-8066-4dd0-a0cf-cc179e60b85f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "906f219c-f318-400a-8e5c-c9f38a62969c",
        "cursor": {
          "ref": "eb1af5cd-ec2f-4925-abc0-f6c70caa7300",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "856c992a-4e4a-4203-9b17-db34868c4b85"
        },
        "item": {
          "id": "906f219c-f318-400a-8e5c-c9f38a62969c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d1cb1da5-5b4b-42c5-a42e-f2f1f80e3ed7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "76bc6654-2806-4666-9301-b26686efa349",
        "cursor": {
          "ref": "d89de863-5019-4b41-995a-f795e93f6a78",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "31e7016a-08fc-4c46-a0f8-1178f560a9df"
        },
        "item": {
          "id": "76bc6654-2806-4666-9301-b26686efa349",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a751003c-1678-49a4-8178-f68d253feed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "4d59c76f-f4ea-42fe-b1b6-5e0d392414c4",
        "cursor": {
          "ref": "04e38cff-e738-45f6-9537-b12f5658be95",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "3e30a0da-edef-4d71-9c10-ec78c62698c4"
        },
        "item": {
          "id": "4d59c76f-f4ea-42fe-b1b6-5e0d392414c4",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "1d55a10c-aa76-4e1f-8c7d-7656f8d27192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "80916518-6b20-4de8-b538-9806cee8242a",
        "cursor": {
          "ref": "92fe2e04-698b-42ca-9870-cbb5b5160982",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "0cfab3ec-67ae-42d1-a29d-87893552eae1"
        },
        "item": {
          "id": "80916518-6b20-4de8-b538-9806cee8242a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "aae5cb56-dc3b-43ef-9a5c-58ebb2280b11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "56cd1d95-6a04-42fb-b80c-bfeeab3858a7",
        "cursor": {
          "ref": "5127e417-7aae-439e-a203-7ed0ddd8c35a",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "e06bff89-0c7d-4962-a9ab-23102bad1a9f"
        },
        "item": {
          "id": "56cd1d95-6a04-42fb-b80c-bfeeab3858a7",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f6be51f6-87b4-43b3-b98a-00d955ccc3e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 139,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "f3dfdcf2-68cc-4fd0-a1ae-890f3f5ccde9",
        "cursor": {
          "ref": "3fb67242-2d66-4e60-b380-27c27ceb0b9f",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "4d851864-369b-42b1-99b1-177644ef4c02"
        },
        "item": {
          "id": "f3dfdcf2-68cc-4fd0-a1ae-890f3f5ccde9",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4819e9f2-b3ab-4e54-a26f-21c33fe31161",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "928145dd-aa13-44f9-94d9-4305ace0e67a",
        "cursor": {
          "ref": "37a68955-9925-443f-bdce-4d2695936787",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "69868e8c-2ba7-4857-8530-7b8eff00bf4c"
        },
        "item": {
          "id": "928145dd-aa13-44f9-94d9-4305ace0e67a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "6f6ea9a5-a627-4d4d-b793-9a1d70f54b7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "6113766c-2c61-4953-b68d-68896a3c05c6",
        "cursor": {
          "ref": "c8793de5-1a7f-4490-b9f3-33340dbcc6a4",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "401133e2-2491-449b-a4f3-b2cf8660bba8"
        },
        "item": {
          "id": "6113766c-2c61-4953-b68d-68896a3c05c6",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c597755d-1cae-4c62-8a7d-d535fc9bffde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 118
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "a55a161e-75ab-4133-95f4-afda9c33168a",
        "cursor": {
          "ref": "c6bc9ec6-286a-4279-9ca7-c880df87d868",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "0ca3db20-e646-4f5b-b69b-88cbb3b829f1"
        },
        "item": {
          "id": "a55a161e-75ab-4133-95f4-afda9c33168a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "30c5b180-beb4-4d95-9e65-f21f8b5e180d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "380b4ce1-6be8-424f-ae0f-95802781c6b8",
        "cursor": {
          "ref": "d7bce2d7-0b17-4583-a65c-cd2ea9fbf3c2",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "cb06d3c7-239d-455a-9416-2ad0c4cc8ec7"
        },
        "item": {
          "id": "380b4ce1-6be8-424f-ae0f-95802781c6b8",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "53fd17e3-7bc1-47be-875c-fc0032283317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 188
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "ae59e564-40a6-4b33-a65d-af7e55257c11",
        "cursor": {
          "ref": "db46b9d4-f8e7-41be-9abb-63a698c4a035",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a7d894b3-9edc-49ba-a9e5-f299e629bf07"
        },
        "item": {
          "id": "ae59e564-40a6-4b33-a65d-af7e55257c11",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "da630753-a625-409f-9b8b-488a064c0e55",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 130,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "a2216465-a292-4b9e-8003-ebbe1c2dd01d",
        "cursor": {
          "ref": "69abdedd-926e-4209-b12e-6c65e432aea1",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "6530e07d-326f-441c-b835-a427a48f88f7"
        },
        "item": {
          "id": "a2216465-a292-4b9e-8003-ebbe1c2dd01d",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2932aea8-e09b-452f-be65-ed671e1786bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "c1aa6d0e-4820-4709-be99-e7ca531df12a",
        "cursor": {
          "ref": "b09ec283-1a42-446b-883c-4489cb83bd9a",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "9eedea8f-b361-4a47-8ecf-921c35604009"
        },
        "item": {
          "id": "c1aa6d0e-4820-4709-be99-e7ca531df12a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "2dbd8c9c-6d26-4bf1-9ac3-e6bc09dcbe10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "ac62996f-51e7-4eb5-ae80-c493d0164573",
        "cursor": {
          "ref": "cd761b83-fabe-49ac-acc5-bbbf51926b02",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "64a3ed9b-d3c9-4c7b-8d62-efc33c3f0b35"
        },
        "item": {
          "id": "ac62996f-51e7-4eb5-ae80-c493d0164573",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d36736ff-2b20-45d9-9bf0-29b90a7b927d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "725734bc-fa6e-4e5f-9e19-c6369a994dc6",
        "cursor": {
          "ref": "6dc50898-3cd8-49d7-958e-f9a00faf0b47",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "a0507015-9f1f-47ac-85b4-862a5e83b968"
        },
        "item": {
          "id": "725734bc-fa6e-4e5f-9e19-c6369a994dc6",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "878d34dc-5cd1-469a-97ee-2f6cf2169d09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "667cce5d-df89-4554-9f60-fb758e66daa5",
        "cursor": {
          "ref": "8777b065-60f8-4056-82c9-2f5d3e99ffc4",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "888ff23f-7597-4b83-a2b1-9616f292bf48"
        },
        "item": {
          "id": "667cce5d-df89-4554-9f60-fb758e66daa5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3a1cf8a5-89c7-47e8-a099-03d70d739a1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "31a16810-ce49-4392-b140-d66e0d636a28",
        "cursor": {
          "ref": "02fe2f56-e8f6-4608-bab7-052c0429c52f",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f3f239b5-6d2a-4ea1-94e9-9e871a9e3ecc"
        },
        "item": {
          "id": "31a16810-ce49-4392-b140-d66e0d636a28",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "5c3d15f9-c615-4503-a7c0-76909f37e45f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "faf20b49-136d-4945-be9f-9cc8368597e9",
        "cursor": {
          "ref": "a2140d36-bafc-4c1b-8705-faac829293ef",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "0f3feb93-85e2-47ea-bded-1539ecfaa81e"
        },
        "item": {
          "id": "faf20b49-136d-4945-be9f-9cc8368597e9",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "39425431-9eec-4802-b4c7-6b7180c032b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "d9bbeeba-cdc3-47ac-ae60-2a15608ecd53",
        "cursor": {
          "ref": "ce5434db-f62f-47ae-8b66-489b9b1a6fab",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "b505faf3-c778-407c-9fac-c459588636c9"
        },
        "item": {
          "id": "d9bbeeba-cdc3-47ac-ae60-2a15608ecd53",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5c95a37b-ee53-4222-9a1e-5613dbe8338e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "0a3a188e-6597-4dae-aa2c-6afaba9ab845",
        "cursor": {
          "ref": "ef6317d4-f3a7-40f0-93eb-8bd36d35b0c5",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "282fd891-9bde-4bcc-b1d9-074901bbc895"
        },
        "item": {
          "id": "0a3a188e-6597-4dae-aa2c-6afaba9ab845",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8a7519d8-b1fa-4907-b779-8c02661fe5e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "0bb0c47e-a3a8-409e-b35a-1f378c97de58",
        "cursor": {
          "ref": "a91b6661-892d-4f8d-8fe5-9b2d319fd9b1",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d03f4ead-399d-420d-aa99-44c6d7190f9b"
        },
        "item": {
          "id": "0bb0c47e-a3a8-409e-b35a-1f378c97de58",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6a9f6c9b-5e89-4d4e-a781-613683d4d509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "9fa83fe9-7b22-4013-ba90-3f52a7bf453f",
        "cursor": {
          "ref": "30500d26-16ca-44d3-a29b-6ebadbbcbf7f",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "85eac89a-bfd6-461b-895f-a024b1fd3d60"
        },
        "item": {
          "id": "9fa83fe9-7b22-4013-ba90-3f52a7bf453f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "69721808-88e2-484d-9773-10ee391f0ffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "d394bf3c-f26c-4bed-a921-a0d9066d34fa",
        "cursor": {
          "ref": "45ee40b7-0f5d-47bb-a2ae-5781abe21178",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "b9fc470f-b0ed-430e-bf22-2fcad47d62ea"
        },
        "item": {
          "id": "d394bf3c-f26c-4bed-a921-a0d9066d34fa",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "543c532f-7d1d-4fb5-8cef-5e4e80473d24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "88a407d0-fc43-4cf5-a3de-ed8173db73a4",
        "cursor": {
          "ref": "86e931d3-0700-4ffc-b332-10fdb8ae2a01",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b56f8b02-8b2e-43f1-8eaa-0f5d1df3c1b0"
        },
        "item": {
          "id": "88a407d0-fc43-4cf5-a3de-ed8173db73a4",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "71cd5119-47b5-4f15-8ed7-1b2bc2b423ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "3433494d-b211-45fe-bc5a-af76daad81b3",
        "cursor": {
          "ref": "885deab9-3e8c-442e-8207-16829502fe0e",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "5fc1697b-5fd2-4799-a2ef-fdd950677aba"
        },
        "item": {
          "id": "3433494d-b211-45fe-bc5a-af76daad81b3",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "fc338f68-3829-4037-9e1b-a6e60083dac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "e759b351-efc0-4b52-be2e-b0c8242a1caa",
        "cursor": {
          "ref": "d5a95fe0-f918-4fcb-b618-c4624e73a4b8",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "218191b8-88a0-4216-9134-b7075fc7475b"
        },
        "item": {
          "id": "e759b351-efc0-4b52-be2e-b0c8242a1caa",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b3bd7e6e-1d6a-4c5a-8f17-fce36501551a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "c7dbafb3-7f84-43a3-b622-bb17ef211c82",
        "cursor": {
          "ref": "a2b99946-ef2e-4c9a-be31-8c65043e11f9",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "efa8e267-1a9a-4904-ae2a-9d1faa56a608"
        },
        "item": {
          "id": "c7dbafb3-7f84-43a3-b622-bb17ef211c82",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "01ae223e-ddb2-4561-8002-14e940138c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "3d104ebb-9a3c-47f0-b58e-5182819e17d1",
        "cursor": {
          "ref": "bb71ddcb-a3ea-4f42-b990-31bcf80a13dc",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "aa4fd1ef-7afe-45ef-9e4a-45de8a8b8b8d"
        },
        "item": {
          "id": "3d104ebb-9a3c-47f0-b58e-5182819e17d1",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "236ff15e-9fc7-4d10-bf35-b6682f5cf27e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "80d85315-e6c9-40ae-8896-b9af3df873ce",
        "cursor": {
          "ref": "6aa09d90-08f9-4d5b-8d47-213cd46e3c86",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "848a7465-29b3-4952-8f30-65e9e6adc302"
        },
        "item": {
          "id": "80d85315-e6c9-40ae-8896-b9af3df873ce",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "ad1083aa-f4ff-49d7-be13-26d8f5598cd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "7051d52d-2ea3-4bdd-9641-cacabcf89b35",
        "cursor": {
          "ref": "6766ed37-e4b9-4e93-a34d-458a031ad608",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "08e70f59-bfdc-4300-815a-a0dea2c80102"
        },
        "item": {
          "id": "7051d52d-2ea3-4bdd-9641-cacabcf89b35",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "ba3f5f96-056a-419e-ba2c-285b30c2dccb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "5af8f682-ef4c-4b43-9ef0-a3587b25965f",
        "cursor": {
          "ref": "81286429-c237-4f15-8eff-5bb806ae9bdb",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "cd5a6774-7044-43ea-8aff-09242c40d951"
        },
        "item": {
          "id": "5af8f682-ef4c-4b43-9ef0-a3587b25965f",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "2fcfd0c4-b4cc-4037-8973-d41719541473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "e8592584-9d61-4ff4-89fd-ff025574a5a1",
        "cursor": {
          "ref": "4f223b5f-a58b-45e5-8cc3-0d4432635cb9",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "9d6de827-21d0-40f5-bba3-651aa5420586"
        },
        "item": {
          "id": "e8592584-9d61-4ff4-89fd-ff025574a5a1",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "1168c9ba-dbd6-4a34-8c9d-f9e208dab61f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "529f7e68-73cc-4b5f-8d1b-4ba957b20f7c",
        "cursor": {
          "ref": "b1cade91-9e9b-496a-bed7-02af867645c5",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a4aacc3c-e510-46b8-a7ff-633447b9e1e0"
        },
        "item": {
          "id": "529f7e68-73cc-4b5f-8d1b-4ba957b20f7c",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "6ec2eaf6-79e5-44f0-9879-dd777766cde3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "df7c665f-58d4-4db4-83f5-ebfe4911f491",
        "cursor": {
          "ref": "fdac3ed8-1fa8-4eea-b7be-0a620b6b1c07",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "4251f253-1dbc-4128-8ae7-1a3992a044ed"
        },
        "item": {
          "id": "df7c665f-58d4-4db4-83f5-ebfe4911f491",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "cf7da208-bdbb-4af7-bb52-3119a0770338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "cf7d2aa3-d83a-4015-9ed6-94d15154236a",
        "cursor": {
          "ref": "e627d3fb-c094-4c22-8c9e-baec1aaf5a7c",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "d8241db2-6612-4df2-a9f6-d16e020d3111"
        },
        "item": {
          "id": "cf7d2aa3-d83a-4015-9ed6-94d15154236a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "765f2c56-4282-4cea-9c6c-35062f067102",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bdac435-6a0a-41de-9ce6-6ab286299f8a",
        "cursor": {
          "ref": "ded3aa11-038a-4169-81db-1bd98c5a13fb",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "9d23b372-d8bc-4b95-b9a7-a9b2e4e33df5"
        },
        "item": {
          "id": "9bdac435-6a0a-41de-9ce6-6ab286299f8a",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "fdaa2573-c18e-4ba3-a4f7-4d1f05b8c2ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "04d1e2df-259e-43e5-9db9-ed0d10b14ae3",
        "cursor": {
          "ref": "ff1dd611-e76e-47d2-9c21-e2a1d92bb2a4",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "18b5c5f6-8685-4a1c-97d2-e5c8e0cd1ed1"
        },
        "item": {
          "id": "04d1e2df-259e-43e5-9db9-ed0d10b14ae3",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "bcc97015-96f8-48a4-b3fa-db8f036b95a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "7177e55e-cfba-4c66-a3a9-445e4abac187",
        "cursor": {
          "ref": "67d9bf97-11f9-4f32-868b-f369a96bbe69",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "63d18cf3-951a-4ccd-9018-6e0901103be3"
        },
        "item": {
          "id": "7177e55e-cfba-4c66-a3a9-445e4abac187",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "4087f5d6-a10a-4e61-83f1-28f6a7d6acc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "ae1178b8-02b0-4987-b3f8-be880bd54293",
        "cursor": {
          "ref": "a6cd4733-2f14-4252-96f7-ea409f8ec088",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "008430d1-4d62-4015-b463-992d9aed6374"
        },
        "item": {
          "id": "ae1178b8-02b0-4987-b3f8-be880bd54293",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "e17d4f42-0012-4f56-bace-8543b1871431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "5b870a79-1144-4618-b4b4-8b44558bbd91",
        "cursor": {
          "ref": "299c673e-b44e-4a82-b170-944f85be09a6",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "549f9415-f56e-4903-b7b1-2d93184e3bb0"
        },
        "item": {
          "id": "5b870a79-1144-4618-b4b4-8b44558bbd91",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "1097309b-de4b-4069-baa1-f82754298687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "d4ee5fc4-2677-48c0-ad92-6e8eddfaeab1",
        "cursor": {
          "ref": "f111f651-e52f-413f-b38f-5adcf859c10e",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "bf0f5fb6-d63d-4ab8-98c4-afc7d0aeea64"
        },
        "item": {
          "id": "d4ee5fc4-2677-48c0-ad92-6e8eddfaeab1",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "fd73bc7b-0b4e-411c-a1a3-c6055f2d6019",
          "status": "OK",
          "code": 200,
          "responseTime": 184,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "e46d0b40-c3c5-4798-8036-608dd0635d6b",
        "cursor": {
          "ref": "1c627fd4-de73-4239-b3c1-e5921d207e39",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "42b1b6ea-2986-48fb-bb50-be3b3d196348"
        },
        "item": {
          "id": "e46d0b40-c3c5-4798-8036-608dd0635d6b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "2d0b32cf-5027-4b92-819c-1bb5c215b379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "8bf5928b-a063-4143-80c7-041a9fa7e17c",
        "cursor": {
          "ref": "deb993a0-91b5-40f8-bb73-44d7566e71e6",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "4e4d0bf3-6ea6-444a-881f-a83519649e15"
        },
        "item": {
          "id": "8bf5928b-a063-4143-80c7-041a9fa7e17c",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "1ee81694-a930-40e9-a1d1-872fcb630586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "5268e3e8-8761-4c55-ba3a-9fe5d7c17d6a",
        "cursor": {
          "ref": "da8d3563-a17e-4c57-96ae-9edc380c385d",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "a19dd1c8-69c4-4990-9728-2d183528ef94"
        },
        "item": {
          "id": "5268e3e8-8761-4c55-ba3a-9fe5d7c17d6a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "fdb19504-6cf1-4b1a-a426-dd7ce5688bd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "62f7c6b9-f872-4639-ab90-a8de19476b3b",
        "cursor": {
          "ref": "a6384fd7-454b-4127-a24f-2c660b8eb4f9",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "ba7ce5a7-b834-43a7-96cf-e1e197cd3f5e"
        },
        "item": {
          "id": "62f7c6b9-f872-4639-ab90-a8de19476b3b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e911c5cb-58ae-438a-8f7e-ef0a96000888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "7e723261-ffdb-4ecf-881c-ba53f21a09b5",
        "cursor": {
          "ref": "3e4e4647-7657-40a6-816a-fa6b023042ce",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "66722249-e5bf-4e56-b77f-b3759c7e0108"
        },
        "item": {
          "id": "7e723261-ffdb-4ecf-881c-ba53f21a09b5",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "06355495-2b46-418b-8cb1-7a23a9470f21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "09ff25d2-acc9-4950-b79b-fc265a26c667",
        "cursor": {
          "ref": "724606ff-26a1-45c5-aca2-211cdcdae03e",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "945ac1b2-2bcd-403a-a41d-7809c3421c30"
        },
        "item": {
          "id": "09ff25d2-acc9-4950-b79b-fc265a26c667",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "d830b68c-fb22-46f3-9dbd-84cdf4ae1cd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "0b186c6d-892f-4ac2-af59-689d3674e630",
        "cursor": {
          "ref": "c742d7c3-ff44-465c-82cd-5ea6817ea2ab",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c8584375-03ef-4fee-a573-484cb1bc94f2"
        },
        "item": {
          "id": "0b186c6d-892f-4ac2-af59-689d3674e630",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "17186987-e980-4432-a40b-67ef793d8d45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "3c8c356b-d58a-4173-9cca-6296b57ebe69",
        "cursor": {
          "ref": "c64836bf-af2c-43a8-874f-f1b4bc4530f4",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "0ccd90b0-b015-45a2-a16b-cd55e9c3ca66"
        },
        "item": {
          "id": "3c8c356b-d58a-4173-9cca-6296b57ebe69",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "27243f6e-07d2-4027-9e3f-5dc4f27d0a5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "ca66ff49-8e33-4436-ac9e-1011a93b8e20",
        "cursor": {
          "ref": "b02bd2de-0f71-4ae1-9d18-39402f47779f",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "bb5ce2e0-439a-453a-8952-30f9df8dfcd7"
        },
        "item": {
          "id": "ca66ff49-8e33-4436-ac9e-1011a93b8e20",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "6b2ba4fc-688e-46a9-9264-a33c195357c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "37041e36-ce2a-49b3-80a5-22480c08cc14",
        "cursor": {
          "ref": "b554bfce-22fa-41b0-8359-1ec9117ef86e",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "eee4d59e-ad3f-44bb-aa27-a41eb6ab8037"
        },
        "item": {
          "id": "37041e36-ce2a-49b3-80a5-22480c08cc14",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "038af5d2-1332-45a3-9821-65081e9ca27f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "3275d4fc-ba3b-42b4-844b-2077abc3834f",
        "cursor": {
          "ref": "c4917829-6781-48e2-bcc2-d0473504c82c",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "9aee7cad-271d-4027-84af-93433833c542"
        },
        "item": {
          "id": "3275d4fc-ba3b-42b4-844b-2077abc3834f",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "6657b6e8-6025-41b1-a742-3120d5916cfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "0c76d5c9-fa92-46c7-ac00-b8fd2d36dca2",
        "cursor": {
          "ref": "800bc234-86eb-4fa5-ad26-8e7199572d36",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "44cb1549-5941-443a-8c41-42dc06294182"
        },
        "item": {
          "id": "0c76d5c9-fa92-46c7-ac00-b8fd2d36dca2",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "0ccaa5e2-4b9f-4a1b-9c2a-cfedad76d6b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "03861172-b54c-4ea1-8944-6568755833ba",
        "cursor": {
          "ref": "b96104c4-9613-44fa-a0e8-41b5f91ffae7",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "6a71f2d6-bd38-4512-a1f8-022b194be3e1"
        },
        "item": {
          "id": "03861172-b54c-4ea1-8944-6568755833ba",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "d5d815a3-f085-4515-ba20-ebdb68dff0c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "c02904a3-342f-4df3-bcc0-8a602e83c1ea",
        "cursor": {
          "ref": "4ac0b429-7a54-4c35-90b0-4385290a3b52",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "86ca91a3-8333-46a5-a464-ff19795e43f4"
        },
        "item": {
          "id": "c02904a3-342f-4df3-bcc0-8a602e83c1ea",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ccd3f4fa-aff9-4338-a8f0-2e7c504a7868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "151261de-63e7-47fa-a080-1d8038221390",
        "cursor": {
          "ref": "96a215d2-d493-49b5-8cf4-b51ce1664848",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "7c8f2716-b68f-46c4-83b5-5923a079ce59"
        },
        "item": {
          "id": "151261de-63e7-47fa-a080-1d8038221390",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "ca2233a7-90ea-4f89-a3bc-7c21fe9db407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "efca630e-7a88-4bd9-8508-adaeb29bea7a",
        "cursor": {
          "ref": "28189bbf-7795-4ee2-96c9-874a5acf2bac",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "38ac4425-9c78-4bee-8581-97f268166d5b"
        },
        "item": {
          "id": "efca630e-7a88-4bd9-8508-adaeb29bea7a",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "14d2492c-54cf-45b8-8a5f-52b08804e862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "5e3f4237-0e13-4f08-8348-2b52888066b8",
        "cursor": {
          "ref": "0ef7ce6d-b92c-4666-94b5-ecb97b5e0cf8",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "82754801-1055-4f87-bf16-e805f6d3c26b"
        },
        "item": {
          "id": "5e3f4237-0e13-4f08-8348-2b52888066b8",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f5caa6e2-7c52-433a-93f9-cdb09767c93f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "5293b304-2ad3-4652-b878-855fc8909263",
        "cursor": {
          "ref": "802684be-d689-4085-9da4-f8629e89a9b1",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "723a72fe-d5a5-4d6b-bb72-c7b6ba554d72"
        },
        "item": {
          "id": "5293b304-2ad3-4652-b878-855fc8909263",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "31f33a3e-b8cb-4be2-bb53-88952f396019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "ea440d17-8da3-43b7-a61e-b9c8ca5e6df5",
        "cursor": {
          "ref": "91a242fd-b105-4653-a0cb-fb5c2358702a",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "aaa5c203-a7bf-4f9e-8420-4a7d51c01265"
        },
        "item": {
          "id": "ea440d17-8da3-43b7-a61e-b9c8ca5e6df5",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "45fb3c3b-5920-4158-abce-03939006b423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "e2faefca-48d0-4403-895c-945e6087099d",
        "cursor": {
          "ref": "93d7fd57-1c14-497a-9859-6d32e80f4829",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "422c7c97-84ed-41c5-ba79-5043b97c44cd"
        },
        "item": {
          "id": "e2faefca-48d0-4403-895c-945e6087099d",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "966cb09d-699d-48bb-92fc-04a631e93150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "49edecea-d41c-4da5-a97d-b06e916de018",
        "cursor": {
          "ref": "a4ef3abd-f46f-4757-b364-b3ca4d943631",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7bfea1bf-0766-4b78-9248-5fc13eaec529"
        },
        "item": {
          "id": "49edecea-d41c-4da5-a97d-b06e916de018",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "31dd40ce-92e3-424c-bae7-000c6dd3ab91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "6bb7ac82-89d6-4936-bfbf-f955e199ef07",
        "cursor": {
          "ref": "d9f146a9-9749-4f7f-a9ae-787c92c71605",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "d8ec9736-f670-4395-b07a-15ad7a9aecea"
        },
        "item": {
          "id": "6bb7ac82-89d6-4936-bfbf-f955e199ef07",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "711d6681-49b2-49d4-815e-2977f3e9b594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "2fd78fba-90b1-4208-85bd-3f660fd1f6d2",
        "cursor": {
          "ref": "1ec2ab5b-868c-472e-9989-a6ce1798e554",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "19c8e707-90ba-47b1-9ca2-002f417e480b"
        },
        "item": {
          "id": "2fd78fba-90b1-4208-85bd-3f660fd1f6d2",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "cec7af6d-c4fd-4cc4-9725-49dfe074a828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "6aef8c29-9285-4d99-aa4e-6305556f9844",
        "cursor": {
          "ref": "670bc05d-ff4e-4462-ab30-fbc0397bfdc7",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "721d89dd-9735-45d9-83af-6ce5e08f34e5"
        },
        "item": {
          "id": "6aef8c29-9285-4d99-aa4e-6305556f9844",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "d2b8691e-dbc6-4824-adf1-37ceab91a77e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "58e21e8f-717b-4f69-8094-2fedec5b1332",
        "cursor": {
          "ref": "baafe524-1135-4f1c-932a-351e618f3c62",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "30676b3a-eb1b-4a35-a3df-17140e868c18"
        },
        "item": {
          "id": "58e21e8f-717b-4f69-8094-2fedec5b1332",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "cb3d12c2-70c7-42b2-a19b-8fe4cbcd74a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "b2b56ed4-75d1-49b3-90d0-970d8466ba92",
        "cursor": {
          "ref": "cab74f32-8a37-4974-8088-ca41d4930cc1",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "fdd5fdde-b42d-4f0d-b9cd-34815e81ebc9"
        },
        "item": {
          "id": "b2b56ed4-75d1-49b3-90d0-970d8466ba92",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "5e106d21-c2e1-43ba-b28a-41ff85acf81c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "d4461ebb-eaea-48c0-b866-8cbc50f08ef1",
        "cursor": {
          "ref": "9daccefd-b178-45cd-b0a6-00a67f0c416d",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "18c51828-39ad-40a1-b5e9-230cacd1171b"
        },
        "item": {
          "id": "d4461ebb-eaea-48c0-b866-8cbc50f08ef1",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e21f1a07-6dad-4a55-ae0c-571a5f3f8558",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "858be4b4-be1f-4ba6-bbdb-dbc6f408f855",
        "cursor": {
          "ref": "b683b252-a351-40a9-b33e-d4c0030ab322",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "fc428dc5-7ba9-4f95-939e-4cda2cc73c9a"
        },
        "item": {
          "id": "858be4b4-be1f-4ba6-bbdb-dbc6f408f855",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "79546cef-9820-4cc1-b348-ae1d5a17ccc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "9a511068-5286-4bea-baf4-7346facf5be5",
        "cursor": {
          "ref": "81962f14-29a5-46c6-af4f-9788a7b5e939",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "84a0f7a4-aff1-48cb-980d-67d623656926"
        },
        "item": {
          "id": "9a511068-5286-4bea-baf4-7346facf5be5",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "35921af9-e5f1-4d9f-862f-31318173e654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "3056070b-44bb-4309-b56b-7e6c1ca4b2fb",
        "cursor": {
          "ref": "96d3b987-c83f-49bf-8aaf-8efdc42451a0",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "efefb67e-acad-4135-bc9f-1fbc742e0766"
        },
        "item": {
          "id": "3056070b-44bb-4309-b56b-7e6c1ca4b2fb",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "29d18690-af7f-4293-8458-492c2c4f3713",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "bfce6db2-f30a-42f4-8724-1ba5333d5680",
        "cursor": {
          "ref": "11e503a5-b5a1-43ce-bd04-9ac0c10d48a3",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f595864f-ad79-41c7-b82a-4bd8dded3c84"
        },
        "item": {
          "id": "bfce6db2-f30a-42f4-8724-1ba5333d5680",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "3ae031eb-b203-491d-b1d3-a7703b592b08",
          "status": "OK",
          "code": 200,
          "responseTime": 153,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "1e466f71-a87f-4786-a243-6218d8878f38",
        "cursor": {
          "ref": "4ce7cbb9-6541-4b40-a4ff-aa519b20a98e",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "4b462527-e24a-4f60-b7b9-9c5fe0d2c120"
        },
        "item": {
          "id": "1e466f71-a87f-4786-a243-6218d8878f38",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "823d697c-3f2d-4ccb-bd07-a516f796aed8",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "4b4b4263-3a3a-47a1-b639-9ffe248dd44d",
        "cursor": {
          "ref": "8b6c78ac-f517-4d98-a3e2-88b9c9e1ab4b",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "eb8ce05d-ff67-4a51-ac83-a6a22da3a006"
        },
        "item": {
          "id": "4b4b4263-3a3a-47a1-b639-9ffe248dd44d",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "06d25178-3357-46fc-b9d0-c4297d5ae1b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "caf017c4-31dd-4993-8b5a-c20152c9b8af",
        "cursor": {
          "ref": "04324bbf-f811-414f-b575-51e33bede346",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "c28ac14f-2d2a-408a-82d3-08a6276d9600"
        },
        "item": {
          "id": "caf017c4-31dd-4993-8b5a-c20152c9b8af",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ad77030f-9c5e-408b-b375-25b09dcb97a7",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "175a2d65-de41-4097-9970-938a511d7b14",
        "cursor": {
          "ref": "bee49c42-e6e2-43ac-a0c2-4f058f8daa00",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "0b935f50-0fc2-4658-b456-78ed0ace4409"
        },
        "item": {
          "id": "175a2d65-de41-4097-9970-938a511d7b14",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "ca895412-5671-4726-b7dd-0ef9d74fc636",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "a3aa8a9c-7e5e-4b79-9ffd-57ea3aaddb27",
        "cursor": {
          "ref": "2f5d7be8-9e22-49af-ace9-ed5d7779b433",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "f8879e7c-78d2-416c-bffc-608944471381"
        },
        "item": {
          "id": "a3aa8a9c-7e5e-4b79-9ffd-57ea3aaddb27",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "95625fb4-fbbf-41d1-9050-da1b9fbe3a4b",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "1cbb9972-2cb5-4ba7-b540-eacbbaec1418",
        "cursor": {
          "ref": "248c422d-6856-4f79-8854-8479f1005ae7",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "fb77e3ad-dea8-4152-9df9-efbd46186c83"
        },
        "item": {
          "id": "1cbb9972-2cb5-4ba7-b540-eacbbaec1418",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "c62d1a1d-1b78-4bf6-873a-fe5394a90d8b",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "6c0078c8-0635-441f-ad22-02c9456d491a",
        "cursor": {
          "ref": "ad5f1421-0e5d-4f52-9e1b-0e2eced80ee8",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a6ced0ba-8af5-45d0-8add-76957ef45223"
        },
        "item": {
          "id": "6c0078c8-0635-441f-ad22-02c9456d491a",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "4a665040-fd42-47ed-bb40-a224fe49c8bf",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "b16f2d1d-b69b-44a8-b8b7-3f00ecc3e7cd",
        "cursor": {
          "ref": "b9312d56-57f0-48fd-b291-a37cb2dcfc7d",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "ed7c7a39-22c6-408a-917b-c92bf8b4c2be"
        },
        "item": {
          "id": "b16f2d1d-b69b-44a8-b8b7-3f00ecc3e7cd",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "b27e7170-df12-41f8-92f3-4e6a2de3606d",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "b3b76282-1980-49a6-b618-7c75a619c6cc",
        "cursor": {
          "ref": "5802006a-50f2-4bf6-97a8-0d5f10646f8c",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "201d95d6-fef4-4b4c-952f-c2d95993ab4a"
        },
        "item": {
          "id": "b3b76282-1980-49a6-b618-7c75a619c6cc",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "3c470aca-5935-49db-bf39-5a8ac27fdc97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "d0446230-ada2-4e03-875b-5d50c703030b",
        "cursor": {
          "ref": "399c982e-ca80-4d04-a136-5f3b04e70a23",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "7d275790-0b3f-4838-b099-d2db1aba72ca"
        },
        "item": {
          "id": "d0446230-ada2-4e03-875b-5d50c703030b",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a6a626e4-d5ac-4cd9-a425-7d65c59f3fde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "85daf279-ef8a-4b2b-bc64-90b6da9c3af8",
        "cursor": {
          "ref": "479be6df-5409-4101-85bf-a15210a921d7",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "f9a413ab-c087-4c7d-b604-216bd38ca025"
        },
        "item": {
          "id": "85daf279-ef8a-4b2b-bc64-90b6da9c3af8",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "2e01e284-5a6c-4ff8-998e-d945b2c2f49d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "e4aa7ac3-adec-4ecb-a58c-327e697664d7",
        "cursor": {
          "ref": "164414e9-f4b0-42ce-bbfd-9e86927ffb4b",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "234e81ba-efb3-4e4f-b8ba-4582de654448"
        },
        "item": {
          "id": "e4aa7ac3-adec-4ecb-a58c-327e697664d7",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "db3ae84c-7eb0-4f2b-8d7c-51025598c30d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "69c84cb7-541e-404a-a7b3-714ea317b1a9",
        "cursor": {
          "ref": "8ffbd4c3-06e7-4670-91bd-6b3d0382dc6b",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2fc0326c-289f-44b8-8225-92fab27c88ec"
        },
        "item": {
          "id": "69c84cb7-541e-404a-a7b3-714ea317b1a9",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "74087b1b-2b92-4e04-b993-98da9b2e3c35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "b04b0626-c5f5-4136-848c-998c0d007252",
        "cursor": {
          "ref": "23acf771-990c-4361-b687-829f016b241f",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "76f75c41-c630-49ee-8038-a70ebc3c98ae"
        },
        "item": {
          "id": "b04b0626-c5f5-4136-848c-998c0d007252",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "df686949-b02d-41e6-9f21-fb3959be601b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "f0acc345-22b1-4c66-8488-88d9bcac953f",
        "cursor": {
          "ref": "8c7f372e-83d1-4a44-ad50-1ce312cfad28",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "6e706f43-2282-4a9c-a8e6-724a2a31dc19"
        },
        "item": {
          "id": "f0acc345-22b1-4c66-8488-88d9bcac953f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "5540b8e0-bbd7-4518-91a8-1e264ffd11a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "247a9f14-fe19-4e5e-b03b-821a01bd7deb",
        "cursor": {
          "ref": "ed36ddfc-b524-44fb-aba4-a0d4624b0472",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "538e0ff1-9247-4e4f-a854-547df8984466"
        },
        "item": {
          "id": "247a9f14-fe19-4e5e-b03b-821a01bd7deb",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c684b8f3-0443-432b-bc64-47ba16174c66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "4ab406bd-b634-42c3-85e9-e8fa203f0df1",
        "cursor": {
          "ref": "5e339602-6192-4a9b-b6b1-cbe436a2b1d4",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "ce73ac0c-a87d-4960-925d-d12296a70aab"
        },
        "item": {
          "id": "4ab406bd-b634-42c3-85e9-e8fa203f0df1",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "f5edb199-307e-4853-9212-05071a94cdb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "324ecbe3-70c2-495f-8c15-06498489e475",
        "cursor": {
          "ref": "e2ab352b-0da8-4127-b359-f08a5c4d0c19",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "403a237d-6f49-445b-a43b-7e897b19cff0"
        },
        "item": {
          "id": "324ecbe3-70c2-495f-8c15-06498489e475",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "a002be93-2198-409a-9b8d-0cd6e13c1b2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "d79fb116-f3d4-4383-a896-3b25f198b24a",
        "cursor": {
          "ref": "9a7119a4-c0a5-48a1-93dc-cfbfe519b956",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "6e26511a-9bd6-476a-8ec5-e0f8932b085e"
        },
        "item": {
          "id": "d79fb116-f3d4-4383-a896-3b25f198b24a",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "08b34fbc-f3e4-4cfa-8570-97fa8e98c01c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "19dbadd8-11e3-40ae-a9f1-a1f992301176",
        "cursor": {
          "ref": "f9f8741f-1b72-411f-856a-95fd16deea7c",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "ea81be8f-b697-4b75-8835-81090eca1381"
        },
        "item": {
          "id": "19dbadd8-11e3-40ae-a9f1-a1f992301176",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "8d283512-45db-44ab-91e2-e1810d8dbe64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 260
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "93e37838-92c0-48d2-8dd6-a145e2c3a0e7",
        "cursor": {
          "ref": "1c4f1348-8c6b-4962-884e-4e68cfaaa58c",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "1f87f7a6-add5-43d5-954c-75ba7545a568"
        },
        "item": {
          "id": "93e37838-92c0-48d2-8dd6-a145e2c3a0e7",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "5f71adeb-2905-4d0f-afb8-8b8347cd4058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "c5b4d98f-b6f7-4f62-ada8-284baefe8e26",
        "cursor": {
          "ref": "1512b270-6752-486b-8784-f1b41059ec66",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "6eaf5f76-f333-4045-ab98-60ba6f3bda2f"
        },
        "item": {
          "id": "c5b4d98f-b6f7-4f62-ada8-284baefe8e26",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f357caa4-c6a4-4885-9706-f5e2159ba554",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "13e5d344-9357-4415-ba16-1d285eb94176",
        "cursor": {
          "ref": "38645723-f993-4a2e-9694-4ef729e18628",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d1bcc9d8-2c7c-4181-a143-46ef0c24de5e"
        },
        "item": {
          "id": "13e5d344-9357-4415-ba16-1d285eb94176",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8d1f67e1-76f7-4775-bd9f-18daadc9477b",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "b5ac36ed-0ea2-4b3d-899b-d4572a3b5d7e",
        "cursor": {
          "ref": "c7818283-d031-4a97-8a5d-49a77e040a68",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "2f8c8cbc-6197-413e-900c-15362186da65"
        },
        "item": {
          "id": "b5ac36ed-0ea2-4b3d-899b-d4572a3b5d7e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "59d75529-cdc8-460f-b9dc-b63ea3a60dac",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "fd5e5232-07d5-41fa-bddd-0b2633d11793",
        "cursor": {
          "ref": "ea2aa51f-c47a-4475-9b33-b151bc7eadd6",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "ed9f1d24-f587-483b-a277-589f0a15d8da"
        },
        "item": {
          "id": "fd5e5232-07d5-41fa-bddd-0b2633d11793",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a1190a21-29c7-4f37-95ca-a30c44542acb",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "29e3695f-00f7-4d37-b85e-2ca90a5f1012",
        "cursor": {
          "ref": "5d1462a3-ba70-46c1-a4eb-37ceb3b8fe50",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e7858abf-9e3f-42a1-adc8-cf222bc55930"
        },
        "item": {
          "id": "29e3695f-00f7-4d37-b85e-2ca90a5f1012",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "05c3d513-27d4-427e-a928-d9e29ebc8e88",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "b555a65b-c704-4e6e-8287-031d4660823f",
        "cursor": {
          "ref": "cb73dcb8-3458-44cf-8a13-c9faf0c2e3b5",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "3c0dcf27-c9ea-4689-a2c8-16d70da20151"
        },
        "item": {
          "id": "b555a65b-c704-4e6e-8287-031d4660823f",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "0f659be7-b637-4f90-9699-6043f13bc4ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "c785c098-6443-4e29-a385-207dd2558c9b",
        "cursor": {
          "ref": "d23cef93-220e-46cf-8969-00a88c9b8469",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a4ddc9d2-a6d3-4a8e-91c9-0239eee9c205"
        },
        "item": {
          "id": "c785c098-6443-4e29-a385-207dd2558c9b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "3b2b5ddb-2681-4de9-a102-fabc877fea42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "82dac85e-778b-4487-867e-d2a85d19876e",
        "cursor": {
          "ref": "d2d57f9b-aa72-4113-a807-bfb4db1fc427",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "e7b91b4a-c00a-4a9d-9c30-756a9f0c761d"
        },
        "item": {
          "id": "82dac85e-778b-4487-867e-d2a85d19876e",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "68bbc149-1970-4fa5-bd47-d7c6ec6068ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "faf74641-2ab5-49d8-9af6-2cc2a0ecb6b0",
        "cursor": {
          "ref": "9ad4a257-6cc0-4308-9e34-a776ecf82625",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "db5db153-fd98-40cd-9b49-af2d18481ea5"
        },
        "item": {
          "id": "faf74641-2ab5-49d8-9af6-2cc2a0ecb6b0",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "7b0b4501-5165-4b22-a0dd-fbd36057ef8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "d110cf16-0a69-4095-9748-913f636874d4",
        "cursor": {
          "ref": "7aa068fc-43a4-4e0c-b244-1ee6f1b1f321",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "556ac032-92fa-4657-8a8b-15d6ac913f08"
        },
        "item": {
          "id": "d110cf16-0a69-4095-9748-913f636874d4",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "c82b969a-9071-472a-94da-bbbd5bf0f8c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "e4a40a3c-3ed2-4f8a-8f71-ed2327c1845b",
        "cursor": {
          "ref": "4641d616-f520-41d9-a634-8d8ad76200b9",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d1937a3d-c82d-45f5-88b0-421f13879ff5"
        },
        "item": {
          "id": "e4a40a3c-3ed2-4f8a-8f71-ed2327c1845b",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "fba71d5b-78b4-40b3-b1b2-b0031096051c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "d96c14ea-ad7e-4471-b81a-ad848d6cd613",
        "cursor": {
          "ref": "65ea281d-d7f0-4118-8085-b8fe355e3c4b",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a9968ac4-309a-4c9d-8ad8-f2ed22a2f06b"
        },
        "item": {
          "id": "d96c14ea-ad7e-4471-b81a-ad848d6cd613",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "486ae98d-3e49-4613-b409-bd1b5309e40d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "1e2dd040-5010-40d8-8255-953b56242225",
        "cursor": {
          "ref": "4767934e-1e18-4ffb-a10c-a2c76d527745",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "82e64ee1-d5a8-4e40-8848-b58d19d47ba2"
        },
        "item": {
          "id": "1e2dd040-5010-40d8-8255-953b56242225",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "84c9160b-a3bd-4877-bee1-881491977da4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "20981d83-50cb-404f-8fa7-b78437151fd2",
        "cursor": {
          "ref": "eb7fe829-cc7c-4ce7-a300-823f9a2a17b9",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ba242952-4e7f-4551-a34c-41a4ea72c1c4"
        },
        "item": {
          "id": "20981d83-50cb-404f-8fa7-b78437151fd2",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "9bfdbb04-48a2-435a-92e4-3e55904a5926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "6c81467f-389f-40e0-9738-3ba001069d1e",
        "cursor": {
          "ref": "2f9c276f-7496-4a0f-bd24-ce64833dc288",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "10ad7824-64cc-4164-b5c7-be5e1437b182"
        },
        "item": {
          "id": "6c81467f-389f-40e0-9738-3ba001069d1e",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e5d78722-a15c-4192-94ab-dae01f39f3b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "3faca1f7-c101-45eb-abcb-62013ae870d3",
        "cursor": {
          "ref": "d2fc3aff-0fbe-4eba-a3d9-6fe4ec7093df",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "2afbb34b-36df-43da-ad8d-c81e0cac7614"
        },
        "item": {
          "id": "3faca1f7-c101-45eb-abcb-62013ae870d3",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "3ecd380d-305b-4ff1-9030-5698991c93b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "a67021f3-1776-4935-b678-00ed121ddfd2",
        "cursor": {
          "ref": "1bd721c7-97e0-4e64-a91a-23c64cf693e9",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "5a53e665-fc33-40fd-914b-2dbc74ffa6cc"
        },
        "item": {
          "id": "a67021f3-1776-4935-b678-00ed121ddfd2",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9864c26a-0aa4-4c39-8233-0d3b0ab1a0b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "0c4b71e6-3f52-4452-9d96-a12655605483",
        "cursor": {
          "ref": "51bc0717-f453-4f6d-a89d-1949eb52e006",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "a4a17f84-0a59-4bd9-9ffe-5e7a87091aa6"
        },
        "item": {
          "id": "0c4b71e6-3f52-4452-9d96-a12655605483",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "772e3703-7e76-4363-95d6-5741af0d1c4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "ad483999-0922-418d-b439-8f1cf1a61b46",
        "cursor": {
          "ref": "66199ed3-0a58-41cb-871c-04aecd7e5c3a",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "e57285da-cd66-409a-8e3b-8200c095118a"
        },
        "item": {
          "id": "ad483999-0922-418d-b439-8f1cf1a61b46",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "7d3a05c1-0e83-4d7d-a1bf-ffe5bc442c2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "721e86e6-045b-4387-adf7-0d6e6c03ad7b",
        "cursor": {
          "ref": "9754863a-fce0-45b7-8c15-4919d7de2c2d",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "2250734c-f602-48d0-9fbe-268dbe512847"
        },
        "item": {
          "id": "721e86e6-045b-4387-adf7-0d6e6c03ad7b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "d0d31371-783e-44c6-a6f7-f4ec895ce935",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "9d0575ea-ccc0-48ce-a2df-f8a126ca4718",
        "cursor": {
          "ref": "badf2db5-89a9-4453-87d9-622e53f2d631",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "b2c0143d-0def-4acc-aa2a-ce69f9d470af"
        },
        "item": {
          "id": "9d0575ea-ccc0-48ce-a2df-f8a126ca4718",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c2108dfc-98a0-40f1-a93d-afcf8da8eb3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "51f0818b-743b-4cdd-b447-57f9b900103e",
        "cursor": {
          "ref": "2c0715ee-2c93-42e9-af18-0f47a8d97f74",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4d5b1c3e-eb94-44a0-a83c-f0cc0ae6b5c1"
        },
        "item": {
          "id": "51f0818b-743b-4cdd-b447-57f9b900103e",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "52556041-3c62-4bf1-a345-76e340ebeb30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "c4f11e75-7fb4-4aa7-adb5-de593fffb3fc",
        "cursor": {
          "ref": "9ce85757-c834-486a-9d1a-b3f16b34ec07",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "bab05b20-45fd-4f45-a6d0-a138cca1380e"
        },
        "item": {
          "id": "c4f11e75-7fb4-4aa7-adb5-de593fffb3fc",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "975f1fff-5cc4-4bb3-b61c-3ae8761673c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "f660485b-792f-4799-aeaa-c6dd7633bbb5",
        "cursor": {
          "ref": "b711d2cc-a73e-4ab6-84bf-e46b0cdfcf50",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e9e68f49-9dd9-4ec5-8c57-d43eae0a5f51"
        },
        "item": {
          "id": "f660485b-792f-4799-aeaa-c6dd7633bbb5",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "8cf8e132-10e5-41c5-b4dd-df972dcf5cb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "dabba852-e137-4e7f-97eb-4981bf6466c2",
        "cursor": {
          "ref": "71b4ad9a-5bcc-47af-a298-3f9269536772",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b578247d-99af-438e-90fc-ce92e7f0d3a2"
        },
        "item": {
          "id": "dabba852-e137-4e7f-97eb-4981bf6466c2",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "1d5cda5b-17ae-4f80-8a20-36c79e52da3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "b8f5c5ee-ca4f-413d-a0a2-71de04065d7b",
        "cursor": {
          "ref": "cbb54c05-6cc4-4497-8399-dbac3851c967",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "1b66b710-5210-4269-a3e4-ebdaac33d35b"
        },
        "item": {
          "id": "b8f5c5ee-ca4f-413d-a0a2-71de04065d7b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "4f18af73-56e9-4491-a589-0ad211b8baa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "73145574-210a-4491-9fe3-87072d33fbfa",
        "cursor": {
          "ref": "78d84387-eba5-4d29-99a0-31c2e435aa56",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "696c0dc6-03a8-4965-9366-decf505b3d42"
        },
        "item": {
          "id": "73145574-210a-4491-9fe3-87072d33fbfa",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "56803186-2c0a-4884-8081-fe639dc73c7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "55c2715e-bd3a-4585-b0df-9f88b238f963",
        "cursor": {
          "ref": "32b9319f-9751-434c-b8f1-04e126ae34da",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "eb49d46b-1f1a-4a1e-a2ec-21e98b00abab"
        },
        "item": {
          "id": "55c2715e-bd3a-4585-b0df-9f88b238f963",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "90944f7f-7ed7-4996-bd5e-10f18e9cf455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "07a36369-a5cb-4911-a809-6c0e0ef00c0b",
        "cursor": {
          "ref": "8f38835b-4781-4d53-8f4c-eb9d96f2ad17",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "cad76d36-c6d2-4645-a058-18f1f8f87716"
        },
        "item": {
          "id": "07a36369-a5cb-4911-a809-6c0e0ef00c0b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "dda8fa76-d074-4fd1-8839-9523c463e1c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "1659c25a-12e3-4848-9e09-215b9a1afc20",
        "cursor": {
          "ref": "b6ad93a8-2abe-4b7c-8997-7cc961251479",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "9b1b0fda-befe-4223-b728-a0ebefa202ac"
        },
        "item": {
          "id": "1659c25a-12e3-4848-9e09-215b9a1afc20",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "761bf658-1809-4ad0-b37b-1fcf52b0dc30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "8dab708f-2162-4a43-b194-1623f9c63a3d",
        "cursor": {
          "ref": "d048076c-ca1c-4fe5-9a91-13f8468077f9",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e5dac4cb-4ed5-49eb-a540-224232fb18e4"
        },
        "item": {
          "id": "8dab708f-2162-4a43-b194-1623f9c63a3d",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "46ff5764-7480-453b-be67-d6abd2972ac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "48963dfc-07d6-44d2-ad3b-d0349617e82d",
        "cursor": {
          "ref": "2d26f2d1-800d-4fa9-95ab-a6a93e37ddd1",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "9cc38238-aec7-47d9-a1ce-9dafef91a0c2"
        },
        "item": {
          "id": "48963dfc-07d6-44d2-ad3b-d0349617e82d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "55057a44-99f9-4b04-9064-68f2060d31fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "d46f35a7-2017-482d-be0f-9e7fbc40400b",
        "cursor": {
          "ref": "b1a00c9a-faab-4ce7-925c-24a8171dfe59",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "6ce93bb0-355a-406c-aaf8-0b0b9cd07464"
        },
        "item": {
          "id": "d46f35a7-2017-482d-be0f-9e7fbc40400b",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "04437e90-0d7a-4c14-ac80-01505d38fe1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "2300c844-16ea-4b03-afae-1ac58e7b705f",
        "cursor": {
          "ref": "195993f7-3636-4952-926e-caf1baf242fa",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "3420e946-5756-4088-9ea0-c1bb40be155b"
        },
        "item": {
          "id": "2300c844-16ea-4b03-afae-1ac58e7b705f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "55c7fa46-dbea-452b-a123-8f6b3c2bc744",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "a3d5d9a0-b1d7-4646-a851-d83fdf8e61f1",
        "cursor": {
          "ref": "6ec6ce2e-2e65-43dc-aa4a-b6d1adfc4efc",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a9ae758a-498f-46bc-ac1b-10fb10315832"
        },
        "item": {
          "id": "a3d5d9a0-b1d7-4646-a851-d83fdf8e61f1",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "ca48cfb9-d4e8-4c5c-b02b-748653e1b30e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "4d71ce3c-f626-451d-8f4b-e21bc58b2d96",
        "cursor": {
          "ref": "cece8ab3-754c-4fb1-9fb8-db39b78d34e9",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "94b2ff6b-4e72-4b9d-9908-36fc5291dd39"
        },
        "item": {
          "id": "4d71ce3c-f626-451d-8f4b-e21bc58b2d96",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "02d10b80-feb2-4b48-a054-557a2b25be64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "0411154f-1588-46c3-943d-da74ce32ff60",
        "cursor": {
          "ref": "5cb84b94-ea76-419e-822a-c373467c7993",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "100f609a-450a-4a4e-8f7e-7bfa3f24d67c"
        },
        "item": {
          "id": "0411154f-1588-46c3-943d-da74ce32ff60",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "b02122d8-d676-4e83-83f6-3594007d5bf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "e7431438-9506-4837-a670-4dfc00d4b13b",
        "cursor": {
          "ref": "5acf34fc-44fd-4a96-a96f-bef8c7d09e02",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "4501b8e9-1aad-4d39-bf04-f378249c9813"
        },
        "item": {
          "id": "e7431438-9506-4837-a670-4dfc00d4b13b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "f17471bd-2bbc-46a8-9a5e-a5e6d3224f12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "7c59b09d-2f73-4b45-b8c4-fa61e3920101",
        "cursor": {
          "ref": "6094df4f-14db-4ab2-b5d2-3030af83e26d",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "300ab415-af98-4ac7-935a-8dedc6e99118"
        },
        "item": {
          "id": "7c59b09d-2f73-4b45-b8c4-fa61e3920101",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "b6e04c1d-7e02-4ce2-b708-2ac27339d4af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "5efdb6af-da30-4237-b3e8-c4cd14fd5a7f",
        "cursor": {
          "ref": "785c5786-29b3-478e-bb6f-51648bc75a48",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "323ebd79-14b8-4db0-b87e-5ed76219bea4"
        },
        "item": {
          "id": "5efdb6af-da30-4237-b3e8-c4cd14fd5a7f",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f91f23fe-d716-4827-9cd3-6f6d5474b333",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "272b3ca7-d88c-414f-aebe-14931b3bf8e9",
        "cursor": {
          "ref": "2a8d1573-63ad-413f-b843-d570cbbff570",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "ea622e09-2c19-47a9-bce2-01373d8602b1"
        },
        "item": {
          "id": "272b3ca7-d88c-414f-aebe-14931b3bf8e9",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "5750f20b-9016-486f-a53a-651279a6ce74",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "096294ac-a657-44a8-a2d8-371df9eb8f78",
        "cursor": {
          "ref": "6a6589ed-f071-4c95-bd5e-d38ef848b17b",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a310d1ea-4cf8-4f74-8a64-af2a567b716a"
        },
        "item": {
          "id": "096294ac-a657-44a8-a2d8-371df9eb8f78",
          "name": "credentials_verify"
        },
        "response": {
          "id": "05720188-1850-4fc9-9818-e0d40d06b1b1",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d492d2a-1706-4fd2-9edb-152c8e1620b7",
        "cursor": {
          "ref": "47067671-dd73-44aa-96b3-612fc06adc51",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "aaa93368-39c0-4472-b4b2-30ef9d393711"
        },
        "item": {
          "id": "0d492d2a-1706-4fd2-9edb-152c8e1620b7",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "9d32b78f-c969-4349-9294-72f5d8634265",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c26aaf1-b446-4a77-ba51-3ddb53e4c22e",
        "cursor": {
          "ref": "124be52a-c809-4a00-a2ca-f4c3cebedf2c",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4d02051b-71e6-4e8a-a53f-0237bf375728"
        },
        "item": {
          "id": "3c26aaf1-b446-4a77-ba51-3ddb53e4c22e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5ddf29c2-4c56-4df7-a183-9c006b955b77",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c26aaf1-b446-4a77-ba51-3ddb53e4c22e",
        "cursor": {
          "ref": "124be52a-c809-4a00-a2ca-f4c3cebedf2c",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4d02051b-71e6-4e8a-a53f-0237bf375728"
        },
        "item": {
          "id": "3c26aaf1-b446-4a77-ba51-3ddb53e4c22e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5ddf29c2-4c56-4df7-a183-9c006b955b77",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8070ca9a-0f68-4e94-985a-6577af8e3e5b",
        "cursor": {
          "ref": "d4b083cf-3d07-4be6-848b-5974884b2b16",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "74ae24a2-aea8-4f39-aacd-03ff0c0967fa"
        },
        "item": {
          "id": "8070ca9a-0f68-4e94-985a-6577af8e3e5b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2c59ada3-e891-407c-8f8b-fa9b930bc2cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bebf20d-89b0-48fd-a1b9-6db5a16c24b4",
        "cursor": {
          "ref": "d5673233-d2a6-4e95-b40b-8971afea8dfd",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1b223abd-1a64-4ad8-a37c-8dd5a0eea3c0"
        },
        "item": {
          "id": "8bebf20d-89b0-48fd-a1b9-6db5a16c24b4",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "00aa2944-7108-4271-a850-1823fffbccbf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 107,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}