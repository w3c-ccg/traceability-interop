{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "7bb63c58-201e-4239-9483-3f0ac773a154",
        "name": "Clear Cache",
        "item": [
          {
            "id": "931c2fe3-27a8-4aab-b676-048703cea84f",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9d5f703f-a055-480c-aff7-3957fa68e24d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ed2f62b6-fadb-4002-844f-a640f468907d"
                }
              }
            ]
          },
          {
            "id": "a56e2dbe-cf05-45e9-ab4f-5e4848ee9f0f",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fc08c6b1-f250-4e1b-ae1f-0a774b091b08",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1cf1535f-1229-4e41-adb4-f3a6828cf0ae"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "dab169d2-3b2f-484f-8407-735928db42cb",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "2b7a8db7-e5d3-498a-ae69-fb91046901a1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4477601e-c07b-4aac-a7e8-9bd1b0646ae4",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d4133f6c-8daf-4435-8874-0c91904e50b0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7276f134-6eb9-4718-a3f0-d45910562ed5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ac4f63ed-1385-4479-b5ae-a11498052cf8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "49e1e3fa-a795-4654-9fe8-9e188db7febc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "94117b8f-fe02-400e-8cc3-5d034d6e84a5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f2770a96-e10a-4e08-bb93-c8c7435558ba"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "317518e0-55f3-40cf-8f81-da855411baf1",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "c20d6349-5632-4641-8def-fafcfe40b168"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2fd1a099-21b9-4998-bc6c-ae5b7eebcd4e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7ea55cd6-65d8-491e-84a9-e713aaae3144"
            }
          }
        ]
      },
      {
        "id": "166c24f4-0b40-47c0-82a8-d9f6f780d4f6",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "9e85188d-76d1-40ca-b8d3-fcb821004d63",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c6d4823c-c68c-4785-87f5-c32faafc935e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3aebf656-406b-43f8-a7a1-ca1e923b97ad",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82bbd1d1-a175-4493-b8f5-99dac98ec7c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "611ec3fe-bfce-45ad-b495-1d74f93ae6af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bacb637f-0887-42a8-902d-927c91cf8ea2",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0dab8e0-8268-4048-8306-7a9b8ef86312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "af057fe7-0de7-4437-91e3-052cd4c087d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "910be819-e47b-45e5-b0e7-a6d9b92f2401",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c18d542-47a6-4df4-bf29-5bc3ac110fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "72f3a693-b6ba-498f-bb71-0f8f33bd81ae"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e6a4013a-ef44-4390-bd5e-2c7691a9d261",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "244f4db7-0b7f-4dd9-9ed1-0997523947dd",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34492412-5b01-4fa0-8e2e-3b9df41b35c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "69ec5192-62f2-4272-ba70-697ca9ef994a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee038489-9d6c-4a6c-8dd0-efe6d5b1d02e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f1ff608-0a57-4f32-92eb-4f67d81991a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e56f6be5-06fb-4c0b-b2be-f5dbb632a165",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53f6e3f6-6c61-4d7d-aee1-487b803c7d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9e1d41ee-82f8-42e0-be79-ffec410298ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "675da5b0-af3f-4c14-8e6f-a476d0cf00cb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "7e80ee05-1e99-472a-bf64-c837ead282b4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ac17adab-d2bf-49de-9b70-cef877373124",
            "name": "Positive Testing",
            "item": [
              {
                "id": "69ffc8ee-3b65-4e7f-a689-1203377425d9",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f64fc21d-5805-4516-acae-0cb2c8025c6d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "d192fa8f-b569-4753-bd7e-4af8aa0cf149"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "abd881a6-525b-4110-b53d-4052a50e8ca6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "9709875a-4bca-4e12-8ef1-f26d23c8f5a4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bf6f0903-ee80-4a4c-b350-e66c4d46068a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "25b9711e-e145-45a0-a2f1-e95c3fbad2cd"
            }
          }
        ]
      },
      {
        "id": "041a5441-fd71-426b-8a59-e459e6237399",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "231e6fd0-7bc0-406e-9c40-150ab85c11d6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "76777226-efc4-47fc-bff6-f0ae29b1b5d3",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "8f857366-8fc2-42fe-9ed8-17d97a2e10e5",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21258669-d1f8-45b9-b193-30146ddc88f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f217532-cc23-431e-8fc3-14ec9543e8fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e682e2b8-ad9c-476f-91dd-55b8e685b9bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c345f49-1675-4090-9ce3-b7cfef143f9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf9e1647-2988-45b5-8263-a9ce5bb8795f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b7f88c-50b7-466e-89fc-d0e8b224ef9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daeb4196-b5d9-4406-9eaa-a154a35259ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb8d336-2f2a-4477-87ed-b299380c33a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e3616bd-9cef-431e-8620-d8744b4a3ad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "374e3be4-8502-4631-a235-95a3c11427cf",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea04c78a-7933-4b0c-a729-73a3024825ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3188140d-755f-4f56-a7aa-963327ba05bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2611133b-8606-4bd4-ba29-f053df63d9f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "836260e0-642e-446d-b454-a071b763ef74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0b3a278-51dc-4df9-a28c-db29ba4ecd9f",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aa1e5b1-3eb3-4a51-ad4c-0d972ca43456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e56ecd3-1655-4f63-986b-3c7f3d06207e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2747a190-3eae-4104-ab6d-06e8b384761e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a5674a9-80d0-4c16-9c02-f0d8ab1bc97b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e731a38-cc11-44ab-94e1-115f618524cb",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e912a68-b720-48ed-8747-bcf3c912d2df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9872bbbb-ff39-493a-91c8-0c81c1846625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "032707ce-0036-4e9f-8b03-1581a0e2bb0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "05f4cb1a-4e83-48f6-a904-8d106eac6803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26ecd8fa-b09c-404c-949c-b124370ca6a9",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7aafe41-cb36-4d4e-a6b8-737e68a68e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42140680-f9bd-4ceb-98ef-e2468b9eceb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17f5df15-ff0c-4b55-b5ac-046555c50bc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "52c27418-6b59-4543-8238-ad1548c7bee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d7d2d4-0247-4061-8eea-001c7fdcdb59",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d0ed48c-f3b2-4c2a-8937-eb20678c5ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9ef5ae2-01ea-46c6-82f9-80d1b31b1173"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09e1989b-9e5b-442d-a96d-0bbce1b82e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "538dbd2b-71db-45f6-997f-da5d683de11c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded3a47e-9bea-43e2-a42b-b6547b5db787",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c96dbd3-1c0a-408f-a16f-b7e44384f692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e0cc520-8c11-4444-a02f-845200f17361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7359517e-dc6e-4578-8fa5-22e4e1fde1fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d4fb48b3-82ec-4223-88dd-2b098e8a4b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "066f55f5-9f88-4685-9520-adf196c1e7ec",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b063a91-0557-4dbd-9008-915993db5eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5becb73-c2dc-4500-8cc9-37af6c6b113f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cacb9006-ad1c-4cc9-9ef8-061f42a6eb22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "38018aad-1958-4540-927e-c7b3323d9130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b90226d-0c7d-4bdb-93ca-ded7df9c4eaf",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b84f503d-042f-43f6-98ea-35217d5d883d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc379423-c6ff-443a-b42e-30e9b9c816b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a403b1-aef4-4019-a73a-7ec6416b176f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2d3f1d98-fd9c-4063-b7f6-51482a78ab41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1b50e25-8813-4a50-a2ab-6ea778650f81",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c88a86f-3d5e-4b21-a600-dd98976af9f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bfa5f8a-96c7-4b21-ac23-f8bd5b10bfa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d13ce6a-5268-43bb-a2fa-5185dfe8a8a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e3805b0-6913-43ea-bed2-62f2b1dd8964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35019125-59f6-440d-ad05-84101a5f5148",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2cbc454-a58f-4b39-a211-21f74e2c191e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "045b81f9-c2fa-490d-8727-f1e759ea9ab1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b92c52b-33db-4e4c-9553-6e53f09ca9ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33b1f4fc-97a0-4ffa-82ae-8f932337fe31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a25aede4-4db5-4afc-8b87-f628eba63e74",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ee39a6-d049-46cd-a91a-3c53102c15f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84eda8cc-a3dc-4686-a750-4b92e0a9f850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58da1353-3269-4f47-a308-6c950dfde012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "180ca0b3-de84-4eda-bdf2-1a15419a20e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a3a820-c241-4e95-ab32-e27ad70eba13",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "493e0c61-ab27-4bb2-aba3-f74fce846565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0482caf-091d-4283-a816-94491a826805"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0b84d6e-6244-455e-9b07-5dd7fc70ff24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b7fedab-c880-42f7-8e1d-27894804db94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fc45d7c-fd8a-40c2-b19c-e559a0562cb3",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07408c61-fdd4-4f73-85a9-bdc0952e634c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2caa985-4f07-4455-9028-3874cca0fe99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed617ded-715e-40fd-b0e9-c431f211a12f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3162c6b5-781b-4c41-8bf4-0c02aaa51be0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ddaf080-1cc3-4701-85bd-ca66003ec5d9",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "045b4bfc-bed2-4c07-b018-eb5ac896f07c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbfc2ee3-0f45-4ceb-8335-c01ad2e2be1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ed71d69-9dbe-4f0d-8a4d-5ff339ae00fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95e255a0-359d-4814-9342-c03554eb0830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82722c5b-d183-4a31-ac6b-17a7e8219111",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46edbeb9-2aae-42a1-92b0-091bdc6991dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78670595-a847-4866-b1bb-98351b79d169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f67906f5-7f6a-4f30-bb37-7d5da90e7f92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "59d25dc8-bfd1-4687-a7b1-c1e1cea479d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36e991db-cbca-4607-8fcd-c5403aa2c89d",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd8017af-94d2-4177-bfe4-1e57752e649f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "756e8eb2-66e3-4707-b741-ae2e2d481cd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f58c19f-b40f-4330-83b7-2d151fe1e942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cdc1c40a-874d-409d-ade7-08a1cc101efe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43691677-6a5b-4214-b89b-ebdb06cb81e7",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e7d7734-4b33-4797-9601-2c435cf5fb6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec086967-b08b-468e-a3ed-0e6527624417"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3abbe08-badf-442c-b423-2f44222ff38a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "de35a876-1647-4010-a72f-d85406712951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff01ff07-74dd-4ce5-af83-3000aab76d21",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f019dcb1-782c-4bb2-b37a-a0330c2e2898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "023392c1-c118-4a9d-ba7e-bd9dcbfdd406"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f67737e-db67-465f-b1f4-d3975bfe9324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "050ce287-31cf-40c5-9d95-572d4b394414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a5eb4ce-c0aa-4be1-81a8-f145a2d7723b",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d64d7da8-d80f-4d93-8e14-c33630a4d953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f93640b0-fc9f-427e-82ea-80424cc7961f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b6c3246-66f8-43af-8ce9-8a840e345936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b32f7619-474a-48cb-8cda-f36bfd7f7040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1777a7af-159c-4c7a-b5bd-c284042dc799",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cebcdf6c-3af7-4fdd-b081-f1d2e8574079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "894874d2-5740-4e28-b829-c12c696d7cef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f201a1c-e66f-492b-aa90-fb3eb9588ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "87f2d478-9bdd-4bc8-b05c-674e6facb110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a5cb460-0e1c-4f98-8168-bd738951b0c5",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c8fc759-9a1f-47b1-b739-361a0c0e9b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23acc1e3-d3a7-4548-b162-9b6e596c1249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23b5b585-9b06-4bb9-a56d-b43cd59ee859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "806c1f34-40f1-45cf-bebd-30517ee8f1a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd8ec889-0408-465d-b1ca-2848ad72e981",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d3e336-9f86-4934-9e36-cbb97a574b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c6f2f8e-d0a7-4c2f-8a3e-31f5fbf5ae8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7bf2dc3-81fa-40e9-a7c7-5b056686e275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4919038-7816-4ae5-b686-07f1d4a831eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cd73f6e-b6c0-4173-a99f-7d1e42802b62",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b21698d3-f1f4-459b-b200-c2ff2eff278b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d73bc54-034a-44f7-b7fa-1b1d713ea927"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3375395e-9a03-43b4-bcfa-48df18d12611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "efeed016-8339-431b-9969-ff42a5f52828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc65c7e4-1a65-46e4-9b98-5b408337067d",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb2a535-cc85-428d-bca3-3874b4a1f7dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a574012f-262f-4f52-8678-9e657f4e6abe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a51b4c4-d0bc-4412-bf02-cd2ab1ddf26a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5663edeb-aa1e-4769-b742-5992a2a2883c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c74761-a2fc-4598-8c9f-c72360ca1bf8",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ceeb538-b6ad-48fc-be81-4b5df5355368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7ab47a4-2a32-4c8f-874b-148aff9c0afc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f3e5f4-877f-45c4-8a6d-b755f5f852b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9033f914-5df4-4157-af7e-8363e4cd0499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b05ecdf-b69e-49b1-b33d-1bf422289b44",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "794a363d-0fb6-4ec4-a24e-4aa37c182555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcf48bec-9890-42c7-99b5-889f764856b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91441b19-01ca-4bae-8807-b9c9230f59b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4471e915-caf1-4fee-b2f5-d75b89001181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a4c6178-d4d0-4ee9-b166-5f15b6fc4cbe",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01608e14-71ad-40fe-aae7-1786a7888a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a7a081d-963f-434e-8f96-e4b9a98f8c30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1234d7a-5266-4411-8c85-c66052824fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4524b35-d7cc-4e8c-801c-51cd2886a035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dfdd568-c97c-422b-aa4f-0e3566fc72e8",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47406a62-d677-436a-956f-dee82c8652d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53e1c8de-881a-47b9-90ee-3429a6a4b1a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cf7d848-faa6-4beb-801f-c4a53f4eb5c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d270520a-ed74-4dd4-a45e-0435c04aa8cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2007bcdf-1cec-410c-8f27-ecc93946724b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6fcad0c-7cc6-42b2-bda7-810fe7d80fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32ec4988-311f-4cc9-99d6-4f228caec40d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e2fb2ae-65c5-42ae-bb9a-0437a4fd1ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ed86b66-b8d4-4022-90cf-7b50046c5d23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2421635-30dd-4cc3-a16f-90b4227c52e6",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b3f6dd-0764-4957-9ec1-d3000f084c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af621a9f-821e-49ea-87c9-8edf3c61eab6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b6b36f3-f479-4b97-ae7e-aaed3f7dd15b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "31e349f9-fd9c-43ea-a2df-c8f71cebfb16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd6a192d-423e-4d5b-b3ce-6effe7b7fc0f",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56ee04c1-62f3-495c-905c-c84dc048814d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "708e2ceb-aaa2-469e-a7db-3824e0d6efe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d723c881-2866-4b4b-94e4-ad32550ce397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d2ba5d1-780a-48cb-8d38-1ca9e7eecb2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "626ce4c9-baed-4140-8ba6-7a13efd3c250",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e4a4f7-ead9-4ed8-811d-3f1b6bcadf54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f3e3d9d-cd7e-42d0-b22e-fdf11c9daf9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64358491-ff6c-4618-8bbe-e6bdabf2816c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "68b95796-2d61-46f6-884b-5c794b5262a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84bed1b1-499b-4fd3-b241-70b59bf4c2a5",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab505e05-be62-4f9d-b8d0-cad69d703791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81736410-87fc-4144-94c5-1c7d53b2dd48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acb3e9b0-8063-43a3-8dc7-cfc68571165c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "43e0f6ba-8b00-4c87-a7d5-701ff11975d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "772f94ea-59e1-4ddb-b650-b522d0969341",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4897d1d7-aa95-4554-a95e-85c4c33d9c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ccc56f4-5798-43e6-8798-07eb1c6a9c25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7294614c-368b-4272-819a-3a5b3d1e1561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "395e185a-4a8d-4647-8edd-1dd2d48e172a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1958c51d-214b-4e89-b1fb-17b9d2e02f46",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c012dbab-d5d5-4fdf-bdc1-d7e493a80024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2acc878-bb4e-4ce1-9bd3-183d7bf554b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaa21807-91d4-4bd2-ba9d-767fd5608258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "2b450f88-9983-4173-b61c-5646c146c3b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14e06d68-7fe0-40b7-ac60-8736176300a2",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2de15aa6-e98d-4aeb-b1b1-272aaeb5e444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "198957b5-94a3-462b-bde3-0c0ea1335413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f83628e1-87dd-4c94-85ff-9e0b6fbaf661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7e87f70c-136f-4c39-aff9-a123abbd178b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c260d99-35f3-4aff-bb55-76829da57896",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10e3c2be-3834-4be0-b32d-15d57a39cede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec3990b5-8617-4a11-abf2-048e1c156198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7274abde-ebf1-4592-8f08-ebf773c6289c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f6f07d9-ba43-413d-b73e-6fd13326616d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c5f0596-c8a5-4cfb-8efd-e5f184bd471e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cab1d30-5ab4-4911-a049-64354f3e8a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5e00556-9041-4850-91b4-a26bb3126f00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3693be0e-03a1-452f-8840-e7a3392049c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ebecd829-4a7b-4065-9107-202e2ab8a03d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8171696a-a09d-4f39-9477-94e2d86dca99",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23ad58c2-d97f-45de-bc72-e503cbc95c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f092aca0-69a3-4b83-9dd4-d645c2b783d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e66303e8-e147-4130-9fc5-ee3ba9b6e378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "aad76403-5221-4d07-9a22-f4af46f735c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faa92ebe-14f9-4703-8b69-4482549d43a5",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56875aa0-0f41-4ef8-9b34-6a8dc38f5ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "777c45e7-0758-42fd-89a2-e5c4c9b8343d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c395c8b7-b3e1-4354-968f-a3786463052c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e1fd905b-4a5d-4563-bdaf-747c3ff92d69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e214d8d5-6789-4fde-9db1-266e7f90b6a6",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4699fd5-e768-4264-a372-386983d8629f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac8a89e8-bf62-494e-912b-fddb14cf01dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac01cda2-6978-4272-92ca-d30da8327a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "376820df-df1f-4a53-9683-3f69f42dbcd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c57dbcd1-c18f-4bd4-9f28-dffe3f0693eb",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dafd89a-4b97-4613-b114-d473b3f2194a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74a86e99-a905-4653-9870-d60886ecb386"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bf6eabc-695e-4e3e-8fce-f66153fc33ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "9f5aec24-3e03-4a7f-9cb0-86a345029116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eafb341e-7a13-434e-a428-0352b1d77c9c",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "085ed346-ac3e-4c91-83aa-d03b028db4eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d516b79b-f6b4-4bf7-9fe5-2c0b6322c3f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a24400b-6f48-4bf0-992c-e6fc4b560bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d37a036b-aa69-4632-ab12-19975b7dffe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aec5d812-5f06-4512-83c8-1a0f720d1c9a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f1d59d3-e3f3-481d-b4cb-be9a7d7a593d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "697e6e75-a9af-4617-9f89-4e706f29d896"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d62370b0-208f-4ddf-91b2-52a333592203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "28708465-b526-4b62-95aa-8d45c4d2fd26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5dee52c-fb6a-44ff-a76a-5fdcf64d0373",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fef53af1-baab-4785-995a-55a50cd3c439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc44a4e9-e592-45cd-9681-034ccc42f531"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13b8e47d-637a-4265-9bce-d8001f50fceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d48cd45e-1a57-428e-9584-b18f7b2659d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39a143c3-3935-4d71-977b-fffb2de67060",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beaec7f3-1a91-44ac-8039-7786e9c365fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcce5bf3-19b5-40b9-a0ec-c5fef74c5420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7964a5b8-1b22-484f-9d96-444ab70ebb1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "63776214-4e21-4ab6-a1de-a1765c626c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "195733e8-ccac-4c8b-8827-504891bd3aff",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e34002-da88-478a-a4a6-6691d1aea4db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d8a501c-340b-434e-96a2-460893463f2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0388ed96-f8ca-482f-ac10-e23e32b5866f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e1edf94-4131-4953-b2e6-31c27e9ad247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "494cae75-bd54-4471-b3c3-c15ec93579fd",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e1a7b77-7572-4bf1-a6d8-238dad3e311c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e223d59-db5b-4953-a128-798b98b0e8fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73083c05-dc37-4200-b220-6b70b3cbdf07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c36005c-f305-4385-887e-71d8fc80af8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47225339-823e-46bc-b9aa-e8f1b6665a32",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0e12483-5e8f-495c-97e3-fabfd2e1b5cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf740d4e-4c5d-4326-9ee5-36b43860e6f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "288ce4f8-410c-43a8-998c-9e0689e5e620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef8d0906-df5c-455e-8804-6a77d25580b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "affd2c6c-2455-4577-ac73-a5a5b81bb392",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "710a116e-00a5-4d6c-8f8d-dc3254145eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1c2e979-1ac3-4e9d-8323-2098be520475"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b20f7a3b-ecb0-4cc4-bc5b-967104edea73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c833e0b5-d3e0-497f-b428-acca2dc1cf1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99318059-c4a1-4020-a791-137cd8aa4bd4",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "215445d2-1fb8-42a5-a6a0-54ec030a1cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9bcde41-03c4-41ac-bd40-6797ad90c195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2611a1ac-bfa1-484c-a96f-2fc3016467d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "bac4fcbf-824a-45bf-a924-15a4ae6bc43f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6952bd45-1189-4bf5-a0e5-888f4744dd62",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d715969f-57cf-48c9-9ab1-f6507aea1771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de368c26-a86e-45f0-a2eb-10db96472409"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f462de8d-7025-4eda-bef4-9ba3159ab17b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fedef80-3b54-456d-91f1-9e50f3db6a08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f976a69-7849-4de6-908e-eeac15c28686",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d049f0-390e-41ec-9715-4c4961dd7a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a10136bd-625d-4de1-aa8e-4b9652891fa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "503485f3-3722-4f64-ae77-305e571f5105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "02df61bd-3cba-4b1d-b426-5dc4da5b8fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c31e380-7c19-4794-9c39-786b989974aa",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "885266a0-e9b6-440f-87cf-341c41cfd903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dd6051f-46ec-4cae-8f86-7c58b4d6ba6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e19be84-e32b-4404-8a00-6767ee72b5b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "50e1d394-eb69-4f54-996a-d893ebf2638d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96325d16-079c-41a6-b832-77f361f39a8c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47e83f41-e700-456f-b1e8-d7b798c8a4e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "721dec05-05dd-4b37-b49d-236f465ac1b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de64063f-0d6d-454e-a493-cb87ed3dd97e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fd5fa2c-2df2-46fe-9203-42384ff030f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac8852d4-176c-495a-9d8b-947fe97b4471",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "509f8fdb-63df-4822-b10c-7a715796613d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee580ecb-2106-4e6a-b079-5a6732a7fa41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58f14897-8352-4328-aa07-edf2f9a06b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "2dd336f0-bc30-4f26-9d34-f44c1cf90968"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7104b93c-6f01-4c45-82a8-c5371bd29cfc",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55ca29ed-ed0b-4922-bd58-c9796f02aba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b89d3b29-965a-446c-b368-2fafebde6db0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf0191b9-bef4-479c-91b9-b158564abd89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ffaa733a-e6b0-4801-a9e1-7e1475e5a133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ffc2be-1ab5-4996-9545-89d5d7dde15d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9140747b-2687-4e26-bbc6-5276e4dc2f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7c9f30c-8fe8-4afa-935c-ee987d3c03b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d678abc7-47dc-46d5-9fd9-6603d3035123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e58528e0-c54e-43e1-bbee-564fc6d10bb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f255ec81-9c24-430f-8e13-0d1e5429a0c1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8589ef5d-207d-44be-9c8e-b3424a4d62ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03131db4-5352-40e8-83cf-3481ba6fc6ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77ec2109-fac1-4378-80f0-d17db3e33d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ecd1e4a-35e2-46f7-b1a7-a037859379cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91523cb3-c362-4d8b-adf7-c889227eef20",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d118a5-9b45-4f50-b2e0-471df5995d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7a93903-8440-4afd-bd0c-0a62cb941e0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b08cacc8-9cce-4427-b26b-0ddd6cee8a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b74fd13-0a94-4c9a-b1e6-73504cc67c47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4300073a-6435-4e0c-9bcc-d617d0beb4f1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f660ff6-8d09-410d-b000-edbd5682ecb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "987ab72a-a87f-4614-bfed-e431d46a963b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "452819a0-323f-4a2c-acfb-5fa01e11c933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d0f4d8e-c73b-4a98-8041-3fcf1ee40f3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b66db58-3890-4392-9cdf-83290c6c5ad9",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2785dbf5-aa50-413c-a88c-797bcebe00b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0995884f-d4d6-4852-a1e2-36befb61326e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44897583-7951-4a4a-81bb-de19ff193e4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c5ee52d-47c4-4d58-9b13-83828fc83210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e163f77-8bad-4d14-878d-7e050e2f68ec",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d15ca7d2-037a-4747-930b-0bf950befd7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c575097-a717-4d32-9a71-9b436c7da780"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc98abe-b832-44e4-b5b7-a05d31c01725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1de5123-0af3-4da8-af45-8cae328f897d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46ca41d5-0ab3-4395-bfa9-152dba67c014",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec60e3e-0dff-4fff-9c08-835fd8d5f7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d297db10-1e35-4209-a46c-cab0c11e99bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a041df1d-075d-4a6b-a9f1-5f9257ebc612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6d1d63b-943b-4a6a-af19-bb2e3c777ae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f029b4b-042b-4cae-8940-60af5f470973",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d95a341-31db-4ed1-ad58-5998ff988b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab9f5831-007d-4fef-a2f7-0b5f4b341a82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d116913-e673-47ab-aaaf-a0cd44440511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "791acfb9-67fb-4030-a419-e27011905899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31672ece-a01e-4119-a01c-734f4cfbe4d5",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "282f902f-1f10-4eee-8cf4-c44ef1017eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7af11ffe-5292-470a-bd43-0466e20b3814"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6595c127-59c9-4d63-8a0d-51e733c40e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4b26261-a54b-4a5f-92df-68b8502cc97d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd497f73-9f37-418d-b536-f68fc7f91107",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ee154c-7582-41ff-817c-28911ed851df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8449a4b2-c67d-44c4-a6ef-d5ae93bdba4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de9ee08a-ce00-47f5-a5dd-6d19d2544ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8b3c36c9-a60c-49e5-974b-ed99e3f63096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "263ff0f5-f88c-489b-b406-981ab10d7123",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e39f28f6-b3c0-4700-b707-3d538418fdf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06366ba2-2f7d-423b-8cd9-13773afd937b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f405355-6915-4872-a309-68d19fe8c11e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3efa7e23-5d4c-4b95-b8d8-f5750b23c315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f1a51ef-483a-4b40-a819-c62727e13bd6",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a766620-5241-447e-ad7d-f81a721b3aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "939a6449-d874-4a9c-b68a-a274ab1a8469"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9f17ec0-fa0a-4bd3-9dd9-572d13c65366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9ec4bab-f0bd-49ba-9ccd-4d123cfe55f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d8ae87-0ae4-4a99-8b65-3bebb1d33e18",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76cf98d0-e437-46b9-81e6-b787855f0fbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "744272ee-53ec-47fe-a48b-bb583848bfe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f05a888-3d6d-436b-94ea-4a06a395a437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9308fdf1-e339-4a61-bcde-bc4c25b01907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af8e27d2-7da3-4aba-aa59-8df978555bf9",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "552ac350-7f1f-4337-9197-2ed34c4aa1b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b294813e-45de-40f8-b621-84d912787601"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "838e6848-024a-4eeb-aa75-143b0f366906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "88beeb83-ad4b-4c87-bc86-073772351028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d731c4a-479f-4c75-9d0b-529f3311002d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc034f5-50b6-4270-bce6-2a6dba3aa808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "785e5421-8e6e-4d92-bd0e-a9889701aa97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaf6be87-6a1c-4527-8f32-13b38d766970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce1dab33-3c23-4ce7-af52-d4209e1403d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4565586-23df-475e-ac6b-a0b6d2f1474b",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d6b9bc5-a78c-4778-b80b-91d812841a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d86fd9d6-d62d-4ee0-9fcc-261042af1b66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb0ee870-c558-40b4-b97b-e9831f6a96c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e54b050e-5461-4604-9b30-c7d1d36105ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12752309-190c-4a37-8bed-739e61b0df3b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e5048a1-490b-4c16-bd0e-3b60c5f1d293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33144136-5a5b-4b99-920b-aa7515152a4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b26e11-1c23-4868-b9f7-40d19c7a08aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "84845c8a-0d69-48a1-8714-c9973ef2ef1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1429916c-0c05-45cb-a099-58735ebffe9d",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0a557fb-cdf3-495d-9df5-983a81b3eea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d407cc34-2b93-4140-a2cb-80b7ead58c34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda64f67-9e92-476b-b404-95bae43b487d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "77922e47-6b74-4b78-9738-0098882ad152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9c7bcc9-b6b3-4992-b57c-d65f36b253d1",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa9b148d-024e-42b1-9d9d-24928f6e1003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "660174ca-a1f6-4c18-a0fa-c67f275b038a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c4ee3ec-65f0-4909-94ac-d86ba7f1db08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b98520a7-4284-45b9-8f8c-554d9f385672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de15a8c-a62d-479e-b6ae-89efc897b8bc",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6a04775-4ca3-4d2a-b55e-9c590b08bd13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9934e50b-0fc7-4dac-8e1a-746179658103"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c8494a5-1ec5-4024-9f5a-8486b19f058d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1788fdd-846e-467e-9012-74a8c1b73378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8a7a69d-7502-4e0e-8331-6273a763cfa5",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce03d7d1-8cfd-40ff-81b7-7746771939a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d2d27f9-5565-4eb9-bbd9-56b980af80c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff6d20e4-d6b2-4e25-b18b-bd412511aa9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "654ddc88-dbf0-42b5-b891-9e3f98ee5031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b560a5c7-cc48-4148-8789-02335a7d80a9",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39ece6b5-bb44-4811-9ef0-61fe34fdfecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1708dc25-5092-4533-b7c4-dc41f0aa0a18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fb914b5-3ee8-44c4-ac9d-9ab7b088b507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "673cb170-4559-4cf9-9b8c-3378a9a66509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7859a4a1-e214-4863-8fd7-eece0acf69eb",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64921ad1-6d7f-4218-addf-bc28707ad7d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1600c157-3ef8-4bcc-9742-ca50dd282d90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ebe822-353d-4815-a37a-f03d31b598d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "29fcef3e-c6f7-47d9-a11d-08dd1b2537a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85101e72-0abd-4fc6-89c8-7cc59b6dd03f",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc01a4b-b0eb-457d-bd30-f706f14fd02f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67989bad-347c-4aa0-b2d5-bf8dc3181d8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe2a86af-9a13-47f8-8bfb-45ea387679bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b1607b5-29c2-4586-ab0e-268702183a0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea35a2f-8910-403d-9460-ae7c38144dd6",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6b1cf07-8543-4dcb-b4a0-04ed499aca2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b469a5c-c26f-4c0a-bfe8-1e0209a62753"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82cedbfe-8019-42aa-9358-354caae1f36b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6bab5e5-0d1a-4665-84e5-8fac875c0dbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "070847c5-fa78-4790-a4aa-ed420b73a4cd",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a31cc08-d20e-4f28-b33c-d0ce1f9b40a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8492407-fe13-4d0f-97d6-d48756234643"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d79535-ee39-42ee-b06e-57394fa04916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "17e456ce-6543-4c48-8ee7-98f402753055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "579a9add-9ef5-479b-9dd4-fa85f9399b4a",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e393b36-4e97-4c57-a195-53fdaaab129a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4712cdfe-abcc-49ec-b327-b3f944304035"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02e638e8-9b72-4300-a451-314573091ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c59cb1b-c830-4833-9af2-1a336eb336bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e65143-e281-41bf-821f-d5e4022dc22d",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c8525b3-9cd9-46d1-a6f9-f5b312653296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61c84ce7-edb3-44ed-96f1-ca39f291a673"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e9cc043-b1b4-4fdb-a66d-97f51bf99a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1733f74a-1b39-4608-bc98-aa1c9d754767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c2e7318-315f-45e7-bfbc-a945d092ba06",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4823a519-2dc1-4aab-9697-a788a88dc3da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f38e6b04-b252-4fd5-96b9-f8ad03f8157f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33879835-d0d8-4757-8c6f-ed45d803e7c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e378495-ce14-4786-bdf0-b5d19c2e72e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40eb185e-5c0b-497d-b41f-0dc546d67ce8",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf73dfc8-64a2-417a-8082-a7e198614bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccf380ae-e514-4ade-807a-9336562c840f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fb7654a-3332-4010-9342-1dd127db73a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5aa6ddf-b734-4ea9-9285-af3efb0a920e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e77b498-4405-45f2-91ee-baf8769a4570",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd19c0cb-201f-4f75-8aaf-e8cb8af8a790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5954e6f3-c373-476a-8c53-aa96b46968a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc52eb19-d613-4e00-8e47-f85ae53c9770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc6858a0-b4e7-4a45-acee-bcaf35283877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec79d8d6-cb4d-465b-9892-fe700a37989e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a27685f2-8d34-4d87-bb21-08b263d59c43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b2b6434-3ca0-4677-8c32-04cbc5c9c9a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "184bec2a-2b2a-4d71-8e81-9b992a44dbd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8eae1df3-5b08-4ed5-b961-6059f28f84ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "150335b9-3d1b-4dc7-b3db-df658ca3e07e",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76f6e2ee-ad11-47f1-b55b-51140c85d82b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de3c9052-ae6e-4c6d-aef6-3402935299ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d3a8754-3cf1-4696-84e2-bbb90c037a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "46251af2-150b-4262-b3dd-cc78f99c1e4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcb6fb71-c255-4461-b0d7-97a50da3e58b",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "094447c9-850b-4eb7-8806-79c0e719661a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f94b099e-f20f-4967-baa6-6d2bdbdd52c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bf13428-f243-4710-bb9a-4b3383082c0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "735c0c5d-fd31-4936-9108-7a3adf639d57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54f7d4f0-cc88-44db-800f-3b5d76e0c521",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4f55490-f03b-47e5-80b9-f74b8e3b4258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a0a4a528-e50a-4bf1-ab65-07443b73658c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0de5fcd-46d3-478c-aa9d-4ddf3e6e1eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab68ebd3-5dc6-4e85-870f-7d1a94870734"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8ab85dde-14cf-4544-804e-b36023a9d821",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6338f93e-8c0c-4b8c-b847-eaaf4a5a89aa",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7b3cc87-2fa5-4bd0-b76e-f6f23ba98279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8e864092-7eea-499b-9c6a-d87a3186307a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8d9d226-c87f-4775-8fbd-fccf1180f5f9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "5aa70a07-c1d1-4c28-856f-15f1b582abc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b5ceff6-1f82-4555-b79f-267fe4098e70",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b334ec82-d865-4501-b1b5-69c378922b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc4f2b2d-3e2b-46a1-94d4-313cf78de8d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15ca32a8-d681-4827-a1d8-c1bc4b198dc7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "6f11a5b6-d7ad-4a43-b56c-71dfa4874e6e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5705f1e7-5f5a-4d2b-89e7-89a4e7e170bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "306c697d-42f5-4f5f-b2e1-d9157f9145ec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2fbf2904-2415-405a-ad53-9b74dd041d9e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b855008e-8749-472e-8b0b-aa38f5ff736b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "29fdf4c1-5b7e-453f-9a40-fc58c62710c9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ce697e2b-1e9d-468b-b77e-d8d4c1249da2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b81803d7-46dd-4967-ae0b-417a2817d7b6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3d591737-83f5-46e9-a41f-6931b83a7e3d"
                }
              }
            ]
          },
          {
            "id": "c89c9291-3fc1-48cb-ba31-fe70c8745482",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a2579430-32f1-408f-9c5a-7b0e99b63db7",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "20b427d7-d508-49f1-8470-125ae481c737",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a3eb8b8c-3cb4-4e1f-b277-7252dea7b415"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "530d8314-117d-41a1-9146-e475ec3b88c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ad6ba062-43b2-4b4d-aa0a-214a26a8ad75"
                    }
                  }
                ]
              },
              {
                "id": "c860bafe-c57a-4600-b3f4-cafa31110c74",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d0f772fd-d8f0-4485-ab8b-a7abca3a81bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f7034bd5-fb5b-42db-9396-f338c57d91fe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ce9ea31-5855-4dc8-9faa-1796d7b1df5b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d8e072c0-a603-4ae1-8d2d-a48b29e65cc3"
                    }
                  }
                ]
              },
              {
                "id": "97b472cd-57fd-4cd8-9c44-a6e4d167753a",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6799ff5f-396e-4ef4-9ffd-6032aff11418",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "10a249bb-3ee3-4010-aafd-a5062d650b6d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9cb81009-72fe-4b61-a7a8-bb503c83a782",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "4250ee97-394a-4b85-8977-b468ba55b95b"
                    }
                  }
                ]
              },
              {
                "id": "b7b99e5a-a469-44b0-86fa-915ee5966fa8",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "142b35b0-d081-4fab-8c0a-4121f1379c4a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a42e13ee-e218-4472-be98-1f65a9a2c5b7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "196731ac-538a-40ef-8c53-5a4fa32a7926",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "1bb29fdf-846b-48b8-bfda-d7b88cf30b24"
                    }
                  }
                ]
              },
              {
                "id": "1d7874aa-96f7-4cf8-b316-2e621e7df76b",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e9e04f6-c2f3-4f14-85db-556eeb6ecbe8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0355dfa9-8969-4392-bdcd-12892e98fdb4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d097224-a3a7-4d44-a2a8-e54de7541045",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "77166bd0-4150-4d7d-bf15-6df8fb47233d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "09b631f8-7a1a-47da-8ffc-d0ddb1d105a9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6f90133c-1c9b-454e-9a11-d48833451c5e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fd302068-2509-4b17-847c-c5b056dea8eb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6cfb4098-78ae-49df-ba38-ce658793d0f0"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d2bc580f-7946-4736-aa95-281f56dc00e9",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "15b850b0-f54b-4d4d-9a23-e40a18f5c994"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d35f5623-64a0-4b61-ba64-619c160638ab",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6f6b23c5-a64d-4140-8e67-9c4c55066e4c"
            }
          }
        ]
      },
      {
        "id": "0f7b3e31-ac85-4b7c-9bef-927f0302cbfd",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "aa2fe649-2805-4944-b684-32a28c3e6959",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4ce1d362-995a-4f86-b772-42a9d985061f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "35d4c7cd-e254-4561-9929-ac096ac8650f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db3c7082-f538-46f0-a1a7-d222f3c3f6b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4971718-ea2e-4f3b-8c3a-aa299493eeeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e719897a-388f-4b7d-b6cb-bcf954c07072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "411a2356-4712-4f42-8e67-10f36d5e34bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1fa8164-931f-402c-9ff2-a2d9c99be194",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ddce263-f230-4752-84b3-2b1c35c418de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e84a65bf-888b-4526-9729-c0a67824b351"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc0a22d-7af7-4886-ba50-50a75b28aaab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a8e53e8-4bc6-4181-b975-b7b1fa4eed28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c72fa633-3706-40e1-832e-d75442771b4d",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f36df9-56c5-4477-b471-ec2947ca47c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d025e481-ea71-446d-9be9-e809f0cd5a4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a06e8f9-22bc-4566-90b5-17f468412706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a801fae-e156-480a-8253-b07b73048f83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29d7f8d8-63bb-46c3-990d-2a5eec507598",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d863bbcf-829f-426e-88d1-ccff348d82b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ae235ca-c4ae-426c-beda-b9ab85c840d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "179262f2-a7fc-4a4c-b912-d728f7ea5ee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e3d9f8c-b4c5-4e83-98ac-a8417f0f133e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58501114-2f60-4329-beed-6e2e4c6b29b7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d1acec-6c6d-4923-9726-82903bb58340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cea55af1-9251-4934-9f49-681e32ce61a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e58e69-07d7-4bc2-a221-8f4566824258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "57f41e9c-8b0e-4264-910a-308a234785c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6b79cb2-a255-4d29-837c-bdd862535cc1",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba9f977-142a-4e6c-8f5f-e69bd41092f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68a2b55f-b5c9-4acf-afb8-335f117a4040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7be07a4-757e-4809-8a12-b73c10f04ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a5256e3-cd6a-43e1-b29a-e4bd65f7cbbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cf0639d-4277-4f3a-bb0a-22fa5f04f0d6",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae640664-2547-499b-9a3f-b39fab8aa571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e6d18c8-a697-4804-91fb-ca9f3b0c74f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9225a2c3-baf8-4f4e-bf1e-286e390729e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "53cfcf88-2bb3-4050-acc1-8485bf2c2d18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f01f02e5-97de-4f2f-9ea7-39ba4072a404",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4efe9205-d588-4b2e-8e3c-df4c5b8499a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10ebcac7-8828-4e42-9b76-8c858d33a74d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eaf8812-7dc1-4973-97ad-d735051b2194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1b05597-b917-4d40-810d-1c5f61131822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "117329b4-9ed6-40f6-a419-480d45bbb243",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73636151-5347-47b0-b1f3-124579308163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18c9979f-6645-458d-b6c7-cf64e5ef583c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "346cf97f-bed9-4530-af48-27d05dbe0c55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "82b233d1-59c5-42b3-b483-c6cb3023cae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55f76ddf-f006-4b77-945c-986f66c6467f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3244dadd-f324-43dd-9f7c-0ff6815b9b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ccf8be8-2fde-43e1-b0cb-cee3ff14bc74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b820838c-3d6e-4f89-896d-6a61b33af3ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f15b8cef-b8ae-476e-980d-8750ce71688b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e98187b-e433-4034-bc01-af2e7b732601",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f540e067-cb1a-45e1-b0b5-f1d8549d6113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9af35bdd-0285-470a-ac1c-30594bce485b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81adba98-641c-4cec-8f03-a2e7b38d52e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "1f1aa0bd-dfcc-4d96-9510-51e2a5991fda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6155e5d0-9244-4e8a-9f80-c5a2e8c7d6e4",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dacf5d31-d3e3-4aac-965a-1e0d727885e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "657a72af-285f-49eb-8c69-cd06a8f3c6e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47bac81c-2f14-478c-9a13-38ff879c03d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f0e242e8-8e81-475d-9769-ef710c2e6673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4409bb6-7525-48f2-ad20-8fd888c9e654",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2426bcb3-1805-48d5-9cb1-9fe8949ef718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46045384-7fb9-425c-8d99-757423958df1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b2b4fe-73ba-4283-84ba-12e42650cd78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6accd610-f8c8-4e6f-a8a6-f76e0074227a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1184f195-ae76-4897-9c68-ed622f769453",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29a3ad3b-3e4b-46f4-9d20-97207e85d9cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "936709e9-4736-4d85-9e1a-7837683a0938"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97f02441-af4c-4c23-b73d-e282084f0bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "01880de5-7008-4a6d-84d0-0bb2871b2dd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "341b2860-bc4b-40cb-97d3-3752a211289b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9140499-b345-4fa2-bd97-92fc9e72935b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc18dad5-3662-4ee2-a957-ff341dc96275"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6917174e-adc3-45f6-9b0e-2bc1f305fe21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "82c13ee8-4bc3-4189-a7bd-a4f925195a0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2e0b242-d92c-4574-bd86-51f3434ff598",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb6ecb8-3755-4273-a8a7-7771960310a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0338cbc5-2a9d-4e00-8814-b5f39f5d8523"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2789cb57-c718-4831-9c10-2730fe9cd436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7eb7d357-0e6c-42ae-9cf8-74caa4e30145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb7a2c19-d07a-47d3-a9b9-309cd24713f5",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28d0eb00-06dd-4b04-bdbe-41db8288c2f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "217fc581-f5e9-4918-a874-32fef0dd0275"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cce3801-a684-453d-af5d-f90072d2d622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ae8bff1-ecf5-4e15-a2e4-7072453dff21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43d3043e-d362-4dcf-b1ff-266713ae7b11",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e43fff-5bdd-4a5a-bc34-e6ea7308c478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c6a1d92-7cb8-42e5-a188-547a7bb6ce04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71b1082a-8f0e-40b7-9005-e00f778614ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "68429cb2-8e9a-45f5-8022-d7ffdc440925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff39a5b3-6e31-404a-9741-56647353dbdc",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b6486c7-56c2-46b8-929f-8fa81f9a6b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42231e04-2e9a-4930-846a-927915f54fd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "709bd276-8995-4366-a8b4-a19a8cb75d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3579cc8e-6369-4f26-a799-cc802115808a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e40413-3abf-421d-a726-33e759e2c2fe",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9680ff52-d619-44e8-be34-9edd5eaf99e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c1f86f6-ebef-45a3-b2c7-492fb8d7c744"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a139c177-328f-41a8-9fcb-2fa4024e0656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f0fc4d3-4567-4791-b7fd-89ac9e47d3ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "843611a3-ed68-4126-b4ed-d2c76c8c06a7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c4311e-7208-4e68-b149-262feba6a54e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f7a68e7-0159-4a53-a9f8-137b559786f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "756cc16b-0df1-4e38-a16c-79d4bda2fa09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "339d4dc9-933a-4399-ae27-bc93137021ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2673b12-7473-4d17-bd87-6160ad67cce4",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "292df065-5ce7-4248-993a-c8dc0b0bb633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f02f1f8-b811-412d-bd9f-ffd92aae0c9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "405fc139-0454-4a98-850a-fa9ca4619200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b13f60cf-ae8b-49d1-82c8-9d5ae84a95cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f602461-6808-43a2-8c1b-0190f1383bb4",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08da784e-7e56-4fb3-b50e-6a75fbfb9dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e968bfb-9ef7-4a51-a18f-3d8b9f787222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4956a85-174c-43f1-81e5-e84ab42b8ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8df42d82-3c52-463c-90c3-1a09fff55967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1165705-1a1f-46b0-a151-594e515ec301",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c5c3034-4b35-4134-901d-363824d0073d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c3900b4-6488-4c60-8b68-bb6ae637974d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6b0b693-ee6a-4089-acb4-5bebd1c2b72d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e233ca5-ed9a-402b-a170-47ebfc1e1ebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c24261a9-a988-483e-81d1-c5ad9c458df8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d5a512a-18bb-4b41-8a91-35fe3ef46aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32a36e11-d2ca-4381-ad71-984726db4272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ebad03e-0056-41cf-ba87-36395427a867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbb053c2-335b-4ce0-a79f-3523442b9e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fad1a24e-8f03-4cce-b1bd-2e4ccb854d32",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "114db766-4fb7-425d-aae4-c4fba56a97a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49953185-f5a6-453b-bebe-8557b510a874"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69805e53-6939-476e-8481-08811f030945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe2efd03-f5f7-4b07-aba7-ba7660a463db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef29565f-df55-4a2e-b275-13668226684e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79d4528a-84ba-4213-8cde-67bf1e6a92aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7e9cf4e-e5d5-41ec-a0ee-2f051f589790"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a12ba685-b96b-4676-b05d-dc06134c87fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cddf26d-86a3-44ac-a7fc-a313ab5a5888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cf84e53-a897-47ac-9a08-46afeee7ede1",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6522fb96-257d-48b1-93bd-81535cee0e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8d56cf8-7eb0-413d-8b32-cf8eb735211c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20592e2d-2083-4298-80bd-4fcbe3ab66da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b547666-d52f-4a13-9915-3007c60f633e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95364c9d-3030-4ee4-bd5b-3ff0a4a11964",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f41cede7-8b01-496d-b75a-d916fad7d93f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f60c0a01-e840-4dd1-ac18-79e4ea811ce8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcf9a54b-585d-4960-819b-9ce1e9be7fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e00dbbd-b84f-4a76-a680-3d60bcb25603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "027f1abf-d901-4ae1-91a1-ca21afe94308",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f04afaa0-df85-426d-85a4-bedc6bc37baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0564cd84-9317-4460-95d4-7a99f9ac2b63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "250283b0-b831-47dc-8acb-ee8736f3a9a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ce015b5-bb55-481b-adc2-b264f5e06eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd079ccd-9631-4417-bc9e-0ebb3ced7207",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4e27fb8-a3dc-4c14-b2a4-c52a78718296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af0d0a1d-d705-4b5a-97d4-87a6aad131a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9450f03f-13f4-4400-9b78-7c23c5105e55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0662c499-9d10-458b-bf5a-cf7ae51bd56b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdb5c44e-07bf-40e9-9e27-e3bb58c11174",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c126d71-21ed-45b6-b8f6-5ec611576e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da096bcb-9722-4040-9ecb-057bb9921da8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85149342-7cde-43df-828f-4fe03ed4001c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f9d3d3c-c9a8-4390-b628-b5815105135d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c109b0fb-9c87-46d3-ac73-abbf391c736c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f8b53ebb-68ab-4bda-a4e4-7692415ef293",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b511ea-a488-4805-8ba6-6244e24fbcf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46042856-60c0-447e-9bd5-1ee1f09ec29f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a5d52ba-08fc-44a8-984e-7cff30cdf60a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d5a69a19-843a-4c3b-811c-55f5bf7eb7e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df611d66-344b-4810-bd7c-949725e2f65a",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da9a6d9-9baa-44c9-ac24-b4c36ae92350",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "7ff32c67-35df-4cfe-9753-3c27b68bcacb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2abc2f-3d92-4bc0-bd2c-43bfcb41681a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "85cd9a74-2259-4115-b16a-4f83dc41a5d7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "43fae279-a505-4499-b84a-70889dc14837",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b7b5e2aa-7492-4787-8de6-7b8d511af831"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b7dbfd05-16fe-45af-9724-122e60915a18",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cd6616e1-b320-416f-87e1-5d4d2d1c5ab6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "99520af6-31f3-472b-8735-da99c2a76640",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8aba7a1b-7c3a-456b-a6d2-ac972ba3a5e1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "34fb6092-91cc-4db8-b464-a8851e81ca1c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bddc732b-dc85-415d-a7f0-fbf88e3b26f4"
            }
          }
        ]
      },
      {
        "id": "2790de9b-96ed-43be-b8d3-23adbae323c8",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "88b1cc94-268d-4831-a4d5-3e3840fd9921",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4f7c70c1-01cf-444a-b3dc-c4a70a7268e1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4829b592-6718-484d-8b86-f321729598ac",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b05f638-563c-467c-8dc5-291d28f9b3d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2245e0e-a540-46f5-b1cc-9353641acba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fba5ad47-ed5a-43f0-b117-7f2421550963",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3027e15-9e85-4800-95b6-f42e10047bcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d2a0083-317d-4ffb-b816-64224ea1df6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f6bde89-4ca8-491d-988a-dda90e8e3426",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6473f48f-088d-4e56-a845-cedda9338c12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e65d1620-e163-4f83-ab08-36245843fc60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b80e548b-7333-4924-9fb7-4645381ac99a",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7c6823f-b496-4dbe-a0cb-60df9a115367",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f32cccc-935b-413b-b165-1cbd664a1656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc97580a-87eb-4386-9f38-93f22e3faef3",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08478a96-a832-44ef-91f0-20b416d717df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baa2820c-59c2-44ac-b634-c2047dcb93cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e14938b1-ce4b-4cca-8eb2-024a4ec691de",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8215187d-9739-43e5-8671-4f12acf2d047",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9bab0e9-1953-4b7c-be09-ea6182dceeb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cce9280b-eb9f-4cd9-8a41-0eb550e97c09",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bdd4aab-4b05-4f91-95a3-759d223a3cd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09ba38f0-f05b-47a5-a7a1-99f111ba2a6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb2bfc0-ec53-4b0f-86a5-c4c928d39bc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5c46623-0c20-495a-ae67-64314342a107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64eec23c-faff-4658-b1e7-49b284ffa2b1",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ccd2299-5683-4353-9419-aae5bc52fe5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c60bfc5-7f55-4658-9f92-f47d254ebcdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d8f1d1-1569-4d8c-afff-e7d8a67ccc65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1444694d-d9a8-467a-83d1-4caf63f2b274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9df5781f-d342-49fa-a4fe-5e63ebfb7c7e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc283264-ce93-4712-ac57-89a9198010f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06658f1b-11af-4cbd-832e-82a18141fb75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29f0e205-76d8-405f-bb53-103bdad04a4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77efd49d-8fa8-4a1a-82a5-5f8d70132aa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ca8e553-63eb-4cf9-bf51-d7d23f7534e8",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "833dbbb3-302d-4c82-ba68-72955edb021c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0f569fc-48a7-4f24-bb2d-50211592342e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b956f7f-12e5-42c9-b775-1c3fc562d4ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3da2b54-1a50-4f8c-b612-1609017cc6bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52d8fc3f-6e02-4e54-b8e1-6e0c66239010",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5ccbbe7-c066-4be3-a69e-fc2b33a189fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "533bd550-8468-4711-b9ea-297ce95d5c8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "108342eb-c3e1-4223-9480-cd4a4cde3599",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a964bcdd-1cd9-45df-b00e-bbac9672c8c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6578849-38fd-4bfe-91c6-868e39f23ccd",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bb8fe35-9c2a-4e0e-b2c5-9d4bb776f9ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "920ed74c-59b8-4bbc-8ea3-9368d008a634"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c62fe18c-6cd9-4126-9cc6-e77b6d8c611e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "400ad063-b34c-44f4-8b29-bc6b2017e249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fffec224-dac3-4234-98ac-beb78664654f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a63b6043-b0b8-4360-9a2d-9a073875939a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65348660-8e18-4c2a-922e-d642feaca20c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "673b3fb3-10c3-46b5-aa72-25a054bb135e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "259236e3-dd7e-4b15-9598-b07297ca9a61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "981701dc-d31c-49f8-aa89-2e7d84790c12",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b70c6171-ddeb-49f5-86da-a91d06124b81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c95e92bf-8f01-49a5-8dfc-27700738c659"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2921bca1-fb7f-4e68-b35d-daf93966c1b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "979bf043-96db-4d11-a47b-f3d1b46ce0d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67324e38-b8a3-4929-9fc0-0f23c597922f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7b597e9-1415-442f-a793-ca972ef419ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "298fde64-d681-4928-93fd-c7d5ff58b029"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b35c8ecb-9a95-4ee1-9894-f5dddf21c339",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4422e7b-bf87-44c9-bea8-016a5dcc0c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c0e98a5-5108-4eb1-9fb9-cc91a8aae24d",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d852739-8600-494f-af70-b55d5c2b97bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "093d545a-f6f0-488d-9a71-5a9e9238d791"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa3578b4-0a13-4ac9-8b59-557c09555434",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af725d5c-8854-4d6b-903d-895cc5ea4b83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "134bfd9c-91f5-4a14-b7b2-9728426248d8",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e37348-79ed-4365-b4e7-fa8c410f6df2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d20ee2fe-bdc6-468f-8633-a6949d531f29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3001c5d-07e8-4590-a4d9-5c81a863b874",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d550a36-93ad-49c0-8570-f08750fb13e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b91b0a65-8978-4efe-bacb-502eece3eb7f",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54716e59-ad47-435c-819a-bf2b384017f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e931539e-d20b-43ed-8d8b-15b1b343da30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a9f4d33-acd9-4dd9-a85b-7a89c4df5e8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "251eadde-0526-4da5-9f01-c7df431c7663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f41466a7-bd7b-4b68-852d-64d88dae73df",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7163e6c6-2f2c-4953-abb9-ae128fdd6d29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bf52048-c4be-4da8-9fc2-520eb385b489"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf631c5-e799-40ff-bf1d-acf9130d766d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03332ce9-4a6e-4b42-b1fd-7a6937576123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25403aba-f31e-428f-be20-e73c66bdccb2",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eea3a17a-c9c1-49fc-a5dc-bb4ff8f4b588",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96411e85-0d9f-4403-a3ce-a6af2113077f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c60550b7-aeed-4f6d-9a13-886dc2974930",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5acda5d7-71db-414f-8b2c-3a06316cfe63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c6cb6bc-3bca-42ef-b42d-a3d33fa0b8d2",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa32c90-f1b2-4319-b372-1baf8bd7a974",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24a1ea9a-bacf-43ec-9365-1fa11445da32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55262e7a-9d9d-4344-bc85-ab565e577396",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "351de2a8-e1dc-46ad-bee0-a83eb1992920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7cfc57c-9460-4f42-8ce9-8bc9bd4b55a5",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a11ccf7-b79f-4a86-ab91-42c8b01c3ba9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daee9c54-bce3-45ac-9872-8993e3807dbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "660221f1-43bd-4d08-b760-8dcd6851e005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6387abb3-bb1c-436c-b626-5535b3ab35e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb835154-6ed4-4d7e-8836-58650e4a5567",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "903d79f7-4e9e-44eb-8870-4f788df04423",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d683600-d02e-42aa-9a6f-35d3ac1f9848"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e391b89b-e48c-4e4b-9b12-8c54de84b310",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0f2debe-de2c-4b17-a58f-68a13bdd3af4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec4dc333-5647-4369-8ce6-a714d5173a54",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d4487a6-a2f7-4354-8b34-45743b10b213",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a33c207-a7d4-4583-bd20-8c9cbd12f92d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "006b5727-00b2-429a-8ffe-c83a38ba5b79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b148fb0e-d102-49d4-b9e3-1675384e85c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71a4ee67-6dcf-4eca-ba01-d2dd72b2490a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc8d8a6e-cefe-4ab2-8712-3f8d409c31e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16e8fcad-e7dd-422e-bf5e-c85daea1988f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "574edbb2-2f4c-4099-87b9-0a46f9277776",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a6c7d25-14fb-435a-a045-7b600a184a02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feeea3ab-ede1-4893-b8f3-39d982a9d1b3",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "413d1330-66d6-4c1e-838f-8da31ee7fe99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c082b3c0-0518-4c25-90e4-c071ad851a64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12a71819-5977-4cba-8c15-1320784a88de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70ab9e03-0dbf-495c-9c01-52091ec62da2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd5ddc2b-2adf-4a6b-ae64-2a6a9055415c",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3480a29e-84fa-402b-b3b5-625966db950b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6db4bf3-6edc-4c26-8518-291439436401"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30cf9c9a-fcd2-473c-9015-d0efe0895ca6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98fee790-1eb5-4803-b9fb-b22590750093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d063fd4e-12bb-466d-8f0e-05b799f80129",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad364612-4274-45a6-b96c-73db01a31777",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bed1bf9b-9632-4abc-9d8a-80a40d0643a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57cc65e3-9168-4f20-999a-7d021b295e86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ea93cd3-ba1f-45f1-86f2-0ad34fbc9543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "500fd6fb-8673-4e89-90e9-e211b5ec1f73",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "083c5a71-01c4-4899-bdd5-12f5314b1435",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fa468f0-a441-486f-877a-31f6ae4f2822"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b72b9e0d-ed3f-4e5c-b3df-6658413fccbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e32bfc5-bf45-44c2-862d-5505199bae85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cbb5c09-c05e-4e49-a67a-e734eedaecac",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "025787f8-5971-4301-b67e-7db1bfb42b4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91b6f89e-28af-41c0-ba40-3dc1f0d1949f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b000ba3d-1099-4b26-a6f5-1884773b1e13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb02b336-94ba-4696-b12f-0f013d866610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5e7658c-f285-4b1a-b60b-ef7d8bf6add1",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcccb267-be12-4f89-ac75-146ea2671a52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56388ded-a41f-4904-8d73-30eefac34622"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ee6360-1541-4edf-8d86-d854d593cffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08ca3ebc-987d-472f-a67f-29c718017b3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1af0489-909a-4cfd-ad04-e3dfc4d367c9",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "434c6f48-6931-4f28-af4e-05933aa34df4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cdd2371-1900-4b6a-9025-f765c24184e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89aef106-18fb-4107-824a-51b9b4c9c97f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63a7bd04-91e9-489a-9ab4-cfbb17202054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8000584a-8684-4b0a-bc4e-29280784879e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe0e8e29-ed51-46ea-8414-37536d949e6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edf50740-0220-43c3-9af3-a86fb57acf5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01919e4b-5eac-4a7e-bab4-6bd9d89fe737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4971a536-0c85-4964-8844-3175035a9378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4153e5f-98f6-4fc1-bf4e-4ef021ccf4c9",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee9cd0a7-9479-4868-bf46-ffb39bf082b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54ef0249-7dd9-4391-95ca-c2b7250188a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61b73ce3-ac4f-4855-b993-d2f15e60b661",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "272d10f1-5cec-4765-855d-e8658ad013d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75f314bd-2bf1-4bc9-addb-56f10629724b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0753d043-f5f9-4694-9fae-242571ee7e4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46b63d2b-5625-4d1a-ad49-89993e778d8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f31c24e-0a80-4693-9f69-f72bbdbb19b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75de6a60-5e67-4f45-969d-7e1b70a683ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd832c11-c665-4ca8-8bb9-3f1812ea0503",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c74172b8-83d7-4780-8e35-0365980c71a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8de7dbbd-badf-43a4-ae0c-b68ead8ef7b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a33529-c40f-444f-a237-80389c13af65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c87d36e4-0c04-4253-a6ea-8ed37f31367c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5277e6f4-b958-4442-ab19-d32fea85eac4",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89024bec-72cf-45d7-9ce8-84ed5fb44ddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deebb30a-512d-429a-a755-c9d66798629b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8647b9ae-3870-4c39-9791-0a78138fba14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64fe7058-6421-4f80-bad9-7dbfc6228b4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b6d0d73-4323-4411-b99e-8acb91d349c4",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ec32248-145b-42d4-88fd-fdc0707ddf6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99f03e25-4758-420e-9748-dd9579871d3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83afbeaf-5a16-4c56-ae6f-f0f62db9eb55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c5b4032-7e6b-4cd3-977b-d2cec5c4bdf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c19a1e1d-64df-4875-96fd-221764e064a8",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99bc4e6d-885d-452c-9fd0-016f5532f990",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f899e98-2a18-4d34-871e-5048624879c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59917e6-6baf-4186-8868-6cc95fe6bb8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e29f321b-a8a4-43f1-8aeb-9168d4bc6713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa70270-65c4-4021-b73d-451b80aef74c",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4388a1cc-a7e0-4baa-ae08-d7ac4ef0dab9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cab6b610-93ca-4ead-b470-aec49ac433a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ac9d8a-19b3-42fa-96e6-0bc501397604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "202814eb-c1ce-43cb-af37-eb88ed09dbc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e12d0884-7d49-44e6-88c4-c2a50130dee3",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9b008cf-de21-45e1-b4d3-9f34c1acce5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff0d1d72-8ee2-48b5-91de-6a8187353980"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "862fffca-580b-4e08-8a1e-85095c19ace8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "169ccadc-1b8c-482b-8a8d-305049d5a1d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10292969-8d84-4291-a425-a5573c1dca21",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4baf7731-6bea-4425-9952-2fc7ea7af80b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26bf7059-4c0e-49de-9ae3-a0013dd32136"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b9bdffb-1ddf-4b9b-98c6-9e47114db622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad7a57e0-e308-4db3-8d5b-bbd9613961f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e78f305-681b-44e3-b00f-bfc821c90646",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c86a2704-906c-4d54-868f-94c4e24ac88b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d865541f-463e-498f-9c00-1b626e50fcbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7162a6b6-dbd7-402d-a81c-8f68fc0fb83c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8206855-918c-460c-abef-e59855386d57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ead688d-61a2-463d-821a-b1607325358d",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eab20ebf-303e-4bfc-9891-81053bdf834d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4901f079-4ca6-4b86-8235-381c843619a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af68f27-cad9-4c79-89ae-7dd83fa60143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3df46d0-e629-4c8c-8629-2001776afa8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae76bbea-52c6-45d7-9681-b6c1ecdbb0c9",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c637a491-3264-43e4-8ac3-06ce254cd13b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7fbb2bd-0886-4bcd-93d5-3e2fb6e07aa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06e5d2cf-bfec-41be-b718-b09fc8b3c365",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eabd044f-542b-4631-b3a7-0116fc2a8fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ea18cb2-3f1d-4afc-a474-2cbd5170b335",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "985ced22-6d7d-4aeb-89e0-42b099d00618",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0de85b6-ae06-4e4f-91b2-d3aa0349076b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc2f6936-1812-4f55-9920-1117059facbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e715a2b-d3bc-400e-a307-c8744a9483bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "613388d9-d9a2-48bf-be8b-72c65157b3f1",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ba30f2-761f-43bc-970e-eee39815e91d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e657d5a9-3be6-421d-a77b-e6c505ef5e9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aad76e63-50e5-481e-ad3e-c2d028abcf39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6431196-fef3-4ca0-bcac-8a16974370d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13ad23a3-ccfe-4a89-bf63-cd4d4d4c95ab",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2cd5802-d77f-4945-b909-e582d64071f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0355aa4-75a3-4b7b-921a-acd9b7bbcfaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00d85213-ac27-44da-8d55-90d1cac73932",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12e90bee-903c-4c4c-941b-e1f32d73f4fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d520ba-d31f-43ab-a010-4578afecaaac",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f404824-d14d-4665-a464-c46eab768778",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d958139-9bd0-48e8-862c-95afd0b15ad4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b69058b-4706-493d-ac74-2d2945837977",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e3d49ed-176c-43c8-a0b7-6b3c82bd3534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "054a760b-3ae9-4a71-9b65-868dba9cc879",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9edce352-18d2-4622-a560-8aa810efb048",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d4a5f54-42bf-4e74-a5c7-d80dc6d112a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f37adb4c-bbd3-4e49-a0a3-5d491de08320",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ffc9b81-df2e-41ac-9524-70a35e575609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2960b5a6-ef74-4153-b857-0fd4681101bc",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23f81723-11d9-498d-af08-b587500ed035",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a23afb3-78a3-4522-9166-c86454899fff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf75d3d-95d2-491c-82df-6fc208977622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6806f43e-09db-40c7-8da9-a300dee2d364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19e2bb62-a0aa-48a1-9e06-d4fd7a2ade54",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2290c23a-87db-4d2c-9595-3ecbe936af7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffceda22-bc36-4b87-a700-20b1acdfe7f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd20abb-2516-4ff6-a5f5-54202af60d1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81be4027-5375-4678-82f7-3ea7ab4d7d3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a12ddfa5-0e0a-4f9b-955b-2ac484f3f411",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9147949-4db2-4d7e-8de8-3fcf0f4b4990",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6ef0503-3c5f-4186-9eb1-7af3c3f10a5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e680f91-a554-4036-ba1e-3a2a37efd802",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2b68e6b-7ba5-491c-b888-83f12167c09a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea5b24c-052a-4d1a-a4bd-9be4b6e7cd25",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e12e44a0-9fbe-4642-be8a-41a3f745189d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93fa77d0-3541-4648-bda0-82f180cd354c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a30bc44-c279-4cce-8d3b-c335a3a39890",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1275230f-100f-4892-8ace-827bc52a4881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97939421-7806-4550-8468-9738f7510d93",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e02013-b26e-4a59-9d7a-6c1500a0d353",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99804701-5937-494d-a533-4085b911035d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb99d591-d3a3-477d-8eae-316097fbee93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b02cdae9-5bc4-45de-b553-f0324f8c9854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83328d10-56c8-447b-b2cc-918aa285bc7c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "626db3e5-a3a3-4f17-8794-7dc252b81c17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "762d84f5-803c-4798-96f6-5faf89615e4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4335624c-9998-4c38-9fb5-4dcc16f71457",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "721d55a4-ca80-48e6-958d-64dfc4be3b78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93ef46cc-902c-4670-8416-23e3f7c30a38",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e29cac3f-8ace-4f99-a9a1-4869789af4a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dade8966-446f-42dd-b514-254e47067707"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ca3a05-c136-4488-a72a-6b7279e4a207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8be084ef-009d-4b81-9da4-6b4132ab384f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a08fe856-dc55-4263-8fea-28d875848d2d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74460d36-383f-4d6e-bb0d-5b2677362a11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9de8354c-d677-4e66-bbc8-4723d2b671c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7181b48d-abaf-4cfa-9689-155cb959f98e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86abe015-7e82-4e39-bec1-ea7d119ddcb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "386592e2-774a-4d76-9e83-9f26b26abc0d",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3851738a-5ae2-4cbd-b03c-77470500c67e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04b5abc8-8ed7-4168-b7cc-76f7ebdd27c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e23e4e1f-61db-4513-8f56-8b1ec2104469",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45ccc5d4-6b1e-4594-8a12-a7d6c732769e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c0fde75-50cf-4fd5-a7a4-840ea9e37b5d",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76bf003f-2819-45db-af46-edec9dada6f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6e567b2-0a92-49d6-9052-3ac6349c7b30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a6affc9-72f4-44f8-8cc2-83ad6f20910f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "549839b2-2e7c-4f40-bb02-45ea0c860233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17121979-62e3-4e09-b3b3-60255aec851b",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b4b8741-3f2d-44dd-9393-f7fbd63d3e74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4035a4f-fe78-45e2-891a-0c3fde3e4e29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e114ba76-edda-4d3f-a7b6-f52109d3e97a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03433afd-e0ce-40e4-919a-b3970ed75026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad6e981-ae0f-4262-a6f0-a76470b14081",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec708ed5-5560-4427-b442-766c1929aa73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38c9089e-0366-4a64-b0b2-f5cbb9cf99dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e57d1fa-50e3-4f5b-b8d0-4eaedeb7bcef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00034139-c6a9-44fd-b9e4-75c0a1eba0cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "215dfa99-d816-4f0c-9782-d7d94c78a7dc",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b162719-a3d4-49ee-982b-7c95a5cc11af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a90668a6-ab6c-4ba5-beca-fd2e907d974b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f9d11dd-b65d-43eb-96fa-f14f94cd10b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b42e7023-76a5-4953-8a56-6ff92aca7b80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5653342-c025-4732-bfce-18f290c3cb82",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b9a648a-1aa3-4bcc-84fc-1991d395047e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bade28f-e9ca-4694-8155-e9c2ad039cb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "540a9061-9591-4ec9-949f-ebd3302c3648",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2127eb0a-0066-4ffd-8346-1ced5ca704b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c25c68b-4e38-45eb-ab38-1f4b80fd912b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b3662fc-8d73-4978-9854-30dec9b60b7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "887dc634-96ae-40cb-8192-e1cd4a92c9ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6397f481-e8ad-4cad-b0e7-1875bb408120",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea8377b3-f5f9-4b12-8ae4-674e2843c584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60cf240f-6713-4c0d-a2c4-d31a6e38b549",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84475c4c-a066-4c45-9990-75645dd42481",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8d39b5b-c6f7-451b-bd49-132f9a270d48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ba827d-504d-4324-a6fe-9d4d114425e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bbdd37c-896d-4b05-b758-9da310135e29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08d9474a-ec0d-47df-86d3-edac632696f8",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6524d34-f895-4e71-94d9-37eff2b1f258",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7c71c87-c901-4316-b3dc-3068040fe844"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f72dd1e-94d6-4c98-84ea-4e6dc874d5ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "864de428-4940-489c-b2f1-a8b24975b318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68cc79c8-9a30-480c-afa1-3882b3ccb397",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879284d1-f55f-4930-8de4-6ecf298e0163",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01143411-3cb2-44fe-90cd-e9116ae61a91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15e25f3f-b03b-4309-a0a5-9aaee3ee06a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31acc2ac-81c1-409d-b827-00b2189c9b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d6f2a1a-4a00-4297-86b9-f80d667fe5b3",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28105d36-38b8-487e-b76a-1ba872fda6ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec6204df-d5f6-4db1-a87a-4dca1cbb3251"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "696e374f-e399-4823-b638-5ab27554a99c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4dd5c48-a7e4-4ac6-aecc-32680d2e44ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22ee4a32-d261-4d07-b786-48dcc07f0561",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7891bb60-9ad1-4028-9517-a475f6e0a81d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87ac72a7-5b05-4a59-9a7b-ec8a46e7ee42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be10a18f-37bc-4d60-8cf9-84670e313680",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f0e09ae-2e46-4ce7-bac6-849ff03fa34c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8edf41e9-617e-496c-b804-1a94d8ef7efe",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8bd4b2b-4a1c-4d96-a5cc-5f415569ab98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c376874-e451-40fb-889a-61c7fc2a6640"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "271843fb-2eee-4211-92e4-0837be8f29ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88c189cd-203e-4a45-af29-323f5b374123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3938267e-efab-4847-8de8-279849c37a35",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08201403-6226-4f08-9e77-6d7280e8b311",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ed7d8c2-86e3-4970-b255-b44ddfdf3dda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f62b6e58-dd71-4cf6-a567-14255f025cf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c51e58f-863b-4ed8-9933-68cbd7db9bce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50113dfa-f878-4925-9d9d-4a57f5667ea7",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "767d25be-916a-4418-a4da-8330125aea02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "465c6e30-527c-4a2c-935a-e95cf9ca1ec5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac2b9df-8611-4651-ba4a-dd612b2261a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14805ac1-0fe1-4729-8781-5b8245bc717c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b5d5262-425a-4f3a-9c2e-abe8ddcec76c",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af40d1dc-b271-486b-a019-7d10de896198",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "053e6192-3cac-404c-ac0d-6e98d48cbad2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58903d29-56cf-453d-ace6-3ce2a1b85aa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d13190a9-33e1-4730-946d-0aa597f5ad7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0abd7b1f-90cb-4ed4-a608-60983d4f703e",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a588ddb5-5d54-43a9-ae1f-6d4e3a9d258e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ed87ef6-e094-46e8-ac4e-fdbc5c8cb62f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb982e90-ea65-40d8-9bae-f9515372c079",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b9ca2d6-423b-4282-b0f8-c776fba0b6c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "505e452b-2d90-4845-b7bd-17aaf07cc03d",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f0f7aad-e65c-4286-8b4c-63d3731711a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "550f07fb-9ee0-4c45-ac2f-1f24022caa16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3da6493-3a8a-40b5-81e7-ccac5950fda4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b180c128-3c4b-43a6-9bab-3d64adea9fff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17380591-f0dc-45d7-ae32-5ce3bae52855",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7001c723-9cc6-48a1-8480-6c8a2a682ec7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01074d96-85c5-43e7-b737-84f469f111ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca1298c2-6784-4b84-9bfc-21c6079723e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5f3eef4-cf99-459d-8bc2-83366d424060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b730a05d-da18-4510-8d28-6132ba5f30c5",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9b4e551-a02c-466c-b567-2f88c777d864",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea58d499-a2bc-468c-be68-7f25a3a31062"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b17ae5-461b-49d2-a2c5-d6fb06ebe177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecb05aa2-df75-4840-92b4-9df269087ac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68b00bfa-42ae-486e-b13d-040b49389a0f",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8441c216-f49d-4669-b2ae-d62737cbc4b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ac4853b-1b81-43b8-9e28-301a91968f72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f57a8549-195c-49e4-bb6f-807a50428eb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ee70fa9-33f7-486b-9a98-9fbe54c625e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f720cb99-9163-4367-8ec7-9e481cff87b7",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abe0bd0b-96d1-458c-b2e9-dc8f2bb1b14f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f71e0f6-34cb-4fe6-86a2-c460d16ba24c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c29e82-0a27-43c6-a844-f232c1d46969",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66dafaef-51fb-4541-893f-0311c3fca24c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "101b7b1e-d8f5-4cff-99ba-13bb4e26b250",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbdea6f2-c272-496b-a97a-16423cebc33e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4e737ba-5893-4770-a483-e60fa7aa6b8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c635d396-612d-442f-926d-b4e0b7a8d378",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e9a9386-a2e6-4c5f-b06d-504c70594aed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ba3115-8cee-4157-910f-176c5602657b",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e0f416a-0491-42d1-b7c9-da932453345b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9770b3e-4744-4cdc-86be-2bb399859633"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f224a0-793d-4238-8ab7-352caa9ca1a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eef479ae-e34e-490f-adab-da4127d488d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dff3ff02-e9ad-427a-af1d-e5f80aa94bad",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73531a17-29e1-434f-be24-c19737d121e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1322424b-90cd-47d7-a7fa-d9a91bbd0c16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd5b8d73-8421-4c67-a68e-09bd2289a1d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cb181e1-4012-48d2-afe6-273a6cb1671d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b82db4e0-566a-44ea-b8b7-1020754ca24a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e30cb684-009c-4276-94f7-bb1d7750d232",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "036f8233-46c8-4c54-b9c2-09e2e90a3a1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "517daf6e-c02c-4203-b5b8-8bce92292346",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80e6a333-d70a-4b62-b530-6868e04dd405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eb55992-6602-4776-a3a6-4f488e6b3f12",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d1df92-90a3-4471-bd56-fcd936fd2e2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "782e4cff-c1dc-4da3-905a-745ccfacd523"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a855d85b-07d5-4805-acbe-aba7a1e132e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f6389fa-36c0-41c7-8ff4-43dfd2a5a812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccf597f5-62b5-4f82-91a6-def7f0aa2211",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d8b8740-6712-44f6-8af5-906f1bce98f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ece129c-0d2f-4e31-b70e-19b5603896d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f386b18-3572-4446-93e6-37fc436bdf8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05c0604c-fc64-40e2-9018-93812c339f3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e965f7db-65e8-423a-a5f9-b46b4357481e",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "324fc0b1-846e-4e70-9b75-e480f16533ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c046b918-b47d-494d-a8c7-7c490314a221"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13564561-aefb-4dcc-afce-1e25f44f3b5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cc68123-e9e6-45ea-906f-2eb48044dc4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3846ceff-eb5e-4b66-a153-0a9aadccfa9e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f7833c-bbdf-4ca1-9e1f-74696965da5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75c004aa-6a03-4c96-801f-fcb79c59e085"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f70f66e-3258-457a-8c68-d434fbca4d41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbedad25-368c-41fb-af5f-74d31cd661f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef38dfbc-5356-4f6e-8173-c54457f4c030",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9283a53a-b768-4a39-af41-16ada73aca7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f2ad143-e3ef-4a85-8537-533176abdae6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28f821eb-86df-48b7-8ca0-e7b4a7936ede",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f929d09-d868-4a24-9e49-74b03ff0f68e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0772a01a-cb28-41cf-a2be-f0acd1aeaf00",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fa91c91-dc1c-472e-bd6b-029a1017b492",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cb67fce-a5ef-42d0-ab82-c5900cfe0a7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4696db41-2635-4d43-ade9-877f83a60f82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01da6d65-fc5b-48cc-aa1b-61ce6115b455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d04d14-239d-47fb-9625-343b619e15a3",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09a6c126-ace0-4e8b-9f8c-e32e5d946f57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57680800-346b-4500-96e2-fac1110194f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dae56a4a-240e-413b-bcf3-2157af0e6f16",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdafc7f2-54ad-416f-94e4-92559fcbbf4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e91de411-7412-4b82-8127-7cb0a4cb1798",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e8002ea-eb0c-4b9e-a0cb-0ec5fe922b07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d381ec2-1266-4a6a-8439-8b0046957e92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb2798ad-fd2c-4a88-9ff6-f16a32d3bf4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02b4157b-35ec-4d02-abd0-7c028d364ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fd56039-165d-4015-a6ae-32778ba260dc",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9a1317a-48ec-4a14-b0e7-cda79bf4c504",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e762a79-e920-453a-8dca-417dbdcbdf32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76b55e89-b412-40ab-94eb-47677ccde50d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aac60433-11ef-4492-95f3-672377901753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "880b8b25-91ee-4840-8c4e-cfc5192a34d6",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53842646-60b6-4de2-a182-e1ea67fb8c65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f205068f-fb6a-447a-9521-e6b101c342b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "114f30eb-e90b-42ca-af49-d51290cd069a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c47225c5-9838-4e28-a9be-09bb6b690cc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b516ae4d-9c67-4b6c-853c-f0058158cbb6",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edac5e63-c1dd-40df-859e-ca826f607d48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e16af94-48aa-45b5-a179-06c5da9c4bb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b7e511e-3306-4bd6-b6ca-4a18dd35c049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ec7c4b3-4b10-4582-8722-48ccaa70345e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7756cbdc-4fb2-4249-ac9b-a5e3faeee8ab",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "824c5d68-69ea-4c47-96d3-3960c2f09685",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f840c9f-e8fd-448d-acd2-21200f0d3d63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "911e540b-1aa1-4ac9-ac8b-f405cb70235a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a7be0b5-bc77-4e77-b756-1b8ee2b674a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2351d0c9-ee21-4183-aa4c-6d3ab920f0a5",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9015e169-dc39-45d1-8812-c14b1e6e2aa9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a1b3ee9-61d1-41f5-9ff4-2f305b16a7a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0774e1e8-c002-4cb3-a586-bd8666cb4fe8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b09e000-bd77-4bea-93a9-b3b5e8a7d651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ced37f3-039f-417b-80a4-a827a217e2ee",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "816169f5-cd66-4f62-b89b-0ac07075da00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ec1df10-2c19-45cc-a962-89b6ec3b4704"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81efc096-2a7d-41fa-bba4-589964d6a060",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c4196b9-c63b-4d4a-b9e0-f10dc85103ea"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "defe463b-4bdf-4c2e-88fd-cdc2c2ed24df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "07408b94-4ef8-4c41-98ff-d6aac9edc65d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9efb62f8-9ad5-4b71-949b-176560d15571",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6fa8b6a3-dda8-4de8-a644-447d5f114bf8"
                    }
                  }
                ]
              },
              {
                "id": "319e0219-34fc-4129-80eb-f4d930a69c75",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eb55f788-3234-4d74-ba91-cff545346f66",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c9976ec-edd5-4311-b091-887aa1587526",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "730f1661-f242-4bd3-a34f-c03cf01603f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf99686-f9c9-48a3-a4a9-50fda1f20b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7d0b2d98-c32c-4f9c-ad4a-b95ac5d263db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8e1491e-2f9c-478e-a4c8-2557bea4bd4a",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26efd90d-17a3-42f8-88ab-3e8e9e03059a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "1ec1ac22-0f99-4af8-aa25-931636286092"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7aeffdb-3edc-43cf-a46b-9b9016173155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f4d152e8-f6c9-43a0-b75e-79e202ebddf7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dec9442c-ac5f-4949-a515-3eaa00ed96a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "925870b9-b945-4526-bd63-8dad4abacd75"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "478599f2-42b4-4e1e-aabb-2bb387db4a84",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d5afa42-d259-4dd6-992a-78f6c92e3007"
                    }
                  }
                ]
              },
              {
                "id": "24655cd0-6a9c-41a2-9fd3-8b9aeddc1e6d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "ed6646b0-ae85-459c-80bb-6a886acadeb1",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "596962ce-5fe2-4fcc-b65c-7e42f84b626d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "8b18d353-0fea-48bd-bd8f-b2a51cb0939f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e232de91-73ec-45a2-876e-e0d24b4be779",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0969d6ca-400f-4f78-a723-ab19d60fbe69"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "60cd8f5b-3b12-4ff0-89f7-75bb27d616c3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e474d997-e2e1-46eb-9918-e117796179d9",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f8bbadf-cc10-42dd-a1e4-34c2d5c3bdf1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ae3784b0-d593-4d1a-bf95-e465bc92680f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6268bb1b-4611-4d23-826a-88789c591bc7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dec91d13-8888-42d1-82d5-cbe1b0d69bc1"
                    }
                  }
                ]
              },
              {
                "id": "dcadb5ae-ae07-4783-9b06-4d10d584163b",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ef992a1-f861-46be-8afe-12cdef81829d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "cd8facd1-f234-4893-af5c-57b7c9ee7058"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f137b3ee-8e9f-4f92-b243-e28ec0ef07fd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "87665436-80da-4747-afc7-df5e9a7dc36a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e867f4f3-9b01-4064-a579-74f63e7eb98c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "dd872015-6764-4e23-9dba-7845b0505af2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8212f0f6-e164-46dc-aace-be2e0cb08f97",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9f64e1d8-3594-41b6-a862-3909359c1793"
            }
          }
        ]
      },
      {
        "id": "30074430-a89b-4d2d-9dfc-0957d06adb2c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "189ceea6-a66a-4404-9c58-d302f095a3a2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "56266186-58f9-4522-aa38-2cf18ca74346",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e241fd52-88a3-49a3-b6a4-93a7dfca5b78",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c4f3c1e-3364-4c6e-93d4-9619457a2776",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3b6543a2-ffd2-4a14-bc18-9b3e38a46f4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cce86206-4d4b-4f73-a8fb-1b9eafeab0a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cd381956-f2f9-4823-9e21-51e0d521d3b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baa5f6f4-4e6f-4ecd-b748-25e02589ced2",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4729a99d-b13d-44a1-b685-72e96d31645c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "975ab09f-b5f0-45e1-ab93-f34591591559"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c600f659-206a-4c58-804e-6f0a67e44a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6c3483af-7829-44de-88b5-8afd93371e84"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c3045db9-655c-42ce-916c-c0f2c98e7215",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc60b514-ec43-43ba-bcab-ae96d0e42cc6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4c0b1054-3d74-4e27-9edf-4df3e830d3cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b0634663-2127-441b-9175-e4802366c848"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e851669d-561d-4ebe-9d36-4c5ad0353e98",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "cd5e93fc-40cb-4207-9886-19baa7dc022d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "43008e6d-e937-4b1d-8b0b-fc9f5dd3d50c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "77d57df9-861c-4df4-bff7-bc1f4fdd27e3"
            }
          }
        ]
      },
      {
        "id": "b1959a7b-374e-412d-b396-c3d139077a07",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "91a9793d-8e56-409e-9b65-9084c7369606",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9199f35a-2324-43a5-a580-478025b1046c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "07b49f3c-c618-4dcb-b382-8df9b8b7863e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08e995e4-741b-4b83-8888-5df5e4bf0422",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "dfedfc85-39a7-493f-a3bc-974842d5e55b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b26df28-4b9b-4b62-8408-302c1df46f8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff8c5ba7-b68d-4987-a76f-121d905510d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30dc8dbe-53bd-44c5-af31-4c4b6a239df0",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8940b45c-19e6-416c-b8ba-ab0256a8c470",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "05e56cae-f6fb-428b-ba3f-e8913b9c7f1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbd7106b-01d3-43cc-a0c5-83d32bcc81b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "80004362-12cb-4975-91a6-3eda93150790"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6167e353-e6ce-4c44-997a-d31f9bead91e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d9cc14c-feec-4118-8103-3c8242357be9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0c0db1df-813e-4849-a3f6-23acc3791464",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "abad064f-4e7e-4f0a-8697-212081763151"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9bec886b-12a2-44a0-acb4-e00f1ce32eb4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6b111cf0-08bc-48d9-af80-55d002616cc9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "668c92a9-93db-42c1-882c-2e234554a40f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7951d6a0-d4ac-444d-95ed-ebdb8f17cf30"
            }
          }
        ]
      },
      {
        "id": "28dfcbc8-6a01-4269-a4dc-c944221b3354",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "1ca150ea-2844-4af4-9b8d-839dde69144d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b2e39d90-bbf8-4f41-9fba-a2d2fe28fdbf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2fe6d0cc-aa3d-45a0-9d17-5e2d9f97a387",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3bf0ec0-eeeb-44f4-b5dd-791c0edf45d4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "df83649f-7bdd-469e-9885-a2befd2441c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bb05537-f640-4dc4-8092-3714c46e3b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "57e7acef-8e8e-41ae-99ec-498123274681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b2d0677-1379-43e5-83ef-da7d7f46fb82",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7df68751-fbc9-43ce-a94a-9c2d7c8ec80f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2d079a30-b016-46ae-9ee8-89a1be38076f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74136a27-22bd-4544-a439-4948a038b907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e3a343a6-fb22-4d54-b60a-72059a29cbeb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "77ea4559-6a5a-4489-8408-6d8f6a8eb6f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9aa420d-55c3-4d1f-819e-86d87392c70d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3933ce7-6e3a-46dc-a318-7f5aadf730a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bc12e413-eed7-4aa5-9262-546544858bb1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dcdcf376-a4f7-4041-b9a8-9f34fae7dae6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "72946d8a-e371-4c68-84bb-4b6afc55b0d2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d4ac1b90-521f-43c2-bf84-e9aa63865b4c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ce2f5e48-4b77-4fe0-ac16-c99b1f56e0ce"
            }
          }
        ]
      },
      {
        "id": "03d0b060-2bdc-4158-97ff-2cc44ea21d49",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ed2f4c2b-2bae-4dd0-b0b6-cde2313a538a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5635a0aa-c9a2-45f4-9b23-7d412a0e830f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "0d92a512-702c-4fc0-a3f5-dce93a462357",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "305138d0-3528-4ba9-969d-47c13ae56d41",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f04d239f-2dc5-480b-8650-2be1dc74f65f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 60
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 23.307826762226405,
      "responseMin": 3,
      "responseMax": 3302,
      "responseSd": 207.27614841778737,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1674953018211,
      "completed": 1674953035172
    },
    "executions": [
      {
        "id": "931c2fe3-27a8-4aab-b676-048703cea84f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "0d1bb80b-f5a4-4e8e-ace8-c0faeb6e21ec",
          "httpRequestId": "0e1399c0-e361-4445-9920-52e9b5b780cc"
        },
        "item": {
          "id": "931c2fe3-27a8-4aab-b676-048703cea84f",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "e26ab8d7-5f2a-4f78-9a65-a593aa7f52e5",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 0
        }
      },
      {
        "id": "a56e2dbe-cf05-45e9-ab4f-5e4848ee9f0f",
        "cursor": {
          "ref": "0fdfca68-dbd6-48ed-a400-6a1581592053",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "65997326-5d7f-4a67-a74f-ab65555d2300"
        },
        "item": {
          "id": "a56e2dbe-cf05-45e9-ab4f-5e4848ee9f0f",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "3f85b69a-5de2-427b-9e2b-e2b0f56ea2de",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 0
        }
      },
      {
        "id": "4477601e-c07b-4aac-a7e8-9bd1b0646ae4",
        "cursor": {
          "ref": "20bcd656-31f5-4b19-9726-3d5a7bbbab52",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c0ce4eb2-591c-4075-82e1-ce4d907a941d"
        },
        "item": {
          "id": "4477601e-c07b-4aac-a7e8-9bd1b0646ae4",
          "name": "did_json"
        },
        "response": {
          "id": "2a95978f-6f4b-4eec-9769-60fc6b174328",
          "status": "OK",
          "code": 200,
          "responseTime": 171,
          "responseSize": 1211
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aebf656-406b-43f8-a7a1-ca1e923b97ad",
        "cursor": {
          "ref": "5783713c-a9db-4cee-8534-c0b9353adbdb",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1c17032b-1ae3-44c3-be94-6fe274fc39ac"
        },
        "item": {
          "id": "3aebf656-406b-43f8-a7a1-ca1e923b97ad",
          "name": "did:invalid"
        },
        "response": {
          "id": "c1f91bc3-7624-4aea-a5d8-eaa2163f7b70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "3aebf656-406b-43f8-a7a1-ca1e923b97ad",
        "cursor": {
          "ref": "5783713c-a9db-4cee-8534-c0b9353adbdb",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1c17032b-1ae3-44c3-be94-6fe274fc39ac"
        },
        "item": {
          "id": "3aebf656-406b-43f8-a7a1-ca1e923b97ad",
          "name": "did:invalid"
        },
        "response": {
          "id": "c1f91bc3-7624-4aea-a5d8-eaa2163f7b70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "bacb637f-0887-42a8-902d-927c91cf8ea2",
        "cursor": {
          "ref": "be3c0e32-72df-4502-ae89-afa98937fc46",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "336d4e91-7d2f-46fc-9e92-00286b9a19ad"
        },
        "item": {
          "id": "bacb637f-0887-42a8-902d-927c91cf8ea2",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "95697359-17de-4e30-90a3-f705d841db1d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 52,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "910be819-e47b-45e5-b0e7-a6d9b92f2401",
        "cursor": {
          "ref": "e378c020-5ab7-4b6f-b69d-c38d616db3ef",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "bc174b98-5660-4746-8bcb-774164b8dd2e"
        },
        "item": {
          "id": "910be819-e47b-45e5-b0e7-a6d9b92f2401",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "5a4c8633-3a4e-4a39-8e5c-94ad52bf7554",
          "status": "Not Found",
          "code": 404,
          "responseTime": 5,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "244f4db7-0b7f-4dd9-9ed1-0997523947dd",
        "cursor": {
          "ref": "53a62834-09e8-49eb-a3d9-3b829d60441f",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b3b89efb-d66c-4099-9e6e-f16296cde1e1"
        },
        "item": {
          "id": "244f4db7-0b7f-4dd9-9ed1-0997523947dd",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "0b4cef6b-3cf0-4b63-89a2-116372828f68",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e56f6be5-06fb-4c0b-b2be-f5dbb632a165",
        "cursor": {
          "ref": "ebbd98c9-20eb-4491-9914-fc6422da98b1",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7329c48d-1cbc-48fb-a28e-59349511f60d"
        },
        "item": {
          "id": "e56f6be5-06fb-4c0b-b2be-f5dbb632a165",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "0041415b-0303-4b78-85a7-8068f3dca9f0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 6,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e56f6be5-06fb-4c0b-b2be-f5dbb632a165",
        "cursor": {
          "ref": "ebbd98c9-20eb-4491-9914-fc6422da98b1",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7329c48d-1cbc-48fb-a28e-59349511f60d"
        },
        "item": {
          "id": "e56f6be5-06fb-4c0b-b2be-f5dbb632a165",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "0041415b-0303-4b78-85a7-8068f3dca9f0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 6,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69ffc8ee-3b65-4e7f-a689-1203377425d9",
        "cursor": {
          "ref": "7445d17a-ed3f-47a5-b613-79423213d46c",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "031355d2-7ef0-4e72-9a84-f9210e5dd381"
        },
        "item": {
          "id": "69ffc8ee-3b65-4e7f-a689-1203377425d9",
          "name": "identifiers"
        },
        "response": {
          "id": "a2d174f2-87c2-4806-b7ae-1406e93fc070",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "8f857366-8fc2-42fe-9ed8-17d97a2e10e5",
        "cursor": {
          "ref": "1e18ea28-d653-4231-b656-1a08a931a1a1",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a1e0d2d3-cd4a-4b0d-85b3-0bbafe9ef65f"
        },
        "item": {
          "id": "8f857366-8fc2-42fe-9ed8-17d97a2e10e5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "fa43b514-43c1-420c-a290-52ee927207db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f857366-8fc2-42fe-9ed8-17d97a2e10e5",
        "cursor": {
          "ref": "1e18ea28-d653-4231-b656-1a08a931a1a1",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a1e0d2d3-cd4a-4b0d-85b3-0bbafe9ef65f"
        },
        "item": {
          "id": "8f857366-8fc2-42fe-9ed8-17d97a2e10e5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "fa43b514-43c1-420c-a290-52ee927207db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf9e1647-2988-45b5-8263-a9ce5bb8795f",
        "cursor": {
          "ref": "d0e72f76-0c7f-429c-8204-5933196974b9",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "14a4dc65-4077-4ff7-ba36-6e3a7b89563b"
        },
        "item": {
          "id": "cf9e1647-2988-45b5-8263-a9ce5bb8795f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "60ccb9de-ab34-40e8-a21e-af6322dab69a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "374e3be4-8502-4631-a235-95a3c11427cf",
        "cursor": {
          "ref": "0864d136-9d50-420b-8cf9-641a11083bdf",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "77897499-fb12-4b8c-91c2-aad382687a44"
        },
        "item": {
          "id": "374e3be4-8502-4631-a235-95a3c11427cf",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "9850bc58-9f36-4556-816f-1f9ed909ad7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0b3a278-51dc-4df9-a28c-db29ba4ecd9f",
        "cursor": {
          "ref": "0fac94b5-db0d-4096-bbdf-e221b62d01c5",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "bba0fa26-e7eb-4b0f-a0ef-fe4fab029713"
        },
        "item": {
          "id": "d0b3a278-51dc-4df9-a28c-db29ba4ecd9f",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "2d83148f-d1d0-4bfe-8263-90fffc20fd49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e731a38-cc11-44ab-94e1-115f618524cb",
        "cursor": {
          "ref": "5bf2854a-4a4a-497d-a55b-44aeb80a5a39",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "9234ebaf-1373-4160-b577-7fc7ba358952"
        },
        "item": {
          "id": "2e731a38-cc11-44ab-94e1-115f618524cb",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "316cd1bf-ff16-46d6-a42a-a507d3adab54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26ecd8fa-b09c-404c-949c-b124370ca6a9",
        "cursor": {
          "ref": "5c406140-911e-4bef-9bd2-202e21027698",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3dc54560-892b-4d47-8bbb-c19ff09f4992"
        },
        "item": {
          "id": "26ecd8fa-b09c-404c-949c-b124370ca6a9",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d9c9f184-04b3-4491-a978-4eef94b21045",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d7d2d4-0247-4061-8eea-001c7fdcdb59",
        "cursor": {
          "ref": "5ba0a80c-608c-4d39-8b8e-281be3f1dd5c",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "10b94a27-436c-4308-9545-508b4aa7e0e7"
        },
        "item": {
          "id": "47d7d2d4-0247-4061-8eea-001c7fdcdb59",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "59f4342e-40cb-43da-a7ff-20019bbf1a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ded3a47e-9bea-43e2-a42b-b6547b5db787",
        "cursor": {
          "ref": "7471c237-5442-4f2f-9597-2f1cb01939f1",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ba171040-1f89-4ea3-88a6-47f3cab4e349"
        },
        "item": {
          "id": "ded3a47e-9bea-43e2-a42b-b6547b5db787",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "0601c389-6a63-4229-ae96-d734d3c92aa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "066f55f5-9f88-4685-9520-adf196c1e7ec",
        "cursor": {
          "ref": "55160999-7b1b-4289-8bd0-ac73c25e61a2",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "39406eaa-a516-4c3e-a422-8ef383154874"
        },
        "item": {
          "id": "066f55f5-9f88-4685-9520-adf196c1e7ec",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "44468783-d9b8-43dc-9fe5-02f01cffe3b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b90226d-0c7d-4bdb-93ca-ded7df9c4eaf",
        "cursor": {
          "ref": "342a8e19-57d1-4360-a91d-c9ec37a624c6",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4244843e-f5ca-4533-b4be-749a406a7a50"
        },
        "item": {
          "id": "2b90226d-0c7d-4bdb-93ca-ded7df9c4eaf",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "34096014-83a1-4bdf-9715-b5961ffa9fcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1b50e25-8813-4a50-a2ab-6ea778650f81",
        "cursor": {
          "ref": "901446db-0071-4bcc-a141-945fea83b7db",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "25d710b0-2f3d-49db-9e66-f04058591388"
        },
        "item": {
          "id": "e1b50e25-8813-4a50-a2ab-6ea778650f81",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "83640bc6-7b1b-435f-9fe4-ef6abb78414d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35019125-59f6-440d-ad05-84101a5f5148",
        "cursor": {
          "ref": "f08e3993-0aa2-48c4-9cc3-26831c7c9f4c",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a4cc7e7a-27e1-4386-baf7-0b966bbe3f9a"
        },
        "item": {
          "id": "35019125-59f6-440d-ad05-84101a5f5148",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "44c4efe8-f83c-4b9d-af95-17d43638990e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a25aede4-4db5-4afc-8b87-f628eba63e74",
        "cursor": {
          "ref": "34947013-6899-4962-aaac-9a2dec6392c6",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "94189ba1-0e4f-4833-9cc6-3bc78da1b880"
        },
        "item": {
          "id": "a25aede4-4db5-4afc-8b87-f628eba63e74",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "e170d88e-a501-4be9-8c14-107f4423e3db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19a3a820-c241-4e95-ab32-e27ad70eba13",
        "cursor": {
          "ref": "7184eff5-004f-42ed-ae60-98e17e035861",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b1f0c400-8843-416f-b368-fb6f200cb050"
        },
        "item": {
          "id": "19a3a820-c241-4e95-ab32-e27ad70eba13",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "235a90ff-0d31-4749-b51e-b21a5e64d06d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fc45d7c-fd8a-40c2-b19c-e559a0562cb3",
        "cursor": {
          "ref": "ad68a523-ac65-4f11-963d-848e5e5e5fd3",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "77492279-23af-4207-b7e7-86851246f79d"
        },
        "item": {
          "id": "3fc45d7c-fd8a-40c2-b19c-e559a0562cb3",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "9b4ce8e3-0ca1-4381-a3aa-f48e2e528df2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ddaf080-1cc3-4701-85bd-ca66003ec5d9",
        "cursor": {
          "ref": "0267d663-dd02-4a0f-9da5-8cce359a4e7e",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8648f78c-383a-499c-8229-30a2910c2f44"
        },
        "item": {
          "id": "9ddaf080-1cc3-4701-85bd-ca66003ec5d9",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "065a6532-6cd7-4eb9-8ed4-9931e0e493f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82722c5b-d183-4a31-ac6b-17a7e8219111",
        "cursor": {
          "ref": "5e515882-ef10-4a4d-b981-cf761a2819a0",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d0dcafc6-7c2c-4e0f-a17d-b11494ad0619"
        },
        "item": {
          "id": "82722c5b-d183-4a31-ac6b-17a7e8219111",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "054c13e5-06d5-4fc0-8867-946239bedcd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36e991db-cbca-4607-8fcd-c5403aa2c89d",
        "cursor": {
          "ref": "6c946e53-4f08-4eb5-85cb-e0769f214584",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "769c625d-7024-4f55-a1a4-fa62e7cb890c"
        },
        "item": {
          "id": "36e991db-cbca-4607-8fcd-c5403aa2c89d",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "fff531fe-9464-4e77-9b3e-99048146a656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43691677-6a5b-4214-b89b-ebdb06cb81e7",
        "cursor": {
          "ref": "e4647c1f-688d-48a0-8562-f9fb1b5e09fc",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a92039b0-12e3-45f2-bfe1-b96abc8698f3"
        },
        "item": {
          "id": "43691677-6a5b-4214-b89b-ebdb06cb81e7",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "ac5a9053-cbb0-43ea-83f7-af8bb395a4d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff01ff07-74dd-4ce5-af83-3000aab76d21",
        "cursor": {
          "ref": "4b2c3086-452d-4b34-b451-e85399a8daea",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "659315db-c40d-4895-b561-75925268d138"
        },
        "item": {
          "id": "ff01ff07-74dd-4ce5-af83-3000aab76d21",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "1b1c7d6c-5c9d-4449-ba4b-7b08510f2cd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a5eb4ce-c0aa-4be1-81a8-f145a2d7723b",
        "cursor": {
          "ref": "2ac85ca0-3991-489a-aca1-c99fa035ea5f",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "2658040d-e183-4ddc-97a9-8d31e135ea78"
        },
        "item": {
          "id": "8a5eb4ce-c0aa-4be1-81a8-f145a2d7723b",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "07b4bebf-78ff-4c91-b904-2f2352e69320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1777a7af-159c-4c7a-b5bd-c284042dc799",
        "cursor": {
          "ref": "a3c4b257-990c-421d-a58a-b469cd228428",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7390c293-a36d-46e2-bedc-285dfc073205"
        },
        "item": {
          "id": "1777a7af-159c-4c7a-b5bd-c284042dc799",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b2788715-7026-4bee-976e-fc69207b9f50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a5cb460-0e1c-4f98-8168-bd738951b0c5",
        "cursor": {
          "ref": "b21f5a79-979c-4a54-ac4a-8e4a1256df37",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "54f25f0b-8f2a-4252-9561-771ea691407a"
        },
        "item": {
          "id": "2a5cb460-0e1c-4f98-8168-bd738951b0c5",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "822ea5e6-b75a-4bbc-8450-9d50348100f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd8ec889-0408-465d-b1ca-2848ad72e981",
        "cursor": {
          "ref": "97b249d6-1264-4c44-9b6e-4081bae31499",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "479e600b-e21c-46aa-92a0-67eb6507c897"
        },
        "item": {
          "id": "cd8ec889-0408-465d-b1ca-2848ad72e981",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "78f61bda-9edc-4415-b9de-285d893b45f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cd73f6e-b6c0-4173-a99f-7d1e42802b62",
        "cursor": {
          "ref": "29273bb7-c442-4d88-8712-8530306709d2",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f2f1c8c4-78ec-4255-9c47-f84f56b0ccb5"
        },
        "item": {
          "id": "8cd73f6e-b6c0-4173-a99f-7d1e42802b62",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "51df5e75-0dfd-4cf2-a3fb-7c168130034e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc65c7e4-1a65-46e4-9b98-5b408337067d",
        "cursor": {
          "ref": "0488518b-52fa-4733-836b-8b7852483c8b",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "04cf02b0-b711-4c2f-8b70-cd4c047e435c"
        },
        "item": {
          "id": "bc65c7e4-1a65-46e4-9b98-5b408337067d",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "4c93f28a-be27-49d6-ac2a-513346cbd31d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c74761-a2fc-4598-8c9f-c72360ca1bf8",
        "cursor": {
          "ref": "46e873b9-9b6f-4481-834f-bf538e40871e",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0aebae07-fb59-4207-80e0-013f26a7be93"
        },
        "item": {
          "id": "e8c74761-a2fc-4598-8c9f-c72360ca1bf8",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "3dd14881-0f5a-47e8-8ae6-6218b42b32c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b05ecdf-b69e-49b1-b33d-1bf422289b44",
        "cursor": {
          "ref": "98cfac24-ba78-472b-ab98-3becaf60807f",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "61f75d89-d1e6-47ed-89fe-b5d261bdd561"
        },
        "item": {
          "id": "7b05ecdf-b69e-49b1-b33d-1bf422289b44",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "9d195fe0-1d59-409d-b1cf-4f9b68298172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a4c6178-d4d0-4ee9-b166-5f15b6fc4cbe",
        "cursor": {
          "ref": "8878e73f-eb17-4c4f-8faa-c9d2fa852fdb",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7eae8e25-87b4-45a5-abf9-9cdbd9826514"
        },
        "item": {
          "id": "0a4c6178-d4d0-4ee9-b166-5f15b6fc4cbe",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "a2059ddf-b339-40b2-9cb1-e8c57085a9af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dfdd568-c97c-422b-aa4f-0e3566fc72e8",
        "cursor": {
          "ref": "f45d2764-948a-4040-99ee-50f0753ac2e2",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b411b81a-fba8-4e2e-9c33-dd105c55d439"
        },
        "item": {
          "id": "7dfdd568-c97c-422b-aa4f-0e3566fc72e8",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "bc68dac6-7c6c-4d73-a51c-e10525914caa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2007bcdf-1cec-410c-8f27-ecc93946724b",
        "cursor": {
          "ref": "3c56ab29-937d-4c54-ba09-c1ed5a79f3eb",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "068246b1-a827-402c-ade8-13c989339397"
        },
        "item": {
          "id": "2007bcdf-1cec-410c-8f27-ecc93946724b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "4503e21d-7870-4e00-92fc-f3f4a385e3b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2421635-30dd-4cc3-a16f-90b4227c52e6",
        "cursor": {
          "ref": "2a09e652-6781-4e6c-ae37-6458b766a57e",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "366545f9-eb52-485b-98a0-c273c68b2654"
        },
        "item": {
          "id": "f2421635-30dd-4cc3-a16f-90b4227c52e6",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "5bd2e9cd-092f-4841-a3c5-283b39fadaf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd6a192d-423e-4d5b-b3ce-6effe7b7fc0f",
        "cursor": {
          "ref": "730f9a65-0d7f-42a1-bb3e-f6559f0c92e8",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ffa76bd6-9a90-4a3d-9cff-958cec89b437"
        },
        "item": {
          "id": "dd6a192d-423e-4d5b-b3ce-6effe7b7fc0f",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "0a4c18a1-ac15-41de-8616-6a2e55cb8c07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "626ce4c9-baed-4140-8ba6-7a13efd3c250",
        "cursor": {
          "ref": "e101deaa-d0db-468a-ab13-deea4479bf7f",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "2471e000-1222-45aa-9ab9-63481ad418a5"
        },
        "item": {
          "id": "626ce4c9-baed-4140-8ba6-7a13efd3c250",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "452ce9b8-3eb6-4d16-b598-6bc5888f1a20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84bed1b1-499b-4fd3-b241-70b59bf4c2a5",
        "cursor": {
          "ref": "e8252a06-3b01-4da6-9d53-50f7b1cd3e2a",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "e80343ea-6dd4-48f8-b94d-e51dd890df98"
        },
        "item": {
          "id": "84bed1b1-499b-4fd3-b241-70b59bf4c2a5",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "220b8483-bce2-432a-bd29-230aae7984a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "772f94ea-59e1-4ddb-b650-b522d0969341",
        "cursor": {
          "ref": "b750a768-ba82-4749-9861-9fa3b2aaba06",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "616cd407-e804-486c-ac63-361f3d366094"
        },
        "item": {
          "id": "772f94ea-59e1-4ddb-b650-b522d0969341",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "be0cab49-a453-4ae9-88d9-b2c05219fbfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1958c51d-214b-4e89-b1fb-17b9d2e02f46",
        "cursor": {
          "ref": "e7de9e5b-ba97-4458-b767-2dfc517e1b5e",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6459ab4b-1ef6-4ed6-bb76-32b0c44dbcac"
        },
        "item": {
          "id": "1958c51d-214b-4e89-b1fb-17b9d2e02f46",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "9fd3d063-4f12-456e-b5cf-37667863fe48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14e06d68-7fe0-40b7-ac60-8736176300a2",
        "cursor": {
          "ref": "9c275a77-4ce3-4ef7-9efc-11df3882e59a",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f22e6e54-cf9b-4f2b-961a-1a7db1ce463f"
        },
        "item": {
          "id": "14e06d68-7fe0-40b7-ac60-8736176300a2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ad3beedc-dc62-46c8-b2d3-7348d9e34e54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "3c260d99-35f3-4aff-bb55-76829da57896",
        "cursor": {
          "ref": "9c9e4101-18d0-4e7d-bc64-0d53bcf66650",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d262b3ec-4c45-4105-8433-915efb7a5376"
        },
        "item": {
          "id": "3c260d99-35f3-4aff-bb55-76829da57896",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "8202eb76-8870-4b16-8fb2-217b63e5fbdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c5f0596-c8a5-4cfb-8efd-e5f184bd471e",
        "cursor": {
          "ref": "d24c9cae-7564-4552-bd1e-63166746a3d0",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "b38222bb-21fc-4ee4-9d47-34889faad2f9"
        },
        "item": {
          "id": "7c5f0596-c8a5-4cfb-8efd-e5f184bd471e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "5ad87b61-ab48-4790-9622-49a3119add8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8171696a-a09d-4f39-9477-94e2d86dca99",
        "cursor": {
          "ref": "6c268ac6-6ece-44aa-a467-ae1e817e3c11",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "5c847688-378b-40c9-bec4-8da86221e6f4"
        },
        "item": {
          "id": "8171696a-a09d-4f39-9477-94e2d86dca99",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e60e465d-fb41-4254-a846-905ad7fdee34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faa92ebe-14f9-4703-8b69-4482549d43a5",
        "cursor": {
          "ref": "6d80fcb2-a2e3-4094-b40c-671477adcf50",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "5e63d490-233c-4c84-99a9-b16a28dffe34"
        },
        "item": {
          "id": "faa92ebe-14f9-4703-8b69-4482549d43a5",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "bac25065-8646-4315-b0ec-9f50e5a45e08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e214d8d5-6789-4fde-9db1-266e7f90b6a6",
        "cursor": {
          "ref": "21dcb5a8-50aa-400a-8b6e-a60fcac36b56",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "2553b09c-aa1b-45f3-bae6-3157f8491d12"
        },
        "item": {
          "id": "e214d8d5-6789-4fde-9db1-266e7f90b6a6",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "5826ba02-6958-4e88-b7dd-16c666cfc54b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c57dbcd1-c18f-4bd4-9f28-dffe3f0693eb",
        "cursor": {
          "ref": "415f0a55-a3d1-4003-be3d-534d5324244f",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2871bc57-0521-49bc-94fb-3e142390ffde"
        },
        "item": {
          "id": "c57dbcd1-c18f-4bd4-9f28-dffe3f0693eb",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "bfba7c5d-8e2d-4369-8434-caff46b10090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eafb341e-7a13-434e-a428-0352b1d77c9c",
        "cursor": {
          "ref": "02d1de27-fad4-4df5-8873-ad70ba3981ce",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "823985fa-24ff-4902-b78b-447b9c4bbc96"
        },
        "item": {
          "id": "eafb341e-7a13-434e-a428-0352b1d77c9c",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "3db55bf2-52b0-4732-881c-9adab9c579c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "aec5d812-5f06-4512-83c8-1a0f720d1c9a",
        "cursor": {
          "ref": "6ad19de1-341c-4908-b3aa-ffa9963f94b1",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "30f41073-884b-43a1-8acb-a31b6a2f5e67"
        },
        "item": {
          "id": "aec5d812-5f06-4512-83c8-1a0f720d1c9a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ff9a38f9-5a46-4776-b487-cde7ef8e9897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5dee52c-fb6a-44ff-a76a-5fdcf64d0373",
        "cursor": {
          "ref": "59f4d0ba-0002-4423-a0ba-5aac94b15359",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "2c3b45d4-3c0c-48cf-9096-a0c7a9bc5420"
        },
        "item": {
          "id": "d5dee52c-fb6a-44ff-a76a-5fdcf64d0373",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "deb863fe-9f2f-4880-883b-93b18a0e5f4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39a143c3-3935-4d71-977b-fffb2de67060",
        "cursor": {
          "ref": "e1043150-9d9b-43c0-be06-1ce7071f4a55",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "c76c9c29-ec14-476c-a603-b1d8930382d7"
        },
        "item": {
          "id": "39a143c3-3935-4d71-977b-fffb2de67060",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "eb908f65-0c2d-48ae-95de-a7886a1a3a88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "195733e8-ccac-4c8b-8827-504891bd3aff",
        "cursor": {
          "ref": "78981db4-8a5a-4e1c-9c35-2ec4125dc800",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "55afa743-f417-4fbb-8c38-4e2f1928a32c"
        },
        "item": {
          "id": "195733e8-ccac-4c8b-8827-504891bd3aff",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "00ce1db2-f9c6-40cb-bdd6-2684dd3a4f4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "494cae75-bd54-4471-b3c3-c15ec93579fd",
        "cursor": {
          "ref": "a8dc0a48-354e-4877-b31a-4201a55d9789",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "62e6a04f-3533-4cc4-bd57-91be888834f9"
        },
        "item": {
          "id": "494cae75-bd54-4471-b3c3-c15ec93579fd",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5d65e226-0b2a-4bae-bc6d-5b4809388949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47225339-823e-46bc-b9aa-e8f1b6665a32",
        "cursor": {
          "ref": "2e65a76b-b40f-4969-ac99-7a0abe82688b",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "4b2da624-890d-4684-9716-61d424d30989"
        },
        "item": {
          "id": "47225339-823e-46bc-b9aa-e8f1b6665a32",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "e3004ded-4ae1-42e5-8bc0-3893e5ca756e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "affd2c6c-2455-4577-ac73-a5a5b81bb392",
        "cursor": {
          "ref": "7ee84a13-b24f-438d-b18c-12bf644c8030",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b029b633-26ac-4faf-a361-ccf20860f24b"
        },
        "item": {
          "id": "affd2c6c-2455-4577-ac73-a5a5b81bb392",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e31e7809-d407-40b9-a03e-f10383894e31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99318059-c4a1-4020-a791-137cd8aa4bd4",
        "cursor": {
          "ref": "8463c312-b598-48ba-a9e5-0ef3afef7c2d",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c12d9d70-d572-4625-bb24-230edb8e7ac8"
        },
        "item": {
          "id": "99318059-c4a1-4020-a791-137cd8aa4bd4",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "01d9364b-79bb-4d4f-8ca0-cafa0791e421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6952bd45-1189-4bf5-a0e5-888f4744dd62",
        "cursor": {
          "ref": "25deb015-31b9-4a30-a6d7-d20fa3aee714",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d7e03d06-6343-4cb9-84a0-4ff2d275a502"
        },
        "item": {
          "id": "6952bd45-1189-4bf5-a0e5-888f4744dd62",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "c07f21a9-c5a4-41a5-a2de-b1369ce0889f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f976a69-7849-4de6-908e-eeac15c28686",
        "cursor": {
          "ref": "9823b297-cc9a-4431-a07c-6ddf3e22a6ea",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b2af9bee-2c16-4214-bce2-5184c00f88f7"
        },
        "item": {
          "id": "8f976a69-7849-4de6-908e-eeac15c28686",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "a9fb2c4e-7a80-4337-93c7-a438e977e3b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c31e380-7c19-4794-9c39-786b989974aa",
        "cursor": {
          "ref": "d00b784f-afb6-4900-9174-0235d0667aeb",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "1c7fcb43-922e-479f-8d80-ebe05f84382e"
        },
        "item": {
          "id": "9c31e380-7c19-4794-9c39-786b989974aa",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "0397a3af-39a3-4e0b-b40f-c48166019a04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96325d16-079c-41a6-b832-77f361f39a8c",
        "cursor": {
          "ref": "7c7b584a-7332-4970-8a68-0dd3d3ef8eb9",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "aa20696e-b088-4498-8dd9-8d49ee388464"
        },
        "item": {
          "id": "96325d16-079c-41a6-b832-77f361f39a8c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "35c96521-bec4-482d-9c93-f6113785904a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac8852d4-176c-495a-9d8b-947fe97b4471",
        "cursor": {
          "ref": "fe48cc99-6e23-4323-bd1b-904a1ebb9996",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "1e245774-8d83-4752-9a55-5e20f089c724"
        },
        "item": {
          "id": "ac8852d4-176c-495a-9d8b-947fe97b4471",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "24eb43f4-c0b4-4a1c-8837-1a54c3ee2e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7104b93c-6f01-4c45-82a8-c5371bd29cfc",
        "cursor": {
          "ref": "89c94430-9407-481f-b2b2-41f0c5bc6314",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "d20b6ea8-edb2-4271-a5f2-a7d7b21afd8c"
        },
        "item": {
          "id": "7104b93c-6f01-4c45-82a8-c5371bd29cfc",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "061326d9-be55-4019-ac03-d74bdfecb93b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67ffc2be-1ab5-4996-9545-89d5d7dde15d",
        "cursor": {
          "ref": "e50fd069-4d82-42aa-a9ff-0e693084155e",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "791153c3-a447-46f1-bf3a-4918297e9301"
        },
        "item": {
          "id": "67ffc2be-1ab5-4996-9545-89d5d7dde15d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "274c4f32-ed33-404d-afe2-37a8cb579339",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f255ec81-9c24-430f-8e13-0d1e5429a0c1",
        "cursor": {
          "ref": "5707584e-b05e-4ca7-bee7-4dcb500b68dd",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d117be28-c84b-4de0-9b80-ce6b7d0354f6"
        },
        "item": {
          "id": "f255ec81-9c24-430f-8e13-0d1e5429a0c1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "eb59345d-3194-4cc9-9978-45f7a6d790e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91523cb3-c362-4d8b-adf7-c889227eef20",
        "cursor": {
          "ref": "db5cf22c-5331-4b86-8074-aaaf1573d125",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0c2a9639-d64c-45a4-bf52-c6c986aafa3f"
        },
        "item": {
          "id": "91523cb3-c362-4d8b-adf7-c889227eef20",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "9a70d877-1089-47f7-9072-ecd746878337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4300073a-6435-4e0c-9bcc-d617d0beb4f1",
        "cursor": {
          "ref": "8a2f911f-cf68-4738-9c7a-409f760b74e5",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "c4d99ac6-bd40-4fa3-b0bb-f8d2c366c4cf"
        },
        "item": {
          "id": "4300073a-6435-4e0c-9bcc-d617d0beb4f1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "bfa3329d-a6d0-4a7e-8174-53de9b1066ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b66db58-3890-4392-9cdf-83290c6c5ad9",
        "cursor": {
          "ref": "89036932-6bed-48a3-9cca-18abea2b1997",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "1f09747b-aa2c-4044-8e14-4603b162903b"
        },
        "item": {
          "id": "4b66db58-3890-4392-9cdf-83290c6c5ad9",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1e3b21fe-f557-4dce-9920-b7c4a38e9483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e163f77-8bad-4d14-878d-7e050e2f68ec",
        "cursor": {
          "ref": "bdc10281-9cc8-4571-b5ab-53ff0373d26e",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "312179dd-23cf-40da-a6a5-cc516735df67"
        },
        "item": {
          "id": "1e163f77-8bad-4d14-878d-7e050e2f68ec",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "8abdc75b-3062-4131-9ead-8cf5dbbc94b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46ca41d5-0ab3-4395-bfa9-152dba67c014",
        "cursor": {
          "ref": "336a6c2b-140f-4df8-a0b1-ed683cae57f9",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "d050b23b-deb2-4257-ae57-93d159e206e5"
        },
        "item": {
          "id": "46ca41d5-0ab3-4395-bfa9-152dba67c014",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "8683580f-f677-4ae8-93fd-216209fc2afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f029b4b-042b-4cae-8940-60af5f470973",
        "cursor": {
          "ref": "fa79effa-aa91-4372-950e-d60b729a55cb",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "3bcd72f1-7bac-473d-ad1a-1b171facc9d4"
        },
        "item": {
          "id": "0f029b4b-042b-4cae-8940-60af5f470973",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "30d2cc59-e714-4be4-af39-c9bdaa50f6aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31672ece-a01e-4119-a01c-734f4cfbe4d5",
        "cursor": {
          "ref": "66e95468-9cd2-4965-93e4-11a76ec7ff82",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "45c7de45-815d-4224-a4a0-83117d8ca578"
        },
        "item": {
          "id": "31672ece-a01e-4119-a01c-734f4cfbe4d5",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "59068091-0000-4619-a79d-cd2169f2757d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd497f73-9f37-418d-b536-f68fc7f91107",
        "cursor": {
          "ref": "73afa07a-1ff6-47c3-a9e3-4d4f21b210f3",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "e9486239-eae3-4800-8f97-b91d4a221a63"
        },
        "item": {
          "id": "cd497f73-9f37-418d-b536-f68fc7f91107",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "8edc4666-cc00-4f09-b2cd-6eaef4bfee9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "263ff0f5-f88c-489b-b406-981ab10d7123",
        "cursor": {
          "ref": "2a84e780-88c8-4e88-b584-7648ebfabe9a",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e91fb988-6e0b-4c47-bc92-b9f55e02868f"
        },
        "item": {
          "id": "263ff0f5-f88c-489b-b406-981ab10d7123",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "6dbc51dc-8a87-42b2-98e8-f1be48fce270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f1a51ef-483a-4b40-a819-c62727e13bd6",
        "cursor": {
          "ref": "254b07c9-9add-4d0f-912c-9bba6c6d4aaf",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "4f03d1db-bc42-4ad7-b4d2-6c6bad4e60ae"
        },
        "item": {
          "id": "4f1a51ef-483a-4b40-a819-c62727e13bd6",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "3e8d50ea-a9bf-4f23-b34c-dbe7720fd3c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d8ae87-0ae4-4a99-8b65-3bebb1d33e18",
        "cursor": {
          "ref": "d224a7bc-8145-41dc-b473-3436c40ad725",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "cdd7e915-73e4-4833-bb01-bf4fab76e977"
        },
        "item": {
          "id": "c7d8ae87-0ae4-4a99-8b65-3bebb1d33e18",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "54412112-8452-42a0-8514-91e3acee74f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af8e27d2-7da3-4aba-aa59-8df978555bf9",
        "cursor": {
          "ref": "1d43ab4f-4c4d-4547-aaa3-034c646d9204",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b74ca0d3-65ca-4ab6-a7e5-51d7cabfe804"
        },
        "item": {
          "id": "af8e27d2-7da3-4aba-aa59-8df978555bf9",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "6c734fb2-43cf-46c4-b7d5-4f02f79028ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d731c4a-479f-4c75-9d0b-529f3311002d",
        "cursor": {
          "ref": "5549e2da-b94c-43ab-8f56-31376a845455",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0a5915bc-6841-4336-94f9-8faf1d1520d1"
        },
        "item": {
          "id": "1d731c4a-479f-4c75-9d0b-529f3311002d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "176714fb-756f-4d74-82f8-5e850718f579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4565586-23df-475e-ac6b-a0b6d2f1474b",
        "cursor": {
          "ref": "6453308c-c004-43c4-b209-636a675abe7e",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "317c23ec-b440-4251-8d94-537789e34a68"
        },
        "item": {
          "id": "a4565586-23df-475e-ac6b-a0b6d2f1474b",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "d924c0a1-1d60-45d7-84fd-171dbf853dce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12752309-190c-4a37-8bed-739e61b0df3b",
        "cursor": {
          "ref": "23e0ce52-8130-425e-996b-c80b7638bea8",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "06c183af-a19f-4c09-bd0c-7b29a6d72b9f"
        },
        "item": {
          "id": "12752309-190c-4a37-8bed-739e61b0df3b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c9e295d9-aa45-460e-9965-722868e4c812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1429916c-0c05-45cb-a099-58735ebffe9d",
        "cursor": {
          "ref": "d55bdc14-c27c-45a2-b9e7-d2f000741d95",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "4951c503-87ee-4089-ab5e-cdcc75f54e1a"
        },
        "item": {
          "id": "1429916c-0c05-45cb-a099-58735ebffe9d",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a4909570-d102-4b76-9cab-0f3b63c53b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9c7bcc9-b6b3-4992-b57c-d65f36b253d1",
        "cursor": {
          "ref": "85f42169-f920-4f82-9600-1022b910958f",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "f89ebefe-2c3c-476a-83e9-04a3872bac41"
        },
        "item": {
          "id": "c9c7bcc9-b6b3-4992-b57c-d65f36b253d1",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "93d208a2-9a65-4593-8495-771c99d0b06e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2de15a8c-a62d-479e-b6ae-89efc897b8bc",
        "cursor": {
          "ref": "757c1ad7-3e83-462f-ba23-63ca7280f61d",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "48ded456-107d-4cd5-ac55-1e403954f287"
        },
        "item": {
          "id": "2de15a8c-a62d-479e-b6ae-89efc897b8bc",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "1dcdd716-5b69-430c-a814-63ac5c5f35ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8a7a69d-7502-4e0e-8331-6273a763cfa5",
        "cursor": {
          "ref": "2f35dd25-0b2b-4a41-9b67-9ea77249e22b",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f2085c55-4db5-4b26-99d3-1ba6dba54250"
        },
        "item": {
          "id": "b8a7a69d-7502-4e0e-8331-6273a763cfa5",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f8e76a57-d8c7-41e1-8a29-912579dba20e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b560a5c7-cc48-4148-8789-02335a7d80a9",
        "cursor": {
          "ref": "62a3a0d8-dabe-4f40-be03-59672f91ec07",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "d633c743-1bc3-46a9-a453-1d8b79bd6102"
        },
        "item": {
          "id": "b560a5c7-cc48-4148-8789-02335a7d80a9",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "6fd6fd2c-d35b-457d-96be-4ccee2709ccd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7859a4a1-e214-4863-8fd7-eece0acf69eb",
        "cursor": {
          "ref": "ff8c735c-dbe4-4103-9d0e-a7c797f5ba56",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "9167bb0f-313f-4ee7-8840-1d195d5024b0"
        },
        "item": {
          "id": "7859a4a1-e214-4863-8fd7-eece0acf69eb",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "78236ebc-1ca6-457a-92ad-f6f103c18e92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85101e72-0abd-4fc6-89c8-7cc59b6dd03f",
        "cursor": {
          "ref": "37e4ee03-1ed0-4ad9-b1ce-bca45eee3d49",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5d314a47-5c5f-4598-a894-c51f64f8ebe9"
        },
        "item": {
          "id": "85101e72-0abd-4fc6-89c8-7cc59b6dd03f",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "98de6d55-7f40-4e78-9ea9-40cd07c5421d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea35a2f-8910-403d-9460-ae7c38144dd6",
        "cursor": {
          "ref": "0540cec8-f092-4181-89ae-c21f1aef4728",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "fae6f1e7-f7b8-489c-a070-4d34c29160a2"
        },
        "item": {
          "id": "0ea35a2f-8910-403d-9460-ae7c38144dd6",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "c5d042cc-f72b-4fa1-a599-da38c8fe2f7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "070847c5-fa78-4790-a4aa-ed420b73a4cd",
        "cursor": {
          "ref": "87c0c32f-3165-449f-aa36-e343fc804ef5",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "887e404c-60cb-4bcb-b8dd-c443ce047d41"
        },
        "item": {
          "id": "070847c5-fa78-4790-a4aa-ed420b73a4cd",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c2f50e6d-abfb-4dcc-b58f-98f17c8fcad9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "579a9add-9ef5-479b-9dd4-fa85f9399b4a",
        "cursor": {
          "ref": "4be2ea09-6b0e-46ae-b694-0dd555c7b013",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "e260e058-6570-4c55-9224-cee50e41278a"
        },
        "item": {
          "id": "579a9add-9ef5-479b-9dd4-fa85f9399b4a",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "494422d7-0bc4-4bad-9df3-f7f61d9a4ab8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e65143-e281-41bf-821f-d5e4022dc22d",
        "cursor": {
          "ref": "30fc38f0-9a71-459e-8d41-2fdceb39a912",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0060ab35-84b1-427d-93f5-28436ff683e8"
        },
        "item": {
          "id": "91e65143-e281-41bf-821f-d5e4022dc22d",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8f21589c-47f9-40ae-af90-934b53ebe5aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c2e7318-315f-45e7-bfbc-a945d092ba06",
        "cursor": {
          "ref": "19f421a5-8110-4f80-a69d-6bfc013880e2",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "f2c70f4b-1a44-45a1-8769-4658ff28a4d3"
        },
        "item": {
          "id": "6c2e7318-315f-45e7-bfbc-a945d092ba06",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "6cef78b8-a805-4c26-aa5a-5cb1ca3b229f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40eb185e-5c0b-497d-b41f-0dc546d67ce8",
        "cursor": {
          "ref": "f7d6eadf-3f4a-4814-8b37-672039088ebe",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "17e8285d-236a-4248-9445-51b4956cc097"
        },
        "item": {
          "id": "40eb185e-5c0b-497d-b41f-0dc546d67ce8",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "6be9a531-5137-4699-aa5d-d75e350f990f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e77b498-4405-45f2-91ee-baf8769a4570",
        "cursor": {
          "ref": "d4495690-faa2-4e08-a6fd-ce2fe8705160",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "af504b92-31e2-43ae-a480-71b9a3639e81"
        },
        "item": {
          "id": "2e77b498-4405-45f2-91ee-baf8769a4570",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "5f00f8f9-69a7-48d7-b6df-9d4c1b121de3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec79d8d6-cb4d-465b-9892-fe700a37989e",
        "cursor": {
          "ref": "197a8f80-0eeb-4d16-b9ee-1a77f4d23996",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "c0b5206c-b16b-4a5d-948c-1af5cdaac2bd"
        },
        "item": {
          "id": "ec79d8d6-cb4d-465b-9892-fe700a37989e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b469824f-933a-4220-8b2c-eb94108c72d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "150335b9-3d1b-4dc7-b3db-df658ca3e07e",
        "cursor": {
          "ref": "0d7064a3-e330-49ba-9209-9f1e93323a46",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "4a0846f5-f1c4-41cf-b5a5-7b5534dcca6c"
        },
        "item": {
          "id": "150335b9-3d1b-4dc7-b3db-df658ca3e07e",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "fae10439-bcb7-4152-af18-1daa0228ef08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcb6fb71-c255-4461-b0d7-97a50da3e58b",
        "cursor": {
          "ref": "44129e6f-b0f4-4340-863f-f52d57811daf",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "a5e3a639-27d0-4f11-be2c-e87b6fa773ec"
        },
        "item": {
          "id": "fcb6fb71-c255-4461-b0d7-97a50da3e58b",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "90811dd5-82c9-4b5e-9a4c-32a79f8598e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54f7d4f0-cc88-44db-800f-3b5d76e0c521",
        "cursor": {
          "ref": "382255dd-5a72-4ce7-8a3b-f91bdd5e1053",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d627692c-a5dc-4d08-a759-af7b8a2beb8b"
        },
        "item": {
          "id": "54f7d4f0-cc88-44db-800f-3b5d76e0c521",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "6902045b-f004-48fb-b666-a039edbfd059",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6338f93e-8c0c-4b8c-b847-eaaf4a5a89aa",
        "cursor": {
          "ref": "1442616e-5772-4796-bf82-ae0712902cd9",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "714b709c-cfd4-4af1-860f-3d3d4639f804"
        },
        "item": {
          "id": "6338f93e-8c0c-4b8c-b847-eaaf4a5a89aa",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ec6ef95d-f984-4a72-8328-a2b0f28c4a6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "6b5ceff6-1f82-4555-b79f-267fe4098e70",
        "cursor": {
          "ref": "676752be-42bd-43ac-a4dd-5de0c06c4245",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ad6c00a5-1a8c-49df-8205-cf17eae6c657"
        },
        "item": {
          "id": "6b5ceff6-1f82-4555-b79f-267fe4098e70",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "edfe491c-35a8-4250-be25-041a0cbf9d04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "a2579430-32f1-408f-9c5a-7b0e99b63db7",
        "cursor": {
          "ref": "f29d0b88-efb4-4521-ace4-48e053f56791",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "68bfb99b-663d-4e8e-8838-08714181b482"
        },
        "item": {
          "id": "a2579430-32f1-408f-9c5a-7b0e99b63db7",
          "name": "credentials_issue"
        },
        "response": {
          "id": "cd4c4766-81c8-4244-b1ce-5ea4bf8fa424",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "c860bafe-c57a-4600-b3f4-cafa31110c74",
        "cursor": {
          "ref": "dbd4cfa3-e7a0-4cca-a82c-c313a26cb51a",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "8cb89e5c-0dfc-49b9-8d1c-1b70cc503d2e"
        },
        "item": {
          "id": "c860bafe-c57a-4600-b3f4-cafa31110c74",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "38762e6b-86f1-4ef8-bbb4-2816e4077121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "97b472cd-57fd-4cd8-9c44-a6e4d167753a",
        "cursor": {
          "ref": "9bae89e8-9685-4034-95b0-337049017396",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "3688843f-3a14-4ca1-b3d5-d26def5604a8"
        },
        "item": {
          "id": "97b472cd-57fd-4cd8-9c44-a6e4d167753a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "8f3591c7-361a-4958-9323-229e29042452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "b7b99e5a-a469-44b0-86fa-915ee5966fa8",
        "cursor": {
          "ref": "3f461f71-f1e1-47ab-9f00-a877288ac7f1",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "704fcc8f-f8a8-4e74-b7cb-06b35c4d8d13"
        },
        "item": {
          "id": "b7b99e5a-a469-44b0-86fa-915ee5966fa8",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "fa65aef0-dfdd-4ae1-8075-d7cdd95c7936",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "1d7874aa-96f7-4cf8-b316-2e621e7df76b",
        "cursor": {
          "ref": "2648df2b-327f-48cb-b9f9-64502c4c34b0",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "92b89b55-784c-4071-9502-742687a72a5c"
        },
        "item": {
          "id": "1d7874aa-96f7-4cf8-b316-2e621e7df76b",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "79e36ffa-ca0f-417e-b2c1-fd4bcd1a1089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "35d4c7cd-e254-4561-9929-ac096ac8650f",
        "cursor": {
          "ref": "d00a1b0a-45bc-4814-a7c8-03f5fc095e41",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "9895dca7-80a0-4520-86b6-a12b336d7f35"
        },
        "item": {
          "id": "35d4c7cd-e254-4561-9929-ac096ac8650f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "66f9c632-69f4-4a17-a159-bd2ec79a6405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35d4c7cd-e254-4561-9929-ac096ac8650f",
        "cursor": {
          "ref": "d00a1b0a-45bc-4814-a7c8-03f5fc095e41",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "9895dca7-80a0-4520-86b6-a12b336d7f35"
        },
        "item": {
          "id": "35d4c7cd-e254-4561-9929-ac096ac8650f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "66f9c632-69f4-4a17-a159-bd2ec79a6405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1fa8164-931f-402c-9ff2-a2d9c99be194",
        "cursor": {
          "ref": "62de7705-9496-4833-a3a6-ebb6a7144c79",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "0fdb34a7-9e2e-4c2e-9e82-2fc979bb6a4a"
        },
        "item": {
          "id": "b1fa8164-931f-402c-9ff2-a2d9c99be194",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "21c1494b-662c-45c9-92d6-79196c4016f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c72fa633-3706-40e1-832e-d75442771b4d",
        "cursor": {
          "ref": "c2c9ce10-8940-433e-b83a-e5da6cd12934",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "eb38cdcc-b4da-45d5-98dc-faee6cc83c14"
        },
        "item": {
          "id": "c72fa633-3706-40e1-832e-d75442771b4d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "88f39db1-02b4-4c88-b572-1235859072a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29d7f8d8-63bb-46c3-990d-2a5eec507598",
        "cursor": {
          "ref": "11842623-33a1-450e-a7ad-4ef27ca23c0b",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "826da595-42cc-47df-a485-fc54effdb417"
        },
        "item": {
          "id": "29d7f8d8-63bb-46c3-990d-2a5eec507598",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "7e7400c2-8ef3-4543-aa6a-1d961df5a58d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58501114-2f60-4329-beed-6e2e4c6b29b7",
        "cursor": {
          "ref": "e6daf182-e7c9-447d-9562-73fc1b538586",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "50377e53-be80-47c9-ac01-6a204233ea6a"
        },
        "item": {
          "id": "58501114-2f60-4329-beed-6e2e4c6b29b7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9d16c15b-7e31-4672-976b-e33694525e55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6b79cb2-a255-4d29-837c-bdd862535cc1",
        "cursor": {
          "ref": "b7be2438-205a-49d1-b4ae-aff2bf3a3d6f",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "a5ea7b22-79ed-44de-8d24-192389a8e455"
        },
        "item": {
          "id": "f6b79cb2-a255-4d29-837c-bdd862535cc1",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "2ab6d675-9b4f-49cd-a0e0-d49e90366ba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cf0639d-4277-4f3a-bb0a-22fa5f04f0d6",
        "cursor": {
          "ref": "d199491d-a647-4e63-908f-bd2248f207d7",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e966cb56-232e-4bcd-a9ca-50b271ada7da"
        },
        "item": {
          "id": "1cf0639d-4277-4f3a-bb0a-22fa5f04f0d6",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d7490824-6b76-4b0d-b213-4fb6bb40a0f5",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "f01f02e5-97de-4f2f-9ea7-39ba4072a404",
        "cursor": {
          "ref": "570c2d01-a60d-4d92-b8a4-544656719cce",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "bb75fc45-da0f-49a9-a62d-784af0ab9e2d"
        },
        "item": {
          "id": "f01f02e5-97de-4f2f-9ea7-39ba4072a404",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b2cccb0a-63cb-4af6-a063-4c496e618e81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "117329b4-9ed6-40f6-a419-480d45bbb243",
        "cursor": {
          "ref": "428ad4fa-1cd3-4ef5-b6ce-3f5c9ff5848e",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f4b6c7d3-476d-419e-adff-25bca667dc87"
        },
        "item": {
          "id": "117329b4-9ed6-40f6-a419-480d45bbb243",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "5fc658b6-1a18-4de6-a334-3f4d2e06e7a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55f76ddf-f006-4b77-945c-986f66c6467f",
        "cursor": {
          "ref": "8071d864-8fc3-49df-bd00-2ebd18785351",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "8d7082b6-7140-4f6f-85fc-a852a6ba9957"
        },
        "item": {
          "id": "55f76ddf-f006-4b77-945c-986f66c6467f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "08d001d6-bff4-458c-8dd1-17771fff6ff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e98187b-e433-4034-bc01-af2e7b732601",
        "cursor": {
          "ref": "5a4d31a9-1cdf-41f5-8d7d-2ee195e8338f",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "cb5329d1-2d99-4472-8536-0ebc2bb0d8cc"
        },
        "item": {
          "id": "8e98187b-e433-4034-bc01-af2e7b732601",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "29b5233e-a394-4203-96e9-6ddf2b2bc7c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6155e5d0-9244-4e8a-9f80-c5a2e8c7d6e4",
        "cursor": {
          "ref": "ad0f0624-5198-4a01-a94f-0f5882c64448",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "4426e185-6e80-4795-904f-63c508893e2a"
        },
        "item": {
          "id": "6155e5d0-9244-4e8a-9f80-c5a2e8c7d6e4",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "7df77d33-83c8-435e-8dd3-1a4e197a1a3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4409bb6-7525-48f2-ad20-8fd888c9e654",
        "cursor": {
          "ref": "7674102b-0f34-4455-b115-550651312935",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "a12102f5-5f3a-45b2-8536-a5838ae6dae7"
        },
        "item": {
          "id": "f4409bb6-7525-48f2-ad20-8fd888c9e654",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1aea2257-b4ef-4284-83e5-1d42a7aca9c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1184f195-ae76-4897-9c68-ed622f769453",
        "cursor": {
          "ref": "1eef8bf5-03e8-4a4f-9fd5-269c32dad7b7",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b9bffd2b-82b2-4258-9e01-f2de4acd9c83"
        },
        "item": {
          "id": "1184f195-ae76-4897-9c68-ed622f769453",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "077e8477-7706-46e5-a96c-dbaba588b7ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "341b2860-bc4b-40cb-97d3-3752a211289b",
        "cursor": {
          "ref": "a756710b-5b59-4574-9fef-ab1a51443a9b",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e16e4da8-537f-4d41-83fe-3a09524144a2"
        },
        "item": {
          "id": "341b2860-bc4b-40cb-97d3-3752a211289b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3cc42826-02b3-4b32-b0bd-270f3ea57373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2e0b242-d92c-4574-bd86-51f3434ff598",
        "cursor": {
          "ref": "84bfd5b2-e914-4ef6-838c-9a97c04fbbfe",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "f315f041-17c0-4bcd-b06f-115bd32265a3"
        },
        "item": {
          "id": "f2e0b242-d92c-4574-bd86-51f3434ff598",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c9c9cc57-489d-4b7d-b0ef-2f255f758ef4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb7a2c19-d07a-47d3-a9b9-309cd24713f5",
        "cursor": {
          "ref": "89a154d9-d8c2-4c6f-8b1f-23923fc12f8c",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "d3ead604-07e5-48cf-ac05-384459c94f3d"
        },
        "item": {
          "id": "bb7a2c19-d07a-47d3-a9b9-309cd24713f5",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c0a84aa8-2858-4794-9a69-bfb7c99af5cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43d3043e-d362-4dcf-b1ff-266713ae7b11",
        "cursor": {
          "ref": "30725801-84a8-41da-97d5-3fcea7fabc07",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "e558c363-48b8-4ed8-b37a-5f9db35a8846"
        },
        "item": {
          "id": "43d3043e-d362-4dcf-b1ff-266713ae7b11",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ef26a690-2cd9-4012-beb3-6ce0563e6c68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff39a5b3-6e31-404a-9741-56647353dbdc",
        "cursor": {
          "ref": "f7277fb5-86d3-4e22-a01f-db3f1b3cb1cc",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8cf646e7-504f-4b08-a665-ad4faa4e3eb9"
        },
        "item": {
          "id": "ff39a5b3-6e31-404a-9741-56647353dbdc",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "72ae9325-9d68-4c85-b8d0-eb3b8f5c296e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e40413-3abf-421d-a726-33e759e2c2fe",
        "cursor": {
          "ref": "01506832-619a-4873-83a5-296babdf4102",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "06005715-93ed-44ef-8ea4-e075669889ac"
        },
        "item": {
          "id": "78e40413-3abf-421d-a726-33e759e2c2fe",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9309e121-e78b-4eb5-a05e-dcf9ab98012b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "843611a3-ed68-4126-b4ed-d2c76c8c06a7",
        "cursor": {
          "ref": "efb05191-18c6-4baf-be60-9f204970cca2",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "fd0deb27-7d21-4637-b023-70dc83eaf303"
        },
        "item": {
          "id": "843611a3-ed68-4126-b4ed-d2c76c8c06a7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e290d7a0-d451-4c45-87b8-a129b2d0d64d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2673b12-7473-4d17-bd87-6160ad67cce4",
        "cursor": {
          "ref": "e60d4e91-ffc5-40cd-a0f0-8921e665c496",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "7121d0d2-9388-4a73-85d7-c26935148975"
        },
        "item": {
          "id": "b2673b12-7473-4d17-bd87-6160ad67cce4",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "daa052be-4f58-46b4-80dd-54541aff810d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f602461-6808-43a2-8c1b-0190f1383bb4",
        "cursor": {
          "ref": "18dfca20-76a1-49ec-8921-5b8e8091d201",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "26d8d818-a327-4ce2-bde0-21b23d132bc8"
        },
        "item": {
          "id": "1f602461-6808-43a2-8c1b-0190f1383bb4",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6cc5c306-f58c-4fb7-a9b1-d5ca126b7489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1165705-1a1f-46b0-a151-594e515ec301",
        "cursor": {
          "ref": "9bf1ea0a-6033-4b15-8d8b-dc1d88bbd958",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "ad8224ca-f333-476c-81b9-c27deb7ae0d5"
        },
        "item": {
          "id": "d1165705-1a1f-46b0-a151-594e515ec301",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "75685897-3e0a-4bad-8a9f-8d364bdcc380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c24261a9-a988-483e-81d1-c5ad9c458df8",
        "cursor": {
          "ref": "14914f7b-53f0-4e8c-a601-056669a768d3",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "2386e09f-dd5d-4939-955d-bfbcc848ca59"
        },
        "item": {
          "id": "c24261a9-a988-483e-81d1-c5ad9c458df8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b7e318c4-c74e-4444-a222-49018f63ce67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fad1a24e-8f03-4cce-b1bd-2e4ccb854d32",
        "cursor": {
          "ref": "9073fb72-cf22-4a9d-b200-292b81b88ff9",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "82fb893a-45c6-49ed-8631-25d335ced38a"
        },
        "item": {
          "id": "fad1a24e-8f03-4cce-b1bd-2e4ccb854d32",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "21d92374-c549-484a-9fc7-2be4410c0dc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef29565f-df55-4a2e-b275-13668226684e",
        "cursor": {
          "ref": "5fb420c3-b402-415b-a075-3c03c7b07151",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "5e6322a6-3e84-44eb-b898-19dc105b4fd1"
        },
        "item": {
          "id": "ef29565f-df55-4a2e-b275-13668226684e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f5ea2b46-930e-430d-9703-27ce22441bf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cf84e53-a897-47ac-9a08-46afeee7ede1",
        "cursor": {
          "ref": "7273f46d-576c-4002-9cde-90d68c9b249a",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ff266208-feb9-4b8a-93bc-641c47058a07"
        },
        "item": {
          "id": "2cf84e53-a897-47ac-9a08-46afeee7ede1",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "98d53f53-1e62-41e3-b9de-167a4166e7fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95364c9d-3030-4ee4-bd5b-3ff0a4a11964",
        "cursor": {
          "ref": "2d540430-a421-429c-80b5-29da49c8c282",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "bc79072b-3eff-4d15-b96d-2718468dd92f"
        },
        "item": {
          "id": "95364c9d-3030-4ee4-bd5b-3ff0a4a11964",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "214aaafa-81cc-4ce6-afb0-937ab0649cc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "027f1abf-d901-4ae1-91a1-ca21afe94308",
        "cursor": {
          "ref": "3063c1b8-04fd-4de2-b992-14ac6857001e",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "97ae6d0f-6f7d-47b1-96cd-c5a4b23d06e8"
        },
        "item": {
          "id": "027f1abf-d901-4ae1-91a1-ca21afe94308",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7911910a-e065-444d-8ea0-8640f8b42cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd079ccd-9631-4417-bc9e-0ebb3ced7207",
        "cursor": {
          "ref": "dd60f52f-db15-4604-9904-9e9d6d49ae07",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "99ace759-e136-41f7-9961-8b755bfa263a"
        },
        "item": {
          "id": "bd079ccd-9631-4417-bc9e-0ebb3ced7207",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9c7020da-dd53-489f-88f7-2bdea0571646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdb5c44e-07bf-40e9-9e27-e3bb58c11174",
        "cursor": {
          "ref": "b911b688-6c37-4c4c-a9ca-02e74072c89c",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "1a3fe9b3-ec15-4c29-a320-100d7b1ea59c"
        },
        "item": {
          "id": "cdb5c44e-07bf-40e9-9e27-e3bb58c11174",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "15ba708c-832b-4a34-a01f-d40e15dc7d97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8b53ebb-68ab-4bda-a4e4-7692415ef293",
        "cursor": {
          "ref": "1ec8b4d9-941b-41b9-8776-461189d999bc",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "518ff495-dfb2-4022-af4c-317ed24acc8d"
        },
        "item": {
          "id": "f8b53ebb-68ab-4bda-a4e4-7692415ef293",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "09018f9c-ad9e-424e-a2ba-c5a244df9fe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "df611d66-344b-4810-bd7c-949725e2f65a",
        "cursor": {
          "ref": "1aceee5b-7845-41f2-8fd0-adff90a39187",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "1804f693-be01-40b8-a986-07a26aad3d1d"
        },
        "item": {
          "id": "df611d66-344b-4810-bd7c-949725e2f65a",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "84447e07-4188-412e-9ae9-fab9e5e5fab8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "4829b592-6718-484d-8b86-f321729598ac",
        "cursor": {
          "ref": "613dd2dd-bdac-4f8c-a197-1ae3b8191f37",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2ead49e9-d82d-4538-808d-a98e852449fd"
        },
        "item": {
          "id": "4829b592-6718-484d-8b86-f321729598ac",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "911d4caa-6486-448b-8147-11b7a0bf9c26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4829b592-6718-484d-8b86-f321729598ac",
        "cursor": {
          "ref": "613dd2dd-bdac-4f8c-a197-1ae3b8191f37",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2ead49e9-d82d-4538-808d-a98e852449fd"
        },
        "item": {
          "id": "4829b592-6718-484d-8b86-f321729598ac",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "911d4caa-6486-448b-8147-11b7a0bf9c26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fba5ad47-ed5a-43f0-b117-7f2421550963",
        "cursor": {
          "ref": "713fdef2-329b-4c30-98ed-6daaa236f86c",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "3ec6e082-9d70-4c8d-81af-8278a33c8663"
        },
        "item": {
          "id": "fba5ad47-ed5a-43f0-b117-7f2421550963",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "ce1a2ab7-a2bb-4a21-827c-ca37251afc42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f6bde89-4ca8-491d-988a-dda90e8e3426",
        "cursor": {
          "ref": "c606c301-af09-487c-add3-cb92c7a387fa",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "a97df030-8818-474f-8941-bf9b5be21ce5"
        },
        "item": {
          "id": "6f6bde89-4ca8-491d-988a-dda90e8e3426",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "56867723-3c44-455a-8d13-044cefddf0d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b80e548b-7333-4924-9fb7-4645381ac99a",
        "cursor": {
          "ref": "4cb66267-63c3-47f5-98fe-40f0ff1cbf88",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "b7ba137b-e30e-452b-a8dc-5b891ccc74b0"
        },
        "item": {
          "id": "b80e548b-7333-4924-9fb7-4645381ac99a",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c8ea7ba4-3938-480c-87fe-dab35970222c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc97580a-87eb-4386-9f38-93f22e3faef3",
        "cursor": {
          "ref": "9301296d-ccc9-40e0-a6f4-9c35c4b5d94d",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "54c9f185-75c8-4493-a2cb-60b7f26c0fc7"
        },
        "item": {
          "id": "bc97580a-87eb-4386-9f38-93f22e3faef3",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "fe364286-1aec-444c-9882-ca320c41b6ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e14938b1-ce4b-4cca-8eb2-024a4ec691de",
        "cursor": {
          "ref": "677f8959-8255-4a72-a54e-a8d4cff03156",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "f5a2ee6d-65cd-450f-9202-bbe120366bcf"
        },
        "item": {
          "id": "e14938b1-ce4b-4cca-8eb2-024a4ec691de",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "ee723c12-7da2-47d6-8f30-b0abf7142058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cce9280b-eb9f-4cd9-8a41-0eb550e97c09",
        "cursor": {
          "ref": "67efb980-b4f1-4626-85dd-142ac16beef5",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "c843f6fd-6a5d-4bd8-955b-b5f46b9676bb"
        },
        "item": {
          "id": "cce9280b-eb9f-4cd9-8a41-0eb550e97c09",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "b948ea11-a584-4d44-a41d-cfb2bbfc230b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64eec23c-faff-4658-b1e7-49b284ffa2b1",
        "cursor": {
          "ref": "1596a0d7-e7b4-45f9-9b0d-6d4329f8d904",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "24523b0b-4523-46cc-9d2e-50546e0411ee"
        },
        "item": {
          "id": "64eec23c-faff-4658-b1e7-49b284ffa2b1",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "610b1228-93a1-4208-b0c3-8225dc859524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9df5781f-d342-49fa-a4fe-5e63ebfb7c7e",
        "cursor": {
          "ref": "c8dd1928-a454-44ed-9e82-b5b0c996e750",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "7c3a864d-9a20-4e08-aeb7-efcb0cb12bcf"
        },
        "item": {
          "id": "9df5781f-d342-49fa-a4fe-5e63ebfb7c7e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "7c565fa7-42dc-40c4-96df-44c53b036687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ca8e553-63eb-4cf9-bf51-d7d23f7534e8",
        "cursor": {
          "ref": "30712cd0-4ae0-49fa-be4e-e5966fc608fd",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "5eb05254-6a2d-41fd-895b-19a889f66e0f"
        },
        "item": {
          "id": "4ca8e553-63eb-4cf9-bf51-d7d23f7534e8",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "948845bc-33b9-4663-b9bf-097e3af30a2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52d8fc3f-6e02-4e54-b8e1-6e0c66239010",
        "cursor": {
          "ref": "cf529e4b-6a67-4707-a54c-ff8f737ddb7c",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "4d28310d-4209-42b3-8d27-cc995317d472"
        },
        "item": {
          "id": "52d8fc3f-6e02-4e54-b8e1-6e0c66239010",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "9837ac43-1a61-4fb9-8139-c2d53e67fc88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6578849-38fd-4bfe-91c6-868e39f23ccd",
        "cursor": {
          "ref": "59e77eb8-b000-47f5-b3b7-a1fc2c3c906f",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "e15281bc-c04e-4502-b293-a60ffe78e485"
        },
        "item": {
          "id": "d6578849-38fd-4bfe-91c6-868e39f23ccd",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "2151f640-8ace-43c4-b6a1-b7eba8f292c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fffec224-dac3-4234-98ac-beb78664654f",
        "cursor": {
          "ref": "43f48f8d-302e-43e5-8104-96a8fa3305a0",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f224012a-cefe-4e29-b7f1-5f81188052e2"
        },
        "item": {
          "id": "fffec224-dac3-4234-98ac-beb78664654f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d1b50f66-35a7-4960-abfb-0829577c2a2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "981701dc-d31c-49f8-aa89-2e7d84790c12",
        "cursor": {
          "ref": "fe83c133-cfdc-435a-a803-35a5ac35e53c",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "081b204e-0255-4b23-8070-b5b1b5e6ee55"
        },
        "item": {
          "id": "981701dc-d31c-49f8-aa89-2e7d84790c12",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "0e57634b-0216-4d2c-95c7-597f284ee1bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67324e38-b8a3-4929-9fc0-0f23c597922f",
        "cursor": {
          "ref": "8c9427e1-c5db-4dd5-aaf7-710dcccdacb3",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "71076d86-62a8-4740-b66f-f58d71c57a8d"
        },
        "item": {
          "id": "67324e38-b8a3-4929-9fc0-0f23c597922f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "12fa18eb-5b1f-491b-b810-18d01b78261c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c0e98a5-5108-4eb1-9fb9-cc91a8aae24d",
        "cursor": {
          "ref": "528cbfef-deb1-4e7a-8807-83265e048848",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "964042cb-3ad1-41c9-9afd-d3894f5e3607"
        },
        "item": {
          "id": "7c0e98a5-5108-4eb1-9fb9-cc91a8aae24d",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f853f81f-dc14-4db1-8673-fdca18b291e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "134bfd9c-91f5-4a14-b7b2-9728426248d8",
        "cursor": {
          "ref": "b8300995-6126-4609-9648-fd0a9dac531b",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b026739a-975e-4282-b8ac-5fbfbab67794"
        },
        "item": {
          "id": "134bfd9c-91f5-4a14-b7b2-9728426248d8",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "b3e678c2-7956-4d9d-a719-e874ba6f4bab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b91b0a65-8978-4efe-bacb-502eece3eb7f",
        "cursor": {
          "ref": "dc95c79c-2dfe-4d9f-b01c-9d10cf84fcdf",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "0e974d33-a14e-4602-816a-777c59bb0cbb"
        },
        "item": {
          "id": "b91b0a65-8978-4efe-bacb-502eece3eb7f",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "0bcc6c23-080a-4762-a5f4-715eeadc25e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f41466a7-bd7b-4b68-852d-64d88dae73df",
        "cursor": {
          "ref": "f5cd40bd-9a44-4bcc-bf93-9345aeebe47f",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "6d59e241-6de4-448c-8301-e74d2f8a3fba"
        },
        "item": {
          "id": "f41466a7-bd7b-4b68-852d-64d88dae73df",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "5ee5378c-1334-4bf8-82d1-b56230fb09ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25403aba-f31e-428f-be20-e73c66bdccb2",
        "cursor": {
          "ref": "0c740b5c-dcaa-4f68-8750-9b0615a9c80f",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d74c46e0-2bd7-45ad-826d-ab7a23c089f1"
        },
        "item": {
          "id": "25403aba-f31e-428f-be20-e73c66bdccb2",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "37574e59-308c-44b1-ad76-b131a0a4a743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c6cb6bc-3bca-42ef-b42d-a3d33fa0b8d2",
        "cursor": {
          "ref": "e2f596c4-dee5-4392-bbb1-efee21bb6afc",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "7e58a3a0-4090-43f1-bc08-abe5bc09dd62"
        },
        "item": {
          "id": "2c6cb6bc-3bca-42ef-b42d-a3d33fa0b8d2",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "7d96a225-8699-44a4-bdc0-26663d12c7b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7cfc57c-9460-4f42-8ce9-8bc9bd4b55a5",
        "cursor": {
          "ref": "81f5c154-7795-4a3b-87b3-017c756bc05e",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b84b7021-0f7f-4524-90f4-d365b856e647"
        },
        "item": {
          "id": "a7cfc57c-9460-4f42-8ce9-8bc9bd4b55a5",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "5dc39869-9c12-4fe4-92d3-968b959ea002",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb835154-6ed4-4d7e-8836-58650e4a5567",
        "cursor": {
          "ref": "40cbdd3a-cbf3-4c1c-8747-f386ed9a6ce7",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "15b0f4f3-6845-48a8-8bba-5659212f83c3"
        },
        "item": {
          "id": "cb835154-6ed4-4d7e-8836-58650e4a5567",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "bb551ddc-9fb3-4a22-9f73-e7d96826b44d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec4dc333-5647-4369-8ce6-a714d5173a54",
        "cursor": {
          "ref": "005fcac9-2bde-4845-9e27-7db4cd73ff82",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "2eb4e628-37df-4ede-b116-fc0fb935ca88"
        },
        "item": {
          "id": "ec4dc333-5647-4369-8ce6-a714d5173a54",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "7941e196-fca4-49ca-b476-cc1cc507b32c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71a4ee67-6dcf-4eca-ba01-d2dd72b2490a",
        "cursor": {
          "ref": "c234d9ca-40a5-437f-8f6b-79c8719c3eeb",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "1de109f5-7124-41c6-858b-268856652e60"
        },
        "item": {
          "id": "71a4ee67-6dcf-4eca-ba01-d2dd72b2490a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "91dfde26-0a81-413e-b046-3ef875af9766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feeea3ab-ede1-4893-b8f3-39d982a9d1b3",
        "cursor": {
          "ref": "23541fe9-81f9-47db-b01e-47d40441d343",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f155667f-fb54-4abd-be81-0ba60cc51eee"
        },
        "item": {
          "id": "feeea3ab-ede1-4893-b8f3-39d982a9d1b3",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f88e3afe-9fe5-4039-a015-f13ff6b359a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd5ddc2b-2adf-4a6b-ae64-2a6a9055415c",
        "cursor": {
          "ref": "f98aefd4-bd7e-404b-a28f-ea7fcbbc4271",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "346c9c1b-8057-48ef-b364-6a6220f50b93"
        },
        "item": {
          "id": "fd5ddc2b-2adf-4a6b-ae64-2a6a9055415c",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "d3422050-9890-449a-952d-4d089169123a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d063fd4e-12bb-466d-8f0e-05b799f80129",
        "cursor": {
          "ref": "6ece2550-c24e-4e55-ad2e-836b89b16afe",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "de8fda96-28a4-4401-9e01-d5b38cc37999"
        },
        "item": {
          "id": "d063fd4e-12bb-466d-8f0e-05b799f80129",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "b836df53-70c0-4564-9ded-be18dd876bb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "500fd6fb-8673-4e89-90e9-e211b5ec1f73",
        "cursor": {
          "ref": "4809d73a-014e-415e-90c8-d5fc1439c5aa",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "0ccd8a85-a346-4329-984b-dfc1a84c4987"
        },
        "item": {
          "id": "500fd6fb-8673-4e89-90e9-e211b5ec1f73",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "3baa87e8-6ae6-436a-a7f7-850a01dd666f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cbb5c09-c05e-4e49-a67a-e734eedaecac",
        "cursor": {
          "ref": "3780e46b-a785-442d-ac9b-a7748813fe56",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "5560a814-f35d-4506-aec9-6cf1f0a971a2"
        },
        "item": {
          "id": "5cbb5c09-c05e-4e49-a67a-e734eedaecac",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "d4eb25b4-c098-4888-a591-29914cc0828c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5e7658c-f285-4b1a-b60b-ef7d8bf6add1",
        "cursor": {
          "ref": "55e7878c-cf78-46d5-92d7-c7266dcb6d9d",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "8388ba5d-8949-4637-b7f4-aa57608eaa01"
        },
        "item": {
          "id": "e5e7658c-f285-4b1a-b60b-ef7d8bf6add1",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "5141af60-5257-4f8a-9c0a-e900d8201b0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1af0489-909a-4cfd-ad04-e3dfc4d367c9",
        "cursor": {
          "ref": "d84903c5-484f-4c1d-9925-6d38abfc377b",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "9f81b2f1-6c8d-4de2-832b-3e415e365778"
        },
        "item": {
          "id": "c1af0489-909a-4cfd-ad04-e3dfc4d367c9",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "3fa4390d-53bd-4faa-9e69-4f3925f2ed37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8000584a-8684-4b0a-bc4e-29280784879e",
        "cursor": {
          "ref": "aaa1ed8c-435f-42ec-a6ae-b4d8ac7d2f76",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "7c466b8f-b45c-4561-9fca-5cdf95fae636"
        },
        "item": {
          "id": "8000584a-8684-4b0a-bc4e-29280784879e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "50cbd6e8-6694-4350-984e-0d76cf8a6485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4153e5f-98f6-4fc1-bf4e-4ef021ccf4c9",
        "cursor": {
          "ref": "ae5d25f4-ee8f-4fcb-9a1a-b6de23d7ee49",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "e2e0dd66-9f8d-42f8-9560-dde9be2fa510"
        },
        "item": {
          "id": "b4153e5f-98f6-4fc1-bf4e-4ef021ccf4c9",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "5b8170c6-55e0-4995-b10c-33958286c3f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75f314bd-2bf1-4bc9-addb-56f10629724b",
        "cursor": {
          "ref": "da14c45c-c80d-490e-a026-d47ef8a5769a",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "49293eec-7be2-45f9-b2ab-ae7d24bef173"
        },
        "item": {
          "id": "75f314bd-2bf1-4bc9-addb-56f10629724b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "ab91489b-71ed-4ae8-a982-f6665d8ae200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd832c11-c665-4ca8-8bb9-3f1812ea0503",
        "cursor": {
          "ref": "35049d24-6290-464e-a7db-c3794cd8bf50",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "4687ed30-f9b6-4cba-b5b6-d159cca76616"
        },
        "item": {
          "id": "bd832c11-c665-4ca8-8bb9-3f1812ea0503",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "25ccb83b-eda5-40a9-870e-770376638c29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5277e6f4-b958-4442-ab19-d32fea85eac4",
        "cursor": {
          "ref": "424cd56d-1feb-4c2b-a82d-1998cc8fd5d9",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "ac2b4816-113c-47b0-83ba-09ef6d8fba33"
        },
        "item": {
          "id": "5277e6f4-b958-4442-ab19-d32fea85eac4",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "2a7f1f5e-9e55-49b0-928c-392289c80bff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b6d0d73-4323-4411-b99e-8acb91d349c4",
        "cursor": {
          "ref": "f400f2b8-586d-4de6-8062-5acc861f40f6",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "bc46a80f-744e-416b-ab45-7c086cf3fba8"
        },
        "item": {
          "id": "4b6d0d73-4323-4411-b99e-8acb91d349c4",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "1e3386f7-301a-4e90-b7fb-ee87d5148106",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c19a1e1d-64df-4875-96fd-221764e064a8",
        "cursor": {
          "ref": "094d09ae-1679-48fd-b548-47646871cd43",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "1666e269-1fa5-401e-88b2-eee512da1193"
        },
        "item": {
          "id": "c19a1e1d-64df-4875-96fd-221764e064a8",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "789de73f-e4d5-48ea-82a1-d472b34dafa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa70270-65c4-4021-b73d-451b80aef74c",
        "cursor": {
          "ref": "b21c8252-c139-4e42-a8d7-00ce72e897c4",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "0b5d89b9-ae6a-4fbf-9cc3-28a55cb8fded"
        },
        "item": {
          "id": "3fa70270-65c4-4021-b73d-451b80aef74c",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "978a6aaf-82c9-4a27-9be8-afeb3bdfe27c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e12d0884-7d49-44e6-88c4-c2a50130dee3",
        "cursor": {
          "ref": "e35e647b-d911-45f6-ac7f-3be3adbfee22",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "232fb585-2154-42ac-8f65-3d7479eca379"
        },
        "item": {
          "id": "e12d0884-7d49-44e6-88c4-c2a50130dee3",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a6657e42-53a2-47f6-995c-becd860e20bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10292969-8d84-4291-a425-a5573c1dca21",
        "cursor": {
          "ref": "1e2f3ff8-95da-4c59-b572-c50c6c9fc621",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "4a163656-d7f9-43ca-b24f-076beaf1a668"
        },
        "item": {
          "id": "10292969-8d84-4291-a425-a5573c1dca21",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "3ca4f4a9-e65c-4dda-ab98-bb1df4b60831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e78f305-681b-44e3-b00f-bfc821c90646",
        "cursor": {
          "ref": "09233ca1-a3aa-4d85-ac09-c5831e876fb5",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "455ceffe-bdd4-494d-a1ca-5c77010da129"
        },
        "item": {
          "id": "7e78f305-681b-44e3-b00f-bfc821c90646",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "fd658366-e533-437c-8ed7-4460828ae257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ead688d-61a2-463d-821a-b1607325358d",
        "cursor": {
          "ref": "8c4413c9-4f03-47e1-bcde-4fda9d311de0",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d3166f98-276f-4aee-b5d5-b3f78f4592a4"
        },
        "item": {
          "id": "7ead688d-61a2-463d-821a-b1607325358d",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ccb5dfa0-340a-4ef5-b63a-1edf0483b1bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae76bbea-52c6-45d7-9681-b6c1ecdbb0c9",
        "cursor": {
          "ref": "2a3587e9-e087-46d4-8240-402691374b21",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "991c4d23-1bc1-44d9-a94e-589404113a2d"
        },
        "item": {
          "id": "ae76bbea-52c6-45d7-9681-b6c1ecdbb0c9",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "d27ac8e1-9b1c-45e0-9e4f-2cf4a2bbddd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ea18cb2-3f1d-4afc-a474-2cbd5170b335",
        "cursor": {
          "ref": "b99039a8-266c-4709-91f1-82d3669eebe0",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "7c9ae7ea-c403-449b-92d7-848595fa78f7"
        },
        "item": {
          "id": "6ea18cb2-3f1d-4afc-a474-2cbd5170b335",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "7801534e-6f3a-4bd0-ac7d-4138944dd731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "613388d9-d9a2-48bf-be8b-72c65157b3f1",
        "cursor": {
          "ref": "89c30658-bb2b-482a-a191-1d4d31324fbe",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "e23107d2-b44d-4554-8280-8dbd0f6c04c8"
        },
        "item": {
          "id": "613388d9-d9a2-48bf-be8b-72c65157b3f1",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "e98e52e2-5c48-499a-a33b-bb77c481dc85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13ad23a3-ccfe-4a89-bf63-cd4d4d4c95ab",
        "cursor": {
          "ref": "4182164c-25b2-4de0-b52a-fa864efb5d83",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "a9cea56c-df90-4d8e-bd4d-a5eff833a007"
        },
        "item": {
          "id": "13ad23a3-ccfe-4a89-bf63-cd4d4d4c95ab",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "72b7d589-18e1-4190-b160-77a6d0eb8d21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d520ba-d31f-43ab-a010-4578afecaaac",
        "cursor": {
          "ref": "8e52cf22-94c3-4946-bdf2-f3ad700332db",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "37a1b8e0-2e47-4c2f-9439-63d16f89c0d4"
        },
        "item": {
          "id": "d1d520ba-d31f-43ab-a010-4578afecaaac",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b1dbbd67-82b4-4c18-9b2d-4f3557978611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "054a760b-3ae9-4a71-9b65-868dba9cc879",
        "cursor": {
          "ref": "641a7f2a-8b6a-4718-8c2b-b2ae4f4d83fe",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "42daede2-1dba-4c0b-8e70-e449edb7f97e"
        },
        "item": {
          "id": "054a760b-3ae9-4a71-9b65-868dba9cc879",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "8a57e200-20d4-46aa-bbbb-352bb9d9a4b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2960b5a6-ef74-4153-b857-0fd4681101bc",
        "cursor": {
          "ref": "a028441c-c0ac-4b09-9349-4a8d1b41d122",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "67238bc8-7519-4a53-bd63-770e97700e0a"
        },
        "item": {
          "id": "2960b5a6-ef74-4153-b857-0fd4681101bc",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "17cb28c9-b062-4657-ad5f-d4f1e546c9c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19e2bb62-a0aa-48a1-9e06-d4fd7a2ade54",
        "cursor": {
          "ref": "debf1b14-279b-4abf-ab72-c5a2b40e8e21",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f7418807-f601-40da-a8ed-495a5bd53173"
        },
        "item": {
          "id": "19e2bb62-a0aa-48a1-9e06-d4fd7a2ade54",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "0e07212d-c3c7-4784-8cdd-d382087b1a30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a12ddfa5-0e0a-4f9b-955b-2ac484f3f411",
        "cursor": {
          "ref": "5a20fa1e-47c0-4dd4-81d5-2d8f271f6877",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "1b6f9429-dbb0-4ca1-a8d7-b8400e978e35"
        },
        "item": {
          "id": "a12ddfa5-0e0a-4f9b-955b-2ac484f3f411",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "1fe8418e-986e-4fb8-9ada-9e47494888de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fea5b24c-052a-4d1a-a4bd-9be4b6e7cd25",
        "cursor": {
          "ref": "13134bf9-5904-4406-b8ae-0c8a124db123",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "d841f2e5-f3b7-4c2c-bc23-047f9e13d0fc"
        },
        "item": {
          "id": "fea5b24c-052a-4d1a-a4bd-9be4b6e7cd25",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f655f8da-9a98-4a85-b8d8-b07a3b4ca2e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97939421-7806-4550-8468-9738f7510d93",
        "cursor": {
          "ref": "c8b9a26c-39de-49fa-a0e5-ae4515ae99a7",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b0ee5c79-ef91-4d63-850e-1899da7477e8"
        },
        "item": {
          "id": "97939421-7806-4550-8468-9738f7510d93",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "804294f8-24ed-418f-bfbb-66e1140a4755",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83328d10-56c8-447b-b2cc-918aa285bc7c",
        "cursor": {
          "ref": "b6f2019c-6b7a-4043-a529-1ae197d958ea",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "2d8c9160-29b8-428b-aa99-c71335cbc119"
        },
        "item": {
          "id": "83328d10-56c8-447b-b2cc-918aa285bc7c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "44f9679e-e8ec-465d-a5c8-d2b22a3deacb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93ef46cc-902c-4670-8416-23e3f7c30a38",
        "cursor": {
          "ref": "d7cae2b9-c3b7-452a-a998-fd08d08190a6",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "61bd2ad6-7b8c-42c3-b458-305f3495ec05"
        },
        "item": {
          "id": "93ef46cc-902c-4670-8416-23e3f7c30a38",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "7049d979-a8e9-493f-87b1-adaf3a2ae3a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a08fe856-dc55-4263-8fea-28d875848d2d",
        "cursor": {
          "ref": "b62687f8-67f5-4571-a954-fa45a7db98cb",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "aa418866-f971-4c79-bc43-1d5cfe1e842e"
        },
        "item": {
          "id": "a08fe856-dc55-4263-8fea-28d875848d2d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "06fa9eec-617a-4573-a542-b4845a9ca9ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "386592e2-774a-4d76-9e83-9f26b26abc0d",
        "cursor": {
          "ref": "11fc85d0-91ef-4f89-9818-db3e03631547",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "fe0353be-05cf-4b13-83de-4589f136c612"
        },
        "item": {
          "id": "386592e2-774a-4d76-9e83-9f26b26abc0d",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "48354186-b806-47ce-b34f-c72a420e754d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c0fde75-50cf-4fd5-a7a4-840ea9e37b5d",
        "cursor": {
          "ref": "b453bbd4-1cac-49e3-b596-7bc3e8c1b5ed",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "a216e957-d816-4ee0-b886-e68dcd03a835"
        },
        "item": {
          "id": "4c0fde75-50cf-4fd5-a7a4-840ea9e37b5d",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "48e11393-c296-41c5-8184-e1b2cde909d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17121979-62e3-4e09-b3b3-60255aec851b",
        "cursor": {
          "ref": "c17ecd95-748e-4894-a5fc-842f33377cfa",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "513182be-3855-467f-91d0-7289ce15348b"
        },
        "item": {
          "id": "17121979-62e3-4e09-b3b3-60255aec851b",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "c2a2dddf-5b9f-4f63-8571-14ef12ad6e33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ad6e981-ae0f-4262-a6f0-a76470b14081",
        "cursor": {
          "ref": "a7e3113d-8aec-460c-8b9a-34abdb01496f",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "2d377c9f-98e0-4af4-88df-e11337de37da"
        },
        "item": {
          "id": "7ad6e981-ae0f-4262-a6f0-a76470b14081",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "3724651e-28ba-4a64-9637-d2a9c9fb04a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "215dfa99-d816-4f0c-9782-d7d94c78a7dc",
        "cursor": {
          "ref": "d00f1d03-c41c-4eb6-805b-aa16ade087ee",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "c753c0ce-871d-4980-9ed0-f10cdf12d0b0"
        },
        "item": {
          "id": "215dfa99-d816-4f0c-9782-d7d94c78a7dc",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "43995bb6-a03b-4021-9a94-5183ee043a8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5653342-c025-4732-bfce-18f290c3cb82",
        "cursor": {
          "ref": "bb03957a-9589-4465-82e7-e9a234aa9e60",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "fbd7a351-7bce-49b9-b7d1-9fcfc50c600c"
        },
        "item": {
          "id": "f5653342-c025-4732-bfce-18f290c3cb82",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "4d10da75-79ef-40e9-b7d1-8c6f6e7a817d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c25c68b-4e38-45eb-ab38-1f4b80fd912b",
        "cursor": {
          "ref": "9c482629-13eb-4c16-a840-ad7e7957fa73",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "aefa4a60-c24f-4de9-8199-27fa312a47ff"
        },
        "item": {
          "id": "1c25c68b-4e38-45eb-ab38-1f4b80fd912b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "bec3916b-00f9-442b-9c41-63ac40a062b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60cf240f-6713-4c0d-a2c4-d31a6e38b549",
        "cursor": {
          "ref": "7d123761-5bc4-48d9-ac28-51a420470ef2",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a159b72e-06ed-41c5-aead-ee35b8fe7a04"
        },
        "item": {
          "id": "60cf240f-6713-4c0d-a2c4-d31a6e38b549",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "74bb17f8-c438-4ae7-a968-d3f7fd1a9475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08d9474a-ec0d-47df-86d3-edac632696f8",
        "cursor": {
          "ref": "348330e9-637b-49d0-9aa3-c1411a0459eb",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f88df3c3-f451-4c40-9bd7-ff1433c80f2a"
        },
        "item": {
          "id": "08d9474a-ec0d-47df-86d3-edac632696f8",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b955532c-3112-4f30-a5b4-8a1879aaa335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68cc79c8-9a30-480c-afa1-3882b3ccb397",
        "cursor": {
          "ref": "b21a01fc-c371-4a33-b8b0-971ea4579bc9",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "69832761-6ec7-493e-95d1-2ceea80bf8e3"
        },
        "item": {
          "id": "68cc79c8-9a30-480c-afa1-3882b3ccb397",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "dc40445a-68ae-420f-8b63-d8a24c266c40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d6f2a1a-4a00-4297-86b9-f80d667fe5b3",
        "cursor": {
          "ref": "e984cd75-232e-4b80-bdb7-d7e3f20b04d0",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "c40136ae-1bce-429d-a40e-cc7c7bad2b5d"
        },
        "item": {
          "id": "3d6f2a1a-4a00-4297-86b9-f80d667fe5b3",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "6ebeaaf2-13e2-44ce-a6d5-b53d38d71fbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22ee4a32-d261-4d07-b786-48dcc07f0561",
        "cursor": {
          "ref": "b5ab4891-f658-4dbe-9202-39b439a44c4e",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "9f6e18be-6f19-44eb-82d0-4d974d6c4d63"
        },
        "item": {
          "id": "22ee4a32-d261-4d07-b786-48dcc07f0561",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "6acedf70-967a-4ad6-9828-670e10cb6d07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8edf41e9-617e-496c-b804-1a94d8ef7efe",
        "cursor": {
          "ref": "2c0a97b2-cbb7-44d2-b711-fd9bc4ccc4ea",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "4561987d-c124-427f-97f6-ccad2f193760"
        },
        "item": {
          "id": "8edf41e9-617e-496c-b804-1a94d8ef7efe",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "611da27b-5166-4b08-a13e-f098960335c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3938267e-efab-4847-8de8-279849c37a35",
        "cursor": {
          "ref": "04e3ab13-7d37-480c-980b-7738be3f4bb5",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a3ff8307-f2ce-4276-b424-da21ccdb6f70"
        },
        "item": {
          "id": "3938267e-efab-4847-8de8-279849c37a35",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "56777bca-54b8-42b0-957b-447ffccb31c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50113dfa-f878-4925-9d9d-4a57f5667ea7",
        "cursor": {
          "ref": "8dec3e79-ce74-4abe-9f46-4758b9566935",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "832cdb72-af45-4175-a9bb-c63a5d38fbca"
        },
        "item": {
          "id": "50113dfa-f878-4925-9d9d-4a57f5667ea7",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a01565ed-4043-469a-9ab4-f301915ce1b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b5d5262-425a-4f3a-9c2e-abe8ddcec76c",
        "cursor": {
          "ref": "69e52649-3496-4ea8-a5bb-414e05824402",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "f9f89d7d-32b1-4655-b394-ba48d4e1a713"
        },
        "item": {
          "id": "7b5d5262-425a-4f3a-9c2e-abe8ddcec76c",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "2ef8af6d-7f0c-4265-8ce7-2ac1b07d4a07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0abd7b1f-90cb-4ed4-a608-60983d4f703e",
        "cursor": {
          "ref": "743802ad-f417-49d5-abd1-910a5df6a7f6",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d3ed9c18-7fa1-4540-b480-eee67e9ce648"
        },
        "item": {
          "id": "0abd7b1f-90cb-4ed4-a608-60983d4f703e",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a0e6bea0-b95f-40e6-8cf4-13985f1010d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "505e452b-2d90-4845-b7bd-17aaf07cc03d",
        "cursor": {
          "ref": "a35c0168-782a-4fe5-916a-37bb5cfb346c",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "dbc366af-b5ca-4de4-99ad-5cc460909f83"
        },
        "item": {
          "id": "505e452b-2d90-4845-b7bd-17aaf07cc03d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "ddcf8e83-b616-4b0b-b651-777d4c44a816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17380591-f0dc-45d7-ae32-5ce3bae52855",
        "cursor": {
          "ref": "5d53a046-3a95-401b-8621-57dbb635bf4f",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "c4817f71-106a-4106-ae0a-c955feca5423"
        },
        "item": {
          "id": "17380591-f0dc-45d7-ae32-5ce3bae52855",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "fb09a009-4ca8-4d73-bbff-da3720cfe573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b730a05d-da18-4510-8d28-6132ba5f30c5",
        "cursor": {
          "ref": "997d8a15-a260-4cf4-92c6-e925b7cb0aed",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "5331f662-4784-4eec-b2c1-446faff2688f"
        },
        "item": {
          "id": "b730a05d-da18-4510-8d28-6132ba5f30c5",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "fb250a8d-1c16-43e8-93ee-02f7ec58b60f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68b00bfa-42ae-486e-b13d-040b49389a0f",
        "cursor": {
          "ref": "4ba7c70e-dad5-4c84-8365-dfde65dab5a5",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "0a1cfafc-de3d-456d-a998-0c3b2001814d"
        },
        "item": {
          "id": "68b00bfa-42ae-486e-b13d-040b49389a0f",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "04d6e72d-cd6a-408f-ad67-3a5021cb4edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f720cb99-9163-4367-8ec7-9e481cff87b7",
        "cursor": {
          "ref": "fdcb6953-7a60-46a7-a7d1-ed550601e9de",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c44cc953-293d-497b-a330-3776d4baec67"
        },
        "item": {
          "id": "f720cb99-9163-4367-8ec7-9e481cff87b7",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7cc7dea5-ce70-45c9-95b6-cdeb49a73720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "101b7b1e-d8f5-4cff-99ba-13bb4e26b250",
        "cursor": {
          "ref": "b59179aa-b6df-408a-91e2-0eb41ce68203",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "8ef1a5de-bba6-4590-8733-49d953b30f0d"
        },
        "item": {
          "id": "101b7b1e-d8f5-4cff-99ba-13bb4e26b250",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "eaaee0e6-f82a-4a6b-bc74-553e4b1aab47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97ba3115-8cee-4157-910f-176c5602657b",
        "cursor": {
          "ref": "9c2f43d3-6531-4d02-a69f-242f9c370328",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "258de4d0-0bf4-4f9f-855c-f14de013de56"
        },
        "item": {
          "id": "97ba3115-8cee-4157-910f-176c5602657b",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "31464fd2-8bdd-4c7f-9966-6bf5f718d60c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dff3ff02-e9ad-427a-af1d-e5f80aa94bad",
        "cursor": {
          "ref": "65c9ec5b-339b-4ae1-90ea-665dbe48dbb0",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "2f58a1bb-467d-46d6-92bf-3c86cb287906"
        },
        "item": {
          "id": "dff3ff02-e9ad-427a-af1d-e5f80aa94bad",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "f0009622-a6ae-45ab-9c2e-4181d6d2895c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b82db4e0-566a-44ea-b8b7-1020754ca24a",
        "cursor": {
          "ref": "665e05bd-7354-4a4b-b60a-67873fab4723",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "a6bbf415-3f62-49ae-baeb-374d056ab8c6"
        },
        "item": {
          "id": "b82db4e0-566a-44ea-b8b7-1020754ca24a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "7b5b2118-14a9-4757-a8dc-1bd1a8a242f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eb55992-6602-4776-a3a6-4f488e6b3f12",
        "cursor": {
          "ref": "c9029911-2149-415e-af40-667ce204a7b9",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "5b274ee0-d1cd-4d5f-9649-97a8529e6ceb"
        },
        "item": {
          "id": "2eb55992-6602-4776-a3a6-4f488e6b3f12",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "3633df68-75df-4dfd-8583-09999e9a8691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccf597f5-62b5-4f82-91a6-def7f0aa2211",
        "cursor": {
          "ref": "2960d26d-3ca2-4053-b7c2-0c295895a750",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "3cef48bc-d4a8-42fe-96be-b5262b78a093"
        },
        "item": {
          "id": "ccf597f5-62b5-4f82-91a6-def7f0aa2211",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "b92a1002-4307-4105-bf16-3f05b6682b65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e965f7db-65e8-423a-a5f9-b46b4357481e",
        "cursor": {
          "ref": "c34b4dc6-3067-48bf-86c9-b1e6c5ab459a",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "842a79f7-b3e2-4988-87b0-b8d8d8797b9a"
        },
        "item": {
          "id": "e965f7db-65e8-423a-a5f9-b46b4357481e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "fb7bf480-19f9-4c03-8329-778ca0e04650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3846ceff-eb5e-4b66-a153-0a9aadccfa9e",
        "cursor": {
          "ref": "163f83dc-d04c-4dfd-8eaf-de99312ce104",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "fbe86720-f891-4b8c-89b0-2899ca773dec"
        },
        "item": {
          "id": "3846ceff-eb5e-4b66-a153-0a9aadccfa9e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "36bc3604-466e-4772-9b79-fc1f8568fa03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef38dfbc-5356-4f6e-8173-c54457f4c030",
        "cursor": {
          "ref": "62b82b3c-6415-46d1-9742-805709e3deda",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "39a2f95e-f32a-4518-af3b-591b7e697cf9"
        },
        "item": {
          "id": "ef38dfbc-5356-4f6e-8173-c54457f4c030",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "75515680-8834-44a3-bd16-7a99d3d8b9f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0772a01a-cb28-41cf-a2be-f0acd1aeaf00",
        "cursor": {
          "ref": "724404b3-bc39-4480-bad9-02b7bc023d07",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "0907fe42-264f-45ae-9db5-02e01afb3a42"
        },
        "item": {
          "id": "0772a01a-cb28-41cf-a2be-f0acd1aeaf00",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "9ae81dbe-9ff1-471c-85d9-fb2d675b2d77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d04d14-239d-47fb-9625-343b619e15a3",
        "cursor": {
          "ref": "fbdd2d0d-29dd-4cbc-b5fb-f85d2540c114",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "89a53fed-e7db-49c7-ba28-a2247aefd52e"
        },
        "item": {
          "id": "c7d04d14-239d-47fb-9625-343b619e15a3",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f53f29b0-2c70-4252-9f8e-38d28556eacb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e91de411-7412-4b82-8127-7cb0a4cb1798",
        "cursor": {
          "ref": "3fea3558-b890-4f0a-9ea3-76954a45246e",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "b2924dba-55f3-4cac-b3d2-1cf40c60620d"
        },
        "item": {
          "id": "e91de411-7412-4b82-8127-7cb0a4cb1798",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "ab571fb6-daae-4167-9e17-9fe8f0920425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fd56039-165d-4015-a6ae-32778ba260dc",
        "cursor": {
          "ref": "bfca2a1e-3b41-4107-848e-55e5ffbdfbd8",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "690bb007-ec7b-492f-a047-26c660ad62d6"
        },
        "item": {
          "id": "3fd56039-165d-4015-a6ae-32778ba260dc",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "6729e17a-d628-4006-a91f-4f7974013d28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "880b8b25-91ee-4840-8c4e-cfc5192a34d6",
        "cursor": {
          "ref": "806b4586-1011-492f-b0e7-e46e325b9c0e",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "4026c21e-4f28-49e1-9623-b26a5cd4eb4c"
        },
        "item": {
          "id": "880b8b25-91ee-4840-8c4e-cfc5192a34d6",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "6c457e6d-b6ab-4416-a573-245961f175c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b516ae4d-9c67-4b6c-853c-f0058158cbb6",
        "cursor": {
          "ref": "c2870fac-319d-4ef6-8f11-3ca00ae1ff49",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "caf1651a-eb9e-450f-8d72-1f2b28431c03"
        },
        "item": {
          "id": "b516ae4d-9c67-4b6c-853c-f0058158cbb6",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "86881fc7-01bc-4703-b418-f7fff58b08f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7756cbdc-4fb2-4249-ac9b-a5e3faeee8ab",
        "cursor": {
          "ref": "fa345186-ae26-4518-9259-73633bf4cf4e",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "ea28a15c-2642-401f-8c7f-b9dd6ad621e2"
        },
        "item": {
          "id": "7756cbdc-4fb2-4249-ac9b-a5e3faeee8ab",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "a9f0069d-8a86-400c-a198-927a6494c2b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2351d0c9-ee21-4183-aa4c-6d3ab920f0a5",
        "cursor": {
          "ref": "3b4feaed-4cc1-4dcd-96b2-2ccdc9605b33",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d4d7c1c1-f36f-4f9b-9dea-4712ba53aa19"
        },
        "item": {
          "id": "2351d0c9-ee21-4183-aa4c-6d3ab920f0a5",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "49ab671b-7c44-41d7-a68d-ec33f7aec868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ced37f3-039f-417b-80a4-a827a217e2ee",
        "cursor": {
          "ref": "c353df54-de9b-4678-b5ea-b920370da736",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "6362e7b7-c425-4398-94bd-858c26131f01"
        },
        "item": {
          "id": "4ced37f3-039f-417b-80a4-a827a217e2ee",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "fc2b0474-282f-407d-a166-66a7d45b8a7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb55f788-3234-4d74-ba91-cff545346f66",
        "cursor": {
          "ref": "5d34be14-a3fc-47d9-9038-7465db3255f8",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "368d08a9-a8cc-4e2b-8935-89be659e89ce"
        },
        "item": {
          "id": "eb55f788-3234-4d74-ba91-cff545346f66",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "fc4dd736-ee16-4311-848c-53e3b017594b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8e1491e-2f9c-478e-a4c8-2557bea4bd4a",
        "cursor": {
          "ref": "1d6b7a48-3797-459a-b11d-d6a62155b771",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "34f2f6c8-e9a6-42bf-b82f-e26fe06084eb"
        },
        "item": {
          "id": "a8e1491e-2f9c-478e-a4c8-2557bea4bd4a",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "29300da2-f089-4b1c-9cd4-47f09bcd9886",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed6646b0-ae85-459c-80bb-6a886acadeb1",
        "cursor": {
          "ref": "a60f0057-92a7-4b65-8805-f3e97d2d74b2",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "0db81f36-87b1-47e6-9947-34a86033a282"
        },
        "item": {
          "id": "ed6646b0-ae85-459c-80bb-6a886acadeb1",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "c9b00ae3-bd5e-406b-bec9-86b3834fce73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "e474d997-e2e1-46eb-9918-e117796179d9",
        "cursor": {
          "ref": "301822cf-e319-43de-a983-d2bbc2635811",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "2232447a-c1cd-4fd7-991d-3f5b93d886bd"
        },
        "item": {
          "id": "e474d997-e2e1-46eb-9918-e117796179d9",
          "name": "credentials_verify"
        },
        "response": {
          "id": "9254845d-baca-4a1f-a5cd-7d60c31ef7a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "dcadb5ae-ae07-4783-9b06-4d10d584163b",
        "cursor": {
          "ref": "b81f780a-bfb0-48b9-8bbe-72ba027308ce",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "57cf9fb6-00a9-4441-92c2-c0fafe306c08"
        },
        "item": {
          "id": "dcadb5ae-ae07-4783-9b06-4d10d584163b",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "764d6514-3edf-453c-875d-7dd5af9900af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "e241fd52-88a3-49a3-b6a4-93a7dfca5b78",
        "cursor": {
          "ref": "149b3f02-b34c-4e33-aa31-110812f3aa86",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c9f018a8-4140-4ce7-82ae-8930c46bf6aa"
        },
        "item": {
          "id": "e241fd52-88a3-49a3-b6a4-93a7dfca5b78",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "e241fd52-88a3-49a3-b6a4-93a7dfca5b78",
        "cursor": {
          "ref": "149b3f02-b34c-4e33-aa31-110812f3aa86",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c9f018a8-4140-4ce7-82ae-8930c46bf6aa"
        },
        "item": {
          "id": "e241fd52-88a3-49a3-b6a4-93a7dfca5b78",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "e241fd52-88a3-49a3-b6a4-93a7dfca5b78",
        "cursor": {
          "ref": "149b3f02-b34c-4e33-aa31-110812f3aa86",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c9f018a8-4140-4ce7-82ae-8930c46bf6aa"
        },
        "item": {
          "id": "e241fd52-88a3-49a3-b6a4-93a7dfca5b78",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "baa5f6f4-4e6f-4ecd-b748-25e02589ced2",
        "cursor": {
          "ref": "7241ebdd-605b-4218-8f96-9f4545203682",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "24143619-ee89-4ca1-85d0-591af804fe7e"
        },
        "item": {
          "id": "baa5f6f4-4e6f-4ecd-b748-25e02589ced2",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "07b49f3c-c618-4dcb-b382-8df9b8b7863e",
        "cursor": {
          "ref": "7ed2be12-1228-4a2d-b88f-e7e076827684",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "56691b72-7848-4802-9371-f3a17b326df8"
        },
        "item": {
          "id": "07b49f3c-c618-4dcb-b382-8df9b8b7863e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "07b49f3c-c618-4dcb-b382-8df9b8b7863e",
        "cursor": {
          "ref": "7ed2be12-1228-4a2d-b88f-e7e076827684",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "56691b72-7848-4802-9371-f3a17b326df8"
        },
        "item": {
          "id": "07b49f3c-c618-4dcb-b382-8df9b8b7863e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "30dc8dbe-53bd-44c5-af31-4c4b6a239df0",
        "cursor": {
          "ref": "c0b9a573-1c9f-45fe-ace7-40414ecb4db9",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "586ff424-37b6-46e3-8e84-7de55813bf3f"
        },
        "item": {
          "id": "30dc8dbe-53bd-44c5-af31-4c4b6a239df0",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "2fe6d0cc-aa3d-45a0-9d17-5e2d9f97a387",
        "cursor": {
          "ref": "8014d393-68c2-4029-a99f-3bc2b85f4fc0",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "d48ccf8b-e5f0-4ebe-b7a4-3c0798b79622"
        },
        "item": {
          "id": "2fe6d0cc-aa3d-45a0-9d17-5e2d9f97a387",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "2fe6d0cc-aa3d-45a0-9d17-5e2d9f97a387",
        "cursor": {
          "ref": "8014d393-68c2-4029-a99f-3bc2b85f4fc0",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "d48ccf8b-e5f0-4ebe-b7a4-3c0798b79622"
        },
        "item": {
          "id": "2fe6d0cc-aa3d-45a0-9d17-5e2d9f97a387",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "5b2d0677-1379-43e5-83ef-da7d7f46fb82",
        "cursor": {
          "ref": "df9f1b09-abb0-47ec-8f79-d45a9e2afde6",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "9af03acd-2e53-4f1c-9035-a675cdce67f0"
        },
        "item": {
          "id": "5b2d0677-1379-43e5-83ef-da7d7f46fb82",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}