{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "42c5b468-53b0-4712-9476-00da2ee28a7a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "6753aa92-62fe-4398-83f4-e4c04d9602aa",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d586df5d-ca90-422e-b78f-c8e9396fbd70",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6ca65ab1-0c44-45d5-96e7-b307b68a0a79"
                }
              }
            ]
          },
          {
            "id": "ab003165-d5f2-4026-91b5-83ca4dcd0d67",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8fd64529-c9b6-4faf-861a-86aaee9bc198",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "08516947-eec7-43b8-ab5b-67942a111bfb"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2f75168b-3a0d-4775-8333-58eef8f11177",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "6aa8b260-e979-4e48-9f84-b5237ce19348",
            "name": "Positive Testing",
            "item": [
              {
                "id": "165d3490-ce00-405c-9db5-9a1c6e524052",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f3aa430b-4c53-45e6-af03-92a5960637c0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e34c26e0-c397-49fa-babf-a7716b54414e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f07a11f0-2f9a-4b8f-97bd-9e8afd0df133",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b7564cd2-a1d8-4fa2-a0a5-19c5debe0a45"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "11eaa38e-6706-411a-ada2-301ec97fc660",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "042caf1e-e825-4da4-9a8c-402902715402"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ec889687-d19b-487f-a7b5-156f32a0ac0a",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "6813e06a-47f2-4228-b2fc-0120f9b5c30c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "34d97d7a-3d92-417a-a012-7332b90f1faf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fa310a2d-315c-4c0f-8256-4b301833bedb"
            }
          }
        ]
      },
      {
        "id": "2d55c883-e349-43ab-bdb9-fe8f1844f183",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4dc6b885-add0-41c1-b664-b66250ddfcfd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "434c369b-1c80-4f9b-8fdf-2b29b6f7362b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b7013040-55f7-48da-a7a9-f618ca2585af",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa7ce6d8-7d02-40c9-9fb0-089874f0899f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "388bbd01-113d-44d4-a94d-56839670ec77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "363d3259-6451-44ad-9566-0612ba8bb4a3",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06b893f4-9bdc-4531-a27f-a07ff682195c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9dd35365-c99a-4ea3-a71a-bdda12752269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ee9f61-3dca-4d48-bac3-4a16494a2d55",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc1f47e-8e43-41a1-b703-0fafbd21a3e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "06215b36-a854-4de3-8289-df0151d6b739"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a1f013fc-38d3-44e2-9829-8a2d146f75d5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "13486d97-a50c-46f2-af3f-87bf8c42a8b7",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8acb48b7-cd82-46a2-8c02-8d1c45377944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f1933cf5-15b4-40ac-9629-bc1d4e55dbaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fa0f23e-73f4-4836-8d88-8359efc07e85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31877d25-81f8-4798-bdca-4fba4452d1a3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "09a3c367-8769-4f94-ae7a-e9afc4d47fae",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f596fec0-da6b-435c-8b79-b82fc26a012d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d4aa51d0-797e-4d2c-a891-af73b5dbc0fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "06926c2f-5f6d-4a30-a428-fbf976f1a485"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5f634905-f769-4ebe-bd46-21800c63c252",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "edb198ae-452b-4d9a-94b8-0dcf48476055"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c229af5f-a23a-4b8a-ab86-5a36c50d3788",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8cc27cf2-51ce-45d9-8bf4-22dce9cc9803"
            }
          }
        ]
      },
      {
        "id": "7c2ee6a0-bdb0-4463-b0ed-f65bee0b09a0",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "19d40531-985c-44cb-9cc2-4a461fb82c0b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a8cee2cd-444b-4681-a5ec-f06a12cbacab",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ba5a9f50-f4ba-4e3e-a531-19ec4c727e55",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0be3cefe-b97e-41e0-bea4-90c327a0735b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62d250e2-9430-45df-89a2-5e0e43058059"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc23788-170b-4ba2-a1ba-68a7d318d4a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aee14648-6360-4150-8d65-8ed98d21f9e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa038c55-6c84-4dde-8fbf-2ec658a80e6a",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd4b4554-abb6-408f-9422-ae6f312cf51a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73470575-28c3-4164-a94e-8d190501662b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b789875-a9c0-4461-bc45-06205e4729a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a2fe5ed3-2b1a-48bc-8539-79b0a3a783ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7054832f-224d-4a64-8314-757864f87afb",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a682c08-bf04-438e-8bed-3e18b364a6dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32b1297e-484a-4932-94cb-1bc7bce67d4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07ad3c15-ed95-44f6-8146-ebd70106796a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eceb8284-4a95-4ad8-81b1-2bb2f80c3042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2841727c-9322-41f8-a356-a6d9563a6c32",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1085d62f-f08c-4cbf-b967-1b027d934012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec4fb25f-e728-4585-8d4d-5ab5edb0a2ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "674443ed-7ba9-4ad2-8d01-ad5079094314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "204e8233-fcf5-4895-9b84-7fa3b39176ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96e97f1b-c514-4a54-9aad-3b842866bfe4",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb3c9ee8-89a2-42fa-bc5b-58824f9d6a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1892167-2d52-49dd-993d-5c35b576677b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2774a7f-f3cf-40fd-9a68-41b354705a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be176411-8891-41cd-b802-56a65b2bb614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f167f89-607a-40d6-a5cb-cd6b8cd37d9e",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d840a6-d010-4b86-b7aa-d6b0fe07bd6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ff4a0a3-f0b1-41c5-bb64-fce617a00287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28ea8fa5-758f-47f1-9035-af5ae9ab0913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e037f1e-81f2-4b7d-8b90-db476ca5d3e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b986cd5-7236-4c0f-b59a-625546d80103",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "146f3919-6799-46a8-af36-016f7d9fa4c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2679775-d1aa-4e93-b718-7d4119026631"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac52a505-f6ec-47c3-859f-d92308baeaa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "11d0e008-a6e9-40a1-b1ed-0befb61ccdec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56cfa14b-4a65-4353-b44e-2f13fa92b684",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "264ec346-e90d-43c7-9a74-f8619596f77d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b7f1e24-5d07-4586-b79a-45cd8cadc0a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57df30d4-1e50-4a5b-be24-f7d90fc35f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e658fce9-fb91-4d31-ba15-4acfa09174b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb97b460-f940-429e-b666-7049f2a574d0",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ee94d8c-18e3-4d30-a542-20a63ab65bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a05dab5-977a-47c8-9dd6-9a0e0bbe8bac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f285f842-1685-4066-b0ce-bf3786b96fa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4a13f8f-b665-4f84-a224-c149f42918e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f20febc1-b210-43a5-84fa-7a8fa19013cf",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "821ce871-0b33-40ae-a97d-8b2de26efa39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b38c50d8-4b76-47bc-ac30-bc451c4e6e75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec25cfef-59d0-444e-a243-dff930c07c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "affca256-fdf1-491a-bbf4-add15f27b4b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1e9be0b-9266-422e-93e5-e4e87852f905",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dab5e522-b880-4431-9d19-5a6edcb79db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29caf846-d9a7-43e2-a0e7-b718b937daef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "494fb36d-5a5b-4989-915e-b2db5d6bda2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "38dae100-22d5-4c33-941c-ddda0e1085c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "043b4916-7eab-479f-b4bb-39099e74d689",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12208808-ff85-43a9-913d-c4af55f385c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e92af157-7fc5-4be5-bf9b-bb543282d775"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4559b01-74e3-4737-b397-58968eec0f83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1fe00ba2-cbc6-47ef-af57-a4ef83d96d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8474b7d-b6db-44f0-ae74-894613f2e1f6",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "452bf02f-cad1-42e7-a13b-3dfc8fddd3b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f7af374-61a1-4cd0-8521-02eb90d92a8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f2e0af9-e601-40c7-893d-070fdd5f3865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "64dfa2c8-fabb-48d8-af01-40c4371c50ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baf35cb6-7081-473b-8e4f-92699dd2c5d6",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a3883a8-3cd0-4008-b031-44b1d1165b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e23d9179-23ee-4109-bd8e-56c46a6b0abf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86595998-b077-4a39-a40e-8324eb9a7bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "617d5905-9920-4071-a1da-571b7d67a03c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e5cf6a3-33c3-456b-8d90-710defc500fd",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ced096d-d2f5-4fba-9876-a0094bef4845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e3b9e30-3c22-4ec0-ba25-f71ee87bf1fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5c7f412-3a73-4d59-8439-71df3e52646b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "13d378ea-fa99-462c-a62b-99b89553d71e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2539f623-5009-4a43-870b-023f448f51d0",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7ac0632-99db-4f1e-805e-f7b9bf904180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68cba77f-d0c7-4517-b50a-cb2ac78df34d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0ea3863-9111-4c85-8a9d-fa6f204ed696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f04766ea-dd3b-4fa2-b51d-1483245452c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ca4e0f-394c-4342-b27b-13b50fe97149",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa758ab-463d-4764-810a-4709bff74fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "011b229a-4ed2-470a-8301-a892e8aafa6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f1b123-9f05-42c6-8e8b-6b8838bd6561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b25eed47-0fb1-4533-86ff-ab1cac90a7b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e63b2f78-dca5-4cc4-910a-d02216f39492",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edd06c98-0d88-46d6-8c6c-39dffc781d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d40978f-11ed-47bf-95a7-71b72bf1cbcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d1633d-b317-46a0-9a46-b5aff66f443d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcbc3abf-7932-45a0-8af4-afa2054a750c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5266e089-26c1-40d7-ba86-5859d8c8ee54",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d32311-fbd5-4428-b1a7-c3a88873a7ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4024b61d-e592-408c-b7dc-d1bbfec05181"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e95699e2-0cd3-42ff-ba38-0220e8342945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bca48982-d7fb-4c09-8d06-e96c2774599c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ed9797-5076-47ae-9df6-752bad3acc1a",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab02f75-0e0b-4ae4-86c9-bd96d73fdfac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28de5ec5-968c-4010-911d-87b28234af5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30054041-4e91-45f7-aec7-89a9937ae69a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "84f1a0c2-f9a5-413c-80f4-3c67a392ed2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcb8f160-6e03-4690-a3e2-bf5bd412ee24",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c0ed532-9d0a-4aca-8e07-1af3ef32ffde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ff79aa5-b5ae-447e-9693-20bf54d28321"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d013f37b-1b44-424b-864b-72d13049895c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "639107db-88e0-4324-b31e-b1e5e8f1a0b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5847214-5150-47b1-9e10-b1057788c237",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed4b9a10-14ce-4e72-ba05-4d0bdbb9326b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd20c2ea-29d1-4a79-ab8d-9ce86b6c8ec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b7bf34-5b20-49eb-a48f-10c65ca6a735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f12607bd-e2ba-4121-bf32-4fdcbf30c1b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d5308f6-4d0b-4d7b-8b55-7a464dc4f221",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64df7903-c275-44ac-9d2b-671ae7a2f4c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "431b52c8-ce0c-4698-a10e-ae1c27a66e92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4a92248-be9b-4281-8b5b-2143c898d91a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "00f2fd88-0c61-45f1-92bd-f14887655a24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e847af6-4228-4f7d-9530-d9ad48ee6f8a",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff536e85-2c46-40d4-ac1d-cd13d1520883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7756cc6f-fd31-499d-8eff-7c9d52e185ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68312f20-a75a-47cc-ae5c-4f7c06f00de0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c0ae3e5-0d8f-4dcb-8aca-902553a75e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0939112b-d01b-418b-9b74-307c2900e755",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab8632d9-467a-43a5-b1d6-f20c9a41726d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dbd06f0-ff06-4986-aa28-572303b37c83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "286f2195-59aa-41f2-8e85-363ab469197d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "620d80b0-53be-43d3-b405-7a4ba55e2e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47626140-27f5-4cbc-9906-9bbff540b76a",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba5e698-64c6-4039-9873-cb922bcd6c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9442dd28-cbc9-4693-96dd-43d4ab8507c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf8f90e-d595-41c6-aabd-ac48c38d60e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "244f627a-a45f-4b89-bd43-095bc7fcc296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79f5b358-24d5-45d1-884b-b04666e9a549",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "120bb78c-5057-400d-97cc-310d81a4903d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d60f7211-29ea-46ab-bfd3-454c09feaf03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d45dba1d-515f-42a1-a629-f048019199b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "063a872d-3cc9-45fa-b4c8-0b1267147b10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aa898ef-0487-43ac-a990-7587cb78c4a7",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "238fe7ab-7a22-40ed-a27d-a34c0ceadf82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a51cd43c-ab5c-45c8-bc7e-80b61eb415dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e05d69-5fef-4b2e-b151-a729555d08ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "89da550a-2c23-448f-9476-9ada83d2b1d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa050573-3354-4347-abf5-9d4f4d3f0529",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4253284c-9fdf-48a9-bc4f-3d63e9f86809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43e8faff-67c2-40b1-b83a-bac6db16cd6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16cfef99-1914-40fc-8890-2495f9539760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "68993562-ab16-4966-bebd-327c5ef31bd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdc88470-34ac-4932-b532-10df21d4cbd4",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6978094c-84f6-4511-8cbf-7c896647a5aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8ff8664-a0a0-44e0-b251-b65c8052dfdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67af629d-7791-4a9b-8d2a-44488fde54f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c3167c5-389a-4414-9aec-03d8769a1a79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adbbf039-0b31-471f-977e-086b8828d5cc",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "422d1c6b-d181-423a-91a8-a357ca807a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d464516c-5c65-4b4d-85ab-c97182bddc17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50157238-e989-4918-b345-aa9e3dfb6b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fb35fb3-6bb5-41d8-adfd-b2a045d34357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "053b6bdf-9d35-4ad6-9724-d49afebb97d0",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34bb93ef-cda6-4e98-bd9a-a5686e68278b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbb8d575-7249-45fd-a516-b4e58168ee88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6251f248-d9ba-49ac-bd7f-55aaa3aefc0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e6c7f81-dffd-4534-886c-000633699ac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa8fe161-a103-4967-9c57-2cafb1293dc7",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff6db6f-aebd-4026-93ab-8874995642e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4daf878-f81a-402b-bb9b-1ae820d1c601"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a8fc2b5-f3dd-48a2-97e0-e88250d39627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d85e193-d921-4e1a-8c3f-fcbf59eca216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa7a0834-dd75-4270-8251-e263787348b3",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "790c284d-fd51-4512-98b1-d3a30f0d6884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e51defc-9e58-4e6a-a965-ece3ab1dbbe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4c55873-f93a-4eb1-9f75-c54febaac502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdfec52f-1644-4907-836d-8fc145bc0d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac361cf-c9a2-42ae-aff8-15ea4f5ee1f8",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bee8099-9da0-4524-ae65-e38ba3ef720f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99a1cd74-9fb5-44f1-bdb4-076858869ee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad747f8d-ec17-4dbe-b44f-4b42e39379c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "fb1b5070-0d54-4fb3-be3e-1f1201bfc58d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36295dee-1069-4479-a4d2-6c672ab49824",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "903f65c9-b0c6-4dc3-b41d-7b2f4b4c4c0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "31378e22-d2b3-434f-b73d-781184df69d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c6ba575-6b94-4f72-8c73-24d4481f6cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bb4ab680-c200-49ae-b339-73a99095c844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2311c516-7c1a-4ff3-b4e1-a579e88460f2",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "937326c6-4409-4f15-a4ef-8d0439b54a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc924ad1-2528-4b2b-ade6-d4578a328b20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e45bad0b-bdf0-49ec-9d98-7c20500ed7de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "497e74c1-2425-47f5-9e17-9eaeb111f867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8973495f-d819-42d2-8951-836b29a13631",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72efad7b-cb3a-4688-b49a-5aea17b23751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a758e54b-5a49-4ec5-b971-5b346ac677ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8de1316-dcfe-4a4a-bf92-ca1bf3e313eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ffd87426-1dd2-404c-b8a1-625b94f5a31c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac70615-f78a-4d0f-b03f-65ec3a33eaf2",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fdda57e-cf23-4eb4-9d25-e463dfeb57a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7861f9b3-3665-4572-9cf4-c89eda8314d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90017e34-69cb-45ed-87b3-18c7e99ac4b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "02bd6914-676b-45df-9469-dc593c72cbf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14353461-ad2c-4028-a368-d63107657943",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb8ec450-2820-45c6-86b9-eee8cefd605d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7e37cba-f081-4623-a8ad-6019dbe6bc20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c84995d-3f7f-4447-b2ee-7ce72a2bf422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "769fd37d-9586-43b0-b595-4de8611045b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32ad9ec7-d63f-4e58-8fa5-3a45e4dbfc5c",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37ce4bdd-c0a6-4228-91ac-0bbc7763738b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c0f674e-5a61-4bfc-be71-cf6fec4299d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d8f98a-4712-4be6-a3d0-8618a2de67fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "89e69baa-8494-41ad-a34c-25fe291d65d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04fad0b5-d271-4b55-9836-5f7b2a0c4751",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fbe8f0c-c929-446a-8913-0e3b456dab83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c939c58-23fd-4247-903e-94e96dc17231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "292f5f41-d73f-4af9-b18d-2987548e9dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "9a61acc6-4f7f-4aca-82bf-b4b635912a4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd500766-8ac3-4ac5-8ec2-dfc62f663bd1",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f00d8e9-9efb-4e66-a00f-ba3e18418340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c60e73f5-5c60-41a1-9b79-aaadc8c2880d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5ae18b3-2d4e-41a8-a55f-2b1935df7d9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4457ec6d-b176-45a0-9761-72e853c5d879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eba9b4c-74dd-4d9a-91c5-ddcfe855ea8e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b830fd3-1426-457d-942a-5de27e1e0580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ee97e1c-3f6b-473c-aafb-e640939de107"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8967577-861c-4d9f-8080-f2a3f2062ce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "3721c844-7503-44bf-a089-6a82ed9ff9e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a7c29eb-4cfb-4493-a5c2-4db4873cb61b",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39b50e44-3cfc-4621-a816-8cfbb6701b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad682b98-88bd-436d-8aee-72e992fb9d4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "272966f0-1e70-43ae-bfc8-bd9ee7693465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c78d214b-5a74-4778-ab74-c2fb95d9700c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d91ea3c-5f89-490c-b05d-3e186ce68d6b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe304a95-0c98-4189-a0d4-66d4f937f58f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e30cd4fd-fba1-448c-a797-e15a0762f1d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d767ee14-d960-410f-be72-e6f06011aa13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "94e71606-386b-41db-b1f2-b3efbb9314d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae74fdec-ecab-4792-8a0f-0b44ba69e26d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "550095d0-c65e-4d75-9ff6-9d2f567ce423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41d41550-06e9-4076-8b39-a34dcda23d13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c13000d3-7b8d-401d-bee4-079fa7170479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a1d0401-5884-4982-9ce8-27df93f710d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aede5d5-4b2b-4d3c-a6bb-c063cd51dfbe",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b7773a3-4a12-40a0-8853-dc67afb57ea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae9f4b0e-85e9-4d36-97c1-3503624b9ddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b713d40b-58f7-47d8-9795-3ec1767c83e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b83f637-f13a-49a5-9023-3ca7547c350e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42e41cea-ca33-47c9-8bc6-bb22be0d637a",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "111eca7e-7f37-48ad-95b1-81b2103083db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "027001b7-3cfb-4616-b08d-4f9f89717ffa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45529db9-5cbd-44b5-83fd-eb134b7f15a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "47af5300-6b66-4068-9842-1c8a0d201de2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc8291e-7868-48bf-a8bc-426236d6bd25",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62ded7c9-c874-46dc-ab47-e2b8d58d0bcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7ab17d7-b609-48cd-bf4a-10a7c7c63f92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "550fb01f-3ba2-497f-9b22-22d348b694da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "504360d9-6806-4cdf-8c2b-55f395c1f556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a5f098d-00ab-4d6b-aacd-a0aaa36274c1",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c57aa70-f76c-4499-a23f-c1c6855ef2e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff1dc66a-e31c-4f28-9e6f-91cc37ae222c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "009c6597-290b-4e85-8dcd-f2c27a676991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "27b86b2e-0813-4e16-89e5-50c191d01185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8920963e-7f7a-44a1-b7cf-81a2c99d09f0",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c2cafd-2f63-48bc-8c3e-b8e7c3266415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e25f30a-2a63-457a-97c0-85f2d3c90d37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29ccb645-3854-4573-be1c-d558c418bfaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a4a9258-aa22-4e4f-aa6e-9922fd6734ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7888bf2-88f3-4e62-9ba0-9c2d4c5a6790",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d0cc3f4-d81d-41ae-9509-bedebd284894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac8f701c-4a7c-4a37-ac2d-a397c612818c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a5025e-1ebd-42d2-b34b-5a5804ba57a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "be4a807f-ce26-44ea-a5f8-04349abeaa24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41fc72db-371b-494d-8eb8-4bf69e7c293c",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a826117-89c3-4e93-bc74-1842754d63b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23d21312-453d-4333-a561-28c60ab811b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ff0c837-3875-456f-b6ee-1e6479a4d5ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2e1ffd1-7b55-4268-8033-26948ad49643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40ac72f5-90d4-4407-91f8-d07cd01215bf",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b45e904-df5c-4404-9ff9-2f8550d8362c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9a6421d-c884-41a8-ac95-fc80399ecbb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a73eb844-0dfe-4d65-bdfc-02cfb5b74d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3dccd564-1675-4e54-a5f9-6ebb306cbbe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13365fc1-ad34-46b0-a4d5-1da03dd0a730",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7289db89-a405-4184-8f67-64e8a5b2b663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3061c549-aaf8-4d30-8414-0c943e1932a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d717e84-872c-4458-9d55-a08274687091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "47bfe3a8-117b-4bcd-ac6b-8778d83c0f7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da40b671-d828-45bd-a494-afc0a89c9f28",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb13ee38-7da5-434c-8fab-c9ff0e8d614c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9ac5824-a93a-4bd0-85e3-05b01fc2fdd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f739b5ba-17f5-422f-84af-679300f4f607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "190b8874-edda-4288-89a5-f5e631d11d21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e7d5872-7a04-48a6-9350-808ae73e6394",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f7553b-a174-40ac-a228-ac75db331054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39e5eb51-cfb0-4863-86e6-8cbaad0511b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e7f9b8-a11b-4c6f-8b7a-6e75688106d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ffcd54e-2111-4083-b3c6-b6bf32978f59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95fe91ca-5cf8-4857-8979-b261d83e8c7e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c11b854-48b5-4964-9ece-33113d2efab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f73fc5d-8481-4b7c-b319-39e6d271505e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac551f7a-59b4-453e-9dae-0dc3dd362c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0f49220-6da1-4025-aaa7-3220dd6d4be5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc706b60-e9cc-4c29-ab1b-4e977c2538cf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db63f767-aacc-437f-9132-be3151810536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3dfc9f3-12a9-4c90-83b6-abfab2e4ee7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1507b4c-b378-427c-bde0-8eed04b197ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "593c8114-8ff7-4def-8098-d9bb8dc44f98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2914e1f-44ce-4089-a334-62ff1e209d87",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ce35e8-5dfd-4638-81c0-93133bbb25d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c91b5ce2-b922-4c55-b6fd-23eab467ff99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb151e74-ab43-4d1c-b90f-7051aa0c13df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "29ccef1a-fd74-4f87-9d20-44ae23491bff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65258f9c-b2f5-4d90-a6a2-36baeccb455b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9dbf9a2-3768-43aa-a8a3-96a346d0f351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9a10a5d-95ba-4193-82bd-f6c9de2f2ced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e41fabdf-f9a8-498f-93d2-66692cc1fbde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0d6de4e-4227-4fb8-9382-edb60d5bf7cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edad4bfd-eb4e-42e7-b0d1-a48fd060cb18",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a85187ee-479b-442f-b99f-a06662b63260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e96fdc0d-20b8-4867-97e9-3a16b24f4bca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a65fa0fc-6960-4f1d-ae14-7b4e35d24401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "47231301-fd86-4167-9918-cb95392df721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2383aae-c387-47e8-b0c6-748d7480a433",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85ab7250-2520-4929-89d0-8041a6949804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "736bc092-1475-4819-a9b9-a6ca240cadfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba886637-b416-44b9-8470-e7296580b319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e910d624-3177-4de1-a77c-13ebd8f0d006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c172328c-a300-4ea3-90dc-9c300f4dbb16",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b2c1370-7b00-41d7-b0ed-b28dd7310cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12e1e974-c646-4c42-87ac-bf43d0547a11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a316ed9-da2d-47ae-a4b8-5f91d5170adb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b315297-d942-4f59-afa5-14c5c5c931a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14fd3b41-f029-4419-bc9a-c968169a3abc",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26bd9fa7-d52b-4991-8e62-46fdae36b977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4de08a97-307e-436e-a928-29c7787dc970"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e49c76-5979-49d4-abe3-03dc069a5bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "78a71bf9-ee81-4259-bacc-b5f866fe2838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc778545-581a-4d64-bad4-c8ed3fc64fec",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1878bfa1-58f7-42cc-928a-3cecf442d48e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "284042cf-1737-47f5-af20-c511fcf53e9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "384f086c-5eb8-4807-9cb4-d1d499f3ab59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "efc4e10f-f02d-4d6c-afeb-8ab2e7e1169a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b84afe1-a4c1-4af2-a750-0e1bfce1c4e4",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c728bb80-a6b4-40ac-a611-6bb7365d458a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e4c4e14-70e1-462f-b39f-96aaa9f235c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d52e7409-0bad-49ba-891b-871343ba0e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5344f3b9-40df-4fd8-8665-accf5536c061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f801af98-1cf6-48f5-92f0-2f883d5db306",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a61584b-2b12-41ac-8f07-de23c4513bf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "622520db-3ece-44f3-93f2-09f4d0ab1b4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51179f21-f214-40bd-91fd-d9991423dfdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c0acec7-8cc2-4f67-ba00-fee23bd22724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "146ea275-eed8-496c-b1c3-9667381f3eb9",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e74812-5fea-4ad0-9c48-ec5b060ace22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be857f7d-00ed-4a46-b3b6-6c2dfc474284"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87865101-988a-4149-bab6-3b4b29ba0410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "81bf6547-63da-47bc-81ac-b63a60696fa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c782149-a962-45bd-af1f-7b1f4ada5bbc",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2fc3318-93ca-4b6e-a017-c7655244449c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35f2e4ff-4729-467a-8734-c803a353c901"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20a6fb6b-8ad4-45a6-833e-652301e9fe65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ce92314-72e0-471f-8822-f9688d596b31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53a10d23-bcbc-4c37-aa6c-1345aa5ad196",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01914eb5-964c-41bf-a2de-2312c1c923fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f25e3fb6-f799-4125-bc3e-ec8260f786c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ddc132b-162f-4782-9c44-e358f92a8e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "04499c65-8b61-4549-aab8-b21ac5a42ddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f9db414-7cb2-438b-9526-7957692c7060",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1fdcefc-5e8f-4aea-9761-b32d33acaf8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e2b2e16-ce51-4c47-8133-5d0bd8137b9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2898eab5-b8a7-4388-bf16-5c8e5987ce28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8325ea83-ca6f-43d2-841b-a367cf310fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30775ebd-c51b-4b38-965b-ab61d923292e",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73d64226-5a63-47dd-a3ca-076aa37947fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76b7fa6c-9b59-4c57-987f-57f5cb0be433"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26bc12ae-ee4b-466e-aa97-4a0da44285b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "55cece3c-d884-4b0f-98c0-38ebe3b18ed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92766e6c-93b0-4336-8686-00a18c29db86",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f34b4539-d6a1-4db6-b4af-f6609c556f7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4e11e74-b00c-4c03-8162-86e2320b0370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c630fd3-4f15-4eb0-9f94-c7fb5a8ad562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bd22a66-ea5a-43f2-826d-77cd5020bc29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab6edb6-a06d-48fc-9abc-c676d1838925",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a3269f6-a635-4a33-b534-f86763625b0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e61cb29-c519-4c75-932d-8f84d862e3a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81142e80-152e-4d0f-a53f-5f2e2b13948e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae4295d7-33c0-4778-b128-5ae7f9536566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd91fce6-1258-4cef-a0cf-2dd82dfa481d",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74ba89ac-2a10-48e6-b3d2-20bdbfcaf5b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6177e31d-e32f-4fd2-bcc1-8901cdf64752"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5fb25bb-793a-48e6-9ca9-2ab936691b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e64dec1-a07c-4c63-a735-7bd5e5cdcb46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6113c27b-1055-44d4-961c-eb91713e13f1",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c9f1a7-d29d-4686-babe-622d1e084815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bee24045-3262-40b9-aa1c-6d39a68d4d9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3581106-ec5b-4351-a713-41bd6852ddae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "28695d21-28c0-484a-83f1-91e9bfd12c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0af3ec74-01d1-4d14-9522-f48cab91fafd",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c538221-f293-4b97-a8ae-19de771a742a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63c3aa08-8c79-40fd-adbd-80716a567714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "866ed1a9-191f-498a-99cb-7f7eedea546d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a3540b8-ace0-4d90-bd32-73527282f253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "482c3d08-512b-4a2e-abe0-530d47da8552",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e3bc95-994f-4725-8527-032b57fec354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26aa4e76-f6e0-4362-b849-23a2f973c8fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79f7a4a1-28f8-4b20-a6db-dfedace77432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "227003cb-a3b4-4ea9-a8f0-8d160c8f5a73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcf2c085-5b96-4489-80d6-3e8e14a539d7",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6709b43a-f74a-4d13-a32a-b69a23582303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d863fb12-3ba7-4422-92e9-b5ea137ddf01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9bc1fe9-f99b-4b72-936e-815f911ae994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "df356f0a-bd09-4cef-b1ea-6857528ae7d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75d7281c-f200-4f33-bb0e-36b2d3dd5d42",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cd24c72-631b-4605-8f35-648e3a8009b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b22c3d5-5302-4fdf-b2ff-63fd7ae51931"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dac1fcb-d1f7-44f2-9119-2a32b102425c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "498ea80b-3953-4489-be5d-57f88b85bc87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bce936b-4dbf-4903-8342-96b13ae3bbe5",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02f0b029-1ad9-4ced-9e43-59bd671ee367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4fdf7dc-84b1-4a03-8001-e344a5e7973d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "259e81c2-d945-4e2a-b1c9-95022fc5ecd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0de4c748-1245-4c0f-9016-865187b024b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b26a0d1-f5f4-46fe-88bb-bfb79889381b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c77a9a68-ef2a-476a-a713-a49278722e0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de15de18-c61c-4d6c-a2ec-cf910062b339"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ce2b432-92aa-49a2-a8f0-2acd2c5501e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f91595c8-3592-4881-b653-2ea890d78a16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "904fac72-8b42-4cd2-9650-3098cf83f7c6",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54716ae9-be62-4f93-b534-0c0012e16571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a199425-5d5a-4686-9eb2-94b2bd9862cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08909d46-137e-4575-8373-5cf8647c73de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "69878226-62e2-4845-a247-6efb2e534289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8e1f778-ec7d-435b-9859-64005437dc12",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e5540b3-f62b-4aec-b8a3-f8cc1087c0b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdaf95ae-8278-40dd-9895-44b410e4e747"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d43c7b1f-078a-4b3f-b329-5d76f6d598e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e007d048-f707-4443-99dc-e1ad0579ac63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d4ff3ff-d2ea-431f-8e13-21801af83ed8",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81d0f619-13d0-46ff-a4e9-db187ad4074f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9bdb185-42bb-4c77-8043-8d616a5d60b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3492854-ab1a-4e49-bd30-6f8c6bbf085e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "223c67eb-89a9-4e1d-9403-c82f9b0b6e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de4dbd7e-57a3-4fd4-a2b2-ee24c7277d23",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cfd05d1-ff9c-4c93-b594-830b59da314c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a267f9a5-be05-408c-bb80-118726dd8bc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e091db-4bba-48a9-94c9-62378d57ab31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "dfda0072-16e1-4ba0-a271-dba47ffa0c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab60e31d-fd58-43c7-85c6-064275cd9850",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b26cebb-32be-4aeb-bd9c-eebfe16a4f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87d4df3d-689f-46a1-ae73-6c5549e8171f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebddaa21-bb17-4492-8d41-edd931f02ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "164a85bb-3d0d-4c23-9c4c-315fd64cf3d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe5a37da-9255-41b0-976d-3652ce966dfe",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9396e7ce-9cf2-46aa-9a3a-09a1250a5295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc6f6d92-35fa-4c06-bfe6-c47fb869da52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7477871-78af-4670-a304-df2d533c6cd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b7f3091-ea02-43ab-ac1a-84cb717fb90b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9879f1a-efaf-4292-a140-71479264e2cb",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33946d12-1178-4fb5-abeb-6754b52d8cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d389e50-c79c-44b1-a91b-249e9dc6a8ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "254e74c0-c4d0-4104-abf6-b7fd2dedd882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c20764cc-18da-4a80-befc-e129c9b994e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4487b090-d3eb-4451-99e6-0006b5aad476",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1058a95-9746-4136-8176-3bed00aa43cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b15f4022-29cb-4e68-963b-0572a2f8c30a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b12c0ea-23a9-4fcd-8039-4fedba6035ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c32a15f6-56c9-42e7-acc4-48d5a9a33837"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6184492d-8e86-4db4-a655-d74fe906c99f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0d1a8a28-8444-4298-814a-99930eb3b2d8",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3883ab35-0f4f-4715-a47a-416566e2edcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "482e24c1-09b5-42fb-8140-3ee9c4a4490e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36aea310-b384-429e-9f78-a289a22e5cc8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf416a01-74c3-417b-9918-14252291655b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e34bc34f-bb68-4be7-b197-fe91a6d2808e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2a061b51-3f99-4b78-828c-fe9d4c1ba402"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "44461922-f4fc-4116-8162-37223daa6e16",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "600eab24-2dc3-4ce9-9f16-fc0161078ab9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4629d198-0fc1-49f1-bbdc-9b369f0c15f7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "36375a16-d2b7-4fca-aabf-a203c3512261"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9f1b284e-1525-42c9-8c73-18dc99f8b81e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6478bdc0-1296-4f80-bb0e-1133a0a150da"
                }
              }
            ]
          },
          {
            "id": "d06b287a-7cd8-4b26-b222-844ef02b3548",
            "name": "Positive Testing",
            "item": [
              {
                "id": "07ca2c42-1f6b-41c7-a92d-6f4cd403b049",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "26a591d2-6788-4e16-a2b0-7dfd3e57331e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8ea9bb3c-2de0-41ff-b03b-105ca138fe73"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5dee3b88-1ae9-4755-ad51-8f9184a8ed90",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1703e6e0-ae76-42c3-b631-7459146d48d7"
                    }
                  }
                ]
              },
              {
                "id": "182471ac-6a85-46af-9c4b-c2ac6f2b0ef8",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8aa6a963-2a47-45ce-9c0e-f989d16c14bd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "98637f20-3c27-48df-8885-0d50ee1d8c1c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b2262f3-3bf1-471d-b72f-f9c2bb79dd99",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f6b3c342-54e9-49ea-af8b-6186aafab62f"
                    }
                  }
                ]
              },
              {
                "id": "73733d2b-af78-455b-8bb2-fd2905a4d665",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "beb42e79-a215-4859-a595-f17b24e94063",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "069702fc-850c-4778-8108-8603d11bdf2a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a9291c8-7e6a-44d9-ae76-2816e56bc77c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7eb0818f-a9f2-46d3-b488-6e2527828b1c"
                    }
                  }
                ]
              },
              {
                "id": "a3298d65-a7f9-4e31-95e3-dac37a3b11fa",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "135fa5b9-57ec-4ba3-a12f-3599cfe260d3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "83a9f1de-01de-40d1-81e0-6e6fdb3015b4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f0ed4ecd-6fdc-462d-999d-6c93a263ef87",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "13c8da3d-ffeb-4bb7-8a31-7461602cbc23"
                    }
                  }
                ]
              },
              {
                "id": "912e180d-0897-48d7-9760-6cab27a53865",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "850e0388-c921-4dc6-a51d-17dda0ecc7fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1c2a6c86-de54-4d6e-98a4-5db7688e94a2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4bee9dfc-ef92-4c0a-b8cf-cc9edc5cf7ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "ae7d0416-607b-427b-be94-a28bdbe4912c"
                    }
                  }
                ]
              },
              {
                "id": "bd468c24-d504-4511-8705-82986eef4bc8",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "feaf8c44-03c4-49af-a3c9-e4d75494582f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4df68bb0-35bb-4e8d-9fe2-326ed02f8c30"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fcdaae17-ba96-4436-8448-95ae0eb56d3b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4e2c9dcb-2e2c-4d26-bae0-d0628e50bb6d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d6e3bbe0-5938-411b-bf13-2fc6e6f5028b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6e0b000e-0e45-4e1c-b9cc-55540f102c5f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "22cfe799-f9fd-4793-9853-1f157cda0f7a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a2b6b896-5e95-4614-8489-94c044bd5b89"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "95ed5d08-dbb7-4150-8ab1-fbfb3a6f4650",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "d10f66be-8009-4e40-a77f-9244dbb59763"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "78e6e219-7e3a-440b-8055-cf91e35535f1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0e209afc-7345-418d-956c-8634a87422c0"
            }
          }
        ]
      },
      {
        "id": "d713a626-80e1-4936-9cfc-a4be5f9abf7d",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "21d686a7-ee6f-40a2-b7cc-ab6829b66efa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0cc6cde6-4d81-410d-ad9a-7649319eacc6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "708734b0-b042-4b78-b396-362d8bf54da9",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de51215-f072-419f-bb41-188cf191d225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bb11f28-bfe1-414f-9cee-d70df9caa363"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b284cf-ed4b-47ea-8822-69265647035b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6211c141-e51e-47f1-bc45-db6b033fca8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3a9b32b-f282-41f9-bfe9-5979617fb11e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "637511d2-28f2-4e89-ae7a-1da49c6ccdf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cee95f04-22ce-41d2-ab46-a6a975213359"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d8b64a-0c54-42ed-8dcc-3d88b2c79403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "56255553-b222-4add-a9c1-a682a844527d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c75ae75-2b30-4e20-8fb4-cd6fabcaaf3b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b55145e-8124-4cbd-9df5-12f0dbe486c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e88bdaf1-3c5f-40fa-99e0-a081a772252a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6291b57-f189-40e1-b32c-dc028560e445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "558371f9-551b-4863-ac1e-f3c7a99802f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d4776e5-1fd3-48ba-860a-d2202cac0d15",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b23d9a2e-cbc0-49e0-a422-c82a1e4f18cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa6ae529-6b1d-449e-aa76-5ac5d1fbca6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c910bf99-fa21-4188-af2b-872229c66611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "156b1e2d-aaa9-494d-88b0-33b13392dfd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f61bca2a-5301-4e7e-95ad-2d1596ae0f29",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3a0d379-c202-4dd7-9a73-31031f200db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7e40997-10ab-4540-8576-c460f9d10e7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18402408-4641-4a87-93c5-3c550ae663a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b3f2c39-3dfa-4631-8367-76c12e74c96d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e31c3199-13a8-4687-b7f8-9f2fa60e3bdb",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f12524d-0abe-4448-bef5-3cd8dd1cfd34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfbd3f3b-e8a1-4d9d-9fc8-92c1240189d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dafb99a1-6c66-482b-91d5-a4180ce9def3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8777023-f657-4f72-8bc5-8de505ceac58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fdafcce-003b-470a-87b3-cd89dc558de9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27ec0076-87ed-4aaa-bec7-920ac9a3d7fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f01ca63-9eec-4157-ac0d-1d7979ddf718"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "197feacd-edb1-4c02-a0a3-b521d4362ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8a5823d-75c5-4722-8c5c-e349c1a61765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e44a31f8-2927-4fa3-a955-018c8e45d5b1",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7894ae5b-6cfa-4430-9d17-b09f3686de14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35a35626-dbc7-42b0-88c9-2ee2a7b868d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a308391f-8101-474b-97ca-3a70205f6f39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b0510ea-5556-421e-abd7-abefcff7964f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "432c49ce-4707-4cfb-85f0-909b56d36615",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "935d3142-3288-41f9-a314-f07b6604d356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb07478b-ffff-413c-833e-923d0c2de5f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d713830-e1d7-4ebc-8561-cde49eb47267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e76381f1-c6ee-4ec0-b13e-474e002fe07e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55af46c6-0510-4b0a-b3cb-3ebd9b4b54c5",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "759434dc-46e2-4ad1-8afa-45e06b96fccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d16a0acf-e3c8-447b-bd25-ac89fe86d04f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb08489e-4c2e-47d1-aeff-ed5b36629e78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "03756420-def1-4a5a-a16d-d25655278cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bc24658-f20d-46f3-9930-58f94b490ad6",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9af6df6f-5c10-416e-8f3e-a04fd0b2070a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2322b6ea-aaa9-40ff-b318-86f01a689377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "390295ca-5a76-4269-89bb-c9f7f9290bcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5645d31e-80df-4f46-a737-7f1923b21917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b519901-0702-4a2d-bf9a-27409e772e23",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5768a63-4ffc-42ae-9634-a61cc6910e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03b3ef0c-3a6d-4499-9a67-2ed458ca6cb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e950a4e-ec86-4086-b343-85b803ceea16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f3cfaa23-55f5-4c67-b988-0057cb54701f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18b7dcf4-7085-4aa0-bd79-6d882dd57d8c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0952d5a-c006-4593-aaa1-e985c07154aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c53986f1-ecf7-4ad8-84c2-007757f6f74a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "985234e9-307f-4ec6-9f06-077022593808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9133136e-d446-4fea-b81c-8a72e2fded7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4739a8b1-f8d8-4919-83d2-edefe96fcaaa",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd19d2f-cdae-45dd-b3ad-d25b03c1f11a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7b9c1e5-db0d-49df-a4c3-e300de1ab340"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86341c7c-c05b-46e3-b65a-5e8a56789a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebe1a6b9-12de-4f07-b55b-01d7239be406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf395d75-33cf-47f0-9a48-ce3e841e26b9",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01a305b6-5ff9-4479-8f13-cb4fde2efedd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72aa6b61-f6a5-4d91-b388-5a8657c61bc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52e51efc-e4a1-400b-b801-e0a0537ce861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "090feb53-999f-4a8d-8168-edb26dfdd8e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b63b82fe-11ae-491a-927e-99552505412b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "265c9d25-5b37-4b68-bd87-70883bcce9c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d71f0d08-211d-48e9-843e-eb6baa588224"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e5a1133-aefa-42b4-996c-ac6c69b8bde2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e04d5cca-51ca-4fda-aa35-8f059b6ee91d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "196787a8-892b-4a45-9d3b-09fdf9dd11f1",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a98c23-5632-4bfe-b463-532add7958b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2da036b-0af2-410a-877a-f26d5d1c69c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a3e442-058d-41ba-a99c-71981948a13c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd8a5249-b235-4d6c-9239-50b94be9f694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2b0a0dd-fa45-4fd8-9985-ab6cfb9c5033",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efff427d-d11f-43ed-83fe-a31a748eb700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdf46e07-b846-48ee-849f-f36b127ceadc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "917f080e-7834-4f73-aafd-5d1011fcf82b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ee5a18a-a6cd-4db1-a144-38f04fbe2dab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af21454e-bcb9-4100-bc38-9c6fee809b96",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3683dcf8-f029-417a-8c67-d5f356993785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fef72896-8817-430e-9613-12d0ff62b644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5462d23-8d71-44b7-b28a-c383879d9a1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8402817e-9264-43b2-a466-5b9b764abc4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d8674d3-be14-409f-b30d-56e1b33ba36e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e557ff-5e8f-478a-acbf-e3ffa7491184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "023ba19e-1aca-44c7-8e40-4d822ddcbe05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54d7de92-1d8d-4c15-afc8-d9400c8e774f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "04220fe3-b186-4164-a156-d55cbe5e5708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e39e9122-b24f-4757-b31b-0b6d3cf6d019",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eba3307-38db-4a6c-a477-211c2b50473e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54bab08e-8110-40c7-b507-9725e5621b21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b7ba69-ed8f-46d0-ba89-2b3ca1056391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "23815fa8-09e1-49d9-850f-6172cf364d54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4c2fc55-4251-4afe-81f5-b1de12b65db0",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e04fb166-97b9-44b1-a292-c4cdcf281991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe16aa2f-3059-4279-84ac-f43fca138acc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1342c998-21f1-49dd-b5fa-e4fa3a3c6092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d6b42a7-5ab9-4ff5-b9ec-1d16cce489ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0810e2c0-513b-4456-a3cc-40b5b6e158a6",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00642e39-1973-49f2-a470-dab7046a78f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c96b7e6-9418-4846-a27c-d96f2270c89b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc18cf06-026c-4e22-859b-c41a58dcdbaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e066ffc2-cdc7-4b45-a25b-1734402c48b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6fdaf79-d6b4-4dc9-8a37-17a287546501",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03228602-7933-408d-989b-49bf88178864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3b3a8b0-aa0d-4851-a062-f3e1298bbeed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea609b48-4ec1-463f-ac41-3094f686cc47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0067515c-d3f7-4596-abb3-5028fdd2a41d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc3e0e7e-9b4d-4d6d-886a-87c8d46ad0a1",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a90cee-897f-427e-83e4-7ef4bf3952a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c79ab64-ecb8-4dd7-84ea-839393a235eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5deb9810-fe54-46ff-a057-b608cbe1ff1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ad2e08a-953e-491e-a877-76082fc2acf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5edf61d5-f6c0-4e19-80e9-f64e1ad927fb",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d44ca546-055e-4a5c-8fb1-3f8acab3c83a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e32496c-8b9d-4b1c-8857-4a009623dfc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e1f510d-79d0-4952-9526-5ab64fd46afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "645b6dd6-2235-4c30-8ef9-201c1eca66d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3355cbf3-b53f-43c8-8d98-0b185c1dc187",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9916342f-4443-45a5-9613-42ebd411d19d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "377d5059-be44-4ed4-b741-7015d3e92633"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5571f7fb-5403-4773-8f82-cfd127051a89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fb5e2dd-e22e-4d4a-8023-6b7928a2effb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed4ba7be-db8f-4b99-b745-a6d4933da1e8",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b4fdff8-e035-421e-8287-e013767a5f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efabaea2-985d-48ad-b006-c49fa88f4408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da216fe2-39fa-4365-a491-c872804a3aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "22b87401-9a03-452b-95c5-96ff4854134f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "845f5d9a-d99e-4e3a-8d76-3a06361c5131",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6793cfd7-e571-4ead-b0d8-038250092fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec95d5b8-1f73-4888-88d4-30ce5b9b1da5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1125026-2096-4a00-b9d3-8e5d1fbbe896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "766f538b-bed8-4979-948d-80843647f8d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9dc1f51-168f-4145-b7d9-bd4ba87f4a71",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bed04592-452c-4ee2-aea9-987f675b4f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a30401e6-4745-41f7-94dc-38907a90e792"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95e36087-1a49-4f63-a8d1-07fd7e650f21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a42d0c0-b757-4cee-b0d2-bae52f8655e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba9ce8c9-e46e-491f-8131-6a8a3f0a17cf",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e97437-3294-420a-8118-747f98c6aff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "920cb505-fa02-43dd-8231-5ebd396b8741"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15ab8d6b-c7e8-42ce-a438-8c46b9b26608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eee2f5ad-7423-45e5-af05-00a6f0916a0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0cbd70e-43f6-4790-b260-935094d9c42f",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59afa9e9-7467-466e-bf19-bf9192db4800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "279584d1-5150-49d0-a444-98db66e44301"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef32b8a7-e234-4236-aea8-0bb493671da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cfab698-6708-4c93-935b-59e922488594"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "56583dc5-6bf9-4464-8a48-d73d813d57a6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f388561c-ef52-4064-9877-20ce443ea0b2",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e2584a-51aa-41e6-b5d7-15629e51cd7d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "306cd8eb-8f96-4c69-8743-d536faced5bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34fa173a-7017-4f8a-b8e3-78dbb772f9df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "27714ced-8177-486f-88d2-6227f471df6e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b3426d80-55f6-4437-89fb-32aff9bdc2e1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e606dd7d-2ced-4b98-9ea0-3d97b91af75e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b949498-99a5-487a-8d3a-603328e52c4c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4c9efc3c-bf59-493a-a85c-3dd5d8dcf810"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5d7b8187-8c90-4f37-a761-cebf83f27ad0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ec376ae1-7f3b-4b6d-9b57-d0fdf8bc8c81"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9dd95695-f5d9-4cb7-8800-2cec1dbde84f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ec9af870-c6a1-442c-b80d-41a5008ebe3d"
            }
          }
        ]
      },
      {
        "id": "d3006fa7-f799-41ea-84bb-bf0cc19789dd",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "1165dd46-e3c0-43cf-8cc3-b07ed39b5411",
            "name": "Negative Testing",
            "item": [
              {
                "id": "37f29481-de06-4d98-b993-85c4cfc83321",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0223f2ad-eeb9-435c-87c0-cf060f219b7d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "434a97d4-054b-412d-96c4-d37fed3a6628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3998947-32a9-41dd-a16c-6318e780d3bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74ff5107-ab9c-42e9-ad47-7eff8efe1401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "40c8fef9-f8c6-4646-aa79-79fe866d6be0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f05d2d21-c320-42d9-a74d-2083e37d6466",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11375df4-e58f-48bb-aba0-8117f83660b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80e59abd-0f4e-409a-84da-9a8b17461fe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f231a06-a15f-40a1-98ac-d31f9148afd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9d84097-7d4d-4bf6-ae37-516861613aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6945c858-f15c-4710-8e13-babbe7cad969",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a22c6941-586c-493a-ade3-fc2d9986252c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36f03ad7-9c1f-4361-9cbd-8f889e75228c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "202449f9-6822-4166-8f04-742edf270ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e64d8079-a60d-4c5b-a791-944f4e020eb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21e7c2f7-5ec3-45ff-984f-6cedf1a0d3fa",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d2837f1-1418-4ee2-b7d3-6d923e17ba57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5f81061-35ee-4fb0-ab86-7ece0833e6ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b3bb262-1d7c-4e2e-a4c0-5b7228edfd2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "72a26aa3-d12a-451a-ab6f-0e59976f565f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e54ab220-ac44-4590-b3dc-0bf533e6d2cc",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42d257f3-13d4-4af8-af76-df02da724588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edb9f990-a879-4ba3-98ab-04cf8330845b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee88658a-2659-407d-a833-5a8ab6d68637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4904c477-c9ff-4a1c-b67f-28dcb8245795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4271c63-17fe-4aa8-b958-4bf3a865fa44",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b7d1f37-7715-48b5-9a32-8dc4b0265991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0e23656-65fc-4194-a7f0-c8dc2bc299cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "013f53ce-bcbf-45a6-b2ae-91ac805f3019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d20182f9-bacc-4752-b453-6a28a756608b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeaa6c98-6b91-4d40-9165-8690e6fc583a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6a894c4-b49a-4dc9-bdfc-a613fe9a8ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fc67424-c343-4605-97da-e218af13ef9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91afd122-ae75-4752-a7a1-cfa4378c352f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0a5cec9-725a-4aed-9399-7c5436990153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "519fb306-f169-4f09-a300-6bd38033b8d0",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "130e2a48-8b5d-4536-99a8-e1449a3b41ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4e415b8-9498-489e-bcb5-56362ee0058c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac2071c3-1bcf-46e4-842f-6470e7765579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "065f1aa6-732c-4974-8994-6a6d255ef7ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca78c1aa-4fef-45c3-b216-bdcec78881e7",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f012f78-9213-4d7f-98ad-a0c783e558e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d787188-099c-4e30-8e0c-5826265a8e47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28fb3723-4246-4e22-8891-5c3a30edb2ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb5c4bdc-cba6-4581-9883-c17cf603bf52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0dfd663-5a5a-4964-b2d0-0213329c78b8",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3db30c44-d46d-47f9-b135-1c0ad0ed67d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6997a59e-aaaf-46b7-93b5-30eb6239148b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79805603-21d8-4ce8-88be-a88412f18a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7976423d-2e6e-4b67-acc3-1b7e81398848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94200ba9-47f5-467f-9d2c-c41668626225",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c031d812-012b-4173-8ffd-f04f73e309b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9a39419-12c2-4866-8e02-1f211815d0ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be81e8b0-9040-45ad-8a16-18cf9349ba9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8a5c204f-0028-43f6-9805-929e73ac26d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0983d085-3a82-49e1-84bd-57e40e97bba1",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b9b0d73-f18c-4ebd-b7c3-478a1f9c8c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e945a34-cccc-4db0-a3b5-69737eacad8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4598ebed-eff6-4682-a16b-1e1bf28347d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5b92eef6-8adc-42c5-b88d-ea0a8e7c66e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f59c21b-b010-420f-bdda-cdbaacd830bf",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb20774-53a8-4aa6-bef6-72428f9e9339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "358b6791-81e9-4568-ab79-5c15a87b8197"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cb7a4a9-41cd-4cd2-baa4-7ea0f0974d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfbdb86c-e22f-4b43-93d2-7d3ae4c0923d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a2a91de-70e7-44e1-aeb9-bec710206cbd",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30090afa-488b-415b-9bf1-f55089040a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aabea3c-61ee-4474-b2f6-62361de0bcef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35165ac6-e7ef-4d4b-8c52-42db32eed09e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5541975-3e8e-4428-82b5-8daf9318404d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcec1489-1b32-4609-bdb2-d36c488c588b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed1a1514-085c-4514-8cbf-8c27419bdabe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4692d1a6-39a7-4b73-9e36-d4368683ccfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "337ec1e0-4c00-440d-9179-1ea70fb2c7f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a41e67df-0844-4486-857f-6259976daccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "363a42b8-59e1-44fb-a984-feb5ad8c19f9",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e51bd19-c37e-42a7-831c-3de37560d3e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddb16ff0-823e-4418-8181-987e0446192b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37e0cbb8-5022-4155-98c0-13978d19c70c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8c11404-945a-4ed5-b04c-2d904a449571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e413497d-ef78-4be0-a449-93e7e4d57160",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c11c140-a7ba-4ddc-8d96-3ee7f222d644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbd1dde7-8b01-4a3a-b767-12a79c9cee4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1a828d8-871d-41c3-9409-35d134b2ed3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "175536ee-edbf-4811-bce3-d63768aadc56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1477f3a-7688-427d-a3b2-95e3589dfad4",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab7cc80-718c-4851-9a5d-b22ea6fb1abe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0156bc63-d21b-45b5-b7c5-3ec0859c0189"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd32340-2a54-4f29-9db2-93bf75372c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5f9d725-31bb-4864-bace-1186f1ac04cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "560dedcd-e468-4c5d-952e-103b7c2d47a3",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9039d81b-5f87-48dd-9c98-06d9f27d1028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdb8729b-9729-4cb6-9385-3ed1980f3a31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6de72ef-1545-4f08-a213-250450569244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce0aab89-297e-41bf-abb1-d1d9f44547eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1591bbc-94b2-46cb-aa4c-199d86164ab6",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e284ff3-6cbd-4bc4-a524-38657fb70bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea797cfa-d8f5-47ae-94ac-1ab84c758bbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09230728-fd2d-48ce-bffe-a5e9a2da2544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bded4d8-fd3a-4df7-8682-5aac057ea230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95b86258-fc9d-4c19-9214-c9d02b64847f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f727d73-8b6e-4c3c-8b4e-d73248412d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eddd1fb1-7147-48fb-887b-e612f318df9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd961ec-ebd2-4a9d-8e98-3da7c7bac794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae79642a-99f6-4d7a-a2d1-d1361cfb952c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df95c43a-3322-40b5-bd6c-2f8ced2d5832",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c46a0225-cf8f-4650-976b-ab09910fd088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48dacf73-83ef-4177-b5c6-f7239f3fcd38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25989ff3-a980-48f6-ac25-4b61b3faf619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9b134ca-2a8b-4e32-a2d4-eab2722edb48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e839fc-19dd-4a02-a536-09cded3d0713",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29a413e5-1d65-4352-8787-831cb0d79121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11c04610-1c0e-487f-b388-aac826bbf5ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d67ff071-3545-420f-8854-06a1597251c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f02ab2e2-5b66-4401-b25f-bda228348249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9525f34-630e-4de5-b41f-ead3f56981db",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9090589-59dd-47b2-a04a-0569fa220a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87df7a6f-3a25-4ad5-8fad-87f9c4c64d9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42b6fd33-0efd-496c-929b-f3662ac5da8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fdbf5ca-3da3-4358-abf9-e0a3361bc891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84bd0798-b9c8-4a32-b92c-7a8239de2025",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eddb412c-dd7a-4503-8bd7-6fd89d09d883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f657e239-9acc-4c5f-953c-5e374af8074a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2649897f-41c2-463c-8e78-9682d3b0ed8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "49298bf0-9135-4dd4-bc55-d73469e63021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a59bc1c-d1ce-409a-b513-c5d4882186f9",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "286a124d-30d6-45ff-857d-d64912cebe28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5f9eab9-1bc7-43f3-b4bf-1a3650e7d3a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68948492-68d6-46fc-a887-d9d1f44460d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "79952f6d-5dd7-4d25-9e92-3f1a883b35c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da66d15b-6c7b-4319-b4a0-6e4058ee3e77",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "859eee9d-6c98-4317-85fc-835c735e7cec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d14436e3-703e-4d67-8a5d-3920769ef7c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "651e6400-4626-48aa-b4ed-d9071bbf0c89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0f85a5f-5fe5-4d27-bc0d-7346041625a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e5af043-47c4-4407-8f91-c4747553e577",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c5f594e-ec58-43e8-a463-68dd8a9427e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb695f89-6569-4504-8746-a5604719f659"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcdc6f5a-1fd2-48cc-b871-aba25e2b5c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddedd173-3dea-413d-843a-4fb3d54e65fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99639f6e-b3e2-4280-8638-23f899e9c1ae",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85470f6b-1ac4-45e5-88a3-eb41d6c2625d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a17ccbf3-96ba-4d1b-ab3d-d5bb09704bd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bb2ee2d-8379-4214-a3c7-afa550522cae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15e51148-d9a9-4ffa-b38c-def6074c421c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c052de6-b2a7-4991-a85a-efaba6fa10fd",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3df98b3-d108-4bc1-add0-fc78292c8d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef3370cf-c902-4c6c-9bd1-e10dc0816a17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46359f63-8395-43aa-9fa3-88032a86e951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec432cbf-347c-4457-b2c3-ef911a62ba6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93cea99a-ae58-45c1-94a8-21507b62af77",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15267774-3ca9-42aa-91ff-3415849ccae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1718dcfa-9a78-4630-9cd5-56b5892ddebd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e89f61c-4776-4e81-a8f1-de0f54e5ee1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "414b7129-4f46-420d-8859-c5d4ee7bdd4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c32a99d-c88d-4f05-9b7a-42ccfbca6495",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa06fc0d-4d15-4458-8849-0929a1f5652d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3105340c-86b5-466a-8d32-2ef8a400d1b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bccc1df6-7c97-4c2b-81ad-c32eb40e96a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73638e28-e2e3-4ddf-af42-3dca580b4987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef0dc6fa-eb2a-4a42-80a0-b37bc65521fc",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f6f8b36-8a11-41c9-abb4-eca3f4c320d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e0f24ea-fbe2-4762-aa99-40c2e3ef0c53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b102c5a-3abf-4de5-a9b5-f56553e3367d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c561dde-1dc6-43d2-92a2-2d14963c605d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a32328-b5b1-4f61-9b9b-9bfe72eacd8e",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "846024f7-ac0d-4c88-b569-67145c86e547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c0911bb-88c2-4681-8f0b-4349f18d98ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7715d1fe-f42a-47d4-ae83-d9a34db14bff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "85b7a079-2f31-4147-a273-6c49b9953097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46aadb9f-53dd-4975-8eab-35adc80ad9c5",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f0e46b9-7c45-4453-b6aa-d250348bf952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8024eee-eced-4b99-afa4-ef9d524d59cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09e3427e-9188-415e-a64d-f5022463a9b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53ea9201-159f-4df1-9f8b-693b46b3f889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6082de4-c996-4d8d-90b3-d3c2c09b03cf",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50f82f9d-11b2-447c-96f8-153671d83e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b178030f-c9ac-45cc-92e8-0e9e7dd23df6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ceecb23-7e88-467c-8581-57861337970b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d98f424f-4a42-4e2b-b590-606f07b62908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53a88caf-8bb8-4caa-b411-990d7f14e239",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83289f6f-640c-46c9-a33c-ab24bc593227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ebd02bd-80f5-4dda-91dd-37be27d751f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5433f0e9-d999-4a16-870b-1d4d7a0c18cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7305d1db-bce0-446e-9108-6ac663a2ebe5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f73f85da-6ff2-42f8-b5b2-5f2c0aeb722b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ba7a5588-7b07-4f7e-93ef-fd1eeaa12034",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f173838-a6eb-4fff-8ca5-14fb9e4dd0f1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b4553522-cf2f-4839-87d7-67a5f5305f43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e414cf40-b225-432b-b007-7a892cf3d559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "31fa9c68-47b3-448f-b304-7fb3882186dd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ba104272-f3da-4cb8-a941-e1a3f59d266e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e10f931-2127-4ecc-a1dd-79284150660b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b85bc1b7-10c4-4aaf-bfc6-1c1c31b4de6d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "97439596-8b1f-4556-b210-ab0c6336a2bb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "db47a693-8b33-4139-8e13-2a52f05264cc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1f83a03d-16ac-47ee-b9aa-f5818c573267"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b1411f8c-2b24-4040-989e-6605aaecc3b2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e900c694-e656-4416-bdaa-6c326dea37b6"
            }
          }
        ]
      },
      {
        "id": "cf4643f0-48b3-47d6-b5e6-2c3b2518b1c3",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "6b647940-cd59-446e-94ee-bc00a50c4df3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ef1d73e1-4cf2-47a8-8129-eeb896d574fa",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6b5282bb-e8fe-4333-8b50-1f64d3c84495",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "038aa63c-a418-470a-a111-e49efbe52449",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7677b4ed-e3de-40cd-b039-998d95b51117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb8b9bd7-57db-482f-bf90-50ef0357783f",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3d3bf64-f711-497d-8291-d45754587f67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b07e23b3-2aeb-4430-a99f-42a13f8ad6ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa4a0fe-b592-4024-b2e0-3aa9b2d93d9f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7a32fca-77b1-4b00-b908-9c262e471854",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aabbd791-27b8-42a4-a0f8-50700765154d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07586bfa-edd6-4dfd-9576-3f076638b685",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ff53312-29d4-40bb-9ddc-66116c947f69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa5f0814-60cf-47f2-a77b-1c60d1b3f6de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54db5037-5fc4-4563-a17f-6036346a9bc1",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c46562a4-42b7-4dd4-b7f3-f777605e08a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36ea2870-8c61-4eb0-bff5-3e92c7e2091f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38b8d71e-6c06-4d7c-a691-3ef950a76030",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "431942db-6120-416c-a2a2-e78a9c97ff1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "919922fc-b463-4e11-8ffe-374a3edf1e01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bebc443-064a-41e3-89ce-eccb497144de",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70fd5201-315e-46b9-a53f-dbf11e96a631",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e64fd2cc-682f-4ff8-b242-99e0b205e869"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0290dd2-05ce-4a26-88b5-ced8dd0f9275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3193c3f0-4559-492f-9ae7-f4c1b2c15156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "083447fb-ce3c-4798-9ad8-bd344187a24b",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a277d63-9e25-4218-a899-b17f490987b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebef3a8b-1f02-48db-8745-1b5dacbae2a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "689a2f7e-19ea-4513-9afa-04e83e603a36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94053b9d-4f69-45d4-8d0b-316b9185a03a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f511de47-229f-4604-a4c9-88e9dab52a6b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "069074af-6f7d-4155-938b-6905209b98a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16aa1acb-dc66-473c-b6d1-c7d9dc44a6f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e51de11a-33ac-461d-a64f-ca3124750b56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67c2900a-5cce-46eb-892b-2efe4f01832f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d9ba19-1833-4a7e-b71c-ab95b43acfd1",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6051b09-756a-46ea-b082-e5d372e73518",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "811e3e25-668d-42d2-998b-7568ed6d144e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ba920b0-533c-404d-9be4-26f463e59837",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d99e505b-eeb7-4881-9520-c7923a8e10d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73de8d70-7eb3-40b2-b0ac-ff5e6d00f629",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2db02ff0-9df1-4067-b894-860821095277",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19143705-f749-42c8-9e49-3d04e78d5f4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b63d3298-098a-42e6-841b-bb07904ffb88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b65170b-4aea-43b8-97cf-53dd01a1ba30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d385a2-e8fc-425e-9be9-79fe3dccc5bb",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6508a44d-c896-4910-9c36-7cf10b794527",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ded95fd0-f424-4931-b83a-a548e94234c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7ed96b9-ad57-48c6-a7f2-e07102bd6b64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9a83595-6070-4632-96a7-5cffe6d0b76e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7b3c693-e215-4af6-85ad-35786203b1a6",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea9a7a17-0d4f-434b-a534-0b4b6d099127",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6335840b-19aa-4cef-a0cc-4dacc65ae642"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b5f3ebf-55b2-4fd9-b740-1a62d6fcbb71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae65735f-9f7b-45f6-803c-3668e536f58e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b1b5bf2-1cbb-474f-9586-0a5fe73e44f8",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85594afd-af8b-452d-b3c4-4a82ff7d1db4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "191ed411-3362-4bf0-8d2a-d8910135aca3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ae9ce8c-68cb-4815-8db7-c7b255b1a28b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73802210-b5ed-414f-9419-26a1ca2b7429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d9f3f7-a9df-43c6-aba8-30c9a7791347",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf92006-7ac2-4b19-bb3f-c573096057ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09d22cf1-4543-4572-8f97-6a90dc8b7d44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86af730e-ae43-4f95-8100-65774dcf18d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c55dd5bd-fab9-4af9-81eb-7db7cecb6714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "677e75c8-1a7e-4dfa-8706-3efeff6d0706",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae3b6021-f4f6-4d90-9207-60fea822f8c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36a738f4-bc2d-4144-867f-2fe8708ba73e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb41a69-5c0b-4c50-81ff-03754fc4e2e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3af9227-223c-4712-839c-8667ce7ff304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aea4270d-94c3-4c5f-8073-52ce7c2259a5",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf4d0e8-581c-4b15-b800-b29a858d230f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dc876df-bd5a-443d-a0e3-1dfa3b5f4d79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "123ca9ec-7d95-4474-b69d-7d41b80a4181",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88f37ea5-c3b2-4b0e-8809-bc63fecc3caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "438db3ab-792f-4cc7-9cdb-38c1aeea54da",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d998cfa-e4c0-4ba3-994c-3d1c8ad2baf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2d6c8e6-d1df-4e3b-9fff-3f748a00858b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9ccd4e8-3414-4334-84ce-c12a0ee99306",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdf3befb-fdc2-4aed-a8ec-3697bfa68a7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "210537e0-156a-4c54-bb90-06b11203db6d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3bd4b5e-4cd9-4717-8e13-247fd84016a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e7e3faa-df17-4f04-a0fd-786ca694641f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "537f0867-70ad-4ba5-9fec-439dbffdca85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47f4c9dc-8939-41db-9aa1-135069aa973d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc4c547-8662-49c9-866c-a6fe4b37a5ba",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ffdcf5d-189d-48c7-9ff0-160936b794c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38eaf364-c2c6-4a83-a21e-c579ebb98778"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5039f4d-53f1-437d-8574-2d8445030949",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96110aaf-840d-4298-aa44-aff7d68bd4c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baf41c9b-ea74-47dd-bb7e-c7ce7e55aaeb",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb155c49-3822-4485-bed5-9df19073c49b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82e9de2a-5002-41f2-83dd-02685e93e9d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aff1ee6-54a1-4dfe-80d3-f25eafa1c307",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46e570a5-fc0e-4915-be56-9d8114bcbfc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c14afcd-7131-48bc-9848-79b7e47c49bb",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2268f8d4-2ba9-487a-bcea-36fe36640ed4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58fa332a-e945-4d42-89fa-ac27d5df7a84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d6ca9b2-bd0d-45c5-b904-9b7b9b6925de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f58642a-fe9d-48c6-a0ec-3cd7a5c457d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bb6b129-64b3-414c-a6b5-ae7c4f97aa05",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12df3258-67b8-45ce-9e55-65aef2e68986",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fe84f05-e2f5-4989-8c97-d8cdd6d5a7df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d41c2880-4e46-47c4-be76-65d8bd5b9243",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72859478-a7b1-4256-b751-d2ebf1f417ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47cd95cf-5b0e-47fc-83a4-f1068474f844",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f12c8c44-8d41-4817-b032-9bb14dd279af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "126612ce-3d60-4242-8277-61515c97e541"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f1b420f-dfbf-44a4-9ce4-78d86729ab78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab7d2500-1e52-4ced-94db-9d2ad4485859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2f5b61c-1a31-46e9-8512-e0460345b8cb",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d12136d-a281-4ae5-beb0-09efd687e0be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "760c80f9-f2a4-4594-a343-c8530385259a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd9522c-41d3-4ad5-8dd9-1da58cc89b09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14445baa-2cdb-49ef-9ed2-b64ed4714ee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8858db6-ddfb-46fe-be28-4877a230cf57",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37e7144c-1b0a-4c78-9728-3c98787aa047",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d217aaaf-a256-47c1-9f33-1b761be1839b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e55e805-6ca3-46ef-9c35-5ffb2f3c3671",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aff380d-c9d0-4630-878d-5f5bfd74e049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3d5da96-f410-45f4-9910-7409b559a5d6",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c1cff90-1fcd-4e69-acca-f5b81de843ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34e94bc3-1367-4436-aba7-d745e9e13b06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b4176d-8b34-4fb0-8b35-eaf9a4e33a07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40837950-e0a1-4ec2-a06b-23bf1e7425d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71abacc5-faea-4ffa-a200-88c28bd78a13",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22bffc2b-a72f-4e91-81ac-0ff552d768a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "099b820b-fbdb-4315-acdb-130215aa7270"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d61f92c7-e245-48ca-a728-f0b156d4dce1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "384b993b-7324-4706-9f20-ca8a3fa2c98e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c486c6b7-bed8-425d-9ed7-4dbe10e99248",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eddb362-e7d6-4f95-a900-2022bbacfe5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5aa954f-c291-4846-91cf-87b0f7649eb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "badc3cfe-f6f0-4a15-a7a3-a02bcec5307d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8c42ec9-31e9-4d37-9681-b2e0d5722242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e31f05b3-cb60-4dc4-b264-1a632fd386d5",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1b6fdd9-3d61-415d-a4e9-c06f4552abca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de065f03-53ef-40a6-be03-10599e8974b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc067c82-8880-4ec0-9a1b-3977b5296217",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "091dd784-c0de-4949-bab1-579e794c0e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "229482e7-f212-4bd8-9541-01ee8826775d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c776fad9-0607-450a-a271-baefcb08f045",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "260c7f80-1e4a-4839-8084-64eefb5cd096"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d60ada-4cb5-46f5-9476-416de2f82543",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9112620a-ef7a-49bb-bea6-12850551986a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a8c96b6-540f-40bb-8272-ea6a06a89372",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efd18016-59b1-4aa8-8c6a-819ee154e0a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e0aa98d-8f51-40bc-8aae-2f79f1a46875"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceda8aeb-98e6-4b6d-afdf-c2d4162a8ef1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e90a1126-462c-4e1e-8bf5-fe7e252784fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "009c1065-b8e8-429f-bd04-9764fd97eb8b",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd936fbc-a194-4d31-99c9-58f49ef32822",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f31bfae5-883b-4a4c-92d4-dd00aaaf2752"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "983f5732-ff6d-4aa8-b7b3-188e33f21a6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4acea52b-d349-413b-972f-58f321ba0d23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae3c3a2d-0d91-414d-acdf-81e5bc7b5eea",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1620859b-0d5d-4874-8a30-a90a39aadbb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd00b13f-eaa2-4107-b372-85812dff6971"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e374838-2c20-4850-8c06-dc653fbe89d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3967892e-f943-4bb7-99f6-73d7653e8a87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ad54ef2-daa5-42b9-b54f-af7461a5530f",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c28ebc63-1cc3-4e0c-87ed-3ad89d111b02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91617841-8b9b-4f1b-ab78-14b0c4d01dba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb5a56b5-02a4-4663-93bd-a322454ccf01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e36b9e0c-9fcc-4845-9acb-fcb08d0b9920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aac4a3c5-fe24-4320-9524-ff02d7e10db8",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3192196d-6f4d-4e6b-99f6-cb452c060ecc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e04c8ef-992f-4fbe-a27b-0446be862361"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fef2585-5214-472b-9116-331d6a4393c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5792676f-ccb1-4ad2-9a17-f4fb37b2b9ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91842041-2434-4680-ac06-e6a7b5f49abe",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e1d19be-a615-451d-801f-de7034d9ade0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f901448-f54b-4fee-b63c-00bab5831a44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2207b84a-b3d1-47f2-9271-f6ddcc054c72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25bd1406-2c02-46df-ba87-fe547fc77311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2a7de9d-2a01-4185-817f-bb686d0f7f5f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e864ae2a-c532-454a-bdc7-2beeeca4d64e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f63cf1d-69e1-440b-8cf8-81947147c57a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f07a3ac3-b601-41d3-b995-1245bed5afbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68774dcb-99ed-4147-858b-03f4363bae71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eadb988-5eb6-475d-bfeb-0b2f61c559c6",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "048644b9-014f-4860-9b01-19eb81b853ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea224989-0233-4385-8482-633453bcc935"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e19413-9ccc-4680-b230-169fb5dbab1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39c3d8cf-4c31-482b-ad74-0272bba7eb5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5c1d112-b8b5-4fca-9e88-924f6dbbe9d8",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "905f8e75-2ff1-425e-b6af-2881f3c0c2ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "708677d9-2b98-40fd-97d1-8d7c8ca5e048"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2539d688-c36f-44e1-9859-40e2ee36d588",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53dc7b73-cac8-470b-874d-7762c4533226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b3c2798-0dec-4933-814f-2c51aa3ca8c8",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0e4b893-4dd0-489d-9f42-e3b30f3c3acd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaa6343c-4d12-4b3b-b709-f391cbdb1c18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35cb75cf-4818-4ae0-a9fc-b9d8df942704",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ed80be4-b23d-4497-a6ee-30754911e313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a1d224-b889-497f-b70e-5e6c8c1846f3",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "326d75cb-17ec-4bc8-a441-2596a76fa9c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e210f919-a695-4ca0-b716-f4b9b5174bab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac00e0b2-cc9a-4a5a-9a8b-1b2bf8fe3570",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32bac575-a9d3-4daa-8c24-c2bfb964b4e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cbd8f3e-7673-4511-8d17-cb5567bc1c6c",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "875f8e0f-c211-4748-92f8-b541114e1bff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e4b8a31-7a0e-4923-8371-cdce0e2c429f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b6b569e-0a75-4300-a293-f93f63765426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35a0c490-24eb-42f9-b5c6-5a6b63f531c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3550120-2495-41de-a3c9-9e303de6df6d",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b05a3273-c1eb-4c61-8def-ef6306294931",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9285dbc-b212-489b-a313-b8add4139e9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac7a8ee3-0199-45be-b470-8a14bf2db01f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b07002e7-44f8-4170-9bf0-446aefc67e89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8175e778-eae4-4615-9a66-28421dc15c0e",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d27824e-bed9-4856-aa5f-156095395013",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "540ccfe1-3cce-4900-9874-98654449fb70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cf5837b-0860-40b7-8742-0a322202f2a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7e20e48-141a-411c-af10-f30450190cae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a6b699b-021a-455e-8408-145c1c3664aa",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2597c9e0-8f33-46b7-828b-9f0007ce5292",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79f1c0f4-31a3-4f00-b041-817ab5bd873e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "530dcac7-25ee-4621-900f-a9478cdb0254",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e314f79-bb3e-4722-9f20-44762cf904ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd7797e2-f1c9-4924-aaed-ad5e64a4a4b8",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "565903fb-73a6-4452-9dd4-79ebdd6c757e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2bd836e-c8f7-467f-93b6-9e4613655a58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bb9da19-d195-4558-b52a-1776982765f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4273036-5a88-4b71-abe7-208b2009440b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80c6581c-6512-4d5f-a8d0-8df0b04ec64f",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f14126-36f8-49dc-b3da-bd7b9bb8e536",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88fce6c0-fdcb-4fd1-a470-3d1766808383"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac02848-d927-47f2-9b47-8931d9b7c884",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e40eb2d-3a74-420a-9914-4ad520ac46a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dcf6cfa-de3f-4e6d-9a42-03072fed5605",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23d6b075-d529-458f-871a-6d66b1b9d0d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72a4b454-c560-4c6b-9ea0-a0232f62f2b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef48fb2f-2711-4137-bcda-c7ed780ffdaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5157acd8-b3cc-4a8d-bbce-c790cdfb3c00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dbe955c-12bb-42f6-b425-55e8ed474fc3",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abece45a-f5e8-401f-9c7e-dcab7fda6135",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96fdbacc-22fe-4840-a39b-c9c5daf2fc61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37475b02-f779-4889-bf7d-83ce9638cf3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fb6774a-1994-41ba-8c7d-469fd4ba8f2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ec7a309-d14c-4234-a378-263d26bed642",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "267f8d91-fae2-44da-8c53-6e6a2ef969bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98f7bd15-1034-46db-888f-448a13a73aba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e67a191d-2fcc-4670-ad25-36f93fd20f53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3552046-904b-4214-b9d3-0ad2eb803a12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d705eb-7df9-42fa-a764-388ab475a71b",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f60f665-5a44-4777-9022-8ce262cd1f8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "763bccac-2932-4dac-88eb-1504d527ce59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd6bb575-e543-42e9-a988-1732e25a1de9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb5fe2d7-135f-46ec-8cc0-e8cb22f870f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9cfb093-252e-4401-b1d6-779014ea628f",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c43ff89-412b-4e31-a3f8-b41dc88d18f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e7bc8e6-81d4-41e8-8d77-4903e3cebb13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aea86ac6-edf3-40f6-bc66-8c1d652f642a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddb0fb68-5c8c-40eb-95e8-c349397e5ed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b77efd2a-1441-4b00-8726-4aced72d985d",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2079212-6103-4328-bbc9-edc2171002a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92dee5e5-c30c-43eb-850f-9f059414c001"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42966383-88a3-4687-8a57-414b1218c9aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e170bfe-0ab1-444e-949b-dba807e9ba40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb2813e0-f79b-44fd-b65b-e8a9fe752a87",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efbb6d1e-88ac-4651-9e78-8e05173dcd9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "602e2f11-ca19-43dd-8585-74569883ec3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8deb145-ac46-476c-ba04-0c40bf63affd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba003d68-b4e5-40d6-b395-cf680b1a9ab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6559e402-e83b-478c-a955-9c4ca61387c8",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d837b2e1-491e-4f62-8224-1f0de80909b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb803516-04bb-49d2-8976-dfdf6332572e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "583f5cf2-1cd8-4272-a5f0-c9eec5b2e3ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1d22909-b658-4ab1-9ae1-f8e5da1d4cf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4857b20-7e39-4d75-98ef-088582012154",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e3d2434-1e5b-4353-ab7f-0dd583532160",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "818b6d57-64f5-4a95-830c-fedf112014d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "720a1968-3d6e-453b-87d0-9a94ffd953da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba61c1e4-5d28-4dc6-ac63-a8e1ff0ddf6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea566f8b-35c8-49d8-9167-f45ace9922ff",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e68e01aa-ba23-441f-a882-416986bfcd6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8412d60a-3157-4fa8-9bd5-9b0caf41b262"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14b982d8-2c4e-4c09-94c5-4ff12260eeca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74a28187-f17d-4573-b1af-cf56044909e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67742013-bb6e-4c75-9f70-93a2108cf770",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f539c7f-a6fd-41a4-b1c1-fef213da6904",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "690c1ab1-0de7-45e3-8374-c40593ce7588"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc1e02db-915c-4ca0-9519-ea45670aacad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d70dfda-7309-4bbd-a4e4-fe8fe4de42cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9538c520-0458-47e8-a57b-6c4681e93402",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78412624-b65e-47c4-be00-e3a65a7489cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5ce5deb-32b0-4790-812f-7702f7a199b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f056aca-4a67-4368-a8ab-fbd5f981b3aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a1e9193-073d-4b24-a2a2-27e88ca58983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0f396dd-e9a6-4d8e-90b1-8e1622021464",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e30325-fd9b-45ae-93a9-99c5738fef94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c68ef2a3-7748-4e0e-8484-3b58649c8bdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80fa6021-31c1-4f43-b548-37cf6be285a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02b2f9f2-1c73-4cd9-82ec-8569a915dac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d76a47b4-2830-443b-b660-97b8e1780f34",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d32b70da-fbb1-4265-9b05-4620cfa94332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1e98275-1f10-4dfa-88a3-e95afb637a96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "716fb7c3-0cce-4ff8-8d09-164b9e343a56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc0df38e-371d-4a71-88c8-807526b3181a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "329135bc-12e2-419a-9155-8dfcc9e6755b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9a8a34f-2aef-43e6-9ec1-af8e69c3d261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a82a40f-9180-4378-a1f2-6a8f9a0cd9c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e83fe5f3-4d43-4022-a92e-f7a13fd1bad0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ad29b90-5213-4992-be65-a658e68cd537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "527f5497-4981-41a3-919a-bed54f536131",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0717fa69-5e47-4714-8822-91d91e2f1d3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd068291-4596-4070-bd4e-fff28d0a0ea4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c56ef94-c072-4b0e-bec3-e3c8768509d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "481960f6-a79d-44b3-b06c-8674232fb9b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9402cd67-a991-401f-bdd7-a7c16405cbb9",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68795bba-c2ab-4fd6-a649-b59428954dfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b91cb15f-5617-4210-bd90-2451b5af7adc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a7f13d5-52a3-492f-becd-cb8ad6bd9200",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bdf5098-0a16-4df3-a55e-a391cad0cd8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3764068b-245e-45af-9792-b190bdf519a1",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e32ed4d6-7aef-4b42-a68d-79fa353f9323",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7589280f-2cd0-4c72-a266-8fae979f1aec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64a69bab-0b40-4d45-9825-411af7b90963",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ad3f3d0-e39b-45e1-871e-d832689e64fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94fc3ab8-5117-445d-a2ef-75e8ab991b66",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afa7b2f4-3ee8-4f58-9ec2-86d20d93d211",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a71cf12-7b39-471b-8a31-6972c8c85b42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79496048-2753-4d6b-a5af-f26bbe981b3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b032706a-a875-462c-8198-ba2c3409a8d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc080134-453c-487b-a1ca-a0656a0db827",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac3a1e55-de77-418f-b983-59e16f445055",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c63dd01-7dd2-42cb-b81d-ac2ab8b0c1cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56481d30-cf2a-4144-8f7c-1a9bd6fed615",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b961da13-76d4-4a6a-bd9a-ae19ae718077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0a5f8ba-7862-47e0-bf58-93e45962339a",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5ca9181-c241-4e36-8a14-3df1cd0acfba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a308459-b249-4bba-a8bb-fba4478538cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f939db5-22df-4ef4-be87-63f2a92ac674",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d06795e-5544-4d0e-af95-328c009797da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b33e906-bc0e-412c-97b4-4b8bd62f02c5",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fb732ee-762c-4330-a7ea-18b963bdf67a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75f6eb72-ffe5-402e-b1c3-dfd355da955c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19061851-cc4f-4c6b-be97-468900beb756",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb82cd21-9b93-4eba-af5b-f11c1ff792e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04a0a98e-c77f-48cc-a4a2-e64f0c1b94cd",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ef800d3-2c96-4a6d-bd45-1b30345d442f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c819c5a9-b0d2-4b17-b102-1ab9fd9c7895"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9255add-da15-4a08-8d23-e9195762b1cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24e28fc5-1c30-434b-ac28-64d9e4b91bc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa57cf5d-2592-490d-b2dc-95311926dd4c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6086f564-5ceb-48e0-a695-1da15211d771",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63ee9b16-15ef-43a1-8b27-d41f9a1ab96e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc2dd215-8c4c-4614-a660-5204fc8ad7b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4bd4496-d41e-4727-a7c6-dbf0b1df8df3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d4f5478-8ef1-4374-9981-50262c8e0834",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c7e5ae-3ac9-4a2f-8a52-a00202760e23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ad21a31-be2a-44c8-9a2e-a76ef5641440"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f7d77c0-0ae7-4a28-af7f-ee03ac89f370",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93b3c25e-bd5a-462d-b107-b8612c568acd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5e769cf-2b21-4753-a8c3-44381395a960",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7155c2d6-7c94-4e38-b193-309dc9789d39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb02c706-8c91-491b-adfb-274276785f0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b237d0f-60ea-43bd-b45e-14fe8ba40c70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5869aa5a-1778-48df-98d5-1a6e0c7b0f72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7e7e0a3-e2a9-4235-b3d5-9840ea6b4328",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ca540c9-e230-461f-bd40-5460031f455f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9464426d-9257-4752-bc8d-df1186858ddc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14f87c6e-32ee-423a-81bc-cfe3ead422aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "093dddd1-4890-41a7-a073-e45747c8e0ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "869ce61b-4797-4ede-beb0-a142fb647ef6",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e234232-361a-4c02-862b-660bf58183e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3452b406-d211-435a-a791-9f1c2a28381c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b2acb85-f8f9-4db5-b192-ebb2c22d58bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08d88e65-30e4-4e88-957d-5f0f0ee74055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a813360d-0aa7-47e5-ab35-ff6774bdf26b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4240dbf8-24b0-4511-ace1-d16f1fd28a73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b62bcda-0b59-4091-9024-4913ceade34e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b9bb467-dc67-4b2a-a6e2-23032bd684a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48906580-bd0b-45bb-9ab2-3cd01ec6640e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "870d4f0d-1cdc-4f2b-8426-97f1145f3d4c",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a24f69b-ae24-4b5f-a73d-387ad13cf66d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3271a5a6-5e71-44f0-8263-9f991d7a61dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0e16261-6b30-44ea-ae5d-02d4e8b7f8cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fec3474f-abe2-4985-a6aa-6cae65e4d6ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "214d445a-d170-4e6c-b300-e7c68119800e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25f4faed-735f-4a5a-8753-1916adf297b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58924ec3-4191-4bf1-80ec-019db97aef95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0be9697-aea7-4c41-b38f-dd416bddacfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01996701-ad84-45d2-b2ae-8d4c90fddf43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "103d1dd3-1f66-480c-84d9-51541e528049",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a22cbe6-6935-4bed-895c-a16e20dbf334",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47d02fcd-750e-4e70-a005-aaa814cf370a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f6526c9-3a49-4d54-a4dc-05c9f0adfe9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccddd6ea-fd35-411c-b593-efcb7571d839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3403678e-0684-4b4c-b450-3b45521593e0",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ab2cad-a753-4f5d-9853-ac7218f08f13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c19987d6-c1c9-43e3-a2a9-74131a78fdc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db11aab4-33b0-4d06-9b81-267b72c6f1da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43d196f5-f3d3-45ef-b50d-9fd201ba14df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1df2aa12-b242-4ae8-9db1-ba147939b97e",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1560c484-adc7-437b-98c1-de7236bbf211",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7012c4ec-b8d1-45df-b2b2-a6e26d53c499"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15306367-2fa1-4dd5-80d9-eead65b56995",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49b1ae18-4bda-42ef-a559-61c08170ce76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a265a2d-47df-49de-98a3-1fb3f246aecd",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41b44c7d-e737-43d8-9927-506ee7f96eeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "307f2a5a-b88c-4a59-b316-1d6a14617aee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de022e5a-dab9-4d57-86b8-c4487dbd78f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fd74b72-d46d-49d8-9846-6f3b838a37ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ef4ef20-5e0e-4f80-b2a2-bb73b6979765",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "612e2acd-c329-4d04-96be-c5df43bbbdeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f3cae0b-8b78-4a10-a771-136387d0a737"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa4c61d-3a03-4593-8e63-0685d44d7352",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85d6b295-257f-4164-a338-42621d5ddc18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c82e95fe-8d4c-4312-b4cb-77aac18d2e47",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a3ef5cc-09a9-4b46-bc3c-a038eb681238",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7d08da9-d43d-4118-b8d2-e503e6f4a43b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc741910-a578-4ea7-90ce-f029ce70db39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa326974-2247-4350-9c12-a247adf0127d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a7987ed-86db-43fb-ba59-ef787e18a9e2",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfa6f4f6-af3b-4d72-8dd9-1504f34cea40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b6af66b-7824-491c-b491-8a67fe4fa95e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "104712f1-41b4-4335-8bdf-fc63932229a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba94cc1f-aaf4-4bc2-a3e6-49b9b7cb25a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a4df46-ab84-415a-8c77-8df6b4b004a6",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d4c20cb-8847-4451-b827-dce0db529e17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "712e2760-e6a2-442c-9e4a-fdaea7c495d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32241dfe-e79d-4d0f-8c1e-dbeda19da239",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ccda114-e6e6-43f1-8d3f-42aa858f30eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "513fe94f-3e93-4105-8023-6b58f915280c",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e39600-ce6b-429a-ad72-1d55e2b825ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8251459e-a2ef-4950-b965-e47311c98f51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ebcbbbc-5acd-43e5-aef2-03ce33fa266a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "def63500-fda6-4fa3-a514-d041234d0417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b5e90cc-9cd6-4230-9051-1ac5fa63b605",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cae14b1c-690c-4d8a-a192-c4c5fa84c072",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "397f43f6-3521-49d3-8d13-09d7c6d3b3bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c60ea49e-d3ab-41ca-8fca-34a3298774ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11abb621-9b21-42f1-87bc-c6ab462e20ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40449151-4cfb-4e5b-99b8-23b3acef2d17",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "312d8781-1ce2-448b-a525-0be79170c9df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27e6956d-cdb8-45a3-8d4a-4fc936e7b5b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f045311b-cc67-47b0-a613-5b0296bda481",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9515dd6-4c56-48e7-8d51-0680714a6b00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc9a961a-4209-4ff6-9043-61fda8c6afd4",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c9f44c8-ad82-43bb-9975-8ec81935bfa8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cce89719-d1d4-4833-9853-c5fba690f9b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fc22ada-f3e8-4663-97ce-25afe2de3605",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08fe2f5c-e1f3-4754-97bd-e235cfcd5cfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f57b201-76e8-46ab-bf87-3feb03ce7678",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "182e2212-bbec-49b4-8957-867ed5dc994a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfdc9623-94de-4414-92be-c34d3bf30bf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c84bdb6d-8b55-4a91-845c-9d70d9e05431",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94fc55b8-586e-44c6-93e4-448a0e8244a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3586411f-57e2-4c24-ae1f-aad9e07711fe",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b863d964-89f3-49b6-bcc4-e7083a7cbde9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1524f3b5-5b18-4d51-9c68-d0742a44bf82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31398a10-6052-4012-a8f5-6fb4fe7d10f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5f59cd8-c0cc-4d85-8666-8de2a1847816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48c58bd2-26cf-4fb3-ae19-1abe522bac07",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dfe2ef0-473b-485b-bc81-62a52d880da6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d030c850-9bad-4fae-a898-c2985131cbc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc717b45-3217-45d2-96b6-df04a8e0c686",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f837696f-a219-4da1-a4e2-68c4df0080eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c40ce55d-71c0-40b3-81a5-62a51fd52793",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6112f6b6-ee52-410b-a31d-e790f1c73460",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c664bf68-69da-4118-a891-c1e9cc387b2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4351a97c-0a7f-4ccb-b1d1-44c457f2fc1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79d2098c-9817-400f-baf7-caf4d9494e6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4282d1be-e222-4103-a4be-083d0fd8bf56",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e35899-7c84-4e53-a9b4-93c3a8e29415",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f2ad090-3003-4760-ac12-6a81be183603"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f809e100-fddc-43da-8901-8943430fa08b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad67bf3a-2944-439b-98bf-f32cf11a089f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abdf159d-6af2-4ea0-8fc8-e5a4c884b439",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff86e42-3bf5-4927-b54e-f9726c00ccf8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e93bd5a5-339b-4946-a9b7-641c27d935be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8f9d24-9aa2-475b-84cc-738674ddb304",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd033207-819b-4d99-85f0-9d35ba905452"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f2e21989-652c-4fe3-849d-c6ed7a043e7c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bf9ca9eb-ec73-4aff-bb12-1ea73251c080"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a626426a-3a30-4bae-b631-5265d8d7f938",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3a506e1a-2555-4b1f-bd69-66aa8ca76e46"
                    }
                  }
                ]
              },
              {
                "id": "94586b02-e049-4a80-be54-8eacc17e2194",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0d92d5a1-6f74-4ab5-8270-847bedcc20b6",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "259733dc-6556-48a2-bcad-8819630fd4ce",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4477a955-798e-41d4-9693-9a3fc3367e3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14109823-0de9-4cd0-8131-4faf11a667f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "52824e57-656d-4e9b-857e-5af2aba2b1ef"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "11708625-9373-487b-9538-40e0ad1a307d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c5293f17-41f8-4fbc-858d-a2001da91168"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "944d6fb9-4342-4795-946a-102d1f370b85",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6bf113a9-c51a-4d86-9d98-5b76c6584b4d"
                    }
                  }
                ]
              },
              {
                "id": "40b2e84d-290d-4bd8-afb4-e0e17dbe4bad",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "0212b15e-4344-4cd6-a5ae-6c46e9cf8642",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4e260f7-02e0-45e9-8021-6f5803c0f6b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "dfed78ba-0e47-400b-8248-80dffdc831db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d10f225e-8ac7-49d9-a10a-ae339447a35a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ee26736-c787-4a45-9b26-710edfbeb7de"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ef895808-e537-4b9d-803e-3982885330de",
            "name": "Positive Testing",
            "item": [
              {
                "id": "73bc113c-c4bb-4c40-adbd-087d99974321",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "38ea59ee-cb8c-47c7-9328-8d053f38161a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a2567580-79e3-494f-bb20-3d6ecc3c8278"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bd248355-cfd3-4872-8bd0-836c87969025",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e5fe4fbf-018b-4b83-8900-8c20a6bfdfd1"
                    }
                  }
                ]
              },
              {
                "id": "23afbcb4-9b74-4ffd-99b2-40f27451a69a",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f0930d81-3619-41ec-9f75-e9e4b8739ee1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d6383f2f-6455-4791-abb3-047a1723d458"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8cfef4ab-d555-4f7c-bf50-f808715b2d11",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "12bdb47d-75e6-49f9-83ee-84a0ff1c08d8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b7695121-51a7-4e67-a087-492439766df0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "513b3708-e280-484d-aea4-cf3b8c798017"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "85a59e06-b435-4677-9653-c53856148ea7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8467d123-b241-413a-9e00-9d0719d5c7ab"
            }
          }
        ]
      },
      {
        "id": "35157671-c8ab-4e9a-93c8-f41d4fe2ed05",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a3599083-67e9-4ddf-afa6-3a151702281d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9ffcffb5-85c3-4ab2-9071-389b29f0782f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "350ebc67-3ee3-48b8-9c0c-76e472c01684",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05d65218-551e-4736-9bf6-cf06fe3dacda",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "28c9e3ee-336e-4845-8470-40cb4c5d80a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf93a340-3e0a-41b2-a80b-95de041d5a9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5c968b28-d80d-41ab-9f1f-ce57c16a1f3e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "52b9d130-9c70-41f8-a917-7753b87e25a4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2bbd82c6-5bfd-4766-8d60-d7a67d4ac847"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3fd0a31a-d92e-47b1-8c3f-be76bce01036",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "92e24fb4-f14f-4b7b-a1d2-125fbca714da"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ddb65966-4d8f-45bc-9225-4b8089f6096c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6cd09d5c-4553-42c8-b76d-abb50ba333c1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a4644539-2a0d-4620-8dc0-02ee42f90da8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7b2dd363-d6af-46e4-8c7b-b46b7a1fb4c6"
            }
          }
        ]
      },
      {
        "id": "e7c66035-920b-409f-a1ad-eafa501e2069",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "dcc8a071-1c24-4ebc-a30d-3decf5062fc1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6c500217-b29b-4ce1-aa30-2e1a52fe190c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "85478fdd-6481-49f7-bcdb-551c09b386e4",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "929243d0-147a-4941-97db-b51c5e61e84c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29e3c11f-539d-419f-a29c-e35a9c0ca5c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1006dcbd-593c-4157-b413-695a911a1411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "59583e73-0e12-4039-b4ca-32c2c996e672"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e37e2389-784f-483d-848a-bf35ef8b1e34",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "35f17be7-30e9-4209-95da-005144df77ae"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "925584a3-c29e-4c2f-96d7-a5f7d9c8a7a1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "96f4d9c2-0fab-486f-b368-4aa8ab187a04"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bc5a6d41-e49b-4172-888a-4d549cde50d7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0330db87-37df-4a3b-bc24-d7f709a0266e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "54d35312-2462-444f-a8b9-8c31c5e73c36",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7bca392a-8474-4289-a716-b1fed33e02d4"
            }
          }
        ]
      },
      {
        "id": "1bb2927c-bd3d-40a6-9b18-5075d6edf9d1",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "66a1c523-85c2-4027-9877-c8115aa87002",
            "name": "Negative Testing",
            "item": [
              {
                "id": "34828eb8-a77b-438c-a34f-67d1d9b61550",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2efb6083-8b0a-4691-be1b-c0884e807ac2",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1394ca3f-7443-4850-9355-34c27b1aead7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "59c4a0ea-381a-45c5-8b2c-501c52c282ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd563ed4-6497-4130-b901-e9223df89ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8717a5dd-d42c-4f8a-8464-a39406c26c5e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "14c694ea-2f3b-4e32-914f-c72a5934bffe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1fe41a3f-ead7-4663-8e57-4026e5bc5062"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e79a8dee-057e-4bcf-a759-c227118a75a7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ddb46ead-b824-4fdd-8c13-784783f8d17c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e6620df3-c207-4301-88d3-8fb32012ce18",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0d9fc784-2903-4241-942a-f00cca7574ee"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ba16150d-9501-404b-b381-647c011aec47",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "faa2d07f-5e7d-4e3a-ae45-2bc6abf2654c"
            }
          }
        ]
      },
      {
        "id": "ca4a751a-2a3e-44e6-b431-e042b4dda54c",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a5738fd6-2790-420c-b5ed-c3a29b1bcbce",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e543acc2-ce56-4beb-98a4-94bde70e83cc",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "ef0d527d-5888-4667-a52e-25c9a50b6261",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "906700a3-b347-4599-a046-f2e2b520e081",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "91b4f813-1629-45b5-9f6f-4a8fa072e6be",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 80
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 43.22183098591548,
      "responseMin": 9,
      "responseMax": 1844,
      "responseSd": 108.71514375262787,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1690418290446,
      "completed": 1690418318581
    },
    "executions": [
      {
        "id": "6753aa92-62fe-4398-83f4-e4c04d9602aa",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6dcb79f0-3fe0-4ff9-9f19-f9bc02c98b90",
          "httpRequestId": "3335ac15-b89e-4062-b7d2-0ee2d6f7bcc9"
        },
        "item": {
          "id": "6753aa92-62fe-4398-83f4-e4c04d9602aa",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "bdd44568-a2c3-4107-9de4-4a4601fa6ef4",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 0
        }
      },
      {
        "id": "ab003165-d5f2-4026-91b5-83ca4dcd0d67",
        "cursor": {
          "ref": "a79b291a-78c9-4de8-858b-f0b0943995b2",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "025bc8d4-d117-47e1-a869-626f52e9ba97"
        },
        "item": {
          "id": "ab003165-d5f2-4026-91b5-83ca4dcd0d67",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "86b4ffa9-0f92-4d53-a6a7-aa287de6ac72",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "165d3490-ce00-405c-9db5-9a1c6e524052",
        "cursor": {
          "ref": "147a4f89-a0bf-48c6-85de-7a072a61518d",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "99920973-07f3-4c32-940a-458e50d6991b"
        },
        "item": {
          "id": "165d3490-ce00-405c-9db5-9a1c6e524052",
          "name": "did_json"
        },
        "response": {
          "id": "56131f4c-7c1c-44cb-834a-1e9be3ed004b",
          "status": "OK",
          "code": 200,
          "responseTime": 259,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7013040-55f7-48da-a7a9-f618ca2585af",
        "cursor": {
          "ref": "30667c1c-4654-475e-abf6-f1f851e0e491",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a64390ff-0820-4579-be71-5c20f20bb5ab"
        },
        "item": {
          "id": "b7013040-55f7-48da-a7a9-f618ca2585af",
          "name": "did:invalid"
        },
        "response": {
          "id": "774c2437-6267-4985-90c9-6fdcf2a2572f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7013040-55f7-48da-a7a9-f618ca2585af",
        "cursor": {
          "ref": "30667c1c-4654-475e-abf6-f1f851e0e491",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a64390ff-0820-4579-be71-5c20f20bb5ab"
        },
        "item": {
          "id": "b7013040-55f7-48da-a7a9-f618ca2585af",
          "name": "did:invalid"
        },
        "response": {
          "id": "774c2437-6267-4985-90c9-6fdcf2a2572f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "363d3259-6451-44ad-9566-0612ba8bb4a3",
        "cursor": {
          "ref": "5938002c-4533-4dbe-a819-402caeaed9fb",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "1f690c4c-273e-45e4-9b69-7f7ed4a38a1e"
        },
        "item": {
          "id": "363d3259-6451-44ad-9566-0612ba8bb4a3",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "2a2a236d-ffe0-412d-a83a-fe4c8060e40a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 97,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91ee9f61-3dca-4d48-bac3-4a16494a2d55",
        "cursor": {
          "ref": "cb772f82-c132-4219-b5e6-5d9f19961449",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6f732835-9150-4232-b77e-61b0aaf08f63"
        },
        "item": {
          "id": "91ee9f61-3dca-4d48-bac3-4a16494a2d55",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "aa83f0f0-f8b1-45fa-af82-8e527b4b932e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 51,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13486d97-a50c-46f2-af3f-87bf8c42a8b7",
        "cursor": {
          "ref": "dc7e25e8-765e-4e23-a9ae-926a1e2613e2",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "78f6198f-a249-47a0-ae69-3327be404fda"
        },
        "item": {
          "id": "13486d97-a50c-46f2-af3f-87bf8c42a8b7",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "e2aa4482-755c-47cb-a536-7457f1d035a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f596fec0-da6b-435c-8b79-b82fc26a012d",
        "cursor": {
          "ref": "b94aa38c-9ad0-4753-a88d-877df75bd154",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "901b7698-10a1-4a05-82e6-f531ab7e9df9"
        },
        "item": {
          "id": "f596fec0-da6b-435c-8b79-b82fc26a012d",
          "name": "identifiers"
        },
        "response": {
          "id": "9fc3fa9a-1346-44dc-a838-d0b2b2757379",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba5a9f50-f4ba-4e3e-a531-19ec4c727e55",
        "cursor": {
          "ref": "f301a3db-da18-483b-b1e6-b6e60634437f",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "71dfa940-180a-4bcf-8d16-afc3cccba9eb"
        },
        "item": {
          "id": "ba5a9f50-f4ba-4e3e-a531-19ec4c727e55",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9508d635-6f8c-46a0-9a24-c7d78ad79b3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa038c55-6c84-4dde-8fbf-2ec658a80e6a",
        "cursor": {
          "ref": "1ed4d6ff-e351-4305-b655-a197f26d4838",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "79ecbe03-65da-4254-a0ec-0b86469d5d6e"
        },
        "item": {
          "id": "aa038c55-6c84-4dde-8fbf-2ec658a80e6a",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "aec755dc-5643-4666-a444-8002cab6eeea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7054832f-224d-4a64-8314-757864f87afb",
        "cursor": {
          "ref": "78efdf66-de0b-45ac-8991-0befd165b385",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c7fddbde-195a-4c40-8370-8de7a1ca0077"
        },
        "item": {
          "id": "7054832f-224d-4a64-8314-757864f87afb",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "d1c5cd4c-34eb-4c0d-98e6-69cc552509ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2841727c-9322-41f8-a356-a6d9563a6c32",
        "cursor": {
          "ref": "c3f14acb-f6d1-4914-9f34-6f9093957cec",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "25a3dc4c-a7fb-4d7e-9745-c5b910750c23"
        },
        "item": {
          "id": "2841727c-9322-41f8-a356-a6d9563a6c32",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a0366d1e-86f8-4cc8-90eb-c4d1606fc868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96e97f1b-c514-4a54-9aad-3b842866bfe4",
        "cursor": {
          "ref": "26ff71a3-8770-42fb-9d7d-7c86c8911648",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "05e34673-1271-4a1d-89b8-29480b835149"
        },
        "item": {
          "id": "96e97f1b-c514-4a54-9aad-3b842866bfe4",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "462ffe58-fe6c-442a-8ae4-1b7bccb8c976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f167f89-607a-40d6-a5cb-cd6b8cd37d9e",
        "cursor": {
          "ref": "11a59033-88a3-4705-bccf-a28587b1d577",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "dfc0aaa3-3649-4874-a5cf-42fa2b065e17"
        },
        "item": {
          "id": "7f167f89-607a-40d6-a5cb-cd6b8cd37d9e",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "4893ec19-defe-49e0-bb75-5ec1173ae801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b986cd5-7236-4c0f-b59a-625546d80103",
        "cursor": {
          "ref": "4baf89bf-c248-4f3c-8d50-7407645e8e1b",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "7e5eea21-b2da-451a-9f4a-3c7d3e80c9f7"
        },
        "item": {
          "id": "4b986cd5-7236-4c0f-b59a-625546d80103",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ac5fdcc0-9d4c-4935-b862-bc8ad7b547ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 225
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56cfa14b-4a65-4353-b44e-2f13fa92b684",
        "cursor": {
          "ref": "2ab4bead-7b79-4d6a-b478-3bc9be01749a",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "0cacf50f-e01f-4f6d-b04d-87fb74a25f85"
        },
        "item": {
          "id": "56cfa14b-4a65-4353-b44e-2f13fa92b684",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "97a3473b-b6a8-4561-89f3-b1edab164f9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb97b460-f940-429e-b666-7049f2a574d0",
        "cursor": {
          "ref": "13f9f962-34db-46d9-9e7e-23b2038e7a28",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "fc166889-2592-4b4a-acb0-e2c937c0a96c"
        },
        "item": {
          "id": "eb97b460-f940-429e-b666-7049f2a574d0",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "dddfedee-2f91-40ba-9156-582afae4b934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f20febc1-b210-43a5-84fa-7a8fa19013cf",
        "cursor": {
          "ref": "c3dc7bf7-958a-43e3-b5e6-397d41ccb8d7",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "719d2f3f-f75d-4503-8511-fa417ecfb3ca"
        },
        "item": {
          "id": "f20febc1-b210-43a5-84fa-7a8fa19013cf",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "115a9aab-15d5-4650-b289-d8af1310df8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1e9be0b-9266-422e-93e5-e4e87852f905",
        "cursor": {
          "ref": "c9742dbc-8835-4adb-8252-97002d12daaf",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2b0321ec-0d3b-4e97-818a-f6cc81f55197"
        },
        "item": {
          "id": "c1e9be0b-9266-422e-93e5-e4e87852f905",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "dc00ac73-9888-4fb3-9fa3-5dee7d9d643d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "043b4916-7eab-479f-b4bb-39099e74d689",
        "cursor": {
          "ref": "bda18811-08d8-4f8d-9abb-a2ce61ffac18",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "7faf7c72-a929-400b-a28f-472433c05574"
        },
        "item": {
          "id": "043b4916-7eab-479f-b4bb-39099e74d689",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "80152286-4201-4a11-8df2-609cc9a9d556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8474b7d-b6db-44f0-ae74-894613f2e1f6",
        "cursor": {
          "ref": "2e6ea14d-7f86-4e6d-a7ec-aac3c2385941",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "20241333-a3c6-4f8f-8209-5cb18e770afc"
        },
        "item": {
          "id": "b8474b7d-b6db-44f0-ae74-894613f2e1f6",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b8788d56-dc55-44da-a56f-c33fc791570a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baf35cb6-7081-473b-8e4f-92699dd2c5d6",
        "cursor": {
          "ref": "9c050a4e-7591-44cf-8713-9cfc3dd88ab8",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "79f15ffb-0c4b-466e-b3ea-177cdd91d482"
        },
        "item": {
          "id": "baf35cb6-7081-473b-8e4f-92699dd2c5d6",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "f5c336b2-112a-4f75-8eab-06c0a0335677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e5cf6a3-33c3-456b-8d90-710defc500fd",
        "cursor": {
          "ref": "4b8be1dc-2f95-467f-b7f0-4ee9f516a9ed",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b34dbbb5-b128-4747-a26b-bd78b6b031ad"
        },
        "item": {
          "id": "4e5cf6a3-33c3-456b-8d90-710defc500fd",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "8db41192-54f1-4794-b291-f6468ecfdf39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2539f623-5009-4a43-870b-023f448f51d0",
        "cursor": {
          "ref": "584646e8-c30c-4594-8d3e-55d3c5d64832",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c1253a84-7200-4915-bf88-17708cdbccb4"
        },
        "item": {
          "id": "2539f623-5009-4a43-870b-023f448f51d0",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "83f65b3e-d7cf-4999-a502-ac366febc6d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ca4e0f-394c-4342-b27b-13b50fe97149",
        "cursor": {
          "ref": "57d187d0-f72a-49f5-a72a-c4b0cac30c90",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "32665274-c19d-4edb-ab26-e2999fdce8bb"
        },
        "item": {
          "id": "66ca4e0f-394c-4342-b27b-13b50fe97149",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f281e716-0a3e-4cc7-b407-1487a8bc1715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e63b2f78-dca5-4cc4-910a-d02216f39492",
        "cursor": {
          "ref": "07819517-cb21-4311-b47f-65eac8798047",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b98f88a2-a816-4a23-869c-eb7a89aa9e70"
        },
        "item": {
          "id": "e63b2f78-dca5-4cc4-910a-d02216f39492",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "ed3e6584-ee57-473c-8789-5a082aa160d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5266e089-26c1-40d7-ba86-5859d8c8ee54",
        "cursor": {
          "ref": "1243076d-ee1e-46a3-8d31-50d7e3d2febe",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "1d0e55c8-6206-4ad9-b476-4ac046b4aac3"
        },
        "item": {
          "id": "5266e089-26c1-40d7-ba86-5859d8c8ee54",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ad59bb62-8529-4615-bd9c-5a7cd17f3bdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7ed9797-5076-47ae-9df6-752bad3acc1a",
        "cursor": {
          "ref": "5d191892-b15f-4efc-a9dd-8c45c2e2d187",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a97664be-2c29-4281-9bd5-2f1870e04ad2"
        },
        "item": {
          "id": "e7ed9797-5076-47ae-9df6-752bad3acc1a",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "1ff252f6-6ed0-4481-965f-96d4f2f8ba61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcb8f160-6e03-4690-a3e2-bf5bd412ee24",
        "cursor": {
          "ref": "74391925-8f59-4ae7-8a44-75b432beacc0",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "533625c0-98ea-43af-b25f-da7b4197051f"
        },
        "item": {
          "id": "bcb8f160-6e03-4690-a3e2-bf5bd412ee24",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "7feec5b0-209e-449e-b248-bee0f97ec863",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5847214-5150-47b1-9e10-b1057788c237",
        "cursor": {
          "ref": "986bcfef-3f12-40dc-b990-1c0ebba7e754",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "63ec98df-46f3-4dfe-8468-1b20ffa191a9"
        },
        "item": {
          "id": "b5847214-5150-47b1-9e10-b1057788c237",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "da149d14-1db2-4ab8-b3ce-ec887d869369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d5308f6-4d0b-4d7b-8b55-7a464dc4f221",
        "cursor": {
          "ref": "2ca2ed3d-8978-494d-b266-d66036f70498",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "921017a9-43e9-41a7-bded-b94bdc64ca56"
        },
        "item": {
          "id": "6d5308f6-4d0b-4d7b-8b55-7a464dc4f221",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "4c7c3928-2cb5-4267-a2da-e3b74f6a6052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e847af6-4228-4f7d-9530-d9ad48ee6f8a",
        "cursor": {
          "ref": "82aac3e0-bf38-4f10-b953-f9dddc9b437f",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d107feb0-7013-4898-8856-4e992d25cc2e"
        },
        "item": {
          "id": "5e847af6-4228-4f7d-9530-d9ad48ee6f8a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "454be1bb-ccc9-4adf-907e-67855a7bc5d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0939112b-d01b-418b-9b74-307c2900e755",
        "cursor": {
          "ref": "ed11ddfe-ebf6-4371-b9da-a7874dcf3401",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "5f281237-0c01-4cdc-92d6-7c24cb78757a"
        },
        "item": {
          "id": "0939112b-d01b-418b-9b74-307c2900e755",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "ed21ca95-9eeb-4d87-97d3-cf518328f5a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47626140-27f5-4cbc-9906-9bbff540b76a",
        "cursor": {
          "ref": "b07d2da6-49a4-4357-b758-507951fe3bd1",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "922a40e8-b37b-4f9f-9e0d-b14d404ef3eb"
        },
        "item": {
          "id": "47626140-27f5-4cbc-9906-9bbff540b76a",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "f157a5f4-a349-476d-8b7a-8e926788a3a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79f5b358-24d5-45d1-884b-b04666e9a549",
        "cursor": {
          "ref": "d9bae631-0992-4189-a47f-8886a65a0ec0",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "5b581a9a-13d0-4251-b608-b0ff365a537f"
        },
        "item": {
          "id": "79f5b358-24d5-45d1-884b-b04666e9a549",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "0996d24e-4a0f-43d0-8ee8-6829bcd121ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aa898ef-0487-43ac-a990-7587cb78c4a7",
        "cursor": {
          "ref": "072c2f4e-71fb-408b-8bbe-bb9aaea16c4e",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "2fdaa3b1-a6fb-431f-b8ec-0b7e090719ff"
        },
        "item": {
          "id": "7aa898ef-0487-43ac-a990-7587cb78c4a7",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "48adefd2-5728-4a10-9f3c-903c648f8420",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa050573-3354-4347-abf5-9d4f4d3f0529",
        "cursor": {
          "ref": "40031d42-54ca-439c-a9d8-6e71b0569fa1",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "55e93d3d-8c01-4407-b0a3-d00b6bb35339"
        },
        "item": {
          "id": "aa050573-3354-4347-abf5-9d4f4d3f0529",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "eaf32d0d-b5c0-4d7e-906b-4157f3360780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdc88470-34ac-4932-b532-10df21d4cbd4",
        "cursor": {
          "ref": "7a9612b8-3623-4544-a1a0-e241c2d88687",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a8f22567-97ee-4caa-bbcb-a3e67e2497b8"
        },
        "item": {
          "id": "bdc88470-34ac-4932-b532-10df21d4cbd4",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d10b298f-3556-463c-a765-2f6d5de2936e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adbbf039-0b31-471f-977e-086b8828d5cc",
        "cursor": {
          "ref": "fa5603e0-edee-4c9d-a5be-9b92211ef0bb",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "873fd790-5837-4593-bba9-813f4fa5494d"
        },
        "item": {
          "id": "adbbf039-0b31-471f-977e-086b8828d5cc",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "3efa3ddb-d6e1-4559-8a8c-83b7a8d82e8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "053b6bdf-9d35-4ad6-9724-d49afebb97d0",
        "cursor": {
          "ref": "23f9ae98-1240-447d-9c3d-31140f19e9c1",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "44352981-b3fe-464a-95cd-31d5af4ace38"
        },
        "item": {
          "id": "053b6bdf-9d35-4ad6-9724-d49afebb97d0",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "c7c48197-b441-4f13-8f62-6d0c6ff9a6e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa8fe161-a103-4967-9c57-2cafb1293dc7",
        "cursor": {
          "ref": "e6c00f80-83fc-4b76-93b8-6dfa0ac6eb10",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "e781c197-a011-4b70-9599-9d51fc2417bd"
        },
        "item": {
          "id": "fa8fe161-a103-4967-9c57-2cafb1293dc7",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "0a935876-b168-4eb2-8136-4281edda6adb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa7a0834-dd75-4270-8251-e263787348b3",
        "cursor": {
          "ref": "05c27b75-ee60-4c76-b929-e3e4b5c44a12",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "4087dc1b-be3e-4755-982d-9728d6bd4ac6"
        },
        "item": {
          "id": "aa7a0834-dd75-4270-8251-e263787348b3",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "50098573-0cbf-445f-8e98-4085d06f3308",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bac361cf-c9a2-42ae-aff8-15ea4f5ee1f8",
        "cursor": {
          "ref": "c5ff1351-54e8-47af-8ab0-0bc90f75061f",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8b9e6f3e-f683-4856-9fa9-dedfd2010dd5"
        },
        "item": {
          "id": "bac361cf-c9a2-42ae-aff8-15ea4f5ee1f8",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "52fe5d32-2b6b-439f-8d39-c9510b2c69cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36295dee-1069-4479-a4d2-6c672ab49824",
        "cursor": {
          "ref": "9e7c84a6-0d68-44ac-8e9c-a06b7e880744",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "5b740f55-50e6-4737-b153-75003b601834"
        },
        "item": {
          "id": "36295dee-1069-4479-a4d2-6c672ab49824",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "3603c97e-543b-4312-80c9-b5105b5c1f15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2311c516-7c1a-4ff3-b4e1-a579e88460f2",
        "cursor": {
          "ref": "5510277a-ea5d-4b93-9558-b9510f0fdd8a",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "7c17f699-b06a-4894-8a3f-ebc90b112af5"
        },
        "item": {
          "id": "2311c516-7c1a-4ff3-b4e1-a579e88460f2",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "4830eaf5-a022-4af7-b998-d9e2ea2faba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8973495f-d819-42d2-8951-836b29a13631",
        "cursor": {
          "ref": "4735d930-d9d7-447a-aa61-fb437c3dd75d",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b3f440e8-2f8d-4466-b3eb-feb9b0a8f4af"
        },
        "item": {
          "id": "8973495f-d819-42d2-8951-836b29a13631",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "0c693d7b-1ba1-47f6-bcb1-92a4a0fa8083",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eac70615-f78a-4d0f-b03f-65ec3a33eaf2",
        "cursor": {
          "ref": "71f2c6fe-13f6-4bc3-ac6e-99db9864117b",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "d2e33821-92fe-40ca-b360-f46482ab8bb1"
        },
        "item": {
          "id": "eac70615-f78a-4d0f-b03f-65ec3a33eaf2",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a41e3efe-5b45-44e5-8003-a1f8406c2cf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14353461-ad2c-4028-a368-d63107657943",
        "cursor": {
          "ref": "0fa8d235-1d7a-4ff9-a69d-3333e21c2d55",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ce3f38b0-a560-40e3-bf84-c2fb1b25882f"
        },
        "item": {
          "id": "14353461-ad2c-4028-a368-d63107657943",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "23e15db3-8980-4f7b-84db-f19bf35b8c63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32ad9ec7-d63f-4e58-8fa5-3a45e4dbfc5c",
        "cursor": {
          "ref": "7a4517ef-66a1-46dc-91c8-251b5e321b1f",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "cdb5b118-b5c5-48df-a99c-4a0c7a1c199c"
        },
        "item": {
          "id": "32ad9ec7-d63f-4e58-8fa5-3a45e4dbfc5c",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "05bc120e-92f7-4474-b492-e4010be9bb7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04fad0b5-d271-4b55-9836-5f7b2a0c4751",
        "cursor": {
          "ref": "8eb77ef1-8080-432a-9bf7-eb49bd070a67",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "990cb0d6-7118-41e9-9b24-1fb4ba4929f3"
        },
        "item": {
          "id": "04fad0b5-d271-4b55-9836-5f7b2a0c4751",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "bf2ebfc6-5d51-465a-ada9-ca3f4d20d267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd500766-8ac3-4ac5-8ec2-dfc62f663bd1",
        "cursor": {
          "ref": "4c0262a2-6030-4d0f-9dbd-858b873e7624",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "5ac63c03-3c0f-4db1-b58d-0ca8cf181822"
        },
        "item": {
          "id": "bd500766-8ac3-4ac5-8ec2-dfc62f663bd1",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4682f82d-d6ea-48e2-a56b-db435ebafb71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eba9b4c-74dd-4d9a-91c5-ddcfe855ea8e",
        "cursor": {
          "ref": "fde0495e-a264-46e8-9d61-de2951e8b307",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "bf09a389-9cb1-45ac-b337-ec187bc992c3"
        },
        "item": {
          "id": "8eba9b4c-74dd-4d9a-91c5-ddcfe855ea8e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "fd32207a-a3c6-4c77-a227-13e522373373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a7c29eb-4cfb-4493-a5c2-4db4873cb61b",
        "cursor": {
          "ref": "135fc768-6121-48a7-97cc-b9de91ff19be",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2681869f-7956-4fa3-9a56-985fb5f93cdc"
        },
        "item": {
          "id": "7a7c29eb-4cfb-4493-a5c2-4db4873cb61b",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "211c76bc-36f3-49d9-8ee9-cfcb23b4729f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 192
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d91ea3c-5f89-490c-b05d-3e186ce68d6b",
        "cursor": {
          "ref": "88b7321f-7918-4f2e-83c7-99a20e665818",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "4b2568fd-7602-4b6f-b27e-7e5423fc742f"
        },
        "item": {
          "id": "5d91ea3c-5f89-490c-b05d-3e186ce68d6b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "e73882a6-51b6-41db-959f-f9b261ecc450",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 192
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae74fdec-ecab-4792-8a0f-0b44ba69e26d",
        "cursor": {
          "ref": "b9de925f-9d1e-4afc-a40d-06d04f8ed122",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "52145da7-a9e5-4367-b5ab-29c408dfff8a"
        },
        "item": {
          "id": "ae74fdec-ecab-4792-8a0f-0b44ba69e26d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4e54a3d8-e84f-4319-8f5b-00e6afd4695a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 192
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aede5d5-4b2b-4d3c-a6bb-c063cd51dfbe",
        "cursor": {
          "ref": "61ea6605-f344-4e83-a32b-28c54cf71305",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "9ac2da45-a866-4d0b-a297-e81712d4cba8"
        },
        "item": {
          "id": "0aede5d5-4b2b-4d3c-a6bb-c063cd51dfbe",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "0ce188a0-932e-4a13-a33c-2c66282f181e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42e41cea-ca33-47c9-8bc6-bb22be0d637a",
        "cursor": {
          "ref": "a0fee23d-0122-4063-b4e8-d5e539c358a8",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "831ab02a-b929-455a-bf71-363237d5968b"
        },
        "item": {
          "id": "42e41cea-ca33-47c9-8bc6-bb22be0d637a",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "dc141391-09c8-47a6-b299-61b8e12ed0cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 192
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc8291e-7868-48bf-a8bc-426236d6bd25",
        "cursor": {
          "ref": "9ae53032-03a8-4d07-801c-e759df92428f",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8bd43a0b-9de3-4c0c-b791-62906bd40b28"
        },
        "item": {
          "id": "0cc8291e-7868-48bf-a8bc-426236d6bd25",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e96781d7-2022-4ab8-b6ba-acb3d341ebac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 192
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a5f098d-00ab-4d6b-aacd-a0aaa36274c1",
        "cursor": {
          "ref": "042b049e-a9db-4883-a78a-68b0816128f7",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "bfb4a5fa-acfb-42f3-842f-55a38d423574"
        },
        "item": {
          "id": "8a5f098d-00ab-4d6b-aacd-a0aaa36274c1",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1c8b2432-3237-4935-8ad4-1b23d298436c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8920963e-7f7a-44a1-b7cf-81a2c99d09f0",
        "cursor": {
          "ref": "71444166-4f6e-4efe-bfed-58963d58a259",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b8afbd89-03da-4015-ace2-ee6cc04ad570"
        },
        "item": {
          "id": "8920963e-7f7a-44a1-b7cf-81a2c99d09f0",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "bb4558d6-e02c-4966-9de4-2fe8596cbdad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7888bf2-88f3-4e62-9ba0-9c2d4c5a6790",
        "cursor": {
          "ref": "a0ef205d-f2c7-4523-a34f-6f83ebb5edf7",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "2db4ca8d-ba48-49c2-bc9e-ab8f8bf00db0"
        },
        "item": {
          "id": "c7888bf2-88f3-4e62-9ba0-9c2d4c5a6790",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d9d650ba-03b9-4ef6-8488-c584910c19bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41fc72db-371b-494d-8eb8-4bf69e7c293c",
        "cursor": {
          "ref": "57ea42b9-e2bc-4d5c-9804-65eea7145785",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c5e1c094-ef67-4cde-8251-a8ad38e39fac"
        },
        "item": {
          "id": "41fc72db-371b-494d-8eb8-4bf69e7c293c",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "88b13ce8-c6ea-496a-807b-ef14a4c161b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40ac72f5-90d4-4407-91f8-d07cd01215bf",
        "cursor": {
          "ref": "bec28c46-767c-43ac-a373-97532aca6300",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "a13cd48c-6643-4a44-bd1e-db0b85e2b5b8"
        },
        "item": {
          "id": "40ac72f5-90d4-4407-91f8-d07cd01215bf",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "74219336-0eb7-4008-859b-90514bed3fc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13365fc1-ad34-46b0-a4d5-1da03dd0a730",
        "cursor": {
          "ref": "a65faf3c-6df5-4bd4-8c5a-2e145f131d75",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "640407a8-c068-4efb-9579-be7894eb2955"
        },
        "item": {
          "id": "13365fc1-ad34-46b0-a4d5-1da03dd0a730",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "6c04a0a9-e212-41c8-839b-780da1e0b6c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da40b671-d828-45bd-a494-afc0a89c9f28",
        "cursor": {
          "ref": "f6068aa5-cbbd-4d4f-b989-e66051c485be",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "d33256f7-18d9-4bdb-acd3-8cf12b763b40"
        },
        "item": {
          "id": "da40b671-d828-45bd-a494-afc0a89c9f28",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "6788b728-322e-4adb-8bb7-84e175c9adaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e7d5872-7a04-48a6-9350-808ae73e6394",
        "cursor": {
          "ref": "d0805b62-8830-4326-80eb-f5fc8e4fd0fb",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "02280226-beca-4a32-8179-2032733be7e9"
        },
        "item": {
          "id": "9e7d5872-7a04-48a6-9350-808ae73e6394",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "a502c43a-3336-4084-95a9-2d5c184c60bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95fe91ca-5cf8-4857-8979-b261d83e8c7e",
        "cursor": {
          "ref": "4da8580c-2dc1-4d42-8801-dd84c267988e",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "f58699e4-c0bb-4b29-abe0-f4ab62cc96ea"
        },
        "item": {
          "id": "95fe91ca-5cf8-4857-8979-b261d83e8c7e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "bd562892-48aa-4ffa-9ad8-1c552fdf402d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc706b60-e9cc-4c29-ab1b-4e977c2538cf",
        "cursor": {
          "ref": "d7a6ace9-77f5-4c4f-aab5-5736e3c534af",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "4172dbdb-a69f-4140-a5e8-9ad75237a83f"
        },
        "item": {
          "id": "dc706b60-e9cc-4c29-ab1b-4e977c2538cf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "bb1c9c77-ad9f-469e-bf5a-168836b8f140",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2914e1f-44ce-4089-a334-62ff1e209d87",
        "cursor": {
          "ref": "41306ecb-c782-4958-86d6-cf3c40a074ac",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "a390b97f-3acb-44b2-ba72-eaedbb0421c4"
        },
        "item": {
          "id": "e2914e1f-44ce-4089-a334-62ff1e209d87",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d140f323-888d-4c01-88e8-4fa4cc61e595",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65258f9c-b2f5-4d90-a6a2-36baeccb455b",
        "cursor": {
          "ref": "e0e78a5c-fa57-4637-9ae5-dae0b656516c",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b5a8beaf-2ffb-46ce-ad7c-22a660a4d6c9"
        },
        "item": {
          "id": "65258f9c-b2f5-4d90-a6a2-36baeccb455b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "798142b4-98e5-4ae5-93dd-085c34c178a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edad4bfd-eb4e-42e7-b0d1-a48fd060cb18",
        "cursor": {
          "ref": "9c442d14-7190-4324-a066-95dc723bbdce",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "e3bb66f2-946f-4d52-bc7d-f447a5217c67"
        },
        "item": {
          "id": "edad4bfd-eb4e-42e7-b0d1-a48fd060cb18",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "92793398-f904-43fd-8d68-a5bb6eb00dd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2383aae-c387-47e8-b0c6-748d7480a433",
        "cursor": {
          "ref": "18cde4d7-033c-4ecd-9c5e-07cf2c9428e5",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "6c9703c0-18b6-436a-af5b-6bf59915c218"
        },
        "item": {
          "id": "a2383aae-c387-47e8-b0c6-748d7480a433",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "595aac71-1e7c-4e8f-8690-8e0e70dc594f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 186
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c172328c-a300-4ea3-90dc-9c300f4dbb16",
        "cursor": {
          "ref": "d1fe1aa8-bf99-4a63-8315-36e7ed2ac8ef",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "069269ac-37b0-4075-aab4-03f3f9a8e95b"
        },
        "item": {
          "id": "c172328c-a300-4ea3-90dc-9c300f4dbb16",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "f38195a3-ac76-4230-ad9f-0a4b1a495f39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 186
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14fd3b41-f029-4419-bc9a-c968169a3abc",
        "cursor": {
          "ref": "78b7a79b-fe40-4608-9ec6-05800e584d2b",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "362db559-3f76-431e-9190-64a7eb1204f2"
        },
        "item": {
          "id": "14fd3b41-f029-4419-bc9a-c968169a3abc",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "24a2080b-85fb-47d9-97fc-8031914602ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc778545-581a-4d64-bad4-c8ed3fc64fec",
        "cursor": {
          "ref": "689414b2-cabf-4cf0-b8f4-30bd486ad5fa",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "0d8afc92-44c4-4777-93b0-3745f9e77bb4"
        },
        "item": {
          "id": "cc778545-581a-4d64-bad4-c8ed3fc64fec",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "035df5c3-8a81-4deb-9d4b-e6b66e244468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 186
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b84afe1-a4c1-4af2-a750-0e1bfce1c4e4",
        "cursor": {
          "ref": "7bf2e6db-b85a-48e5-8c05-fdff530e12cd",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c9d87354-e8c3-407c-aa3a-dcdd423292d8"
        },
        "item": {
          "id": "2b84afe1-a4c1-4af2-a750-0e1bfce1c4e4",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "44da3dda-4aa3-470b-9ff4-832fec43ab37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f801af98-1cf6-48f5-92f0-2f883d5db306",
        "cursor": {
          "ref": "3542d517-0e39-4a11-8578-c97cd95fea82",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "318898f8-1702-43fc-ab71-4e24748f60c9"
        },
        "item": {
          "id": "f801af98-1cf6-48f5-92f0-2f883d5db306",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "455dccb0-7030-492c-ba94-9c27aff00dec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "146ea275-eed8-496c-b1c3-9667381f3eb9",
        "cursor": {
          "ref": "6aa81929-e2de-426c-a925-ba285c6c704a",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "f865ddcd-bbe9-4c69-88ad-98b8b10ef6e9"
        },
        "item": {
          "id": "146ea275-eed8-496c-b1c3-9667381f3eb9",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "f33a47dc-9657-4d77-9c78-dcd365fb94fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c782149-a962-45bd-af1f-7b1f4ada5bbc",
        "cursor": {
          "ref": "2bad97ae-f220-4de2-b1f8-876ba1242f7f",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "bfb358b4-6b55-41ee-920e-9a49c4f9d923"
        },
        "item": {
          "id": "6c782149-a962-45bd-af1f-7b1f4ada5bbc",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "962ce2fb-33b4-4935-a307-6cf72f35994c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53a10d23-bcbc-4c37-aa6c-1345aa5ad196",
        "cursor": {
          "ref": "45a67670-c8ef-4cf7-8a57-f4b83a41efa1",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "978ebf86-97e0-4057-b268-d9d66eb83465"
        },
        "item": {
          "id": "53a10d23-bcbc-4c37-aa6c-1345aa5ad196",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "9056649b-82c2-4779-90cd-6efb44892fde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f9db414-7cb2-438b-9526-7957692c7060",
        "cursor": {
          "ref": "9894e67f-b578-4041-b006-9672b0c70580",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "5694ef61-da8d-4be1-87d9-3e9a508a5865"
        },
        "item": {
          "id": "9f9db414-7cb2-438b-9526-7957692c7060",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "396e8ee2-f794-4d29-b13a-0c11dbc8af5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30775ebd-c51b-4b38-965b-ab61d923292e",
        "cursor": {
          "ref": "b537ecba-44ca-4ba0-8ec5-6ea1937efad2",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e8bfc864-9105-4e3c-b9b2-6b10bfa25262"
        },
        "item": {
          "id": "30775ebd-c51b-4b38-965b-ab61d923292e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "203028ae-6e2a-47e1-b83c-5c2bb5bc641a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92766e6c-93b0-4336-8686-00a18c29db86",
        "cursor": {
          "ref": "f0345bee-a69c-4ca1-98ca-e0768f272870",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "6a8d2676-2384-4067-9b57-e874aaf4285a"
        },
        "item": {
          "id": "92766e6c-93b0-4336-8686-00a18c29db86",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "185c1a73-ea1f-47c8-925e-4cff8cdc4a1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aab6edb6-a06d-48fc-9abc-c676d1838925",
        "cursor": {
          "ref": "7460cc49-4665-429c-a312-807ba56e2cd1",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "86e11cf9-381d-4bf4-9056-c79c5df13e18"
        },
        "item": {
          "id": "aab6edb6-a06d-48fc-9abc-c676d1838925",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "992f3e68-480d-445c-a310-61bc3b03544e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd91fce6-1258-4cef-a0cf-2dd82dfa481d",
        "cursor": {
          "ref": "b7555304-b24c-4b68-9959-483ac928e416",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "80102df5-2219-4edc-bfe0-86bf59c68265"
        },
        "item": {
          "id": "cd91fce6-1258-4cef-a0cf-2dd82dfa481d",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "b929bae5-9884-41e4-afc2-76420caad154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6113c27b-1055-44d4-961c-eb91713e13f1",
        "cursor": {
          "ref": "95fb46a6-dccf-416b-b014-51ce1e13d412",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b2239fc6-2cce-47e1-9c5d-4c043aa77388"
        },
        "item": {
          "id": "6113c27b-1055-44d4-961c-eb91713e13f1",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f6b01e53-21be-440c-bd48-05c91c8e3fb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0af3ec74-01d1-4d14-9522-f48cab91fafd",
        "cursor": {
          "ref": "027f82d1-1900-4dc8-bd8f-3d846eb50304",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b2d9df59-2c69-4e7f-be5c-81f53544b811"
        },
        "item": {
          "id": "0af3ec74-01d1-4d14-9522-f48cab91fafd",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "26743a38-7e4a-4f7b-8778-3667eb7ed2ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "482c3d08-512b-4a2e-abe0-530d47da8552",
        "cursor": {
          "ref": "16ce91c1-a324-4e68-ae63-33778ba46602",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "05e184b5-000d-4efe-89bb-cdfe7a742d25"
        },
        "item": {
          "id": "482c3d08-512b-4a2e-abe0-530d47da8552",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "47484103-af62-4aba-a7fb-322a66700e2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcf2c085-5b96-4489-80d6-3e8e14a539d7",
        "cursor": {
          "ref": "8829d694-3511-4cda-84a2-27a03781c607",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "1d493f64-f302-49c4-96e6-da1e8f9d763f"
        },
        "item": {
          "id": "dcf2c085-5b96-4489-80d6-3e8e14a539d7",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "cdd8ddf1-3c1c-4ee4-9f74-5adb6d8ff4b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75d7281c-f200-4f33-bb0e-36b2d3dd5d42",
        "cursor": {
          "ref": "f04ad9f4-060c-41a2-90d2-9627e32d4010",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "e355f293-53cd-4bae-bd7c-60fae5a90ef0"
        },
        "item": {
          "id": "75d7281c-f200-4f33-bb0e-36b2d3dd5d42",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "671f6932-9f5c-4cba-80a9-1e9e9775dcfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bce936b-4dbf-4903-8342-96b13ae3bbe5",
        "cursor": {
          "ref": "3bb08dcf-47b3-4468-865a-82b426d61036",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "62fba349-c274-4afe-b7ab-9626629703ad"
        },
        "item": {
          "id": "1bce936b-4dbf-4903-8342-96b13ae3bbe5",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "184c1005-0435-449c-96b3-247c2aa09459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b26a0d1-f5f4-46fe-88bb-bfb79889381b",
        "cursor": {
          "ref": "5dd5ce72-5b51-4b20-9063-a4286cadbe04",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "c43c40e3-6f1b-44df-82b3-244bb691c248"
        },
        "item": {
          "id": "8b26a0d1-f5f4-46fe-88bb-bfb79889381b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "d5b977fc-3a0b-4d9f-9902-82792b53ae43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "904fac72-8b42-4cd2-9650-3098cf83f7c6",
        "cursor": {
          "ref": "a54d3551-ce99-40c8-b278-147e5539d427",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "adda50b0-692a-4336-8dc6-d71ba17c3370"
        },
        "item": {
          "id": "904fac72-8b42-4cd2-9650-3098cf83f7c6",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ccf2cdc5-7bd9-46d5-bab6-00dd78a8995b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8e1f778-ec7d-435b-9859-64005437dc12",
        "cursor": {
          "ref": "e7d28629-97e1-4a58-9d1d-96e15ec15827",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "a9f9ad9f-3888-4fae-b8ac-22f303064d23"
        },
        "item": {
          "id": "d8e1f778-ec7d-435b-9859-64005437dc12",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "6c0b0284-8ad8-435e-a5d6-08f2941405cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 573
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d4ff3ff-d2ea-431f-8e13-21801af83ed8",
        "cursor": {
          "ref": "cda62439-9e5a-42a0-9e6e-52475cf79a99",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "5f636556-76a0-4ec1-ae58-5646ab6aa7b3"
        },
        "item": {
          "id": "4d4ff3ff-d2ea-431f-8e13-21801af83ed8",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b7f2b91a-3913-44fc-8940-6fcc37f7d432",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 573
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de4dbd7e-57a3-4fd4-a2b2-ee24c7277d23",
        "cursor": {
          "ref": "a9b7edf5-b379-437a-9d8a-bca0fa421a00",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "9782116c-486b-43cf-91a1-200713f81e10"
        },
        "item": {
          "id": "de4dbd7e-57a3-4fd4-a2b2-ee24c7277d23",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "0aa28112-48cd-4933-90f4-197e119d9422",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 573
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab60e31d-fd58-43c7-85c6-064275cd9850",
        "cursor": {
          "ref": "657a1626-4ebb-41c9-ae50-54033b300257",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "957afe64-c791-4e2b-8991-26fea877ccd6"
        },
        "item": {
          "id": "ab60e31d-fd58-43c7-85c6-064275cd9850",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "02b2fb6c-a966-4f69-914d-dd431f4275f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 573
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe5a37da-9255-41b0-976d-3652ce966dfe",
        "cursor": {
          "ref": "9d077c63-e99a-411a-8472-4934d286aeb8",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f6819f4f-51e1-4a48-8b76-164555bf8005"
        },
        "item": {
          "id": "fe5a37da-9255-41b0-976d-3652ce966dfe",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "82b2a679-2a47-449c-86a8-7542ffcdce51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 573
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9879f1a-efaf-4292-a140-71479264e2cb",
        "cursor": {
          "ref": "3d290563-97f9-4386-8ce9-ee318df27877",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a7fe56da-14d6-45fa-8395-6a7efe8e7de3"
        },
        "item": {
          "id": "c9879f1a-efaf-4292-a140-71479264e2cb",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f49b5b28-929a-4bbc-834d-e1e14a2da959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 573
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4487b090-d3eb-4451-99e6-0006b5aad476",
        "cursor": {
          "ref": "85c963db-9d8d-46b0-b22d-a0ac1599d862",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "5bd5db15-5037-459c-b9e2-90034f5ea8ee"
        },
        "item": {
          "id": "4487b090-d3eb-4451-99e6-0006b5aad476",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "4a21366c-a8dd-417e-84eb-51f155ae1d83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 573
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d1a8a28-8444-4298-814a-99930eb3b2d8",
        "cursor": {
          "ref": "30bb5c17-abca-499b-8fb1-43e024e1bb2b",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "298cc22d-3074-48bc-b0c7-4d14de28ac51"
        },
        "item": {
          "id": "0d1a8a28-8444-4298-814a-99930eb3b2d8",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "405d997f-8dcb-4ef2-8c1a-72bfda8160a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07ca2c42-1f6b-41c7-a92d-6f4cd403b049",
        "cursor": {
          "ref": "443f62c4-4c82-47d9-9814-f02a9fa1d8bb",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "ef3949f8-313d-4a5c-b086-94c0faf91138"
        },
        "item": {
          "id": "07ca2c42-1f6b-41c7-a92d-6f4cd403b049",
          "name": "credentials_issue"
        },
        "response": {
          "id": "7c6e7cb1-f8e8-40ec-9f34-50b9422ada2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:102)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:102)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:102)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:102)"
            }
          }
        ]
      },
      {
        "id": "182471ac-6a85-46af-9c4b-c2ac6f2b0ef8",
        "cursor": {
          "ref": "04d4508a-dce9-4361-983f-c17ce9d1ddb1",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "30761b40-c5eb-4d11-a776-de43f98a1680"
        },
        "item": {
          "id": "182471ac-6a85-46af-9c4b-c2ac6f2b0ef8",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "ca8ba283-b9e2-4c49-b938-db2ce9324016",
          "status": "Created",
          "code": 201,
          "responseTime": 1844,
          "responseSize": 694
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should be object",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should be object\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:103)"
            }
          }
        ]
      },
      {
        "id": "73733d2b-af78-455b-8bb2-fd2905a4d665",
        "cursor": {
          "ref": "4e21bf58-977e-40dc-9999-8a7c00d7bd59",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "4d79bcb5-27ad-4c20-8586-db13c42bb9a4"
        },
        "item": {
          "id": "73733d2b-af78-455b-8bb2-fd2905a4d665",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0cbc584e-c7cd-49f3-be18-66a1e592fb5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "a3298d65-a7f9-4e31-95e3-dac37a3b11fa",
        "cursor": {
          "ref": "d1775e82-4873-421d-9b6d-c9724b516687",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "2a8d92b3-8076-49e3-9bb1-f1097f17762b"
        },
        "item": {
          "id": "a3298d65-a7f9-4e31-95e3-dac37a3b11fa",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "66e6f1f6-94d1-4779-b2af-217a047695ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "912e180d-0897-48d7-9760-6cab27a53865",
        "cursor": {
          "ref": "6c4d27ad-d5ee-455d-8bf8-527f5bb547ed",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f70ba17f-7cf9-4c49-9238-22211836f95a"
        },
        "item": {
          "id": "912e180d-0897-48d7-9760-6cab27a53865",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ea7bc2f8-225e-4f97-8a5d-4aa3cbcf7da1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "bd468c24-d504-4511-8705-82986eef4bc8",
        "cursor": {
          "ref": "b9a080e8-c112-46f4-952a-9f15a5a7a8f9",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "07925ea1-0751-427c-a6d6-9d5bd78481c5"
        },
        "item": {
          "id": "bd468c24-d504-4511-8705-82986eef4bc8",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c3530f92-f189-4954-aaf1-e36a33e15df7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 573
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "708734b0-b042-4b78-b396-362d8bf54da9",
        "cursor": {
          "ref": "427fe626-4456-4971-a056-62ada7b0e286",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0905c5ee-1bdf-4c0f-9c53-ce8a2d4c744b"
        },
        "item": {
          "id": "708734b0-b042-4b78-b396-362d8bf54da9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "18170cd8-48ed-4407-86e5-9f2a1c251418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3a9b32b-f282-41f9-bfe9-5979617fb11e",
        "cursor": {
          "ref": "7393eafb-0355-4d64-b946-52a9fa44ad0c",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "0ca9f35e-4208-4f7f-a1a3-fa475d878d0d"
        },
        "item": {
          "id": "c3a9b32b-f282-41f9-bfe9-5979617fb11e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "8ef446e9-cda3-4763-9353-dd5aeb03e96d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c75ae75-2b30-4e20-8fb4-cd6fabcaaf3b",
        "cursor": {
          "ref": "f30e72dd-149d-4dd9-8de4-ec417532aa9b",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "65c7e9e1-0741-4ba6-acd1-b34925513e86"
        },
        "item": {
          "id": "8c75ae75-2b30-4e20-8fb4-cd6fabcaaf3b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d97133f3-4268-4452-b35a-d8a52550e800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d4776e5-1fd3-48ba-860a-d2202cac0d15",
        "cursor": {
          "ref": "bf2302bf-cecd-4d9c-908d-21faef2432e6",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "bc13cecc-2ce2-4f70-b666-3acb7e44cfc0"
        },
        "item": {
          "id": "6d4776e5-1fd3-48ba-860a-d2202cac0d15",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "7de0d0f1-4595-486d-acdb-d2276736aa5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f61bca2a-5301-4e7e-95ad-2d1596ae0f29",
        "cursor": {
          "ref": "3d467720-83e7-4462-99a1-50ebef4d5ab4",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "b0eca79c-0cae-4e77-8e3a-0f4cb7e85761"
        },
        "item": {
          "id": "f61bca2a-5301-4e7e-95ad-2d1596ae0f29",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3009d7f7-65ff-43c1-9dcb-65f1885405b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e31c3199-13a8-4687-b7f8-9f2fa60e3bdb",
        "cursor": {
          "ref": "5307918e-5a1f-4bff-8f23-23ea3867ea67",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "9d4560d6-04e2-412a-885a-3abfc54b6321"
        },
        "item": {
          "id": "e31c3199-13a8-4687-b7f8-9f2fa60e3bdb",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6c4f67ca-4f9a-4eed-a13b-148621315c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fdafcce-003b-470a-87b3-cd89dc558de9",
        "cursor": {
          "ref": "6c42d3e3-122e-4686-b402-aec74711b085",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f18e1998-577d-4b82-9a37-75365d73ad38"
        },
        "item": {
          "id": "7fdafcce-003b-470a-87b3-cd89dc558de9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "32590412-cfa1-490e-be12-6b84127655d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e44a31f8-2927-4fa3-a955-018c8e45d5b1",
        "cursor": {
          "ref": "51c14a00-3b90-4258-be52-3d0a877baab8",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e56cb32f-fe3c-4540-9350-dcb047a7d169"
        },
        "item": {
          "id": "e44a31f8-2927-4fa3-a955-018c8e45d5b1",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "358919f0-f794-4bd6-8ef6-e482800c4bd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "432c49ce-4707-4cfb-85f0-909b56d36615",
        "cursor": {
          "ref": "36b479f3-3234-4d63-85f9-7212f757d999",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "f0615afd-4cd0-42a3-8e20-314e220e5c01"
        },
        "item": {
          "id": "432c49ce-4707-4cfb-85f0-909b56d36615",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a2676e2d-b717-49e0-aec6-ceeb368ab708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55af46c6-0510-4b0a-b3cb-3ebd9b4b54c5",
        "cursor": {
          "ref": "7d3cb4f8-00c4-4075-b1ea-cd81da64d801",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "835d08bf-40b2-434b-8547-113c5c4d0dd8"
        },
        "item": {
          "id": "55af46c6-0510-4b0a-b3cb-3ebd9b4b54c5",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0a0f2b98-1de5-4593-891f-f96466549f66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bc24658-f20d-46f3-9930-58f94b490ad6",
        "cursor": {
          "ref": "bcc6cbfe-f367-4b7e-b09c-611226c52b01",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "6393448e-7bd7-4571-8433-9dab00a6c644"
        },
        "item": {
          "id": "5bc24658-f20d-46f3-9930-58f94b490ad6",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "8de09c94-a067-451f-9058-25245adabdc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b519901-0702-4a2d-bf9a-27409e772e23",
        "cursor": {
          "ref": "545bc77b-9559-4f9c-b2af-de8007da6c3f",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "781e3ac7-4ebd-42bb-bd28-b97ff4e78bae"
        },
        "item": {
          "id": "2b519901-0702-4a2d-bf9a-27409e772e23",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b20df0ae-bac9-4229-ada8-6132bd483bd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18b7dcf4-7085-4aa0-bd79-6d882dd57d8c",
        "cursor": {
          "ref": "d63a3b9f-6ac9-4a8e-ac9d-09384e82b0e2",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "504beaf6-839f-4be7-8f5f-4f241c6596c5"
        },
        "item": {
          "id": "18b7dcf4-7085-4aa0-bd79-6d882dd57d8c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "434aa534-4ff0-4771-bd42-5fd2f19bc9b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4739a8b1-f8d8-4919-83d2-edefe96fcaaa",
        "cursor": {
          "ref": "ca90e52e-c9a3-43e0-adfa-a218592cb198",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "84fd8c01-7d77-490a-9c62-e8ce08ce94ee"
        },
        "item": {
          "id": "4739a8b1-f8d8-4919-83d2-edefe96fcaaa",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "54345b77-d9bd-457c-b727-2f7833595511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf395d75-33cf-47f0-9a48-ce3e841e26b9",
        "cursor": {
          "ref": "15fe0466-2545-4c46-a6bf-241296753f33",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "dff27597-0fc8-461a-91cc-6dd0211faeae"
        },
        "item": {
          "id": "bf395d75-33cf-47f0-9a48-ce3e841e26b9",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "97b3704e-c801-48a8-a5c7-6b3abf38c3c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b63b82fe-11ae-491a-927e-99552505412b",
        "cursor": {
          "ref": "8e618d81-f2b1-4b31-9c49-925238255751",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "857af6cf-4fb5-481c-a58b-a4c7d2c30b1b"
        },
        "item": {
          "id": "b63b82fe-11ae-491a-927e-99552505412b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c9ccf399-d211-4976-8a79-fd1397d123ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "196787a8-892b-4a45-9d3b-09fdf9dd11f1",
        "cursor": {
          "ref": "79c6f57d-b107-4dad-bea6-86b6b0aea641",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "3405ca5f-e056-4b64-9087-2f91d99037bd"
        },
        "item": {
          "id": "196787a8-892b-4a45-9d3b-09fdf9dd11f1",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "43e43c63-886a-41b1-a2a9-757b23b52469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2b0a0dd-fa45-4fd8-9985-ab6cfb9c5033",
        "cursor": {
          "ref": "7ad0b066-848c-4e13-97b9-e4fb8d95f3fd",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "90ff0aa1-8b3a-425c-b9e0-feebce47b27d"
        },
        "item": {
          "id": "b2b0a0dd-fa45-4fd8-9985-ab6cfb9c5033",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "957bd19e-0713-45d6-b2e2-af8249f0500d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af21454e-bcb9-4100-bc38-9c6fee809b96",
        "cursor": {
          "ref": "7e611ebe-9b6d-48ad-887a-b0bda21e1407",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "99bf99e2-acc1-4c54-ad1e-25118b61a80b"
        },
        "item": {
          "id": "af21454e-bcb9-4100-bc38-9c6fee809b96",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b5b1e420-0607-4292-b0a0-0605af627d8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d8674d3-be14-409f-b30d-56e1b33ba36e",
        "cursor": {
          "ref": "f07f26de-1b56-40d4-9d7f-fa312b5d6922",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "235365c7-4cc2-411d-bce5-e7ba786da912"
        },
        "item": {
          "id": "2d8674d3-be14-409f-b30d-56e1b33ba36e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "6d833279-6d06-4a0c-aca1-7aed9b2270ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e39e9122-b24f-4757-b31b-0b6d3cf6d019",
        "cursor": {
          "ref": "63409c4d-f0e1-43cf-ba09-94123956b69f",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "6012127a-db06-4c81-bd9c-9662c646d525"
        },
        "item": {
          "id": "e39e9122-b24f-4757-b31b-0b6d3cf6d019",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "3c77520c-c96a-4350-91e1-95d2987e27ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4c2fc55-4251-4afe-81f5-b1de12b65db0",
        "cursor": {
          "ref": "ab586733-18dd-4993-a125-ed0a2730027c",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "12add142-70d1-445e-9e37-0fc77a541246"
        },
        "item": {
          "id": "e4c2fc55-4251-4afe-81f5-b1de12b65db0",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "fcc1abf3-02bf-414f-ae1e-6396fefe11e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0810e2c0-513b-4456-a3cc-40b5b6e158a6",
        "cursor": {
          "ref": "ae7faa97-8430-46e4-b3b7-de8da2b461ee",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "7175be77-81ae-4f8d-b246-25de95e5c346"
        },
        "item": {
          "id": "0810e2c0-513b-4456-a3cc-40b5b6e158a6",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e5af9651-9813-4a6e-8d3a-b1440a2b626f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6fdaf79-d6b4-4dc9-8a37-17a287546501",
        "cursor": {
          "ref": "6f51437d-b4fc-4f6a-ad68-71b6101c78ba",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "1b756909-de3e-4e41-9a70-8f39591977ea"
        },
        "item": {
          "id": "c6fdaf79-d6b4-4dc9-8a37-17a287546501",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d9621395-2bc0-4a7f-b3a5-cdd2fe09fd7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc3e0e7e-9b4d-4d6d-886a-87c8d46ad0a1",
        "cursor": {
          "ref": "dd76371d-93a5-4b56-9389-28f708304535",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ab608401-9a03-4914-813e-12942fcf5ae1"
        },
        "item": {
          "id": "cc3e0e7e-9b4d-4d6d-886a-87c8d46ad0a1",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "0f4d3984-833c-4f66-b72d-8fc09d73d1e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5edf61d5-f6c0-4e19-80e9-f64e1ad927fb",
        "cursor": {
          "ref": "939d301d-1cfa-483f-a492-c09ed15700df",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "9fec06a2-3e3c-42c6-a3c5-535714284379"
        },
        "item": {
          "id": "5edf61d5-f6c0-4e19-80e9-f64e1ad927fb",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3eb8cf14-3cd1-437b-b5cf-0bf66551dd08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3355cbf3-b53f-43c8-8d98-0b185c1dc187",
        "cursor": {
          "ref": "20d96050-9b04-4b78-9fcc-bcc34cc0b3c8",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "fa8d1822-4fe6-4fc9-8fdb-f7cdd25153ca"
        },
        "item": {
          "id": "3355cbf3-b53f-43c8-8d98-0b185c1dc187",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "0c06c008-f8c9-4efa-9c30-c9329bd0880e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed4ba7be-db8f-4b99-b745-a6d4933da1e8",
        "cursor": {
          "ref": "80c3bea6-4098-4ddb-b6d5-263d2bb002ae",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "474bdbea-e151-4388-b316-982aa7827a8e"
        },
        "item": {
          "id": "ed4ba7be-db8f-4b99-b745-a6d4933da1e8",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "6738a100-d9b4-4ec0-939e-ba934e164c5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "845f5d9a-d99e-4e3a-8d76-3a06361c5131",
        "cursor": {
          "ref": "400ae12a-0931-4db9-8abc-5799cfb22d05",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b7be4eac-a954-4ab0-bc17-f77e1851d370"
        },
        "item": {
          "id": "845f5d9a-d99e-4e3a-8d76-3a06361c5131",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "bfee18e3-5258-42e8-ac25-bd279f25af9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9dc1f51-168f-4145-b7d9-bd4ba87f4a71",
        "cursor": {
          "ref": "efb52b71-1b97-417f-860d-f37a3c72c657",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "efe73b8e-3ad7-45c9-aedd-a3a62ba2c09c"
        },
        "item": {
          "id": "f9dc1f51-168f-4145-b7d9-bd4ba87f4a71",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a2663bd7-7228-4ee2-99b4-847d7edf2c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba9ce8c9-e46e-491f-8131-6a8a3f0a17cf",
        "cursor": {
          "ref": "221475e6-ca80-48e2-a6b5-5a14285778d3",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "3d15011e-38a0-4cd4-9610-d1d129921c99"
        },
        "item": {
          "id": "ba9ce8c9-e46e-491f-8131-6a8a3f0a17cf",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "58b77d74-c44f-4dfc-b9f3-9ab732903c0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0cbd70e-43f6-4790-b260-935094d9c42f",
        "cursor": {
          "ref": "5813c56b-b1b3-4a00-98e7-0afb6ee81629",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "3dfb0a07-0726-418b-a0cb-f9a468354587"
        },
        "item": {
          "id": "b0cbd70e-43f6-4790-b260-935094d9c42f",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4d70d300-17e0-4131-ad0f-2df84c0dc342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f388561c-ef52-4064-9877-20ce443ea0b2",
        "cursor": {
          "ref": "d59b4545-8fbb-43ba-8492-ebe36f912969",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "8de5b8d0-05e4-4b68-a506-9495dfba7328"
        },
        "item": {
          "id": "f388561c-ef52-4064-9877-20ce443ea0b2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4d3d13ba-ed35-48eb-a768-b3d9e7d40e0b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0223f2ad-eeb9-435c-87c0-cf060f219b7d",
        "cursor": {
          "ref": "750829ff-3b45-490d-9153-082ca940bbcc",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "817fbb4b-a054-49f6-a319-070121bc2b86"
        },
        "item": {
          "id": "0223f2ad-eeb9-435c-87c0-cf060f219b7d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c78b9474-cba0-44e9-b88b-6a0891136b94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f05d2d21-c320-42d9-a74d-2083e37d6466",
        "cursor": {
          "ref": "e87e17f0-1e4d-49c6-afa4-74031d4280c6",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "2f56edd3-846d-4919-82d9-c6a51bc106c4"
        },
        "item": {
          "id": "f05d2d21-c320-42d9-a74d-2083e37d6466",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ff7371b2-dcb1-47f5-b307-b621a1deed39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6945c858-f15c-4710-8e13-babbe7cad969",
        "cursor": {
          "ref": "6546fa55-e54f-4fbb-bf5d-d47ca6d3a279",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "44171fff-c777-4fd9-89ae-5a73589fa43b"
        },
        "item": {
          "id": "6945c858-f15c-4710-8e13-babbe7cad969",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0dbf1dfc-da00-4559-8b4b-891bf6f2ef54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21e7c2f7-5ec3-45ff-984f-6cedf1a0d3fa",
        "cursor": {
          "ref": "a3c66d8f-49e2-494d-b5e6-ec279a9913ca",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "3e7e7fe7-9f14-42aa-93aa-c81e08f8aabb"
        },
        "item": {
          "id": "21e7c2f7-5ec3-45ff-984f-6cedf1a0d3fa",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "81d602fa-c9b0-49d1-ba87-7cc63a143e51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e54ab220-ac44-4590-b3dc-0bf533e6d2cc",
        "cursor": {
          "ref": "6a8cf648-176e-4352-9497-7203e7400b2a",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "18a8d076-089f-484f-a17e-6fede4c2cd7b"
        },
        "item": {
          "id": "e54ab220-ac44-4590-b3dc-0bf533e6d2cc",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "fb43f812-9215-4918-bcd1-d8e8f2c68ebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4271c63-17fe-4aa8-b958-4bf3a865fa44",
        "cursor": {
          "ref": "553ef16b-3c39-434b-949a-a96cd33b7cb4",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "98827a01-7bff-4350-8101-4f6f69f81f50"
        },
        "item": {
          "id": "b4271c63-17fe-4aa8-b958-4bf3a865fa44",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7ccba517-1f1d-441d-a59d-11afaa74821f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeaa6c98-6b91-4d40-9165-8690e6fc583a",
        "cursor": {
          "ref": "cd497ecd-9700-45d8-b7db-d79810c5d501",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "8c72c312-5db6-4a03-81e1-5fffd1216b8a"
        },
        "item": {
          "id": "eeaa6c98-6b91-4d40-9165-8690e6fc583a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "0291c5c0-9648-4191-87ec-178b3038c83d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "519fb306-f169-4f09-a300-6bd38033b8d0",
        "cursor": {
          "ref": "e9875571-3f3c-4139-86ad-63238fcef595",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "3e0e5d39-17ff-4289-adaa-67fad04194e2"
        },
        "item": {
          "id": "519fb306-f169-4f09-a300-6bd38033b8d0",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b0d46800-c96f-44d7-820c-9335bde5c5bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca78c1aa-4fef-45c3-b216-bdcec78881e7",
        "cursor": {
          "ref": "8b5dd12f-66ee-4deb-ae02-66da3619a62a",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a97130f1-bd2e-4755-907b-98cb97213288"
        },
        "item": {
          "id": "ca78c1aa-4fef-45c3-b216-bdcec78881e7",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "7b85bb6e-83c4-47d8-ab78-36a49d02ec99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0dfd663-5a5a-4964-b2d0-0213329c78b8",
        "cursor": {
          "ref": "cc37b302-dc56-423e-913a-1c2fbd9b5963",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "c018e109-b159-4ccd-9b92-a71dc15d9d3a"
        },
        "item": {
          "id": "a0dfd663-5a5a-4964-b2d0-0213329c78b8",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "1f8a065c-480c-471e-8af9-6b2258d8d098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94200ba9-47f5-467f-9d2c-c41668626225",
        "cursor": {
          "ref": "62bf45de-fa91-4970-a33c-c4d28b756bed",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f733a372-e11d-4b63-b365-7416d9675674"
        },
        "item": {
          "id": "94200ba9-47f5-467f-9d2c-c41668626225",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "26a59f7d-7c38-42e6-8a6f-d98784c8d20f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0983d085-3a82-49e1-84bd-57e40e97bba1",
        "cursor": {
          "ref": "10e6ef2f-3937-4aaf-9884-68dd8a631110",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "5ab80de1-faab-45d7-a131-374b8a2ddb85"
        },
        "item": {
          "id": "0983d085-3a82-49e1-84bd-57e40e97bba1",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f5b869ca-85c6-4bc8-bd1d-fcfab6fe83f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f59c21b-b010-420f-bdda-cdbaacd830bf",
        "cursor": {
          "ref": "2b29353d-e4d8-4086-8d1e-592f08635404",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "9b107e39-5f5d-46a7-b04a-4b363013325b"
        },
        "item": {
          "id": "7f59c21b-b010-420f-bdda-cdbaacd830bf",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "03d3ce76-e831-4077-a751-249d7aeb3fb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a2a91de-70e7-44e1-aeb9-bec710206cbd",
        "cursor": {
          "ref": "8c49dfe2-85e7-4244-9553-c56784101c74",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "d2cdd001-4217-49c8-a7f6-decd28a8b952"
        },
        "item": {
          "id": "5a2a91de-70e7-44e1-aeb9-bec710206cbd",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "af137e38-def7-4a81-8fa6-e9b7cc873e14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcec1489-1b32-4609-bdb2-d36c488c588b",
        "cursor": {
          "ref": "971d5290-7261-4767-b4aa-dc08e47d96c4",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b88ed28a-2838-4eb4-9b67-b34ba5c27bd9"
        },
        "item": {
          "id": "fcec1489-1b32-4609-bdb2-d36c488c588b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2687923e-16cc-4053-970b-9808bb08c267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "363a42b8-59e1-44fb-a984-feb5ad8c19f9",
        "cursor": {
          "ref": "48a93ee4-d849-4906-a7a9-1ca51370ef69",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "4265b610-8afd-4124-a400-37663edd9d51"
        },
        "item": {
          "id": "363a42b8-59e1-44fb-a984-feb5ad8c19f9",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d13e2b08-38af-40b9-b3b4-97ab1e788bc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e413497d-ef78-4be0-a449-93e7e4d57160",
        "cursor": {
          "ref": "ff5157ba-3954-4eb0-ae92-4d61ffff8ac3",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "9e35468e-9f14-4072-85e8-ad7ce26be3bc"
        },
        "item": {
          "id": "e413497d-ef78-4be0-a449-93e7e4d57160",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "edcf0125-1705-4b63-942a-5e334c93b0e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1477f3a-7688-427d-a3b2-95e3589dfad4",
        "cursor": {
          "ref": "a1fd4da1-9238-4658-9d35-b7e9c6a3e40c",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "86024183-4d06-48d6-a033-6831e61c75c1"
        },
        "item": {
          "id": "f1477f3a-7688-427d-a3b2-95e3589dfad4",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "eb5e2662-4edf-4bdf-923f-88e4ffe5d974",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "560dedcd-e468-4c5d-952e-103b7c2d47a3",
        "cursor": {
          "ref": "1f3dda37-225c-42df-8ac6-f7ad29a3c361",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "f1d4cd55-0a7b-4306-b961-27dcebb5c28d"
        },
        "item": {
          "id": "560dedcd-e468-4c5d-952e-103b7c2d47a3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3fc7dc7e-e98a-4635-a5e0-cd54ac2d853b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1591bbc-94b2-46cb-aa4c-199d86164ab6",
        "cursor": {
          "ref": "0408d9e8-091b-4726-9726-959af712ec2a",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "c056be67-10ef-4473-90f0-7ad80fd26ae0"
        },
        "item": {
          "id": "b1591bbc-94b2-46cb-aa4c-199d86164ab6",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "51a8a82f-3217-40ec-8d00-f4a8a552dff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b86258-fc9d-4c19-9214-c9d02b64847f",
        "cursor": {
          "ref": "eb71ff0a-77b3-474e-bae7-d37594fd0258",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "da942507-c9c8-41fd-b5a8-e681318c113f"
        },
        "item": {
          "id": "95b86258-fc9d-4c19-9214-c9d02b64847f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "33ed84da-fb83-4afa-a0b4-bd9408909b1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df95c43a-3322-40b5-bd6c-2f8ced2d5832",
        "cursor": {
          "ref": "7d028eed-9d29-4015-a52b-a0eaa05dca9a",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "81f92373-95e4-4cc2-83ca-93700741b8a9"
        },
        "item": {
          "id": "df95c43a-3322-40b5-bd6c-2f8ced2d5832",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "82a8eb39-ac40-48e0-81ca-8dde55bb9b68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2e839fc-19dd-4a02-a536-09cded3d0713",
        "cursor": {
          "ref": "505591de-771d-42b2-9f14-0c9d171f05b4",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "aab3c03f-092d-4b5e-bc7f-aba257b762ca"
        },
        "item": {
          "id": "e2e839fc-19dd-4a02-a536-09cded3d0713",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e7c5f725-389a-4d2b-9e09-e4e0d3549ac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9525f34-630e-4de5-b41f-ead3f56981db",
        "cursor": {
          "ref": "b3f57fb1-08ec-46fa-bfbe-fc08caf47577",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "0dd9e917-2162-4b6d-a786-9b37678adb30"
        },
        "item": {
          "id": "d9525f34-630e-4de5-b41f-ead3f56981db",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e2092375-c5c0-4131-b11c-056013740635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84bd0798-b9c8-4a32-b92c-7a8239de2025",
        "cursor": {
          "ref": "cbe41c29-1ea5-4bd2-a45c-72e94ed7aa9a",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "2fb44096-a4de-47dc-a6e1-0d1e7440368f"
        },
        "item": {
          "id": "84bd0798-b9c8-4a32-b92c-7a8239de2025",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3ba1823e-ae9f-4ab7-80e5-8662d098397d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a59bc1c-d1ce-409a-b513-c5d4882186f9",
        "cursor": {
          "ref": "afaa721e-fedd-4607-83b9-9d1d37d4fac6",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "62618291-9fd8-4e28-ac22-f0a2f61a8fc4"
        },
        "item": {
          "id": "1a59bc1c-d1ce-409a-b513-c5d4882186f9",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ac8957b9-96f0-4e08-bc18-449dc729de18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da66d15b-6c7b-4319-b4a0-6e4058ee3e77",
        "cursor": {
          "ref": "6f07f245-730d-423b-8d79-c2f3330a13ed",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "6e162dbf-abd9-41df-b7c7-3e6ac5d429e8"
        },
        "item": {
          "id": "da66d15b-6c7b-4319-b4a0-6e4058ee3e77",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b17f21ee-e542-474e-84d2-98de06f3dd05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e5af043-47c4-4407-8f91-c4747553e577",
        "cursor": {
          "ref": "19fd55b9-3fb3-4ef4-9274-ea3514778876",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "14336d9a-b9da-455d-a80e-bc5cedbefed3"
        },
        "item": {
          "id": "9e5af043-47c4-4407-8f91-c4747553e577",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d5db8414-f243-4b5e-8349-9d456511ab8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99639f6e-b3e2-4280-8638-23f899e9c1ae",
        "cursor": {
          "ref": "bb81fabd-a0c1-4890-8a09-d8872e5857f7",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "97e0c99b-bf0d-4403-970d-9999c80df11e"
        },
        "item": {
          "id": "99639f6e-b3e2-4280-8638-23f899e9c1ae",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "208a7311-4f98-4cb2-89a1-a3eda50868e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c052de6-b2a7-4991-a85a-efaba6fa10fd",
        "cursor": {
          "ref": "2c9e3edc-7794-43ea-9cb9-54351fd79b9a",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "57f7542d-6930-43d3-a3c8-4be93112db63"
        },
        "item": {
          "id": "2c052de6-b2a7-4991-a85a-efaba6fa10fd",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e2ad008d-202c-481d-afcb-3d52f4091919",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93cea99a-ae58-45c1-94a8-21507b62af77",
        "cursor": {
          "ref": "681fbebe-4add-4fd9-bf5d-335191a41516",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "4a0396b3-2e64-420e-9ee2-ae10021ad610"
        },
        "item": {
          "id": "93cea99a-ae58-45c1-94a8-21507b62af77",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "02a22baa-7737-4735-8a9d-fb55a0a604b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c32a99d-c88d-4f05-9b7a-42ccfbca6495",
        "cursor": {
          "ref": "81261a16-f6f8-4ce4-bf55-dc261176108c",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "8ce093da-0670-452a-baab-83542c004f14"
        },
        "item": {
          "id": "2c32a99d-c88d-4f05-9b7a-42ccfbca6495",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "231a480a-2ac4-46c6-8440-c636b94958ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef0dc6fa-eb2a-4a42-80a0-b37bc65521fc",
        "cursor": {
          "ref": "f56bd1cd-5da8-4b1e-b542-0336c9066a60",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a4e5d33b-a977-4903-97ed-7cf86a3c1140"
        },
        "item": {
          "id": "ef0dc6fa-eb2a-4a42-80a0-b37bc65521fc",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "8c841071-a317-4e65-ba0b-df6baf251033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a32328-b5b1-4f61-9b9b-9bfe72eacd8e",
        "cursor": {
          "ref": "1be6b178-721f-4769-aeed-23bbec75c27a",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "61ccada4-ba61-4f42-9fd6-55461b3170c0"
        },
        "item": {
          "id": "b2a32328-b5b1-4f61-9b9b-9bfe72eacd8e",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "80aeb893-b73e-46dd-82ee-bc6c5a5170fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46aadb9f-53dd-4975-8eab-35adc80ad9c5",
        "cursor": {
          "ref": "d18ef9f5-94fb-4f4d-a29a-7ef53babf542",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "329023ad-66b8-46e4-a5da-5c744daae7c1"
        },
        "item": {
          "id": "46aadb9f-53dd-4975-8eab-35adc80ad9c5",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "7a62f944-8089-4e58-87a2-7719355a2b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6082de4-c996-4d8d-90b3-d3c2c09b03cf",
        "cursor": {
          "ref": "e9d84c66-db93-43dd-9bda-e938bdafaeb9",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "8fa89102-27a2-4511-bc50-c0c58e37f919"
        },
        "item": {
          "id": "d6082de4-c996-4d8d-90b3-d3c2c09b03cf",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "913c2541-7668-4b41-a184-c5631763efc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53a88caf-8bb8-4caa-b411-990d7f14e239",
        "cursor": {
          "ref": "e1ba17d9-18bc-4007-a03d-dd197593e906",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "88a2842c-981b-4b86-b922-d515064d1fe9"
        },
        "item": {
          "id": "53a88caf-8bb8-4caa-b411-990d7f14e239",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "c3a37882-18ea-42fe-b91b-e821b2add8a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba7a5588-7b07-4f7e-93ef-fd1eeaa12034",
        "cursor": {
          "ref": "35c626ac-d597-4fa5-99ff-43b18fa1504e",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "ad6cef65-372b-4d69-8920-94660d6c9839"
        },
        "item": {
          "id": "ba7a5588-7b07-4f7e-93ef-fd1eeaa12034",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "76ca2382-a2b1-41b8-9ea2-ce991f1bc93b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b5282bb-e8fe-4333-8b50-1f64d3c84495",
        "cursor": {
          "ref": "03d8a3d1-2af8-44ad-bada-7d424ef38ebd",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "caa0e7ab-fe77-465e-b07e-50c0fb6cbe33"
        },
        "item": {
          "id": "6b5282bb-e8fe-4333-8b50-1f64d3c84495",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8894abb3-f921-47cc-89e8-12bb3763082e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb8b9bd7-57db-482f-bf90-50ef0357783f",
        "cursor": {
          "ref": "47feff4f-f94f-433a-8b35-2c023071b61c",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "c3d086a3-8677-4a38-b2cd-dafaa8849c00"
        },
        "item": {
          "id": "fb8b9bd7-57db-482f-bf90-50ef0357783f",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2e78ebb4-6c1a-4150-a2c1-d0a099c32059",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfa4a0fe-b592-4024-b2e0-3aa9b2d93d9f",
        "cursor": {
          "ref": "b8f1c0fd-d1b7-44a4-836a-36ec93dd6993",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "9135688f-67b8-47b9-99a1-ae08ed8a140c"
        },
        "item": {
          "id": "cfa4a0fe-b592-4024-b2e0-3aa9b2d93d9f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ac062d85-fda5-41fa-9993-67dba475c6e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07586bfa-edd6-4dfd-9576-3f076638b685",
        "cursor": {
          "ref": "99d544a2-59a2-4b26-a664-486fc902c5a9",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "c6977854-ae9d-4bd1-8e07-f31eb28bf73b"
        },
        "item": {
          "id": "07586bfa-edd6-4dfd-9576-3f076638b685",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b6c4cdd4-d1b9-4d7a-add7-e063c9d87a02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54db5037-5fc4-4563-a17f-6036346a9bc1",
        "cursor": {
          "ref": "bbf20921-0c0d-4909-bf32-30b1da14f0f4",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "275ee20e-5966-4b40-b167-d9b981f04af0"
        },
        "item": {
          "id": "54db5037-5fc4-4563-a17f-6036346a9bc1",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b921585e-b7a1-4d0d-a796-b0e5cd0477cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38b8d71e-6c06-4d7c-a691-3ef950a76030",
        "cursor": {
          "ref": "863b5801-c664-4a40-b54b-ed03ae8110d5",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b2f66314-e53d-45d3-a76b-b5a171a74037"
        },
        "item": {
          "id": "38b8d71e-6c06-4d7c-a691-3ef950a76030",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "d4f53908-743d-488b-9cdb-856abaca36ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "9bebc443-064a-41e3-89ce-eccb497144de",
        "cursor": {
          "ref": "ab004542-dcea-4303-89ae-82fc284fb5d8",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "509d3215-6d02-4ede-a588-54bcbaf07b60"
        },
        "item": {
          "id": "9bebc443-064a-41e3-89ce-eccb497144de",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "fb48fdad-481c-49f1-9751-515c6f254684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "083447fb-ce3c-4798-9ad8-bd344187a24b",
        "cursor": {
          "ref": "e9232c13-5ba8-4bfd-947c-c970d49118ae",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "16e65e7c-1dd3-4a84-9d9f-6d39bf1d97da"
        },
        "item": {
          "id": "083447fb-ce3c-4798-9ad8-bd344187a24b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "8242d22e-51fd-41a6-8202-61d42a4f33ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f511de47-229f-4604-a4c9-88e9dab52a6b",
        "cursor": {
          "ref": "3c102fcb-4ad2-49d4-9d13-e60ea8f47aed",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "1998d9a3-f905-4eb7-924f-2137bf5b3326"
        },
        "item": {
          "id": "f511de47-229f-4604-a4c9-88e9dab52a6b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "487a5ac9-49cf-48ad-a406-f964c4ca8e63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05d9ba19-1833-4a7e-b71c-ab95b43acfd1",
        "cursor": {
          "ref": "881ab4f4-35d2-46bb-8049-c3192e4d7b7b",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "8795f5f0-1092-4533-b9e0-729edf43d58f"
        },
        "item": {
          "id": "05d9ba19-1833-4a7e-b71c-ab95b43acfd1",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "6929bd3b-25c3-486f-95b4-ff5115a552b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73de8d70-7eb3-40b2-b0ac-ff5e6d00f629",
        "cursor": {
          "ref": "925184f6-6dc8-4ee8-89b9-891a5b342f7e",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a416d035-db4a-45f2-a589-dcb34fa88d34"
        },
        "item": {
          "id": "73de8d70-7eb3-40b2-b0ac-ff5e6d00f629",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f7cffbf5-780e-4b54-a44f-f05761f75123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8d385a2-e8fc-425e-9be9-79fe3dccc5bb",
        "cursor": {
          "ref": "9b622f8b-129d-4202-9222-18d7853a8c35",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "505672ff-7ef9-4e6f-bed9-b5fefa9379b4"
        },
        "item": {
          "id": "f8d385a2-e8fc-425e-9be9-79fe3dccc5bb",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "740aa667-b954-414a-8bf8-c0496ddd018b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7b3c693-e215-4af6-85ad-35786203b1a6",
        "cursor": {
          "ref": "3654acee-4104-4314-ba4e-5eee0a984dc9",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "cf7f454b-7964-40ae-a670-d81472c4f02a"
        },
        "item": {
          "id": "a7b3c693-e215-4af6-85ad-35786203b1a6",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "6077601a-86ae-4695-91e0-0ef3cab54eaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b1b5bf2-1cbb-474f-9586-0a5fe73e44f8",
        "cursor": {
          "ref": "dfa24ba7-5485-4c77-8b89-5f7a88e26396",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "84daaa59-54b1-4e89-9e31-a24dcfc190aa"
        },
        "item": {
          "id": "0b1b5bf2-1cbb-474f-9586-0a5fe73e44f8",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "baa9591e-11a6-4ba8-8d91-72f62e79c1ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9d9f3f7-a9df-43c6-aba8-30c9a7791347",
        "cursor": {
          "ref": "8c108a90-7486-4ef1-96f8-deb48b72c990",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "72cdf03e-d7f7-4f7a-b608-6f3f48466c45"
        },
        "item": {
          "id": "b9d9f3f7-a9df-43c6-aba8-30c9a7791347",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "96ca5826-a885-46e5-b065-5a0b1c1ea165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "677e75c8-1a7e-4dfa-8706-3efeff6d0706",
        "cursor": {
          "ref": "7b3f67c5-a555-4133-a719-dd50bd027f4d",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "78248570-36c0-4448-9e6e-e1c424ad60d3"
        },
        "item": {
          "id": "677e75c8-1a7e-4dfa-8706-3efeff6d0706",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "d6b4d718-58c2-4529-8d54-50107ef7e83c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aea4270d-94c3-4c5f-8073-52ce7c2259a5",
        "cursor": {
          "ref": "1a030eba-24c6-4f8c-835f-e4a945683d04",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "8adfcbd2-7467-4a10-8d9c-b9499ae92421"
        },
        "item": {
          "id": "aea4270d-94c3-4c5f-8073-52ce7c2259a5",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "34c2b50a-24b8-4058-8bdb-80b894ee477e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "438db3ab-792f-4cc7-9cdb-38c1aeea54da",
        "cursor": {
          "ref": "057be56d-8c4f-4ca3-8cd3-e40790a9e915",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c58e8793-1aef-4932-b0e7-fdb34c16cae3"
        },
        "item": {
          "id": "438db3ab-792f-4cc7-9cdb-38c1aeea54da",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "95c40743-f7b1-47dd-aded-6472cc4275fd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "210537e0-156a-4c54-bb90-06b11203db6d",
        "cursor": {
          "ref": "39667288-7260-48c3-bc76-bfddfc91f2c5",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "6c42b4fb-df1b-4321-a810-46dd4d46ef95"
        },
        "item": {
          "id": "210537e0-156a-4c54-bb90-06b11203db6d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "287e83f2-bdd6-4a03-95d8-b1acb7f80078",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "bbc4c547-8662-49c9-866c-a6fe4b37a5ba",
        "cursor": {
          "ref": "232a4133-3e40-49a7-83b7-8bec33c895be",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "8e657c5d-43cc-4c07-97fb-3be28bf98425"
        },
        "item": {
          "id": "bbc4c547-8662-49c9-866c-a6fe4b37a5ba",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "1180ede4-0d4f-4499-a7e4-ff836b51280d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "baf41c9b-ea74-47dd-bb7e-c7ce7e55aaeb",
        "cursor": {
          "ref": "c647f166-acd3-45d9-9744-69eb33aca481",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "a2cd5f8d-ae54-48e2-bb32-2858361e440c"
        },
        "item": {
          "id": "baf41c9b-ea74-47dd-bb7e-c7ce7e55aaeb",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "50cda5a9-ab1d-4682-81d9-36456f40118f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c14afcd-7131-48bc-9848-79b7e47c49bb",
        "cursor": {
          "ref": "9f2f25ac-be10-4ad6-b4dc-255681109279",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "470d5bed-8b83-4717-93fa-fefe12e6e685"
        },
        "item": {
          "id": "5c14afcd-7131-48bc-9848-79b7e47c49bb",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "eabd51ea-107f-4969-b266-5233ba0c558b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "1bb6b129-64b3-414c-a6b5-ae7c4f97aa05",
        "cursor": {
          "ref": "3e1c527f-43fa-4798-b68b-532950966d44",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "9d390e0a-3562-41af-ad5b-e7aef64ef19f"
        },
        "item": {
          "id": "1bb6b129-64b3-414c-a6b5-ae7c4f97aa05",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "dab615bf-d909-4f8c-9ad7-b2bff33a3f3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47cd95cf-5b0e-47fc-83a4-f1068474f844",
        "cursor": {
          "ref": "38bc0102-c53d-4a52-9f99-ec08e63634b4",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "78c5a26a-e003-4858-9ba7-2050e4f8fa5b"
        },
        "item": {
          "id": "47cd95cf-5b0e-47fc-83a4-f1068474f844",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f122c00f-592a-4531-a568-1fdcfd4ec41e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2f5b61c-1a31-46e9-8512-e0460345b8cb",
        "cursor": {
          "ref": "96342724-db2c-442c-89ca-381e9b1a7458",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "ea36c410-324e-4691-8222-0379fd9ee9f2"
        },
        "item": {
          "id": "e2f5b61c-1a31-46e9-8512-e0460345b8cb",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "afa484ac-19af-40be-a45e-b36672c1b706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8858db6-ddfb-46fe-be28-4877a230cf57",
        "cursor": {
          "ref": "ef6d1418-4c62-4495-a620-d7ca6b1e7988",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c21673b7-1dc0-45a8-a9b6-5929c9a29c7c"
        },
        "item": {
          "id": "b8858db6-ddfb-46fe-be28-4877a230cf57",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "596ecbd4-56c2-408a-9c26-b5579901c672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3d5da96-f410-45f4-9910-7409b559a5d6",
        "cursor": {
          "ref": "89805e35-464e-4115-ab08-e6f2e4082f7e",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "e91c7bad-413c-4dfe-943f-76b3dec5b931"
        },
        "item": {
          "id": "c3d5da96-f410-45f4-9910-7409b559a5d6",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "42c27f47-e5d4-4729-a039-9bab03d51393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71abacc5-faea-4ffa-a200-88c28bd78a13",
        "cursor": {
          "ref": "18fd32c4-d141-4d1b-b5b5-8d5d642aebc4",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "b00a1d3e-8d4c-4e81-99b1-082ea7219947"
        },
        "item": {
          "id": "71abacc5-faea-4ffa-a200-88c28bd78a13",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "5c00dc74-23c0-4862-a936-fb7c63407245",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "c486c6b7-bed8-425d-9ed7-4dbe10e99248",
        "cursor": {
          "ref": "3d540805-8f9b-4ac0-b375-76b174286e2d",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "977540c5-da8e-4a62-b0be-82415822aabc"
        },
        "item": {
          "id": "c486c6b7-bed8-425d-9ed7-4dbe10e99248",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "aefd549e-f9cd-478a-8231-ad5183eb7064",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "e31f05b3-cb60-4dc4-b264-1a632fd386d5",
        "cursor": {
          "ref": "1c4a025d-ddf6-4a1d-8056-5e867ce0bf33",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "a4963202-01ef-4ce2-b12c-2bed5dfe439d"
        },
        "item": {
          "id": "e31f05b3-cb60-4dc4-b264-1a632fd386d5",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "7aad2f61-dabe-47d3-9c44-7d9550223bd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "229482e7-f212-4bd8-9541-01ee8826775d",
        "cursor": {
          "ref": "f08c30a5-e8f0-4ae4-83af-718a3a23b9bc",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "49ffe297-ca22-458e-9f6b-2581180c25f9"
        },
        "item": {
          "id": "229482e7-f212-4bd8-9541-01ee8826775d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "2351ebdc-93c4-432f-bc27-d1f041d0d84b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a8c96b6-540f-40bb-8272-ea6a06a89372",
        "cursor": {
          "ref": "185ffaa9-35a2-46f1-b243-dd76143acff1",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "5b0ddff3-0de1-4fcd-a2b8-2b71136264a9"
        },
        "item": {
          "id": "5a8c96b6-540f-40bb-8272-ea6a06a89372",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "dcf90d2f-4b26-4754-8721-61a8fdf1174e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "009c1065-b8e8-429f-bd04-9764fd97eb8b",
        "cursor": {
          "ref": "ae60c28e-e5e4-4eeb-9a03-a5ef90470001",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "035cd97a-91f6-4acd-9c62-38c8caf0dc8b"
        },
        "item": {
          "id": "009c1065-b8e8-429f-bd04-9764fd97eb8b",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f51377ea-2c0c-4ef0-a9dd-263dcf824534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae3c3a2d-0d91-414d-acdf-81e5bc7b5eea",
        "cursor": {
          "ref": "f66f570b-ac67-4d4b-9a6e-d731f8d4bdd4",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "3af7232f-e583-4fc7-9d28-648f1b44f833"
        },
        "item": {
          "id": "ae3c3a2d-0d91-414d-acdf-81e5bc7b5eea",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5dfe658c-bda2-464d-b347-0b6ff95ac7ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ad54ef2-daa5-42b9-b54f-af7461a5530f",
        "cursor": {
          "ref": "7c210118-416a-4fa7-bee5-c45f44b43587",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "664ee667-d003-4c4d-a36e-43650323e793"
        },
        "item": {
          "id": "3ad54ef2-daa5-42b9-b54f-af7461a5530f",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "5fffe36c-d59c-46b5-9fc4-c92128ad0052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aac4a3c5-fe24-4320-9524-ff02d7e10db8",
        "cursor": {
          "ref": "b5b83202-1a56-4d59-b7db-abc5a445b63c",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "98bf8afe-efd0-43ba-abb8-398dc95320c7"
        },
        "item": {
          "id": "aac4a3c5-fe24-4320-9524-ff02d7e10db8",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "88e344a1-e30c-4f3c-af27-560a96cd78fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91842041-2434-4680-ac06-e6a7b5f49abe",
        "cursor": {
          "ref": "b6d20a51-8c2c-4443-aec0-485da358e47c",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "077028cf-bac8-43eb-91aa-63481a53e734"
        },
        "item": {
          "id": "91842041-2434-4680-ac06-e6a7b5f49abe",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "3a2b3378-8e2a-4a75-be38-3976ebf03b79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2a7de9d-2a01-4185-817f-bb686d0f7f5f",
        "cursor": {
          "ref": "3f63d351-0b28-4064-b5af-200bef014289",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "7b438ebf-d931-4c59-8318-3a7c0c093c48"
        },
        "item": {
          "id": "e2a7de9d-2a01-4185-817f-bb686d0f7f5f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f9882e23-9d31-46b4-a889-a5c54be24b3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eadb988-5eb6-475d-bfeb-0b2f61c559c6",
        "cursor": {
          "ref": "549750f3-4787-416e-a0dc-ecd8db566f92",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "be331ec8-9929-4624-bc21-2e5466f8c2d4"
        },
        "item": {
          "id": "6eadb988-5eb6-475d-bfeb-0b2f61c559c6",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "cd5892fa-059f-4cc2-abb6-74c534fbad61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5c1d112-b8b5-4fca-9e88-924f6dbbe9d8",
        "cursor": {
          "ref": "fe200fda-1541-4f75-b021-a2e80c7ba8a7",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "cb004c7c-d11c-4549-a635-84fff736d81a"
        },
        "item": {
          "id": "a5c1d112-b8b5-4fca-9e88-924f6dbbe9d8",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ab6e891b-8883-4762-996b-1384f93ffebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b3c2798-0dec-4933-814f-2c51aa3ca8c8",
        "cursor": {
          "ref": "89fb144c-ba6b-4b88-8379-035e97777b67",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "5be7dc31-0a7f-42fe-a436-0f4af9bd012b"
        },
        "item": {
          "id": "8b3c2798-0dec-4933-814f-2c51aa3ca8c8",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "ad531e49-3bfc-44fb-b64c-d1af66608747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81a1d224-b889-497f-b70e-5e6c8c1846f3",
        "cursor": {
          "ref": "d72845d1-9c08-47ed-a43e-78a5f5e72dc1",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "10a09da2-5162-4696-9859-58428dab68c0"
        },
        "item": {
          "id": "81a1d224-b889-497f-b70e-5e6c8c1846f3",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "e444904b-6c56-4db4-b085-b21c812cfdd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cbd8f3e-7673-4511-8d17-cb5567bc1c6c",
        "cursor": {
          "ref": "902244ed-7b47-4741-9940-406e1bb0693f",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "62e6a0aa-d9d9-4d3d-b0ab-6a4d590b0872"
        },
        "item": {
          "id": "8cbd8f3e-7673-4511-8d17-cb5567bc1c6c",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a1fe0e0f-d76d-4d15-b673-a0efb7861405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3550120-2495-41de-a3c9-9e303de6df6d",
        "cursor": {
          "ref": "22c7ca57-05e3-449e-870d-40955e8fd48b",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "3b33671a-76af-4486-b2f2-ccde0380dff9"
        },
        "item": {
          "id": "f3550120-2495-41de-a3c9-9e303de6df6d",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "5b0c3575-af4b-4163-80c7-8e5b5ef31fa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8175e778-eae4-4615-9a66-28421dc15c0e",
        "cursor": {
          "ref": "926661af-cd91-417d-a70a-e23ffbd97a05",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "8d5c5ae8-5e4b-4773-91a5-cbacb117fa7a"
        },
        "item": {
          "id": "8175e778-eae4-4615-9a66-28421dc15c0e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a2768466-f2a8-41ce-8048-82d70894a077",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a6b699b-021a-455e-8408-145c1c3664aa",
        "cursor": {
          "ref": "ca65bfde-a1aa-47fe-a746-47702deb27c3",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "199a3988-9520-402e-967f-3e2701495398"
        },
        "item": {
          "id": "3a6b699b-021a-455e-8408-145c1c3664aa",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "73bdb6ac-1239-466a-b80a-47f120c79cc3",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "bd7797e2-f1c9-4924-aaed-ad5e64a4a4b8",
        "cursor": {
          "ref": "4c553f09-dfa3-43a8-bc89-23927c75cf8a",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "f529e052-9bf0-4fab-bd16-b88e79dbdf8e"
        },
        "item": {
          "id": "bd7797e2-f1c9-4924-aaed-ad5e64a4a4b8",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "ac183af3-0edf-4eb0-afb8-4088139994a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80c6581c-6512-4d5f-a8d0-8df0b04ec64f",
        "cursor": {
          "ref": "b9bc4d90-b773-41a9-bb01-4233aa3b2bea",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "25474516-2560-4cb3-bd47-373cec011931"
        },
        "item": {
          "id": "80c6581c-6512-4d5f-a8d0-8df0b04ec64f",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "a73bf754-e688-4554-acd5-1cfba3eec4c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dcf6cfa-de3f-4e6d-9a42-03072fed5605",
        "cursor": {
          "ref": "71418bb7-7e13-4122-967c-01cd500386dd",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "8ebd868a-b95f-4e65-a215-af450431bd9d"
        },
        "item": {
          "id": "3dcf6cfa-de3f-4e6d-9a42-03072fed5605",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "cbd49e93-b1d2-4cdd-9ba3-854dabc50e11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dbe955c-12bb-42f6-b425-55e8ed474fc3",
        "cursor": {
          "ref": "8d0e2469-c296-4a7f-b1d3-a796e0e425a0",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "13fcebe7-ebf2-4835-a253-64631dd54ad9"
        },
        "item": {
          "id": "9dbe955c-12bb-42f6-b425-55e8ed474fc3",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "415a4585-2615-4828-9919-f6fe11845751",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "4ec7a309-d14c-4234-a378-263d26bed642",
        "cursor": {
          "ref": "5be9ac5f-ed5e-43bf-9c48-f2f95a308377",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "e6a1369a-d7cd-423e-9584-7601b7cc728b"
        },
        "item": {
          "id": "4ec7a309-d14c-4234-a378-263d26bed642",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "ba0d95ad-1b4f-4de0-a276-85a71208dd80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69d705eb-7df9-42fa-a764-388ab475a71b",
        "cursor": {
          "ref": "4f626212-df71-411e-bd92-057c09747c32",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "33581242-242c-4bc4-9617-845972035b6b"
        },
        "item": {
          "id": "69d705eb-7df9-42fa-a764-388ab475a71b",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "7dbc7e81-20d9-457d-afec-408a3a1056a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9cfb093-252e-4401-b1d6-779014ea628f",
        "cursor": {
          "ref": "45d8da93-eaed-4074-8a72-cab15462a352",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "b0db2cf5-dd9b-48d9-b501-d88cdbc24748"
        },
        "item": {
          "id": "e9cfb093-252e-4401-b1d6-779014ea628f",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "db21b6da-9a2e-49c7-887b-fbb3f54ef278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b77efd2a-1441-4b00-8726-4aced72d985d",
        "cursor": {
          "ref": "db508578-19a1-4857-a7cc-9de0b0b507af",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a6ae1cfc-7552-4d13-ba27-6e5cbba71ee3"
        },
        "item": {
          "id": "b77efd2a-1441-4b00-8726-4aced72d985d",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "03335ecb-6b03-4525-b9e5-349f81749265",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "bb2813e0-f79b-44fd-b65b-e8a9fe752a87",
        "cursor": {
          "ref": "6f6c022d-33b2-4edf-a2f5-d9c8e44c517e",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "8798bd48-9886-46e6-b29b-88afa5b08949"
        },
        "item": {
          "id": "bb2813e0-f79b-44fd-b65b-e8a9fe752a87",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "2a9e0a90-e831-42d0-9fcb-e2a040a5ce12",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 94
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "6559e402-e83b-478c-a955-9c4ca61387c8",
        "cursor": {
          "ref": "12f289f9-09d1-43c9-a8a3-fdb92446b245",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "3f939eef-0d4e-45fb-8319-33e323986a21"
        },
        "item": {
          "id": "6559e402-e83b-478c-a955-9c4ca61387c8",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "9ba351ad-54ec-4586-8d57-f62d12314f99",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "c4857b20-7e39-4d75-98ef-088582012154",
        "cursor": {
          "ref": "f77283bb-d29c-4226-a08a-de0803b61aac",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "87efc50f-445d-4f4c-8124-8ad4c4ce7318"
        },
        "item": {
          "id": "c4857b20-7e39-4d75-98ef-088582012154",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a5654d50-27ed-42de-b27a-cf97dcf07403",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea566f8b-35c8-49d8-9167-f45ace9922ff",
        "cursor": {
          "ref": "3243dc91-42a9-48d6-8ab4-276b305fefcf",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "dc6c901b-7cf3-4992-8a80-0722af6c7442"
        },
        "item": {
          "id": "ea566f8b-35c8-49d8-9167-f45ace9922ff",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "742fce1d-f197-4ee6-905a-650b97cc724b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "67742013-bb6e-4c75-9f70-93a2108cf770",
        "cursor": {
          "ref": "2dc3e237-7cac-4946-94be-50d2b1b3193e",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "bef05283-ff6a-4dbf-9861-d26e73478b3c"
        },
        "item": {
          "id": "67742013-bb6e-4c75-9f70-93a2108cf770",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9bbe6403-e849-49b6-b476-1e38248cb913",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "9538c520-0458-47e8-a57b-6c4681e93402",
        "cursor": {
          "ref": "046e53d1-114b-47ce-a7af-57f7746f8ce9",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "3d85d218-ffa5-4b2f-949a-66a78940fb71"
        },
        "item": {
          "id": "9538c520-0458-47e8-a57b-6c4681e93402",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a010c7f2-3ebd-4f28-bd99-863eef15c7d8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "e0f396dd-e9a6-4d8e-90b1-8e1622021464",
        "cursor": {
          "ref": "47c750df-e0c0-40ea-b614-764aa633426e",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d21798be-017a-42ed-9452-853a9b5681dd"
        },
        "item": {
          "id": "e0f396dd-e9a6-4d8e-90b1-8e1622021464",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "446b7dbb-85e9-43b3-a564-972b0ce40da3",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "d76a47b4-2830-443b-b660-97b8e1780f34",
        "cursor": {
          "ref": "a1561f9e-53dc-4e07-b386-1cca0a45afd7",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "7265ef4c-369e-4259-a036-eefeb8c09b25"
        },
        "item": {
          "id": "d76a47b4-2830-443b-b660-97b8e1780f34",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "142fc7f0-771c-45e5-9659-4aac4627fc10",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "329135bc-12e2-419a-9155-8dfcc9e6755b",
        "cursor": {
          "ref": "60be925c-4d50-4a53-943c-73169d692e71",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "8b3b9ba7-9ead-4b3c-b794-936b6913fa03"
        },
        "item": {
          "id": "329135bc-12e2-419a-9155-8dfcc9e6755b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "95ca8790-33f9-421d-8d0f-3551545623ad",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "527f5497-4981-41a3-919a-bed54f536131",
        "cursor": {
          "ref": "ce5ef47e-cba2-485c-ad6a-a9e4649a1d84",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a66ef547-0b52-417e-a0bf-2ad398bc4d3e"
        },
        "item": {
          "id": "527f5497-4981-41a3-919a-bed54f536131",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e23cfc72-5589-4dcc-8150-5ac99543d262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9402cd67-a991-401f-bdd7-a7c16405cbb9",
        "cursor": {
          "ref": "740e4a29-aa6b-4a36-bf6b-438ea1c0990c",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "5fc2f4fa-982a-451d-a505-d8eee3328ecd"
        },
        "item": {
          "id": "9402cd67-a991-401f-bdd7-a7c16405cbb9",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "cd08da95-4f37-4154-b382-a539ee24f05a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "3764068b-245e-45af-9792-b190bdf519a1",
        "cursor": {
          "ref": "849f4093-c79e-4102-b3b9-7dcbf59609b0",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "06ae2145-0461-488b-836e-214ae734e865"
        },
        "item": {
          "id": "3764068b-245e-45af-9792-b190bdf519a1",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e71007a7-5bb2-4bd2-a871-2d60bb73169f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94fc3ab8-5117-445d-a2ef-75e8ab991b66",
        "cursor": {
          "ref": "48681f95-7ed3-4740-aac8-728d27cde7d2",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "852594f1-6e93-41c5-b2a6-50cfc45d417c"
        },
        "item": {
          "id": "94fc3ab8-5117-445d-a2ef-75e8ab991b66",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e29bbbc9-bef3-4271-bf33-359cd757ce50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc080134-453c-487b-a1ca-a0656a0db827",
        "cursor": {
          "ref": "65000bd0-bede-4408-b8ef-8dde84a45ae2",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "afcd161e-e9da-44ad-98db-7c8182cac3c9"
        },
        "item": {
          "id": "bc080134-453c-487b-a1ca-a0656a0db827",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "82b739d6-27e6-40ea-99b1-9331857e56a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0a5f8ba-7862-47e0-bf58-93e45962339a",
        "cursor": {
          "ref": "0d28f45e-9dd5-49b7-a6f5-6be813e4ce57",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c5c5036d-4288-4b53-8000-b5cecc50166c"
        },
        "item": {
          "id": "c0a5f8ba-7862-47e0-bf58-93e45962339a",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "cb3f6176-4fb5-4f9b-b13c-f8a79c7bde6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b33e906-bc0e-412c-97b4-4b8bd62f02c5",
        "cursor": {
          "ref": "224a0965-df02-43c0-9e60-5084128a93e4",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "69542519-5f3a-4b52-8809-08b7e99b14e6"
        },
        "item": {
          "id": "6b33e906-bc0e-412c-97b4-4b8bd62f02c5",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "09cfac82-2bde-467b-aa6c-8d3c1b443c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04a0a98e-c77f-48cc-a4a2-e64f0c1b94cd",
        "cursor": {
          "ref": "9dd742bf-a721-4c58-b7f7-dfb6aa075542",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e9ecc236-724d-47bd-9c5f-9103aa1a6241"
        },
        "item": {
          "id": "04a0a98e-c77f-48cc-a4a2-e64f0c1b94cd",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ffd37e52-3dba-493f-b893-97682ff640f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa57cf5d-2592-490d-b2dc-95311926dd4c",
        "cursor": {
          "ref": "02750516-1548-4d4f-9cae-96bafc9a8e0e",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "0f1ef1a5-4691-4ee8-b1ad-45d193c6f753"
        },
        "item": {
          "id": "aa57cf5d-2592-490d-b2dc-95311926dd4c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "304dc46d-beb3-499a-a7a8-a96021d15dfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d4f5478-8ef1-4374-9981-50262c8e0834",
        "cursor": {
          "ref": "53d48f51-4626-48fe-a608-0ce3650038ff",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "baa7bffc-487f-435c-8bc3-26cb6136e4c7"
        },
        "item": {
          "id": "9d4f5478-8ef1-4374-9981-50262c8e0834",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "2a0dc579-0330-4458-b2db-db3f67e4778b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5e769cf-2b21-4753-a8c3-44381395a960",
        "cursor": {
          "ref": "dd511ad4-8170-49f7-957c-e9f9e2bebd4c",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "aea3189c-7635-4b96-ae02-1f4b6c54c3bf"
        },
        "item": {
          "id": "b5e769cf-2b21-4753-a8c3-44381395a960",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7158e88d-f5cb-4db4-8a43-6013ec1acce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7e7e0a3-e2a9-4235-b3d5-9840ea6b4328",
        "cursor": {
          "ref": "962be855-4a7f-4652-8e2c-c5f1429050dc",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "f0fc8a62-738a-4bbc-b720-35ff7378c171"
        },
        "item": {
          "id": "b7e7e0a3-e2a9-4235-b3d5-9840ea6b4328",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d4a23c42-6567-4ada-87bc-a90f5c11c347",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "869ce61b-4797-4ede-beb0-a142fb647ef6",
        "cursor": {
          "ref": "f855cceb-0a27-42f5-a6be-03b23dd780ce",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "1415a5f5-bd4e-43af-bbbc-c6358781b174"
        },
        "item": {
          "id": "869ce61b-4797-4ede-beb0-a142fb647ef6",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "4017b2d6-1492-452c-8c3c-478a09d3aaf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a813360d-0aa7-47e5-ab35-ff6774bdf26b",
        "cursor": {
          "ref": "14bdf052-16d4-4b4c-b664-b58598fecff1",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "ab81430f-84eb-490b-9a60-ff86cd91f19c"
        },
        "item": {
          "id": "a813360d-0aa7-47e5-ab35-ff6774bdf26b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f664745a-9066-40bc-8b4e-7c57c80d4707",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "870d4f0d-1cdc-4f2b-8426-97f1145f3d4c",
        "cursor": {
          "ref": "003f4eba-10c0-48df-ae6b-691eb07f231e",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "0085d17e-b64e-4a9c-8092-d13a0feeabd6"
        },
        "item": {
          "id": "870d4f0d-1cdc-4f2b-8426-97f1145f3d4c",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "39a1d40d-2e29-4a07-8b42-b477fbd457ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "214d445a-d170-4e6c-b300-e7c68119800e",
        "cursor": {
          "ref": "8cce287d-4e3a-4071-ba44-6c754e1a1c0c",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "35ba65dd-c579-4b84-aa23-8dc3d05a8e04"
        },
        "item": {
          "id": "214d445a-d170-4e6c-b300-e7c68119800e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "8156d71c-fcec-414f-82a1-9cc242792c50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "103d1dd3-1f66-480c-84d9-51541e528049",
        "cursor": {
          "ref": "b0cdcc8d-cfae-41c6-a6a1-de52d1ec14b3",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "c5a8b03c-a9a0-4a5f-a081-61fbb180cdf4"
        },
        "item": {
          "id": "103d1dd3-1f66-480c-84d9-51541e528049",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "0fc7bf99-680a-49d0-9755-9047c6d50340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3403678e-0684-4b4c-b450-3b45521593e0",
        "cursor": {
          "ref": "8285d892-df49-4db9-9f48-a0d682e33172",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "144f35f3-4284-4f86-9753-ead93ed94476"
        },
        "item": {
          "id": "3403678e-0684-4b4c-b450-3b45521593e0",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "db6c8114-fb88-40a4-92da-90496aa30077",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1df2aa12-b242-4ae8-9db1-ba147939b97e",
        "cursor": {
          "ref": "11c0c18c-6038-46d5-b254-be14b094e8ee",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "81803f56-ea7c-411e-a431-891f95008576"
        },
        "item": {
          "id": "1df2aa12-b242-4ae8-9db1-ba147939b97e",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "bdfd9d23-d4c6-4123-8b8d-1f30c60528df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a265a2d-47df-49de-98a3-1fb3f246aecd",
        "cursor": {
          "ref": "f9088c24-19cb-47bd-89be-79ff66bf1103",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "8b5c7ada-4f9e-48a0-ac06-acb8cd5c1905"
        },
        "item": {
          "id": "4a265a2d-47df-49de-98a3-1fb3f246aecd",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "b93c247d-2e0f-4173-8dfe-46c37a4d50fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ef4ef20-5e0e-4f80-b2a2-bb73b6979765",
        "cursor": {
          "ref": "fdb73403-27c6-4ada-a7bb-05edd3984ff5",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "33bc543c-23d5-45ea-b32d-b0d3f9e78d2f"
        },
        "item": {
          "id": "7ef4ef20-5e0e-4f80-b2a2-bb73b6979765",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "5521a76c-d0b1-4526-bb9f-dfc0a2a718b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c82e95fe-8d4c-4312-b4cb-77aac18d2e47",
        "cursor": {
          "ref": "57ef6e69-fbab-4e6e-9e60-2861aec3ed17",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "29f66db9-62ea-4528-8778-3a62507846f5"
        },
        "item": {
          "id": "c82e95fe-8d4c-4312-b4cb-77aac18d2e47",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "76de7808-720e-4df8-9ef9-5a56c0cc2566",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:263)"
            }
          }
        ]
      },
      {
        "id": "2a7987ed-86db-43fb-ba59-ef787e18a9e2",
        "cursor": {
          "ref": "97835122-3dac-47f8-afc8-42cacb3713c8",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "36cc5a36-e5d0-4ec5-a8dc-aaf2b2f24b87"
        },
        "item": {
          "id": "2a7987ed-86db-43fb-ba59-ef787e18a9e2",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "0dd66fec-eea5-439d-971a-777322154062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a4df46-ab84-415a-8c77-8df6b4b004a6",
        "cursor": {
          "ref": "a9205e3e-2cb4-4556-bc67-bf8c2ec743d5",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "f894644f-7b9a-4f5b-904d-5b6664453c42"
        },
        "item": {
          "id": "b2a4df46-ab84-415a-8c77-8df6b4b004a6",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ae8f4f30-d105-4759-be30-b20e9344bd48",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:265)"
            }
          }
        ]
      },
      {
        "id": "513fe94f-3e93-4105-8023-6b58f915280c",
        "cursor": {
          "ref": "2e8e0664-b706-4c75-9f61-bd41818886dd",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "bdfe075e-1a87-4971-81b4-b933cf7a8f9b"
        },
        "item": {
          "id": "513fe94f-3e93-4105-8023-6b58f915280c",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "7b73cc98-fdff-40fd-941a-a006d7397176",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:266)"
            }
          }
        ]
      },
      {
        "id": "8b5e90cc-9cd6-4230-9051-1ac5fa63b605",
        "cursor": {
          "ref": "3c1d4977-a25a-4e55-ba15-1a6e3fe52eca",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "feaa535e-3feb-4b09-ab27-451eaf10325f"
        },
        "item": {
          "id": "8b5e90cc-9cd6-4230-9051-1ac5fa63b605",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e699d513-312d-4194-b75b-559743e7e14f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:267)"
            }
          }
        ]
      },
      {
        "id": "40449151-4cfb-4e5b-99b8-23b3acef2d17",
        "cursor": {
          "ref": "8f2242af-b6bb-4a2e-8a77-b4ee46a1244c",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "21a6d74e-4a3b-4960-8709-c9827fea2c6a"
        },
        "item": {
          "id": "40449151-4cfb-4e5b-99b8-23b3acef2d17",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "a2cbf106-a41d-4c00-830c-5e7bbaf4c3d9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:268)"
            }
          }
        ]
      },
      {
        "id": "cc9a961a-4209-4ff6-9043-61fda8c6afd4",
        "cursor": {
          "ref": "ac2087b6-e99d-44f8-bd37-e400b1a66ca0",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "2ae6ea1c-f7fb-498f-a290-496b515757c0"
        },
        "item": {
          "id": "cc9a961a-4209-4ff6-9043-61fda8c6afd4",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "7dec3d9e-96b6-4244-b4d1-ff2c3b3b5182",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:269)"
            }
          }
        ]
      },
      {
        "id": "6f57b201-76e8-46ab-bf87-3feb03ce7678",
        "cursor": {
          "ref": "c8f8f18d-0882-4f71-836a-53b2ab97dbf3",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "719a199b-eca0-4251-91f3-3ee64870ec1f"
        },
        "item": {
          "id": "6f57b201-76e8-46ab-bf87-3feb03ce7678",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "6ea84f80-05dc-4d28-b497-28c489719244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3586411f-57e2-4c24-ae1f-aad9e07711fe",
        "cursor": {
          "ref": "9a3a8794-f056-4d5e-bff5-c154015f1fff",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "41309986-a96b-485d-bd88-b6aa80c309b3"
        },
        "item": {
          "id": "3586411f-57e2-4c24-ae1f-aad9e07711fe",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "6cf4831a-5d6c-470d-9f79-71807fd1b8e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48c58bd2-26cf-4fb3-ae19-1abe522bac07",
        "cursor": {
          "ref": "a3717783-c729-4fc9-842d-bb73ee7c02e7",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "952e2e3e-4bf0-4512-ad8e-543327100b84"
        },
        "item": {
          "id": "48c58bd2-26cf-4fb3-ae19-1abe522bac07",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3a1a4784-25c0-4fd8-908d-968f30c16f6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c40ce55d-71c0-40b3-81a5-62a51fd52793",
        "cursor": {
          "ref": "1201fb59-9486-48f5-8baf-7da83c73ac92",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "17510e59-9e24-4871-b6e7-6805f4378ed6"
        },
        "item": {
          "id": "c40ce55d-71c0-40b3-81a5-62a51fd52793",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "dcd3eda3-7cde-461b-bdc8-41666378c268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4282d1be-e222-4103-a4be-083d0fd8bf56",
        "cursor": {
          "ref": "09f26db0-2923-41d7-be23-072580fcd4b9",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "feaddce7-e777-4087-bf63-a5bea517aa35"
        },
        "item": {
          "id": "4282d1be-e222-4103-a4be-083d0fd8bf56",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "f9acd5f0-d1ea-4c85-9295-75dc5db89b33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abdf159d-6af2-4ea0-8fc8-e5a4c884b439",
        "cursor": {
          "ref": "2dd0b147-20e0-4b2c-9bac-b716373bdbb0",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "77fdda0f-c0e4-4e8d-9970-d44c43aa72ea"
        },
        "item": {
          "id": "abdf159d-6af2-4ea0-8fc8-e5a4c884b439",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9fe27627-f5e9-43ee-a08e-866ca09e4d51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d92d5a1-6f74-4ab5-8270-847bedcc20b6",
        "cursor": {
          "ref": "eb1aa6d7-6f7b-4423-bed7-208474787352",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "a08b1d26-a282-4f60-95d8-49412655e0cd"
        },
        "item": {
          "id": "0d92d5a1-6f74-4ab5-8270-847bedcc20b6",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "3fb82b35-684c-4aba-8e97-ef70454d07f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0212b15e-4344-4cd6-a5ae-6c46e9cf8642",
        "cursor": {
          "ref": "44e737d6-8ff4-425e-b4b5-074baa3e9e38",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "89911029-0c80-484a-a633-1c2ec7fc6cc3"
        },
        "item": {
          "id": "0212b15e-4344-4cd6-a5ae-6c46e9cf8642",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "54ae0bfa-9779-4f8f-b72c-fecd88f63c4a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:277)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:277)"
            }
          }
        ]
      },
      {
        "id": "73bc113c-c4bb-4c40-adbd-087d99974321",
        "cursor": {
          "ref": "05bc3788-a17f-465d-895c-272c0fd45863",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "acffc4f8-a7a5-40e2-a9c1-44fe2a0cefb7"
        },
        "item": {
          "id": "73bc113c-c4bb-4c40-adbd-087d99974321",
          "name": "credentials_verify"
        },
        "response": {
          "id": "68229629-4de1-418f-ae92-ebfb4ad226eb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "23afbcb4-9b74-4ffd-99b2-40f27451a69a",
        "cursor": {
          "ref": "b3ebd629-5f23-419b-80ba-6ca2f4ee3e1c",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "3e919c22-ae99-4013-8c86-682870e80f13"
        },
        "item": {
          "id": "23afbcb4-9b74-4ffd-99b2-40f27451a69a",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "50fcc7ac-0985-469c-b99e-b6ab3c4ba1ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "350ebc67-3ee3-48b8-9c0c-76e472c01684",
        "cursor": {
          "ref": "f86fba88-2b1d-4d53-8f80-9cc45bba1ee5",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "bc57a1fe-93d0-4b0a-bffe-2d52922239b6"
        },
        "item": {
          "id": "350ebc67-3ee3-48b8-9c0c-76e472c01684",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1d8e6448-e036-4619-bb3a-cea513220008",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "350ebc67-3ee3-48b8-9c0c-76e472c01684",
        "cursor": {
          "ref": "f86fba88-2b1d-4d53-8f80-9cc45bba1ee5",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "bc57a1fe-93d0-4b0a-bffe-2d52922239b6"
        },
        "item": {
          "id": "350ebc67-3ee3-48b8-9c0c-76e472c01684",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1d8e6448-e036-4619-bb3a-cea513220008",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85478fdd-6481-49f7-bcdb-551c09b386e4",
        "cursor": {
          "ref": "b1076055-c474-4488-99d8-e4bb64b7ea29",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "41acdffa-48d7-47ba-8aeb-f71b0825d25b"
        },
        "item": {
          "id": "85478fdd-6481-49f7-bcdb-551c09b386e4",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4c8bae15-aa83-4dfb-ac57-e51759075efd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2efb6083-8b0a-4691-be1b-c0884e807ac2",
        "cursor": {
          "ref": "204f2829-742a-4756-99b2-68e041877b7a",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "ed8f03cd-956a-4d20-bef4-0b8ca385ae8c"
        },
        "item": {
          "id": "2efb6083-8b0a-4691-be1b-c0884e807ac2",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "63810944-9fd3-4b28-89ef-9ea0a9963a2f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}