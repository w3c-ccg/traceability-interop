{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "89f12c8f-d205-42f2-9c98-4eb4e4bafe94",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b5fd155f-f91d-4d30-b5a6-f9f3c4409300",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5b922bd1-93bd-4e0f-a27f-0a0b58b1f6c2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "30be31b7-092d-438f-a80d-0680be9ce7dd"
                }
              }
            ]
          },
          {
            "id": "ea5d48e5-9db4-4ed2-943c-c14d73e8ce46",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "678dffbe-eb7e-43ab-8a20-0fb7359d8ba9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "66f46f09-4829-4f8f-adcc-0ad89301bbe3"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "dfa93dd9-232a-48ab-bda0-1df7cf3776af",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "29ac3caf-d6eb-4265-b1d0-b0c96478667d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3cf3fa35-aade-4082-8470-15f2349a21e0",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "559fdd98-def5-4942-a822-135a5f16a8b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d334c05b-2b5b-483c-8998-144211f278a8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "47df5390-2969-47da-aae9-034a413d1528",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "66b1876c-d2bd-4ff4-b0d0-fdbc1b84bf05"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "65216b6e-8ca5-4cff-a79a-64dcfa2d0a76",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "240280c8-c8ab-48e8-a5a4-f47b34d6b2e7"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5e2032f4-c17c-4b76-bfa1-8a1b352d1723",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0c5169ef-6bde-4521-874b-2a046d39afc2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9b299f9a-b9da-445e-ad23-7d60395afd3e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "55976aeb-7717-43d7-b446-20173b9a21d2"
            }
          }
        ]
      },
      {
        "id": "8e7456fb-aa59-4629-9e2d-87f91fb13fa0",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "eda21f98-fcd6-4fde-a955-f9fc0a05ee1c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0a69113e-9ce8-42b3-a4f3-2987f4a68436",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4ef9d959-a055-4be2-b305-9b1c15171a0c",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b31f49-6e39-4ea9-ad2b-23662e7c4b79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8467ac0b-98a5-453e-972d-7f3272fbfc90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4125737-d70c-482b-b9b9-4ea30fd339ad",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "085c84ac-e414-45cc-90ed-bd2b0fa4e0a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1e729c26-d186-4299-8394-7ab1988b2d5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fef3aa7-10b0-4d26-816d-3f8f76387d8d",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8139fbb6-aca3-4785-bae8-d3a626536de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "982c2b50-f30f-44ec-9160-e418a7376d31"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "56552018-7787-4254-8a87-c82d6cf1642a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c653e868-218f-4269-a106-b07a4ebb3eed",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e87c636-605b-4191-94e9-01e6e9781e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b1608243-03d5-42d9-a5bd-3fc7b1993e86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e50e76-64cd-4bf7-b92a-a63cb3159c86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5135b87e-72c9-489b-b4a5-8ed18645523b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "12ef63e7-a65d-4317-8efd-0e52cf3057f6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "122504ca-6452-4064-b728-4179fb7d7e19",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7854a3cb-b81b-4345-ad4f-5207e2b3d385",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "2f9259d1-ac9d-4e91-b9f3-eebd0a836d06"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ab3be2b8-643e-4da7-8f5a-e2eaf43b5239",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "6b5c7b4c-11ff-40ff-a62a-2c048a211220"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0282fc14-1d6e-46fe-ac26-fb162aaa29ee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2e6f5053-37c6-45d0-b57e-7dbbb9509f4b"
            }
          }
        ]
      },
      {
        "id": "375f22bd-21f7-4b2b-8131-d4ddd8d3b2ac",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "cc92f19d-023c-4504-82bc-9a73e5b2ab66",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d5e5f46f-b7dd-4ef5-b943-259688fd8c6b",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "dc3cefb3-5e4b-4d3c-acc7-1ee12cb69e28",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3fc60a4-d7d5-428f-b155-60b78f3917e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce4c418b-84d1-4b76-9b52-16093a312933"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc6014f4-efbb-4319-a38e-3101ed50a7ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b8e1d2d-6a66-40c6-b483-c45a03c75035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3774dbe-486f-475c-9065-e04929267b8d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af4d9458-9f4a-4f4d-b1ba-71ee61aef531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8b0805f-d99c-4af3-80a6-22b150532d2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90942979-1dd6-4b84-8ef7-6206735776e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2cfae818-24ca-4f45-8847-1a7bd78e8cf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ddf2a35-89d1-4759-8d6e-78d4adc28bce",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c87202e-e378-4211-aa14-fa0f8470a0e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "defc85a9-cce4-4a43-bc9a-324e0eb303d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d2f911d-8d47-463b-91bf-ac0c8f24c9b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "309ba540-54a0-4391-b27c-34a49b566969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c37a2b4-d8dc-4a94-a8a0-c7c414501c6b",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a01b687d-c4bb-4338-9bd1-009a99bdece9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8c95152-0918-4e14-8df8-871d53512a78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d54509ef-a7b5-490c-9a0d-0f11c08ec761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b161993c-3fb4-4a3f-af1d-bd76991d47a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f4be521-84d2-48fd-bc97-e86b1fa51c5c",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bf84935-674e-4f86-9c7f-976f25691633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f66e817b-30a4-4a74-9239-09dfb6d39319"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02155b6b-f074-4a1d-b6ba-dce61f017d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73b8b0ec-a02a-4f99-b77d-9d77e7d8f28e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f51666a-c8f8-41ac-b517-27bcabf92da5",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "926744b7-b96d-4292-bad8-2ef6a04c8039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a014eec-1eae-4f46-b0cd-f84d861153bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdcf9444-14da-4676-b1b0-50ff2b9ff3db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5a60a7d8-1357-4c51-87a4-cf3924793af8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e962c6c-cee3-4e6d-ba30-4574f5c55a99",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac17aa04-b47f-4336-9adc-a01459584adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e3b3ee4-2f3f-44ab-9688-4f1dfb2efa3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e104e830-9f64-4d88-b863-d6f57dc38477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "64b3d36c-47e3-4bce-863b-b75366109031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "307b0996-0446-405c-9433-f25310799187",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a078b55-74f9-4af6-93f1-b6c1886f99f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31017748-0e18-4f3d-a464-10a81a07b8c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93a98bf2-3a53-45cf-a179-2be83ca56fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "047d71f4-dc3f-486e-b7ad-069e0e1f36c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98405388-284f-405e-8939-4574c9750992",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0b66515-8a37-4e89-98dd-2925b61d5490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ba2d932-5205-44f4-bd71-1a387b68db96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c8c6e1b-7152-41bf-aa9f-75bdfaf6304f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef3e241d-80a2-4d5f-94f2-8cc695863c29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21c32f6d-4d4f-4248-8d95-c780cf51525a",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3720bfa7-c247-49b8-957e-5c58a8f8d9ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5debf78d-22b6-4169-ab24-9c45b4866d09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69f47b0a-0604-498a-9eab-734744d9b432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37187f8b-e60d-4916-a071-53e965c2254c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f8c5b5-42d5-4685-baea-5386dc237307",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ea9bd67-7897-4ccc-8ac8-b2cd12b0e769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d3b7dac-bce0-4b77-96c5-6abd5f8144c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d85a30d7-9bdc-4f37-b72c-3ee61a6fee01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cd53dd4a-9495-41a3-8674-f688c4ac29f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1949529a-fd96-40c4-bcba-4a60ad497ad3",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7c73d32-7600-46e4-b9fd-81bb324d32db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66efb7b1-1a31-4d64-8a4f-3091bb52808a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78462217-202b-4217-b016-de334f367f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a88528e7-f359-4a64-8637-972adc39921d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a3fb55a-1c73-4589-8a6d-d44954658ab8",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e0d9de3-fc23-4a2e-874c-4356719205a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec0e82e6-7c43-485f-981b-b5c2f336dca2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f0d3b86-2fee-4cc5-9de6-12981b0f8ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b0444596-156b-4d04-9051-28e4f8f14c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f47b8d5c-54f0-4284-9619-b60f6c9334d3",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9003d94-29a8-4e77-986d-32c2ddc0a8d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47b6f8c9-7b3a-472b-9242-8d155c1daba6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3701fa7-f940-4ab1-a71b-8880efe88da1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b67d8e3d-ab49-4a3e-879e-8547b96b3a8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c92f6eca-24dd-483d-8abf-62946d49592e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82fd6b92-c275-4906-8d27-6dbe6187f6bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24a4a719-9796-4a0b-9ee2-547c7ef1de29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d7fb370-84b0-4295-8458-9dffec67689d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18539b55-c01e-4a16-a74a-ed7fc3f3f4b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e9ae254-30ba-4b54-9d18-c9661db6c801",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af892ccf-2ccf-4331-8986-3a2f09c3a50f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c868d75-ffe7-4304-81d6-d5e5ff066153"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea1c77e-86bb-43c2-8fa6-fdce9fd8edf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "46a507ad-1e26-4b1a-a40a-040140885d77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "599be4d2-f91d-4af0-84ba-8fb8602dd66f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98d8fd1b-b039-4a91-8ede-5219f5e730a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa79df88-7a7b-4bc8-a59b-5467cd507a85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6735516-3f74-4859-9206-9b6c9b4acf30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ff2eddc-2925-4d62-b15d-d43a95f7181f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b55ad8a7-2f4f-4b60-8d69-8876a0662637",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1372df7-152f-47b1-8c90-e46d3765c814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6378d4d8-b49a-4161-9612-73cbea84cb6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13da0bc6-a166-420f-be7a-09aabefe4d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a200a00-682a-4876-86da-53c8d303aabc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "967587f9-f87b-42fd-a041-fbe96e0f2727",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d31e3d6-06c8-441f-aa25-a5fc010cf831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae7bff74-119e-4cba-ae50-b3c23552a934"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d642431-525b-4602-8ed2-0cf5e1fa8288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1bfa18a7-7720-469b-a39f-79d06ae12dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "715a6b18-8b81-4241-bcc4-ab0495429c24",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "889080e8-5f13-4184-8424-c6a93cbff2ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aecdce1-41b1-4f4e-bee7-9097d5694983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ba9b8ce-e4e5-4e2d-b52f-e75675ece489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "24f031cf-71d1-4a95-8f06-90553c12bb5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7a8b559-26e5-414d-9468-a905004913ac",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff61c3e8-85c9-4509-b80b-f60bbec28feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "320d85f0-5746-4605-a721-038c022e80a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42bb6662-b467-4374-940b-0478558930b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "40bcb047-80d8-48cf-b615-d49c56211656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abc1e026-ced8-4426-88ff-c54ad4d956ec",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a39586c-f2ae-4fc1-9a52-832ae20278ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afa910cf-840a-4543-bb1a-91b86839c8cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46d3979c-e4ff-4a82-ac08-0802714b2c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "abbf61d6-e514-4f8c-bedd-1bda2d94e393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae4c2603-29d4-4b90-aa53-92caf16451da",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f453f3a6-c0de-4b15-a577-d0b50dd74b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91fb4346-d613-46b3-acbd-82967da74cf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0975960-e366-4493-9255-cec9e72ae511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "14da7b86-892a-43ee-a736-4288527d933b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bf9a949-1a42-4cb1-9ce1-f43013253566",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efb15842-b621-4f4d-8976-7d4a5aaf3093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af0393e0-d24d-4a25-bb91-098f18b598b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2def588d-e914-4767-b9a6-be77924292f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "acefe132-0c9f-4f62-8858-550e80cf8e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8368324-ff21-4785-b1af-0b5f44c1ba2f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d27d4e06-6e4c-4ccf-a6de-6c049a1d56b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4726f8d-6c7a-4713-88c3-cbe5cd440bbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56882a46-4cb2-48ce-8898-6d911df92fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c8d7fa3-8dc5-4c18-9927-e31343a49283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b520731-b70f-4720-8069-1e184c9feb5e",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e0024ac-6b0c-4656-8616-dcafe7921e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2cce5b2-250b-41ac-b2b6-69088742e556"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1fc115f-136f-4ea6-a2e3-1d4ea8818cfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5cb425b-8a74-47e1-9d2f-975d7c9d5ff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e9b5a6-dac7-455b-85e5-cd2aca1523ce",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5bce4ff-5aea-43ed-99ee-86a85e8089e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50cd2b59-53d2-411f-a936-3d9afe498a68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6e2b5c1-5072-4e85-8231-8b817d70ed4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2311fb1-ab0a-41b5-bdf9-c9bafc4b6b74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0510639d-3ae8-4052-a376-657f6cbb9d25",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "793ab6f8-0063-48cc-8700-07c373fdd651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ad83fcd-6dbb-4a99-adb4-9ee541b8bbc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1579c3a0-ffd8-41ee-9226-7c8f0824a4fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "62852bb4-80ee-4c5e-89c1-71a80b13581b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69133a20-9b5b-480e-b9d1-e6e4d112ac3e",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "459a8b2d-0b67-403b-9fe1-96004845f4ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d611e9d2-4791-4e40-9052-22b92daceb0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "709b73f0-9176-4f24-b644-0ae03a7f41b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbb278c4-5670-4854-814b-9d7563016cff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab0c0c10-d875-4d72-b1c4-cb3734d22d32",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04d332b7-3502-49f4-8cf8-7c13fb8495d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fd455ca-d3bb-476d-8e76-f5467be16a31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83868e30-78e2-4276-9fe9-1937802a9076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "4387c5b9-5e2e-40eb-8499-e18adfbe426d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47e0df2b-5883-462b-a6a7-a86617d059e4",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cf62e69-7a0c-45c6-b053-42b61d2b82eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "597bffe0-ae86-4b14-9b36-f2785340474a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b6400e7-2ab8-4766-ad1c-7befc25757aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd04b2aa-4f5b-4996-a6a7-ea98740eeeed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80c35815-2a84-48a8-a97d-d5dbcead90d8",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba477da0-e93e-471c-8e99-f6f12e1ab243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51e2aee6-cac5-4ef6-b73e-5cbb2c15aff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9f064fb-a1eb-4cda-b4f9-3d2d1ec0e20a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "907731e3-b675-4a55-9054-d10855dc7746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac2add7d-964c-4aa7-bf77-b9011a0c3302",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a601fb-371c-4b6f-ac9e-8e3deb4f6d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3508b85-05d3-4f9d-a9a0-263b599879ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b4a114-6de0-41b4-94b8-464125a9472c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "df877cf0-56f5-4b5d-bc93-62a97beaec37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59720f67-8040-4ce4-b666-dd27afadb8f8",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a51c5d9a-942e-4d28-9fe7-a1f3f7cec743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2900d8e4-f752-43ad-9ad0-66701dee45a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "670ddaac-96ae-4c35-98e0-803f2374c0a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1a24155-b329-4694-8153-4df9af7c4f4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09ce5372-e917-43b1-be08-937411f98664",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "969e55b2-f145-45eb-8f45-857e6a4ad7db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "670766e6-ef55-47eb-9f57-3c4e027e3094"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2ae831d-9699-4369-95a0-fa2074ebcc3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "cbbc4d99-0265-4b95-8608-3a10388d6f8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e206fd-f703-4a7e-ba54-7f59274717a8",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ade2a08-7445-4ced-b557-fa94709d4cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "923c48ef-04c7-483a-81d9-87688c7e927c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c6577f-6d5c-46d2-866b-4df0ae4330b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "59b676f2-74b4-46d5-ba76-0c66b2f8a0dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8780c9a6-f48f-4ce0-9673-10f8a750a50d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59cdd438-0d11-4658-8b2a-bbfd68d7475a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1f7c7c8-db0f-4c78-b8cc-e3258aeaae8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd24bd6f-67fb-4a25-942f-6c58f03fbc17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4db47b08-7f43-4322-a3c8-970991968ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7e40a7d-7ec0-441f-a7bd-21a3d3281576",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac0f5f33-b1df-4a69-9e89-9fffa38ea13f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a15fe2c-639f-4b6f-9b10-d6476aca3dac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c46abd-36d2-4cc8-a751-d494f11049de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1f9ffd3-e472-48cd-9cfa-e2c95b57640c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b7ddc1f-7db7-4a4b-a14a-69e80da6603f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1d4a73f-e851-4898-853f-b59d42fbc2b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abda0156-dbb8-4203-b21c-836c9086b597"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a167e41-4760-4544-803b-998b9bed0d05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9312b2fc-6d1e-481a-9bdb-251b74733157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f92f6e8-b2e6-4777-add7-7d55af392e01",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6f20493-7e02-4015-bdee-ee32938bfa34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dbfdbba-bcd6-4ece-aeb7-5eebae98ed18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1a2db2e-9fa4-4ce1-b96a-d6e089a98a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "54b1ec97-669f-479d-a90e-324224937650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7d20870-7900-48c1-99a1-31adbbf1dc3e",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc434494-31d2-4a5b-8d08-40cc292416d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d836e7ec-2b33-4c71-9115-ba3b38363752"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b5545ed-8737-4373-a042-032eab2a9ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d67ae0c9-ce19-4881-abf8-9b995a7605e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8168927-0e4d-4e20-97a9-3c97af9adcdb",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf94b7cd-123f-4225-8216-ca660a30b4f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fc00c2e-7dcd-4a74-83bc-0cdf06ff54e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68053c0f-7d7e-4679-a2ae-76080689d8ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "9ad0f28b-3aaf-410f-a5bc-3079ba18fda7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cda3febc-fce9-461a-84c9-23a40c0f6991",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eae7fb05-4acd-4f7d-bf72-36e1f0c28412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8b2fa63-5637-4215-a449-ec93a6ffe94f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b71b99f-fb9f-41a3-9adf-af4010393ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "40c6d533-8fd6-4978-a7d6-3d32dc535ff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e367489-8a93-4337-bf69-2206e0c89f32",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "283024fc-e633-4259-aab3-653a89ac56ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "568c9e09-9b60-4f48-a2a0-1426f516a31c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec57925b-b86b-45e5-b0fb-a39472fcd134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "bafd64d7-7484-4a94-b23a-43aa347a7c84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "689e7959-5edd-463c-85ba-498f36005af4",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0cca2aa-4e64-41ac-a65f-34d243a29e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c99a082c-d9ee-4549-986c-b36add8667e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9736a603-b654-4a84-8b1b-2616d09a3873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "beb22013-4de0-413d-ba03-c62d3bf84b36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "658703f4-3589-4c5f-8d2a-55e0e6ee8b80",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e45168-38c5-41ba-b423-697c8220cd24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd3f1c3b-fabe-4d3d-9667-f75910dd599e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1233fb5e-c25b-4487-877d-01140d1c82a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7564586-3681-49d0-9378-f22a8bfc9012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2e5b466-c741-40b9-84bc-9db5c8f68d0d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98f76b44-a0dc-44dc-b997-65bf8e2372aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb55845c-b1d0-4a09-95f1-f47be606d66c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55f39fba-50fd-4b28-9487-b223e8d12662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ec51ff1-5520-4592-a93e-abf8133c6377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7edad3cb-a5f8-4626-9250-42c4a94f63b9",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f08e410-ddbf-402d-8481-7d515476b553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de0388a8-83f1-4ee2-9738-78fe4efec7f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2e776b1-e9a1-43d8-866e-22ffeaf00531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2872953-b3aa-41f5-8704-59e54ae657b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1215f947-221f-43b9-9d39-59fa39a0b5c7",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44f6ee28-bd66-4092-8fd8-0c5046d2b655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57bbc7f0-8291-4ee2-ba8a-77344f072fa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e18fa770-2008-475e-a72b-6793d652eb03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f35ff089-1a67-4152-82f9-2aaeddbfc815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a72dad8-dd8e-4284-8c4e-f950f478e50c",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4ade54b-c103-43af-a1bc-69d2aaa07900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fba28b47-7ec3-4505-ad68-fcde2def7a0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12a3e65b-1e2e-4420-afad-87eef2372cdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7d703f2c-c40b-4f83-b5ab-2f378fa91641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4b40a4e-efe9-4bf1-8a47-2dcb0fb2fe66",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5711ee4b-a775-4a9e-a7da-f6ac44ee4c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6990ac3-9031-4f77-b05a-f1b1b7e6c64b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca65018a-032d-4b0c-8b81-4de82581d4df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "1797f510-a9db-4896-b751-b1fe099ba047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d274369-d441-4d8c-b511-d96be01184a6",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d750c67-14ec-457f-8c92-6be1e79a2a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37777018-7dda-463c-b3e9-ebf1e331d445"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9602687-3598-4573-a364-cf9b86b788f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "545c4630-c729-467e-9ca7-69057074a949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d405190b-31e6-4008-9044-5fb430092b8a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "277063f6-4e22-497c-a870-728aa27a16a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b10634bf-63e0-4e65-a733-05da29a1e885"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d02ffa7-2567-4acb-9089-16f7b43ebae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4ba16bb-98dd-4886-a716-0653be6abd62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e407e4ba-1482-4ebe-8472-b9f0cf747c2e",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a58fea22-b1bd-416a-a1ef-651f49f6bea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "531008c8-78db-4159-8bac-0d1dc6c06c61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "892dfd22-15b0-47d8-a014-2af4857193e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9231792c-f508-4ae4-9cbf-5643772a9100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b420f440-af02-4a9a-8c16-353d4455bfc0",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc10f876-429b-4fc1-8ec7-49ff7bae3916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72608ab3-4c76-4e64-986d-11b62f25c0b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42077ef8-d47e-4c5c-93c8-62b816a5eafd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a5aa7e4-172d-4352-97f3-7f33e388ef78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aae44e2d-852d-4ca4-97a9-53ef16bc4ba3",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7666f619-3b18-41cf-a066-ef8b4edcf819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfe96e52-b5c1-4024-90f5-15c0f4a95217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f13e1194-6aca-42cf-b1e4-5ab8ac7c1c7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "05300f10-c422-4b46-979b-e36ae5bce7b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41e665b6-d4b0-4b1d-92b1-71766d469a0b",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "794cf2df-bee6-4cee-8c7e-0f4dd51eaed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33daabce-c232-4ff7-ab8c-33c87fe403b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77cbbd6b-88b3-49d1-9515-d149a70c180c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd2bcd38-b9e4-4b0d-86b5-c9ae9cc8ebda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a07964c-3e84-49db-a8ef-c1de6e73617d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daa29018-e14a-46dd-adcc-d7c1aec224fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a3ef2b4-9d77-45ea-90c1-300dafad9e5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65f4ee2f-54d1-486c-b28a-8aa37acf7be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a66ade3-133f-488a-ad17-45a7a3b41320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c4b6a3a-27d2-4986-a9fb-cb5b23f9f7b6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89eab8e5-4cef-4086-b138-446bd0ceee29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cd33b39-bcae-4ac9-8c38-54cc9672dbb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dedd086-62a5-4adc-9e82-f712f273773a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e7dfcb61-4456-40a0-9ba3-6636cb4d64e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef639955-30b3-44d2-a1f9-1f0313ac7aa1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae4de2c3-5d27-49cd-865e-4f0376bf8de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38db9a63-e166-4dfc-a4fa-9bde001ea118"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b50aaa9-05c4-469d-9820-4e6f4b63da33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f7e4d38-8b96-408c-b88d-8cafccc95abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d36fc608-eae1-4d0a-a41f-c1ed28a639ad",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fd4b968-0c3e-40df-88e8-ad7c6d030c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c305449c-45b3-4932-8cc8-65a96b41986b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07a8f514-9ba3-4dc5-a8a6-6e074531b704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "839f2b6d-e03c-4c2f-807b-0cb6b9c7fac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "278f612b-2472-4d8b-98d8-09c200afb9f5",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5111bd2-141e-469e-92b2-1b71bbcb05a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e46e2d81-96b0-4db0-9753-9b99fba0bb57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe68d00f-cbae-437a-a5c9-af2a91dc870f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "81829ba6-76ab-4656-8778-2de7bdd30633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c4dedda-cc5a-4063-bb12-f6141d268cba",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab5e60ec-a137-4c4f-ba84-43b1b354564d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "652e8591-11f1-4eb3-a1e0-7fadcc8eb1dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5850c55-a1ec-4a6d-b7d5-ffd20f5319a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f5d5081-4715-4f24-addd-2ac328131e5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9423d823-b189-4125-baa6-d9b0e1e7075d",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa9c6b8d-1c63-4d62-a2a1-85538f4d68f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7bfe532-48ed-44d1-9bc6-7aac284765a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a12c833f-0064-4272-878f-b2fc36dc4ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "78c8a2eb-ba89-4290-a884-41114a6711fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "237e7dd0-0325-467f-ada7-5d013d46aa5d",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0c25d76-6a15-4c19-887a-95e0dd1a8edb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2cfb07a-f21b-44da-b54b-7b330338e7b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04a59245-41b3-41cd-be3f-72da2037624a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "91bf695f-25ea-4cc0-9efd-2f30b1055160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f38e0547-5704-4213-9a0a-956b47b6fe15",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f464de7-a74f-47f2-9077-bbc3ebe74293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b64d710d-3eba-4f9c-9443-e2664ce15cae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2219ce5-6bc8-4d04-a274-40c86039d180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "63591392-6347-4948-bc8e-f44d1ab3ed36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9471fbc-8699-479e-9ab3-2746935acdf0",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf18313-6c2e-41d5-a9fd-98ea05c2bc21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a5640c0-57f4-40bc-922b-c3aa7ac9df07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd2d90b7-af4c-4f25-8e21-627109aad951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8c223477-1bc6-4975-8474-d1e9e5ccb267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1d2039e-f8c7-4858-9c66-b591fed1718c",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcdf7283-e027-499d-9c2e-4e4f4dfe64a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79b5a46c-20e1-4697-bfbc-6892ddea89ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2150df7a-918c-4b4f-b2a2-bf3592032b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "27995687-a730-49cc-87cf-e239c797feba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "887de7b5-7a4f-4ecc-bc4a-ea4cb815c0a7",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39c6db67-01ac-4934-9365-a2f4221d8aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e3ff385-d260-4cb5-83fe-8377a074f438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4429a81-0714-43c1-98a8-c88a40989be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d152608-ce18-48f8-bb90-54c99be3b069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "300b7899-3ed8-4344-a548-200305d9a085",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bc5650d-f491-4228-8949-54b30a3780cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5802d1b-d36e-4ab1-9497-d94866bf9e95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb3f7f93-cdd6-49a0-a26c-f1a20d88a499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8573033-ee0f-49af-8d47-7ef7f05fbc81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da01b6f8-fcc0-4c41-8ae9-83a08e143211",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c391a07-f243-4563-af51-74d0ab675afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "905d5940-241c-461e-ae71-c4bf6cb7f4e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c31595-4a9e-4607-8c5e-28e63694fce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d978a893-b7f4-4d0f-a1cf-a0feeb8ee39a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5427d6d4-01c5-4007-abbc-a6f04fc10dab",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b7c8b45-be39-4794-9281-5cdebc3ec04c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67b1e0ff-d7ba-4cac-b339-e4cbb57efa5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2511740b-3cd8-47c1-81c8-e2272c43f603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c1eea86-9984-45ed-bdd6-497b6b89e45e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dec43e5d-a487-4c66-8012-7a80d0f5e085",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da5c152-c4d9-41a4-a0d5-f2f87ad8447a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4d39533-6111-4db1-9afc-0ac197537154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97f1ac31-ac5c-41e4-ba12-2d24de7b4df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e02b3d3c-7c76-4e80-aea8-dba11c74785f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1482f864-180e-48c8-8093-1a39a7e4e6e9",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64b10286-0051-4bb1-98e5-3e69912d6f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a0dff16-a1eb-493d-ab7d-26f490fdd903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c33c7e0-5c06-4a83-90eb-ba604ded2afd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5157b7d6-46ee-4711-9372-caab33bfb031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa4ae31e-e50d-4929-ad1e-6785159860a2",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebeb1ee9-ba42-4e68-b301-c09b677b9bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6229dc53-2d87-47ad-bb41-50efbcf4ff7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d2d5c3a-9b38-4113-a685-e48c25b3a4c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "97d71053-f9cd-478a-a783-2e2a8319ef7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78c21f23-d0ff-4245-a266-b5107c62ff26",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e8edea9-d46c-4e31-8df7-d56d294b0c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d104519e-4192-4113-98f7-df8425977a81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b52af7e-0327-425c-bd76-a34c3af7ae03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "32a049c6-cf7f-47c6-b530-8298a3f3f0f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7651e4a-83f1-4101-bdfc-37e6f91dc7f6",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53d9a29b-8e53-410d-9931-ab9069686bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09f9fcb8-95e5-41e8-98cb-5d2ac17d4c71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "432cb514-0f56-413e-87cc-f5ef031ef27c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfdaa217-7af0-4af2-b159-64719c8a92e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d8115cc-3b41-4550-ac1e-fe55bef3c53e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b610be6d-ec3b-42fe-8067-47f1d64f163e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9f366fd-1035-4191-bebc-60f11d20fead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c0fd4c0-3f23-41b5-a0d9-e14059d148d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e501ed9e-6ed6-4be0-b735-b61c0b870b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35ad4f43-b4c5-4f69-ba1c-9514cbe2e9ff",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21fe1290-704b-448f-9bc5-1ccad6800e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f40f46e7-c4bf-4646-b98a-4ab6aa74eca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75f67f03-57e3-47c1-ae0f-0806477b43b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c19e6908-fd10-4002-a3ab-ca8fba79ea5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c73ee037-c679-41c4-9485-92882adc9112",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d804e6-7f9f-491f-92d2-a2bfb63facb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d40b5e42-b52a-4c52-9b5c-d0daeb160ef4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c1ba8d5-1498-48c6-ac16-6c2f69826860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5c810788-403f-4f3e-a659-44921b65f331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2defaf04-2d45-42d4-85e7-f6054420fe69",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ba7e190-58bc-49c1-945b-77d0f90e0400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c721a0c5-4768-4395-bc4f-af3fa04790bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de6571d-cd66-421c-88a2-2107927fde26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7386479f-8af5-41fd-8ca2-632f453cc711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db12c2d7-b5ed-4966-b41a-fe7d1b509d31",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ddb4d8d-94bc-4313-acda-0ac7f0a52d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "527e2822-1cf5-4d8d-8d64-42ad6ff946eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6919dc50-1543-45db-90a5-959b9bc9024a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5228e8bd-cd52-46ea-a64d-49776ddb6b70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e8340e-976b-4b90-8215-39165c0813e9",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed691595-562c-4206-9d26-24ff60d62f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adac197d-dfca-4e36-9f23-77fbde1da28d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a4a920-dfaf-4ea9-a8fc-2d15b80a474c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cb5d28d-8670-44bc-8935-ad9a9aa12737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37f311b6-b4f7-4643-bbea-92b0be05ae02",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bae293c-d4ce-4446-b247-1a27bf700ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4144f2ee-3c65-4b87-9539-7b8b9075fd65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5f51bb0-aeb6-4ce1-9a3f-ab8175061192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9f06d9f-0041-4182-ae2c-845de1831c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7ff9a56-628f-4753-9193-fb2b5f5f3e87",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e90946c5-1a69-485a-883f-5bcbb6b82f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e29dfb1-1223-41fa-a7cd-1d1a789d78e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0f0e718-ba40-4e36-958a-35dc1a0fd221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a35617ef-8768-4ff3-887a-f87d277bfc39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1779ee90-4068-402a-8771-29ea2f010c31",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d38db87-b57b-4649-9737-5568beda7850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4c175f0-a3ee-4f07-a434-b28fd7699cbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2096535b-f4d9-4bba-a3bd-6ce7897a3a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f0add67-8bbf-44e5-aadf-e6e08841f812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6d5dd9f-aca7-4bdb-9140-0c4b751bb827",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f09ebdc-47ca-4210-a2bf-57277868b16e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04da801f-ab0d-4b30-9515-92dada8b735a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f9195eb-0aee-4f96-b0b8-b7ad37d66af3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9020205-7ff1-4f4e-8a1e-e4fa278fa767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49015d94-3e16-44d2-a139-bd6eabebbc6f",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "651257b9-0c86-4ec7-9eeb-7d4e9388eafc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d9b981f-7ef0-4d36-baf1-8d8f4594c812"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f55f638-4772-4395-860a-22e4b90b5f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc08a451-35ff-45a4-817d-06406305bf09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b152d37-91f9-46bb-a4ef-17775f00495a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54edaac7-ed4b-4288-810f-1bbf2407d82f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63bdd385-525e-4fe2-a07d-8b0758d3074b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e10b02da-2a78-47cd-b0c5-8799cc99329c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "dedb6eed-6d96-4562-ba0c-ec2a0cc5f325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "609e60f3-9530-4b34-a5e5-fe336b292956",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdb2fc39-f1e1-4fb3-a903-ee3a1bf2242b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb91ec77-d9d0-47fb-8eb5-1bf589ac9011"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "503035b9-fffb-42af-8844-7626e9c20b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3db9666-f628-4587-a959-993d176882ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a48a3de-c5e9-4c99-9b4c-bdb825acef14",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53e17572-8f04-4273-bb87-56bbf6b6529f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a08c464-a17b-4419-b703-d2de04227930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64cc5047-6fd3-476b-aa52-f0774f406918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2447dc68-fb92-4a89-9a02-af8e51fca241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6180fff5-e4c1-4e84-a71f-64a131335baa",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d14431e7-a07d-4a7e-b63b-3e41cf89d556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1e0f0a75-4795-452b-a270-7dde92b712bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1a201e4-6097-425f-aa5e-d1066a5e3b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "07ccb384-1ec0-45c8-bdb1-1673f8c34750"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6bacf7bf-917e-4f13-83c4-83c0632c21d7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "84c5b4cf-2966-49a5-b696-622213f05214",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6feb04e4-06f5-45af-95eb-7b13b35b719a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5359978e-aded-4e1e-89b3-84b510a40c08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ce070d7-ffcc-4d34-ac31-310d3fbd68bf",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "82f8b20c-0fd8-4153-80dc-c760538a3f4d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f99ffb7-53bd-4d9b-8342-2657ae792c73",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9b6974b7-3a0e-4fae-94a8-c5df11c19bb0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a752930d-e110-408e-94e2-ade7312a22af",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d7311e25-68a5-4d78-ad62-41e4c94bc9e4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6abf73da-a9ca-4898-bed0-cccd04ab700c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3ec0ccbc-0f44-4192-b464-6c355cb358d9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5b9c8c70-9a8f-4fc6-83b6-ae54f40e5c89",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7bdb822b-4ef8-4644-984d-bea88f22b3ce"
                }
              }
            ]
          },
          {
            "id": "75886f6e-8a9f-4a97-a0b8-dbc4f90703bc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5732cf3b-a295-415b-a4a6-4599b85a5591",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "66c29817-5e29-4467-92fe-75bd447b2e92",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "201ca86e-4fbc-4c2a-8823-2b4c72f92d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b2704ecb-f608-4612-8785-63e5201ac92c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "706ed4bd-95eb-4b6d-aec5-364d7b184d52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ea0ec10-3402-4f39-a4f3-dbba661bf015"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fae30a8e-53db-48e7-ab2e-f91302df2ff1",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "98baa358-c5c8-4aa2-8751-1faf7b7f8331",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0cfd12a9-9df8-4359-9c6b-2830532c93f1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4569b6b6-a867-466a-b895-5098b33d7c96",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4f418ba3-c401-45ff-b052-4537844455af"
                    }
                  }
                ]
              },
              {
                "id": "d1de553c-eee0-4782-bc39-14e59bc9a9e5",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa3465af-6f70-4d33-9e1e-af787009a635",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e2fbc346-db77-4e28-a46a-51a1001eeb95"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "07434eca-b291-4e9b-969a-113419f38bea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "51fa98a8-1505-4ff5-8b6a-16b63c85b9df"
                    }
                  }
                ]
              },
              {
                "id": "6d0bb266-e7c8-4729-86ed-b3cdf5101a92",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "65e4d15b-2760-4874-89da-ee1b2fe5a77a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c7b45fbf-23bc-46a1-a28c-13baea0cf155"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9229d459-4187-4c1d-a785-b59e9c613213",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "14fa0853-0056-4411-8fbb-c1fb470ca4bd"
                    }
                  }
                ]
              },
              {
                "id": "b6a6cbff-5a0a-4004-9d20-2929a7ac6a82",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "14686ae0-f0a6-49e2-ab6e-cadb4ae98e04",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6bc795d5-4368-4502-ac01-fdec19c42385"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "da4aa426-fb9a-448c-bc03-546a89090918",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "e62b1f29-7ec5-4e6e-9bd9-58836c30f61f"
                    }
                  }
                ]
              },
              {
                "id": "8a83a574-9f22-442e-a614-56881f4a3578",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a10de671-53e2-475a-9078-40e6bd17a6e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c4635c77-a16f-436f-853d-831028db18ad"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "648b7f42-94df-41a6-b31a-e9fe95cb19cf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "c48b941f-3383-40a6-a4a3-8cbd69164222"
                    }
                  }
                ]
              },
              {
                "id": "68453ed9-4448-44af-8ae3-b667f99e965d",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2fdbaa1a-7aa6-444c-a43d-790ef55258cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6b3c69cd-afe8-40d9-a09a-bd2c8ac758d0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0658d9ab-63e9-4511-9812-87c70aa052bd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "34f07bc0-dba3-4a21-8ab1-f1af89a03329"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "73cbed93-78c7-4715-9d5b-da8a0ad3e7eb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9125de32-8dbf-41a9-a577-2c8eb83f8d22"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "35b5e6de-70c1-4d57-ab65-8db909ceb9ba",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f6b20450-71b4-4ca4-838a-b491716aaac1"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "86af5ae9-5794-40c3-aff7-a4b0647b113e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "01b4a764-0562-48c9-a402-d4bdb970d025"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9e4ef63d-8959-49a7-b0ff-425599e49b40",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "80ec54d0-48e5-4b53-ac94-ab8f8e861c10"
            }
          }
        ]
      },
      {
        "id": "272a22d1-a2c7-4eff-897b-754b41c2d67c",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "30872006-411d-4065-826a-c5bc025699b4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9d3c77d5-b4c4-4689-8fd3-33f9d4d1ad64",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "22d2a6f7-e209-4fc4-bcc8-d058d10f3b3b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6e4ba4d-ab7b-4b35-9991-b20f92381116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da753e28-555d-4b96-9aa0-913feb8fcb33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "910dd53b-9109-40e5-8591-8c41731b5622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "2adadb29-8c3a-4c6a-9448-c7c0d6f7f0d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cec99b53-f818-4c53-9d1b-f4d3eda26f37",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3226756-883d-437b-a2bd-47a7c621c806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "033d2f43-77de-45bd-8c17-2aa9d5bed03c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc5c779-ad32-43eb-82e2-91c7bca776ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "683612f5-991c-4a1c-b50d-fa15d408de6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9e823d5-83b9-4abc-a8cc-b268217873e9",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aac6fd9a-5910-460e-8518-e8f71b65f2e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e7e1ae3-1c18-4f21-96f2-d059b7edbd29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "195b9722-5d74-4136-854c-28825e56bd7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a83a5ba5-c646-40e8-adaf-a02f681efaaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8f14116-8aa4-4c38-bbe3-c6447bf6a5a3",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66d2186d-e1af-415d-b9d7-f6102c6e0735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a2dd141-2f53-4d3e-9099-ccbda221f015"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03e5c4c7-7d9d-442b-9f65-8beee31eb388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "902cb177-eeff-4e4c-b345-2f04d07ea3bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3e7be83-6f54-45de-8127-b0197d5da009",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e8b90d-7d11-4f17-8470-733ff4229e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e212d45-164a-4f9c-b774-21ef8d265c20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f236589-5051-4e60-aa77-1666f5dfc892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b354e07e-0da1-4c2f-8bc5-bdea1a5e3a14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9893630f-61d1-44dd-bac6-7507fd9179fb",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "577884d3-32da-4d4c-bdfb-06b334c8f33b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23e02722-1bd9-4bef-b15f-97b3b4e634dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9de5c01-2dae-4289-9d2b-2634f21a669a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ea3640d-c01e-47f4-b01d-65f34bda2235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd72298-b167-4130-8507-4ee0da3b4ef0",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bce8dae-f0ee-454c-9d45-da0c4e72bbb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d7cceba-4ac9-4e48-a9f5-1ad6ba2df654"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a54d7473-9fc4-4de7-9c9b-9ad95d7a1908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7c488b9-7b10-4462-9147-1552346e6e1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad5b2fe0-4905-4d9a-8abd-2e7fc50a989c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "957853fd-2788-4a05-92a9-0a8c68026e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06c4eb47-a02f-42fe-a5ca-8918e10bd864"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cefadff1-5944-48bc-8ebc-bb4621eda047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8cbb648d-3a7c-4d79-b96e-f4ae0841fcb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a1d13cc-c536-4a55-9d63-85b84fec4646",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34b70a3f-0dcc-47c9-9530-cb4102373cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d2490a5-ec18-438c-8e77-86e7ce120ef7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5163e179-a3b3-4e8f-a4ed-e0c03f07b4e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa1f4742-bdbe-499e-8bff-95156fe489fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bf15e6f-f2aa-430d-b83a-f426796fafd6",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db291d15-1d04-4f74-9a80-f7f58f3c8578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ba042e9-800a-4ed0-b31c-0bf58f8a741c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab1162ef-40eb-4346-b376-2664b6cd1859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d71ed1a-0d3d-4fd2-a1c5-b2d4f94cf917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bbb2fa7-21b6-4bcf-9e19-b56099a328b6",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "833a6690-7ad2-4597-8c2a-586bc10a9ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46fd0453-44fa-4465-9681-471ef346dafa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96ffaffe-6aa6-44a0-bb49-5fa0f4fe5f8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b7e802c0-a1fe-44c9-9e51-536ca8b9ad72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "806ba75b-a36b-44ef-88e6-d65fbe11dfe4",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6404a747-b80f-4aa4-9295-ab768873f815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f023317-6452-4d0a-9525-70173935d615"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "178eabb7-7329-41e5-b2d7-4bbe884d875b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0732de30-b018-4ea7-8c74-a52914a6bb16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66a95b6d-5375-48d0-9a16-7247b2eb0547",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf2303a-678d-4532-b807-f9361ddf6efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58aae4cf-ef17-479b-8f60-a0a61e82af0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c31c39bd-00c9-4d40-9178-1faef755ac84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a49937a-d9fa-4719-80ab-9eb687c6a857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad70e30-273f-4361-ab32-be24910b6af2",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "702fb685-8cba-470c-95c2-10439bbaa7e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aec5472-bcf6-472a-a6ee-1bb8a8aa88e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc087852-84fe-4d03-9edd-14560694b438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d05abbb5-1b90-4130-9c1d-f8897eff1edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "025abf2c-dd04-4a95-be3e-7d240ec43735",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f3b4f53-3bdf-4f51-99d6-637fa12a76cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afc7e176-210e-42a8-ae80-eb9cf2afa351"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "688a8334-ddc8-4753-a11c-652a435de6d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b6ee274-d8b8-483a-a248-3713accc1912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c4781de-8816-45b6-acd2-700808f6f26a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66a95551-1710-485c-8a4e-ccd677d77fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f68dc42-e2f1-47a4-8bce-0295a34465f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dec121b-5b41-49e0-af5a-7ef8ff3e8fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "37db7251-be52-4346-8fd7-a4c3c6025f9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c91d84b9-b29f-4c15-95cb-cf097e32ce3f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc9f8592-1920-426b-95c9-95b091161dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "270e25f6-d502-4364-bde3-385eae64879f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef89c390-17b2-4acd-b521-f5015b271a72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "0382a292-5dc2-4fb6-964b-6eee167fa196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0ba29f8-e832-43da-bc2f-0024b657137e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa50e0a7-e099-4588-a730-2f63fd062b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0586f0d-00d6-467d-b175-c91826dc11dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1385794-f646-4a2c-925f-3f0595a418e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d5b6734-22fc-4299-a03e-e469f450ab9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bce7f81f-4613-4f32-93a3-9a0935c772fc",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "663cc81f-f80e-41d6-8228-ef353cbb0295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de0ee7c1-b748-4ded-85cf-24b5a74ec333"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b754b40-6489-48b4-b8b5-00a3255c5d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5b4a9a7-36b3-4152-8e65-78b4f762772d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "018cb589-918b-4412-b7e9-429d92a7e41e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f57aa59e-7770-47d2-92e5-699a09e027b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6bcad41-ccbe-4265-b218-ab2930649140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7caed6a3-46a4-4c20-ba87-f0a7b041f7a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "05229547-d5de-44a9-af34-6912501a09f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a8a615-1eb8-4745-a66f-76985b27fba1",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b97f56-a8f6-42ec-b156-3252157eea29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08be45e2-80ff-416b-96eb-4ed21b6f6682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e4fc76-3fea-4ec2-9cf2-850646a8d25f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02177b2f-d09d-4534-877a-492a965b33f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c50acb8-2868-4627-bf73-a5a9fa3bb297",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1ee04da-b0cb-4f34-9360-5c780d173be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79bc57f9-33f8-4fdc-a78e-fd0865b0da63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d24af19-ce89-425c-b785-ab4e59252fa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "288fe05d-6e26-4750-8bb0-d1f5a7f51e18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0227d5f-cccf-4dab-8f36-8f623a383899",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecfb49eb-1722-42ef-b400-53cac34ab3d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4625515-7c56-4194-8023-c6833d772b12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc6f18f-4874-4de8-8b5f-7a4bb92228cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33a6bd68-ca98-47e0-b196-3d528ab9188e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1db49ac0-4845-4974-8860-429cdbc543a2",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11b2ef98-7ab0-4a22-b173-c5680bfa5a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a6a983a-0333-411b-98d8-daa06f607987"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e4e8a1-85da-48d3-b61c-f336a43beda4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fa59216-5b3e-4a71-8dc1-e36545cc4f83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2b00605-1189-4319-9178-8ab29aae5d44",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db8eb03-0d81-434b-abe3-48871242a45d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab869105-62ac-4e2d-b096-40a08463d6f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7af33c63-af3c-408a-bed5-1c7d206cb5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d825b7c3-b38b-4202-b598-dfc7a26cc0e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a3183ab-7e45-4c4b-a2dc-cd6486a2cff3",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec3a5fd-f5b3-4e8d-b8b4-4eac7af61fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c884351-b653-410f-b012-a0cc2341f581"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf45ba4-ed15-41e4-a807-5be5995c7962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6c22b1c-5e96-49da-8ffb-e9b85c694578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0bfe749-dd31-4a16-a7b6-a6d45b73ad77",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "952d554b-c242-4b1d-9f76-6fb0a1a48981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "813e23a0-61d9-4df5-ac07-07b5a8395baa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4d777a4-fb5b-44a0-aa07-dea86af374eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "50e178d9-3f1e-4594-b834-fb10d2189285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af0e4891-a751-4cfd-93e7-4a9d0959e350",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15e7b5c7-c9a1-40c3-b1be-ea47302645cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cdcf22d-f3fc-491c-ac45-d804377ec2da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5238625a-6100-48cd-9e95-0cfe3d61e244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7294a328-ae2c-4c86-be5c-297a55caea02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d35bea7a-ebb1-4240-aec0-7347210044fe",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9629e340-8dd3-45ad-b3f9-67eaac6566e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab02002f-29b8-4125-a935-0a52880ae1a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d5742a-c4a6-4560-b397-85fce1a119ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2061b1f-2f71-4be2-ace3-14100df5647c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcdca71b-a467-4db8-9d3d-b19820ad9c4f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb55f138-4904-4071-975b-3bba3560cbb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0ba6f19-a443-4e9f-b36d-ec5813b255f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef2e9f01-367e-4518-9f3a-79123249af15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "272a5862-1017-46d7-88d3-0ba37c27a3f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2591385a-8f5e-41fe-938c-77e0d41fae85",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1f1765a-b160-492e-aa5f-b749d8e54d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "769cdf2e-39c3-4c46-81bd-b14928f99eaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "777c9776-f154-4c6c-9f6b-b561df9b2b84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac5aa2b5-8af0-4e7b-b926-356703f93edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "001357cc-c831-45ef-8669-b7a6be75132d",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "984d7408-c61e-41c7-88d0-9606011037f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e9501bc-9a46-4054-b105-53f82f27d6ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a98f7197-6fbd-46e7-bb9d-910c6e477a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d52a475-055c-4fb0-8b4b-6726ccff68c0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4e18f1b5-18ab-4d36-abef-395fa9ccc53a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9e6c79fb-5f8f-4852-b140-4972b1c3f53b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "570c614e-2fea-43b7-a04c-0467bc63549a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "fb2e7c14-7a3c-415e-a948-0856bac26dea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d9c6304-a4ba-4a65-9bb6-c80d78f7ca90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c944adb-fb81-4437-8459-66023d7b0fe2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "91676bc9-bdbd-4035-851e-ca147c7057d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "25a659ba-686a-48e1-b363-d74ad5a609a2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eadf0184-39e9-49ab-84e0-8a706eace532",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4c8b9dd1-b02f-443a-8490-ac7d8aa8894d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2737eb1a-95ac-4696-87c3-f08068c72d03",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9b6a4f96-addb-4aa9-8d45-94ed36b5141d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "908d397e-209c-46cc-83a9-d4c5fa3095f9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e663ed5b-6859-48d2-b003-9f4ba911d525"
            }
          }
        ]
      },
      {
        "id": "7fcc8dd9-6ecb-4c94-a26d-b7ef7c480b51",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "2f57c247-4c82-4579-93c6-4dc94ec7b670",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e41079e2-bfe5-4617-8861-92ab15040b71",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4fda3833-3647-486d-9227-5144b649b37c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cce4a231-2fdf-4ab7-beb5-d85c77366b85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfa6aa1e-8915-47d6-af6c-dedb2b847951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a12170e-f2bf-4dcf-9a95-42aa57c07c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2f487bb-ab5d-4d80-91e9-04ffb0336760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e95d88ac-8eec-4c26-94ba-a53474bf4a72",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7114c4f3-7ff2-48b6-976c-34799fc14834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a64c55a2-1dd4-455d-a7dc-67258303004d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "690fe784-4cad-4cd4-8d38-e819d14b4d17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0beb316e-bafa-4301-ab63-9fbc0f36c8f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "790dd15f-a694-4863-b603-a15b284e60e3",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61e14106-2058-4884-9a8c-ea8a570e69a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dff06c1-2e8c-4099-b0e8-8f04d84f9394"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fdd162c-a0e0-4584-872d-52a00c46fc26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8af08db-3556-4bfb-96fe-45c17768a8de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34b2f33c-7a71-486c-b6a9-af5fefc7ac55",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05870f78-a424-4503-952c-96cf261999c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46bfde8a-b327-4840-bcb0-c55186a8e2d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "684e42c7-5008-42a3-9fe8-129b185c3c90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd42ed09-28eb-413c-b1d4-a356b9149250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55497690-3459-4086-b82f-5454a1f63189",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "560d9db7-8e0a-4e99-b8d0-1dedd16bdfaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffb1e092-1711-4ece-9776-5b4194d5e224"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b47c52b1-f310-4403-a4d7-056a25a03eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "844fd182-72cc-4714-8a99-3a2615eee114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "132e68a3-f3db-42a5-a4e8-e3dc7e89119c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "280ebc58-5bfe-44c0-a011-57f1068404c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daedca90-fd74-49be-a99a-865b1ded2a4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1361bc9f-a1a4-42aa-96fc-280b07354ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe87b9c4-4f08-4286-90f7-0a2b1911c4ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8332f9a4-94ef-4f88-8d18-d8f456835175",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fad13bd6-ad30-482f-bc69-ab5bc9a0305f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3bf735f-e229-4a6d-836f-aa9e3a28eb27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "979e2f81-0123-477d-95b0-2473bfcb2152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bc947a0-868e-469c-b6de-1cdc6deef8df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83694fe9-3051-4656-9883-acbed639c907",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e717b93d-8edf-49b6-b228-571ce1dc4372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51f3428f-6eb5-4e30-b4d4-d131d593e4e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffb3aeb1-287a-429a-8c37-2bc6535ca32c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac16f22b-f641-4d00-b51a-3e05c71eeb50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dba0e1d-0408-48bf-ac78-285a822dd5c9",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3af70f2-23cd-4998-89a9-dd0454d18326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54a959b1-d87c-4a63-9ace-50c8f96adc00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66905f1d-2195-4469-83d9-8e2b7425fb62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc3ac51c-964f-4277-afd4-5d372886d66e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4b82e1b-de60-44aa-879b-ce3b10d4c9fa",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c85630a-90c4-4a2b-a1d0-7e9906abb43e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c2f870c-b523-44e4-ba14-b88e30e34ce8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd022351-7681-4af2-bc42-24bbff22f52d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1fa6369-b7e6-4b6d-9ebd-888767a3b964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42c24b3e-8de3-4cc6-b733-c1f6f1c9a54a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc4d0b49-95a8-4754-97a3-cd8abd5456f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad992c2a-3839-44b7-9642-53294795b920"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e8088c-1fb0-4672-b7fb-f50192130762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "030796e6-3ee1-4630-9a3a-219c86f67def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b75889bf-2a48-41ec-9958-cedf125f7e28",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c5e918f-90d1-4d3f-b5bd-80dd583913bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5d98b6b-b81a-485f-b4c8-3d4f12783b50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa5a1e7e-07ea-4d0b-85c6-9babf257799e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b847c189-8e86-4169-addd-67230a4909df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2363d2ac-e425-4b7a-bd37-49cf38597b49",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd4daae-e6c8-4ad0-ac1f-512f00c82423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cf3f0c5-fa9f-4fe8-b9e4-407f5db92926"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4b65879-09e5-4ab3-b3c5-8c13c33797d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a419d23-c4db-43c2-945b-81dd9c1b31de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19540225-f307-41e4-a31e-17383cd0b3da",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58d7e9e7-d86a-4fb4-9f3b-961fae4c24d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b644455c-009e-4e61-b6c9-df63a11dc1bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3db213-febf-4ff3-a317-304ce3af98f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d221a82a-b80b-43c9-a6a8-3e13a9bdd331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a72ff425-f7d3-4167-8a37-2731ca6d529e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c38b83c-dcd7-44e1-8508-3337587714cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7503404-ea46-4438-9dc7-2209bafb1c80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a789688-374f-4591-b1a0-85e46e34e3a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a3129c1-6409-4e76-8f3a-a86b89ae3185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "853c95d4-3166-4195-bc93-04b577b6ee82",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ef0208-2eb3-4420-a57a-30a2b33f2660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f28184c-4b70-4d88-9af5-7cdb91a64088"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fd4da7e-89b0-4598-b818-564c339cb4b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b8aa176-a23c-4a62-869e-04b608a00b88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22c7515d-462a-4d4a-8fe7-7c8a39695692",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33227e97-9e0c-4b45-8d30-32b2cf9c9ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "293fea5b-9784-47b0-98e2-481d1eb1597b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe8948da-c71b-4049-bdff-273cbfa9a3d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4b0b66d-6936-4337-8db5-b96f42c43aad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ef91c0f-4a8e-499a-8031-823c5d17313c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc0f67e9-5735-4445-b136-0a9fd4f209bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4696bfdc-4395-4e56-bc82-c350857d3b60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afd00c4e-3efa-48e5-b6ae-5afd343a5dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "46a16bb5-3d69-46e9-b0f0-15f05f8551d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c48ea82a-c66e-456c-bf75-bb797cbd8469",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bd56685-f6bc-4864-92fc-c2ef32a0ad6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c18657f3-626f-4c08-8124-5a6621d74452"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ab77a5-a37a-4bbf-afb5-bfd73f171114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "351e2a4a-ebe3-41e9-8704-cbcb8d52211a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cffc0fcf-ca9b-4343-9379-d7c897d6eebf",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85abe47c-cb6c-444c-856d-aede0873b282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27742146-197a-4424-965b-4843555bc52c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b97d78e9-5586-42a5-b2ff-3729045d6d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "878fcadf-6c54-423e-aa5d-84b34de58d51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81f1ca84-c2b8-445b-b433-f15798838bca",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6427ade-e767-49a5-84da-536735a88e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2414dd4f-10fb-425f-9489-80c13939ad83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb2d5de3-7774-4529-ac9d-4237451bcc2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "67b907e4-5d67-4d1d-acc8-97fa253fd67a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c15880d-20c9-4c1c-95b5-b371463439bb",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd280ea2-5b0e-4867-8d24-b1d31dc0ac9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50a23ca2-a84e-4b31-9014-391c700c859b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d55094df-3b19-4121-9ab4-3cb22c692a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "997f93a4-6d79-4910-9d47-6d23ad3e1826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12d54118-5483-47eb-96c4-d4aeb3eb37d0",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a1efa24-2e1c-4eab-8f13-88d5660fe176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d828c9f5-acb2-487c-9202-06905e42adcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a3ee67-2730-47c0-832d-d62114653e09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2fc0af8-9743-4a4b-990b-633f79f60cf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "535ea92e-d38f-45ad-86af-50d3453e7e49",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "413a55d5-8a0c-45ca-a5e1-d75cd24931d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf045d61-2ded-4bcf-b83c-f5c892b6fe7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c94a83-784e-431a-bb5b-0283f4dfbbb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1823ca73-8865-42b9-866f-163d9f541337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7df7f9e-f02d-4ec8-a538-e4b17e08a163",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7546f5e7-3b6b-4302-afa6-138556dbbee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0fc7a56-69a1-4e0d-a191-3bf5274c6250"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4864966b-5921-4beb-ae7e-b164718fbae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f62d4d5e-a755-4a9f-a703-42412bc8131c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09861621-c619-424d-9e63-db669751dd87",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e66359c-cccc-4bf8-9b3a-6399b64ffe47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc2499a6-cd1b-44ad-b540-132d2488421f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fb73863-5ac9-4fb3-ad87-3f2907d1e43d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e92aca7-e4c5-4377-8707-cabad161e3dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "279adaad-d801-426d-9c5d-212673f21938",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae4517a-5ae6-4c73-a6b2-7d074e559337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20e7bde7-d091-4d72-8e53-c1f29cf8d61f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9c596a6-c054-4ef1-a2fd-a892738e67b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebc1652c-3ba0-40d0-9d86-1a9a826ae141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1801b6de-583a-405e-b16d-d1f7d63ae282",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e5e399d-9974-459d-a609-d26d78296b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f6c8fc9-c114-4e9b-9660-920ff861db5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a6815f6-48f8-4a89-8d68-8535d71e496d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28e74f23-83a4-46ab-b8e3-1296a82c7482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44e8161c-aa73-4cbc-9ee2-bf906d00ee5a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97706ce4-c017-46dc-b56b-2ff720de2f9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31cd6bd1-2b37-492d-93b3-77d384a9c246"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef9b51d8-b332-4e4f-a103-ae3b9f7b3299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c35ef539-8add-4f1a-a5a1-6e0e95e9c637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d41d887a-115d-4598-8f99-3d2211902da7",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c73157c-61ad-46ad-a235-b82ed2797138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4360a298-a481-4c02-b923-5ae057b6c2b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df913253-8cdb-432b-8edd-ffd84ed805b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d66852d5-9f74-4370-868f-dd54e978a4b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a48b0993-6be1-4e29-a710-528e28aba07b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb20360-acdf-48a8-87eb-daecf5f124fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1a5ed36-814f-4df0-97b0-307ff608edde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afa79f19-66e9-498b-b5f0-b0b9f5ce0f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8eacd990-17e0-4f85-b7f0-c8d7cfbbdefc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af49b504-9ab5-4fcc-bf69-86ec6c3b33de",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb63487f-fa04-452e-aa73-75cae8f5ab12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efcfc0e7-db21-4831-a2d8-efaa2846ea2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aecc9509-ae6a-42a5-a061-04e905e662ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bc09127-6dd0-44bf-afea-ae9f3af733cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d7651d1-a730-4478-91e3-4c90569efbeb",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f13a5b-b489-497c-b864-2bcc76470955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e829b5f-a9f9-48a7-a93b-8f3661b4c834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92d4e90f-5f63-4b29-860c-f3b91b3c016c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f016e9d-efa4-4463-a2a4-fce2036ab56b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27c80d24-c9d4-4a30-bd67-3b24c06d1244",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a199c28-8f39-43b9-90aa-b14d32a1a011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec5b30e5-00aa-4f1b-a899-75ee075ca7d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aefd66de-7837-46d3-a5ff-6f61a2408ca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17b85e80-b7b3-4366-89c2-cdfcd2198544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc1f9179-4a91-4004-bb62-368a515f27d2",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d45c3dd7-a213-453a-9c40-607e4ed321eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1ed686e-d9d4-4cba-960b-f43319290676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec4cc16b-e27f-4f15-90e0-10ef9426e3a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f515b066-00ea-4edd-a9bb-5fb3ada7739a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01786dba-8587-442a-be76-e8f35a1fd64a",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "072608b6-beb1-4cae-a13e-4d10f845325e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a85488a-480e-43e1-8099-3f73da7c3837"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12308a00-7ab4-4526-9fe8-92e47e218021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "58b677ef-ac09-4f01-b237-0354b675c7b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb686ef1-436a-4d7f-a880-278a2a66c105",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f53089e1-23d7-4dac-925c-2786600f85c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a260eeb-4f3e-4fec-b77d-9d2ee7321e37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03fe08d2-1110-4f44-bc95-0207a59cca1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68b38b60-881a-49ab-a965-27d8bbc701d2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "48ecd741-0e08-48fb-b067-0ad48f23f638",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "18e745f5-f15c-4c9d-b9b9-d4662b5e4d23",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8043300-52e2-4f49-95a3-4418cf435695",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "bf08b5bc-c137-46cf-814f-2b580d3266a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7f49519-f002-44d2-829b-4c948485926b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2771a4a1-4079-464b-903d-92f479df321b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a76c0df8-1189-4ba9-a0a1-32ae51287be5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "953c50d7-4431-4ee4-b622-bf21c4d1b4d7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b27009ce-fd69-4b52-815e-38e674976baf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cbf7d37f-9c62-4ef5-bc6c-d1a105276aae"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fa3b940e-4eec-45ac-bab5-b76bf10ae3ab",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "45ac2119-8be6-43eb-bdc5-4abda4a4b902"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "361de484-ffff-44f4-bec6-451ad3f92efb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e60b6d9b-b48e-4a67-a4e9-e1ac291c35ed"
            }
          }
        ]
      },
      {
        "id": "fb99006d-d1e7-45b6-95b5-74b924b45afd",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "879213d9-30e3-4901-b8aa-8c128bf9a707",
            "name": "Negative Testing",
            "item": [
              {
                "id": "43bafab5-8a01-4cb7-8e5a-53e426c1625e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "251a469e-3a40-42bd-b89f-01410c341e37",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91d94b4e-90cb-48c2-87f4-0bbe9fc67739",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e40ea8e-d7a4-4e15-90cb-df7113230799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cc37a33-e78f-4659-8a89-18055c30b9dc",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e50b1db4-4637-467a-bdc2-fe20e0a3922c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de517649-e541-42b7-908c-8fa2c8fd8eea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be5c90cb-e0dc-45b5-9c56-473c9bf55b6a",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dae703ce-1cba-44a0-a6a3-4cb4584733e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56c50d04-52b8-4fe1-b228-9fa19e3591c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22598c8a-2ca8-453c-8829-38fb4ee57814",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab2d425a-d383-4be8-a116-70a0ec67a358",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79e7a139-ae35-4f38-9aec-002115eaaacb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "734a5cdc-8b6b-46d3-a7d5-345c5d94f766",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ddb645a-5929-40a4-895b-0f451f3290b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "742f73f2-eb62-4c52-beab-eefaaca1d187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e14d8f-16cd-4aea-9154-9208d27c8d27",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a150c38-2f50-4f23-891f-d893fef067a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f99d3a7f-7cd3-40f2-8c0a-ebd9539f7269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "476dfd05-f639-45e9-b424-f445bad46990",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a11a6602-f1fb-4aab-baaf-899ed319646e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c1fad83-8cad-4b93-8b19-0d0a1b379d16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64cf2c29-0930-4464-99f1-a08baf81f5cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "031f64b9-47b9-4070-b316-63424fd191ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f55cb8e9-ef50-425c-a63c-181d44424557",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ee90c0c-4450-4c7e-947f-f0f7f283eb9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fd5082a-bd92-4005-8ee7-6bcfbe6a12a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1113e866-07b0-43d5-8c31-1d93cad35f6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fac89017-729d-4102-b123-0af51f68a07d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "defcefd1-b73c-4e8b-88ee-adfdead9107f",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2637d2ef-8977-469e-be90-12b0a68270df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69fe249f-4205-4043-b128-20d354f8c07b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad6f6e1-9420-4e93-90fc-9c5040aefcd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0588caeb-6a34-4a51-933f-26c6ac99120e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76412179-376c-48f7-a87f-a0063f0e5857",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb69900b-eca0-4185-980c-78cad45315a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e8612c6-99cb-46a9-a9aa-5595c4300dc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c08006-ec32-4c3d-98a6-e87b5a1af6eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88db2121-d800-4fb0-9f2a-ff9758a719b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a148c4-4c10-41ef-ac52-c6a0df39508b",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9073feec-a563-4f2e-8182-20925330c989",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9fb016b-8863-49e7-a1d6-b01761a7adfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c3c5f29-efc3-4266-90c9-71a1948de62f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f5d2939-7e0a-409a-8603-451e228d54c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aafb92a6-5989-42c3-9f9b-e35d5ba1aa4a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a2153f3-eec8-4b16-843c-45ecd73b122a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19036d63-b6a9-4666-95ca-448531620351"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81acefdd-d590-42c9-a52e-f38bf381b03b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ea4f6cb-a1e5-4965-9847-d9ca16db730c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "943e3c6b-a1be-4eb6-8743-8654f70c5ea9",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca146143-815b-4316-9ee1-e44d14070910",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f68ed9e5-f92d-4a38-8eac-f91b63b0b049"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6736a09-703b-49b1-86e9-bc8dc92d2a5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7d70768-e955-4bf0-9a6c-391661057def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bdc697d-777c-4b3b-aa81-79956516c1d6",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85f3bc78-8e39-4d7a-8b8f-3661b28d68ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bce605e-0d19-4d76-9471-2bf0f31df8dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e828f00b-f6cd-4ee8-9ab0-23be20cabe0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36b2ab44-2cd0-4c65-a0af-e39b035ee6bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c6d33f8-5ce2-491d-a477-1019de7175ce",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f290e56-5973-4ae0-8ac5-b5f0e07341b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "404d65e8-8d08-4d16-80e8-fd8ab13ccf81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1bb2eee-0224-4295-85d4-abb0fe4c445d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07c372df-782a-4ab5-8cd3-41fd2d02131d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29375d64-a4bf-4dc5-ac4c-7252c1166168",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "884cb32f-eb79-44e4-b132-aa9409512870",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9d7d6bc-d1c7-4465-be22-9ac10874dcc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c71f131-e616-4818-b5e9-00f5c708dcc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfe438ee-9bc8-4748-a570-6fbd46f0e10c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5600260-f033-4ed8-8abe-978d7ee0bbe1",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fd963d3-5cec-49b5-a7c3-d46bd61c5bb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "621fccd7-9ed1-49e1-a928-e422f1cb8383"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b26465f-b8ec-447e-92cf-d778d0f84fbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3dc32ff-c26a-439a-8780-24c7fe573aec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a9c2021-2c62-49b2-8575-227ee3c83513",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10e52b3a-1627-4dac-b2c7-8fd98e51fe19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d9760d7-f8d4-4712-985b-c58b80c66dd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6da197c6-b977-43e5-9281-016435a8f7a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "205e0163-3cd7-4ec8-a5d3-23c3898c38da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0678cfc-ce7d-4bb8-8ec7-f4b5a864b2b2",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb938b3b-2e32-406a-bc64-b1a4b18d2efb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b817470c-b3ac-4d16-b510-36f8150defa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bbb2d3b-a4fd-4b96-9549-bbe363634288",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f2eb0de-5346-40a9-9dff-8b4b969ca9e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73cae64-26ad-4006-b51d-6a070ed1cbb3",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd92458-1e5f-49d5-9796-34d563ecf7a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0bc578f-9e51-40d4-be71-1cc14bf6e807"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc8edfef-32cc-4cb7-b958-73afbed81de8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bda98601-3f8b-4c99-8969-089e3dbcc017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d098a41c-da0e-4e83-969c-c71d0b732b01",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "972a9b50-86da-43a7-8c52-8a674431acff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eee5d59a-5a10-4e49-af2a-f1cd7a8bff74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4491b0a9-a81c-4ee3-a2dd-da6d2f11f2ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c16b94bf-3c6c-4421-8de7-07cafec5c681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed8859f3-6416-4413-87d7-3e64c6fb0fe9",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37f2fdb9-6a5c-41bf-9839-003a8c149eba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2362910-c015-4b65-bd25-f91a1dd2e92c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55954ec1-a154-4089-ad92-abdcfce1d096",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e11556b2-4dd1-4af5-94e1-7ae8bb34210e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95ad813b-9156-4efd-8074-5b3d6ea58845",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "053eef01-221e-40bb-9ac7-be4ce1d96307",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9a8d0e4-e1f9-411e-bbbf-76bc14f8b00a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d287624-7917-43ea-8567-9a10b8739e4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f1be915-803a-405f-b9a8-c383c9fa486f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6373242d-2ac7-460b-8ec5-5056bfddd8cb",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "377e8631-7e87-4b8e-bc77-e69d070cc884",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f62ca6c5-f949-40c2-b972-8899a88676e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "179043c5-6c43-4541-8316-d161f9e2594b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce64c3d6-bfea-4ec2-ba9f-248c38507d96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b098de66-392a-48b3-8adb-d98d7e2260ef",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02e71aa9-ca91-4f52-b166-96adf96b065d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c06f7546-f5e0-46d3-b442-85bc8dc304b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc38bc8b-5ac5-4ceb-875f-c31c172a7ec4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ad5669b-28a5-4ae5-ac4d-e6185bbe8b23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b854ffc-2889-43c9-ac7e-7d82476f2f5f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38d6470e-1c6a-4d97-bfd9-296e275f6e02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad944c38-94af-4943-9876-32d2751f93d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb87d908-9f59-42b9-8536-75c02c0b3547",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d16a0d8d-7959-4699-8cce-f2e602b3579f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59ce41fd-4b1e-454f-a6e7-560e26689a3c",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6552a716-ae0f-4470-8a5d-51df8ed0460b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f187739-7512-4720-8ba4-811eeda85e7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d07ec1-f2ba-4081-a6cc-58b54b5c09c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80a3e495-39aa-4712-a98e-efe6f66ace9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3bd081f-9154-44ea-9050-77665d3861e2",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c2d470-8ca2-4cc8-97f3-cb1c3d0bf818",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2d484cb-78e3-4c52-a378-315c7a1605b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5182ff65-23c1-46a1-8db5-5a861cf62dc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1760c61d-7aec-46a9-af2d-c6fc4843805d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6e68943-2a80-4dc3-b220-ae8002cb5c77",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da205db3-9943-4af2-b15f-f8bb1c61c259",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a20cbe6-254d-4301-a7e3-011a988daebd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a69a63a2-abd0-42da-b2dc-e74afc79f191",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edb9ebca-d5ac-4d64-b555-04b699da08ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7837b81d-1444-48e8-b68f-a591a9bc08fe",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc66d850-aab2-4d9a-943f-05b42aa896f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4756ff3a-ca30-4458-8a77-df53573a08ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79870f11-ca0b-4a4b-b6bb-1a04fe6ebc9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29d79de0-e553-482a-8612-662ca85aad77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9467d112-d2ef-4760-909c-55897d5700c9",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64c3f033-8012-487c-a120-a51ba513ccd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "465f553d-132e-4933-a11a-ab762dc23004"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af28515a-4556-4f23-89f9-c56e60fd936b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13aa7a7e-d810-45f1-88d9-f615ecf8f456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb3399e1-a459-400f-94a6-c482f6360cbf",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "220dff45-650e-4c3f-ae92-de8c0409b325",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eaa9f304-02c7-4312-a4d8-f116085f13b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "358a7276-a3d7-4ae9-873e-95c5d5abd26c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fac8efb2-bb9a-467a-8728-bdc0f1c0fc8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "924fe99f-56c6-4bee-b9c6-ec866db6fa9c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf40c56c-c353-41e6-bec3-4f30cacc7925",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "545a71ec-2c49-4986-a4ce-ec8ee4d093e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bae623d-c680-4227-8481-a0ada53430ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f4bd646-4942-4521-9de7-bb324b730055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b3216af-c119-466a-bfd5-db9b14140edc",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a19c2a6-6fd3-4ae7-916d-1c8edcd260f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bb12cef-bbe0-49d9-9734-d9a5bb794c18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c7101a0-3c35-4548-abf7-20251b28c2e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbe93900-53bd-4595-b9ff-f9bfe9484c89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "556afba8-9a63-4752-ae81-b24192ea97ce",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41faa7fe-5a7a-4157-897a-fe050291455c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "810c6bb5-66e7-4b61-a3c2-216df4c7c7af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73e98db1-4c89-4420-8db8-1c01b7b1dd0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfb3128f-f25c-4410-8e96-c6eb216da003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfe10845-09b1-4c50-a019-8df3f497653f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31cd1565-da3d-4ae4-b6e3-f9f850c171e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dbead15-f42a-4afa-b20a-0c24d3d91cad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bde326d1-9152-42bd-be56-5fba9080de46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91379f21-f8b3-420c-a757-bd6040edb00c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75226bf3-00e0-4f9d-8185-e4a485e2692b",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75a48442-b16a-49a0-bd15-92ec442e77b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ade2fbd6-ff5f-40be-9868-cafbca548534"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b7b83fb-22f8-4d74-8986-a20a9ea6f2fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5adde99f-6ab1-466e-8e22-7ce4a9925c13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60fc127c-48e0-4b60-b072-42106218ec31",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efa73fca-9133-4fd1-ac09-c79e02af929b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdd2c02c-328a-4e9f-943b-e3fbb132336f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5a37ee3-a128-4860-9318-2eb52706afde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e6f560e-66fd-434a-87e1-82e49f49adcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6988ffa8-0e3e-4d3b-8fe0-638271fa5f9f",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb302635-ba91-4888-9f8e-cabfbfd17477",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d7976fd-ec71-4085-b3d4-eda5bcbf8f60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f895c0e-f8aa-46f2-b1c3-49d3ad5278c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09839acb-2230-48bc-8de8-27d529772ba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03bad81a-23f3-481e-b64b-c0cc7dd9091c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f2784d6-fe3a-4799-a0e0-9b3a6e83077a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec0ad274-1527-4728-8b93-c9640e32d001"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdbe320c-3438-4988-9c33-38fedbd1b563",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "584c6930-530d-4c01-a8bf-51230ff72014"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f35f98a-bd85-484f-acb9-143356955e40",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc7ad24-af9f-4f58-97fe-153cf42a1150",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b296a0d1-5f72-4d25-b407-cb519ba44431"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a50a24a-8ad1-4e05-9ad6-86e2d0632489",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef867d73-4676-45d6-af95-4a5a21c4e099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f6ec90f-ac19-4ef8-a84c-9d113d291918",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "274f0232-c4f0-4462-9fa4-b09c72ee3623",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "121adb0a-971d-42fa-92ef-0401cd2c3476"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11d04542-d601-4c6e-b892-686d9636b864",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5194645b-0bc6-447d-9c56-fb35367036a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d93a13bf-a08f-4c2f-aad4-f627dd100cca",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "072289c6-6057-47bc-9ff7-6a232040e7ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2957709-4689-43b2-8f17-3f7f48c28bcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "719495d5-dbce-4391-9425-70162b088739",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26a35082-7630-4093-ab64-0ed510eebec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a8ee637-8120-4fea-83b6-1c6399206703",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8988d3cc-fad0-4f74-ab8a-4aa996cd01a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9170026-5138-4cfd-aba5-fdb7ea26a2b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2341373-e1e4-479d-b674-34c017105bc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae96a10b-e750-46ec-b557-0d7bf2a5f8c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d7cf9cf-104f-44b3-9c7e-5949028f7e63",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eec5b842-246d-463d-9bbe-41232e4ca0bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11a18ebb-f53f-4a7d-a491-92051c6891c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f7d48eb-a588-4c81-ab41-80969106248d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b10bb2f4-a654-451a-955d-2302680a9275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e771d485-0cbb-4bef-936c-1561e48045c3",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcfa02b0-271a-434f-8b55-e09aa3ae106e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fe5bae7-6e7f-46bd-bf50-ea11599c8301"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1033c269-4ff8-4470-9c81-48d355562d84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a18d0242-642a-4de7-b0fd-0a83978d7892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d994fbc-8750-4b3c-835b-5cbaa97ca077",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd39e14-f145-4c54-9638-63d0a426e74d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "276bf39b-a5be-4fd7-9f85-d4847fafcd62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f4273ff-5bcb-4923-9e5f-1477913a433d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2ecce39-5532-4253-a8de-b33fd69073ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5153f90-1242-4447-8163-899cc5f0622b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d78934a-88b7-4e0d-9a5e-64233921337f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd7d8893-8489-4a5b-8df8-5545f04f812f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b77dd9-39de-4972-bde4-4b5921e3aa6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d8ba504-c181-4bff-a681-e02fd021a690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71265c2b-471e-4d22-9a88-82832f172184",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bfd01b2-b1c8-4480-8cd0-49da311c41d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08a84cb6-3949-43e0-8649-6df58b5c4195"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12327875-e7f0-4bdf-83e9-7b8a8575bb24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ac4bd03-6075-488d-9597-e9b8d6e8ebc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee520bf3-c97e-495c-9401-6e0340822873",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eee751d-5a89-485f-864d-c559c32d4332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af2e6c14-5b1d-4f91-a5b2-680f64c08b0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07868a77-2f92-45d7-b05c-c6331ef832b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37c8c873-a9f0-4a54-99ea-b787684c99c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e62b0b87-0ab9-4f7f-80d2-30dc12a016b3",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2846774-4425-4e84-8154-442ef9e4f096",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24409f88-41f5-4dfe-b7a1-5e82d463df72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c3f5ef5-fa1a-4756-8af3-99ee00d17252",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c2809d3-3fc2-4145-bc14-79f0549494f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf695692-15b4-4033-a411-7fda5d5c9c9e",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1126adfd-79e2-4d31-8634-2078b861bbb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c828e03c-ff07-4b23-9200-84c474647843"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d232a581-955c-4a22-9891-65f65a8f2583",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afdf2ed9-60f3-4889-8850-02ecaaf21a73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c498a616-be1a-4373-8d0d-81fa54ae9ce7",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c179fc46-32fa-4e35-884b-d812e7c8fe00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99335dc4-a337-43ff-94a9-cb85a592d689"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c96f5cd-f05b-4fd4-b5c6-c87981bea573",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4d830ac-1cfa-488f-b155-da509268a8b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64ec8024-4b4c-44cd-b2bb-a5061d72a518",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "484bed10-3485-4e67-a7cb-bd30f53ae843",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15261fe5-5f89-461d-8168-5c9688497adf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec2095e-7996-4ad3-a69b-70b684bd4449",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "887472e6-964c-4c71-82d3-dbf60b6b3f49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50102d9c-6e47-4d82-b09e-6a9e841d6768",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7aaf784-bfdd-483f-a9eb-09d4fb370a01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d0bb4d1-c7ab-4d1a-9ffc-37c65f5910e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e921e10-a4a6-44c0-a062-48c4c55cd510",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32590dc1-5cf4-49f7-95c8-975820bd7746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8e7a8e7-16a3-4b65-aa7f-31856cf8534b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e72dd2-0c79-4915-accd-a6b4a0e46fd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b70d965b-dc8d-490e-99de-668948becce4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "461678a8-8db1-4c1f-88a9-9ade94e51309",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecb3c3ca-7aba-4f0d-910c-66ca64929838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37cd8c8d-243d-4fa8-b55b-822e9d4c25bb",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3e0299-4d2b-403b-b8ab-c923bfabb675",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfc12fa3-15aa-4563-8e2f-da407e764bea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8867178c-521e-4ccd-9f34-428465bdcabf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6f9abd4-59db-4735-8dc5-a589c6f3b471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b632e4ce-4da4-4ee3-95e3-cc767e60835e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e22887a-2848-4dc0-8e67-b6c71f9da4ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecdbf400-2b77-47c1-a056-a60ecd8674a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9100e92-68dc-4164-8ae2-100c0a3c663b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "574e5341-4208-4bc4-9eff-31e97356305e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "893ea934-c752-407b-9bbb-69706bcf017a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89f8a0e1-e400-49f3-95e2-36dd21da1352",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b73a95f-cc51-43ac-9d53-b995264ebaee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11b25d22-a813-43ed-b176-fe54f2415dae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90c59c03-26c1-4d00-8324-0c188f62466e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "722ab6b6-ba59-46ae-960b-b22c20bc5790",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a492fe4-de85-491c-a4dc-433c48ec8584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a11a9fe-9ecd-473d-a234-118228318e23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aad0b724-45c7-41e3-b286-b49e5de671bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03e80612-307d-4a69-acce-0b9634c4d453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d846c1ed-0730-4f7a-9e25-ba141eddec32",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3fff4cd-1690-439b-bc09-cf68da99ee2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38e4e7d1-a059-4fec-bcc1-fe03b380d3be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "074b1671-4196-4212-81df-425073a21950",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "879e86b6-af99-4498-8ad3-43140d122a44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10aeec9e-eb80-4805-8c1b-01a17dfaca5a",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fec781a9-42c2-4e7f-bfc5-090381ed7856",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f2e58e8-d0b9-4db8-b7b1-80bd941e5454"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33b509fe-a0c2-418b-bf2b-697d811525d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c291310-c1cc-4991-9995-bee70bf54165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39ea74ed-4711-483c-82f4-b77f4dedac17",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50dfd343-55dd-4249-8200-2a5daab10d3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31e41150-e36b-4a18-93cf-2d7031c1e376"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "644e7f45-a2e8-4639-8bee-561c98c68477",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5387dfb4-1a17-4991-a197-f1757cb24ad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fb84a92-a50b-4462-8666-9f8f91262cb1",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd14b5b-baf8-4936-b561-5c0c0068f42c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1878e149-9d79-4b24-ad06-2db276e192d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d992a8-0606-4a34-a6ed-f99320bd66af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "530657a2-cb1a-495b-b1ba-4ebbfe0159c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa33d6b-bd38-40a3-b9d5-3e44a9dde9f6",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76738a40-2c90-4df7-ace7-44a3f677376f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "020f6c0f-5208-4748-a1e1-3bcccf326f82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39d86080-be55-4a34-9685-eb80009fab99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68b3b9d9-12eb-4f67-81d1-763e963c4cca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b72ee9f-716a-46e8-a042-072d2f9b1f43",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6cee9b0-a64a-43cf-b8eb-5e12b2f83419",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fae7fbb-e844-44ee-aeef-dcc590db362d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "659284c5-9183-47c3-8bbb-da377017d3c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6719029d-1ee9-437d-9ab7-8a9c3c267b6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7970e65-543f-497f-8cfb-4a52603ed72a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd3976c-16d0-45a9-8618-f16cba31b4f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f62a5ff3-ed8d-4459-8110-9ebc4621859b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c9174f-42e3-43fd-8398-6f558dd83fe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ca1e655-1992-4df4-beec-d45f312c2bbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58ba43ea-b2d8-4a7f-96a5-37dd16149061",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c889ca78-38f4-4f57-acde-8ad891180a47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2ef8e68-c4dc-4db1-b4f4-b7067aecffeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e066c0-38ad-4aba-b543-cc09cfeb5722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4512a2fd-d645-476f-9246-64751da1dc2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc237a5-eee8-49a8-b184-413cc29f6b18",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "015b947f-acba-4876-a842-6a9030f67ce0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5f40ac1-6085-437d-a41f-1f476389d03c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ba97937-6742-40a1-be48-4719e35c218a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9437ab0-a141-4adc-8919-195d3e587f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87297761-d224-48c1-89fe-0738b6ab274c",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93836b09-1d53-478f-8d2b-3272f2f6067d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc1c3a2f-5f62-4b53-88af-81af8a3966d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "049bb973-dfcf-4d76-9c6f-dd197d2338b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c58f1d1-58fa-424a-b8ad-9dc12b985365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c7d6cec-249a-400a-9ba7-b6db88ea111f",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0c250e6-b05d-4936-b545-5efcafb81593",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "633b1b9a-a7d9-42f2-8394-2178f01de6ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4292c9cb-7c0d-4bdb-ab8c-25533c316cce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99386883-b2de-438e-ae7c-081f89f394fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa317a7-4022-4e94-b03f-0c966879de75",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce170db6-4090-4696-902d-fa78fcc20cdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc1b5de6-2793-488d-87d3-20aad9cbec8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c37e4107-614e-4711-943c-3a3b0eb7a43a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c10a316f-ad01-44a8-be87-ef153c07e0ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc096d81-63b1-4d34-a04f-897dea46718c",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c0ee219-992c-4a3a-92ee-6a528b3e1b24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13a7a690-4dee-46b6-ad57-faaecd3141d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb400b1-18ee-4f04-b711-d8adc922c947",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20d3a344-4955-439d-a50a-674844aca2e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9906b7dc-1f55-4823-b8af-91223bc47238",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15813b69-30a7-459e-9664-d11a3ea284bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f6bb76d-3796-402f-8dc6-6461a2c557be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c97fe755-95b4-4fca-9809-8a8071ce76de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44ede39f-91ef-4e72-8423-1cc63069cacf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09994f28-d4ec-4d3e-a54e-3e23347e6ecc",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f528df6-e19b-4ab7-927b-d7aa42c6ce53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cec0c0dc-7858-4d6a-aea0-344c8df5066f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "888c528d-5da4-433c-98b4-059af6237f1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "816c00a6-3216-4bc5-b1f8-801a1abe9272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36cd0c34-dcee-466e-9d2c-c2798264f424",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bf8a9d5-84c6-41a7-9f19-ef1189a8d1a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad11d3a6-8de9-463e-8959-5b9ac950b74a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27c3bd6b-8f56-4b0e-ac35-34e7fe0c6e6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee3f79f0-1952-465a-93e6-d22597d398e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7283c17-fc41-4812-b4a3-68220f75f6a9",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61285753-0232-4fef-b78e-74f9a6bed5b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8317a962-c3c5-4d44-8620-9b7c6b0228ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c59ac5c-e716-4566-ae26-19034e8f93d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3787782a-5e0b-4afb-aa7a-dd46adbd2ef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab2df5ae-b77b-4675-b218-c1e2b85352a6",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b23a9135-c129-40a5-85d7-52809f08d892",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2705ef84-1048-4af5-86de-17c0c9a20131"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48bb2dc6-7c35-4359-a7e8-a5203f21b686",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d84df7f5-bb8b-4d83-a8f8-c331e797ffa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c7acca6-e2b6-42d2-94dc-feb0354e4e34",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "924fcf69-7ebe-472b-bb97-3b59a2992760",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31f5011f-9b16-4bba-a590-80cb8432c1eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb4419c2-a316-4cbc-a6b2-e2d0deb73c7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e527a82b-bf30-49be-8e7b-1e81cbf05b97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc308307-84c3-4832-ad26-2a94ca205a1f",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91fe128-7e6a-4762-a387-c22a0c8737e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa052af3-66b3-4937-8110-49d68a9ddf4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f99e9e3c-d63e-44b3-a88e-125f1c1906c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ec7e778-34b4-443c-ad82-c56bd3569524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06bb9cad-2269-4373-b2a1-bc01a49ba61c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf673c0-4b9b-4ade-99b5-06872bb3d123",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c556218d-f02f-4fc1-8923-a11736aaa1d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb48529-f4f3-4aa8-8daf-4ac436098c81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ee18eb6-0580-49be-b1a0-608ab4e03ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52cae151-6238-456c-baad-5217ba4f41ee",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a89202-0cc5-4a1e-8e72-53dacc3db9d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "249d08b9-c67f-46a2-a712-67c2e4602293"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76aa854c-bc6c-4542-8609-1f71423e2b53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8809b40-2be8-4bdc-b75d-47dcc30c839f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8764253c-3d2c-4d82-a226-a7805afeb430",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03aae76f-9d15-4e0f-b283-3f7eca1e08d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6897558-46f3-4211-a194-e21129f7ece0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe166664-7747-4314-9a60-6389e16c3deb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f1c48a3-8818-4d1c-a592-396dab58d952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a51c5607-749a-4262-a0a8-b341d62b9883",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24664def-aa06-49cf-98cd-920b5ec15a7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0c1fe39-d1df-42c0-b3b5-2e5397e280d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "723c359e-d509-42f5-9834-8ec4b63e08a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be7cdbcd-acd2-437f-b8dd-2c6b1cf812b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "304d1f3e-b587-47ba-84b8-2ad5a2a5e3d8",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78ef2e38-5aef-4681-9d3f-fe5e0117724d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5034a08a-2c03-4f74-b2f9-8d140d4a715a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5640242e-807e-4b94-8720-af7d30989cdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f763e84a-f2d1-4d8a-bf79-40ba31146046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee3328c-bcf9-46af-a76b-088247f0e2f2",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dcedf84-4267-46c4-9e9e-158c425c6309",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3502298-7b1f-4c50-ac35-1fad626c4f73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "227d83ca-93ef-4c7b-b599-506841baff61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e51b1fc-b3c8-4bbb-8da3-f903f3d43302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ec24350-c826-4ff0-ab3f-7ea4f059384f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51cc629c-741c-45a6-a35d-64377f9012e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "738bdc83-f3a9-4aa4-901b-c3c1c73b2ad6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0870e38-9cbf-4e63-9894-5e4906471160",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "662eee05-bc84-4028-b127-596aa04e03a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81b817af-24f3-420a-953b-545c70b39bad",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a4751f-548e-436f-b3ba-2430c6c8b6b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee31689b-363a-4ea4-8ab3-2179191ab994"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a0d1e76-2d8d-41da-9ff1-611910c0be90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45ccc3d6-a43a-4f0e-bed8-79c6c5cbee3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75a3b110-6504-452e-a5f2-d273643b8344",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ed389e1-099d-4efb-9af2-eea0d29aace3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5069b8aa-d206-4610-87c7-a44a7ca57560"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f58ad35b-8cba-4b41-9aeb-56daafcbb5c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5f190be-a8ab-41d7-9e92-9168730cbb9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d96bbcbc-c792-4df3-a642-18d00a1809d9",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f063c81-37b6-4ef5-963d-bf784349e481",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42b8f485-b821-48f5-a9a9-4640ecf2772d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8130c95-7b6c-44b1-9a17-26888466bf66",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f85b1f94-074c-401e-94ab-22c8201f8bce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7795819c-2381-4801-8a40-209521ac2d61",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77b11d9a-6140-4e5b-b5b0-7e268c31e748",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "950f2c60-eef1-4aa8-928b-5745eb371e51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b39ce74-cc38-4c26-8cf1-eca7f1de94c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78d4b51f-4f2e-48e0-b41c-5063bf350e61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf3213a7-44e8-468f-8470-96738a0a7ef7",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33c20de1-4237-40b7-a6d7-45b17abc0b25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d04a13d-1015-44b8-9592-1e2a82b06672"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef340b14-423b-491b-9e8c-2d8a92c3d7c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "001819c4-22c8-44da-9b3f-8760d380da36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c687d8-0454-41b8-b5cc-8b9172baa565",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3c576e9-9ff5-4fd4-830b-33cbdc7d66d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cfbc15f-2d3a-4fdd-9eb0-1a4832885f9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "954aa81c-80c7-474b-a309-baf25a7088e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ce41ac3-deee-4a47-85c4-f436e9a8753d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08c63618-4c53-4653-a404-c34bae428ac7",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e64130-543c-4945-90ba-574947f73c9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d842a28e-48dd-48bb-8ccc-7ddc9fb4177e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7267132b-a595-4aa8-aca2-a23ff15d5a29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d953d9d-facf-4f2d-b7e7-79c518e1df8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2628d609-7ba8-4696-a565-f9f9fe07efb0",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4abf7e19-3164-4ce7-a1be-28a07344802a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64dd7cc6-1140-4f6c-9318-b01f0cc103d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bed95a4-c787-46ec-9d18-850da2f6d148",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a9982cb-c8b5-4dbf-ac51-d09e783cfe10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1feceeb4-f756-4de7-9600-b4ad1dc3ad8e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3961c697-fa87-4b1d-beb6-08c0973d416f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "432d901d-62ab-4c95-87f4-6a099783728c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e033b7d-805a-4980-97a5-00b051b662b8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4663040-43a7-4083-a16a-f88373dc3470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47a3a46b-98ba-4bc3-816b-603c91add892",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16d63db7-53ee-4099-90e4-d9beb0d45d94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46ee0803-7f11-4ff1-8d77-5517cbdc942a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c57b6f9c-555f-46dd-bb7d-263e31c49f47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36abb631-b0b7-4441-ac2c-22b3557bbc0d"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee38a163-f9b0-470f-8b3c-84fb0ab01408",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "80a5e1c0-fd76-46d9-8d9b-f7b5d6ae36c6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d8c8476-2138-4ebf-a9c1-8ecaed363733",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "81611c12-4731-474c-b6fd-6cd4d8e1d3e9"
                    }
                  }
                ]
              },
              {
                "id": "0e29ef81-bab6-46bd-93e2-bbef30fc9821",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "11c05827-a8f7-4e02-b5f9-2d43da12e788",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20753fd3-c91f-448a-b7f4-ee00df1883b9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b6c26548-3707-4b00-86e8-d05e4fe25af3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b92a0e80-c7e0-4ec8-b1ec-bb7086fd6f18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d96cd22-ac9f-428b-acea-d65f5b95abdb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2e626062-7263-4b61-8437-1934dc671ef1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d8fac92a-6d49-4445-9f51-97c7e200d8a0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8f9c48df-ba3f-4925-82c1-3dd7a6a1a159",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4a974719-f217-4fef-b90e-b5be098e869f"
                    }
                  }
                ]
              },
              {
                "id": "ecf7436d-4edd-4705-96d0-084b7252c18d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "630a8e79-d5a3-4a92-8105-3ff48fa82ad6",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f9fa33e-f7fc-4940-a5ab-6e4c7e744395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "6c512c52-1c71-4cc7-9bc8-dd5d415114ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ab4665b-935f-4af1-bfa1-198ee9bcdc59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a53a573-d152-41b7-9dd5-33e83aac8b60"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "217712f2-bea0-4429-b81a-213968a88d06",
            "name": "Positive Testing",
            "item": [
              {
                "id": "21845c63-69ad-4af4-9a34-30b48fbc79a7",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9dd5a87f-723d-403d-8382-5dae798fd4f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1b190d49-6c80-405d-8942-f308f40e613a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "34002480-4469-48fa-89bf-e4191d8ff153",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0339baa1-e827-4714-a8e5-2c599a4cfe01"
                    }
                  }
                ]
              },
              {
                "id": "598013cb-f50b-4351-8c9c-6943acf67569",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "af678bb7-7e3c-4a3c-989f-99770b438e07",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "303d62ad-67a6-4852-a9f0-18ce859c9211"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2215c336-94a0-488e-98f8-a47bc75df1ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9ba7e8c3-6f03-449c-a169-ccb652f72ddd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a544e440-cd03-4cdf-bd5a-26a869be10d2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "650307e9-af0f-4019-aa37-22413183470e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "15b49237-30dd-414d-8f29-bf3dfc245e3e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5490dea4-fc64-4c6b-ad1b-fa754dac0b52"
            }
          }
        ]
      },
      {
        "id": "75425f75-dac5-411f-8c42-ede6d579d1fc",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "1363d7ec-ea4a-40e6-ab1e-4c1032729421",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d8e37e9d-0c64-4abe-98b7-7de0f75cd79a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ed776845-5656-4dae-bacd-6cfa6ca2de9e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c68974d6-c1fa-465c-b24e-be8041d10acf",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "dcd3d03e-9190-429f-90e1-c4d229b2c04a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4216fe8f-55d0-4604-a4a9-88098f738f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7267a44-c2df-4277-b913-dae0f5024bbd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2fd59527-eaf7-47f1-96e4-7fc16e213a23",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1ce6577-ee64-4ff2-9429-58bf7665ae8a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5de6d93b-2a26-4e28-a9e2-2c14457c29eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c60d012d-7c34-438f-9397-88e80f2dd563"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0deb2bb4-492d-43c8-bfa9-6dbd1be6eb23",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a09faa68-88ae-46c3-8623-db49dd5019aa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c06016e5-2f98-4164-9b2a-3782e920f5fe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ccec33fd-70c8-4d87-aabd-eef27b40068c"
            }
          }
        ]
      },
      {
        "id": "8e17541d-7d3c-4670-a707-07a42bf6c3ea",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "3255e4da-24db-47e7-b8d5-d99f281396b4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2c7d0dcc-1c01-4e47-a639-555f2d13f161",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "78de6697-1fad-46b0-8382-c1f4a3fcb6d3",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6656da88-a003-4487-9d85-d4a157e588dc",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "85381eb5-707c-45b4-9da2-fe07b1011b41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cad0112-fb67-4939-90be-828e0fb038cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4cf19611-6611-45b7-9df4-e1f3cf5b1108"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0685dc6e-e43b-455e-bafb-7fe4457d77df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5233b765-bcdf-44ee-89c6-ccf4f8a7e2cf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "125c642b-f03f-4086-b771-f2d6f58221b1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c440e438-1710-4db1-b7a4-c8ac21bdd038"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "be4b2090-5df3-49ce-83f0-196536f4ee6a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ac5ed37d-7cea-449d-b366-43d245bdcae1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7dc8e11f-ae0e-4b18-9b63-05b3f56f3035",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3458cc30-7444-4a09-becf-9cfcf050bc57"
            }
          }
        ]
      },
      {
        "id": "e095ff2b-0889-41e8-bb0a-e44a102e8166",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "0450104d-5495-464a-966a-ee0db0ab7c83",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0afb9711-dddb-4657-99ae-b1d4fc9ba3fd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1fca4924-85ed-4a77-b5c8-33ff91bf0768",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f994641c-6dcc-4637-b2e1-607f2b1cf1b0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6b3bd4ad-3665-4ce5-b477-88b94a9efdc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "deffd683-2424-4153-8f61-aa54374d879b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "de0b77f7-39ba-45c9-bc58-65f14ca9656e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d7bf37cb-f23f-4c03-908a-db66f83b6950",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b00786f1-ec8e-4d9d-a07a-6a9720929f33"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc328bfb-e3a9-439d-a0ae-18a59401f793",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eab9070c-b374-4c73-8b8a-bf4c93391535"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "40856d0c-2641-48b2-bcaf-b430f6c6ddf4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7f098643-1ab7-4619-9af2-4c7c77fd8ce9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2d2c59ea-65c2-4579-88ae-381862e1b417",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "70ede1cc-41e9-4de4-8eb8-0d82fcb46e29"
            }
          }
        ]
      },
      {
        "id": "1d3e4f4c-c209-4951-a956-c575fc1aee44",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e1330c45-f773-4262-a5cb-7eeee8689515",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "20058d36-19e7-4b9c-a6d7-4715d1df7673",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "aa754d22-af70-45f5-bc31-cd2b35d0c903",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "09a760b2-e0a6-4887-a18c-73e7528960e7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7adc8c66-bb4c-4c42-b7a2-bd0075e0d594",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 69.2421052631579,
      "responseMin": 10,
      "responseMax": 637,
      "responseSd": 85.32822684974927,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1707007024918,
      "completed": 1707007053941
    },
    "executions": [
      {
        "id": "b5fd155f-f91d-4d30-b5a6-f9f3c4409300",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ac119542-5905-454a-8df5-227c944e962e",
          "httpRequestId": "78044b3f-9a02-4d21-91c0-ae4bc66f3fc3"
        },
        "item": {
          "id": "b5fd155f-f91d-4d30-b5a6-f9f3c4409300",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "33d300a6-0d6e-4dbb-ab27-c254520eb412",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 0
        }
      },
      {
        "id": "ea5d48e5-9db4-4ed2-943c-c14d73e8ce46",
        "cursor": {
          "ref": "4133320f-68dd-4734-9476-14bc6706c73d",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "986cff0e-87a1-4679-9e33-1181576ae5dc"
        },
        "item": {
          "id": "ea5d48e5-9db4-4ed2-943c-c14d73e8ce46",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "c276c113-eb98-4f20-a403-ac253393626b",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "3cf3fa35-aade-4082-8470-15f2349a21e0",
        "cursor": {
          "ref": "018b90ba-219a-417e-b9d6-b4ed5918c637",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "7f0ab046-e3f0-46e9-8a76-1b926a0fa556"
        },
        "item": {
          "id": "3cf3fa35-aade-4082-8470-15f2349a21e0",
          "name": "did_json"
        },
        "response": {
          "id": "ebc4da39-0703-4a59-b8bf-a0a4ab8a1907",
          "status": "OK",
          "code": 200,
          "responseTime": 207,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ef9d959-a055-4be2-b305-9b1c15171a0c",
        "cursor": {
          "ref": "44051b1f-bd04-4db4-8cd3-9a01e8c308ed",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8d46e75c-e296-4876-993a-b45953e087bf"
        },
        "item": {
          "id": "4ef9d959-a055-4be2-b305-9b1c15171a0c",
          "name": "did:invalid"
        },
        "response": {
          "id": "c9751ed4-2bdc-4a75-865d-c251921604bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ef9d959-a055-4be2-b305-9b1c15171a0c",
        "cursor": {
          "ref": "44051b1f-bd04-4db4-8cd3-9a01e8c308ed",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8d46e75c-e296-4876-993a-b45953e087bf"
        },
        "item": {
          "id": "4ef9d959-a055-4be2-b305-9b1c15171a0c",
          "name": "did:invalid"
        },
        "response": {
          "id": "c9751ed4-2bdc-4a75-865d-c251921604bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4125737-d70c-482b-b9b9-4ea30fd339ad",
        "cursor": {
          "ref": "70e58f8f-84bf-477c-8d45-41ddb2911f00",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9c55dae6-ffd5-44f3-a673-89cf8ff4174c"
        },
        "item": {
          "id": "e4125737-d70c-482b-b9b9-4ea30fd339ad",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "bf89b1a8-2b02-4c7a-9881-8ff00e4a758f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 82,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fef3aa7-10b0-4d26-816d-3f8f76387d8d",
        "cursor": {
          "ref": "23f0b7ca-2daf-43da-882f-6321372e327b",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e062caad-894b-404b-ba93-848df429595f"
        },
        "item": {
          "id": "0fef3aa7-10b0-4d26-816d-3f8f76387d8d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b1bbaa73-9125-434a-bf53-36480051aa88",
          "status": "Not Found",
          "code": 404,
          "responseTime": 39,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c653e868-218f-4269-a106-b07a4ebb3eed",
        "cursor": {
          "ref": "6615c3be-612a-4e0c-b46c-548f0d790052",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "400b4b50-3552-4a90-a9e1-d051509e15c8"
        },
        "item": {
          "id": "c653e868-218f-4269-a106-b07a4ebb3eed",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "5760b590-ce60-4140-a450-f9499d2aebba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "122504ca-6452-4064-b728-4179fb7d7e19",
        "cursor": {
          "ref": "37c3ccc6-c283-4d22-8f72-afd895a7fdec",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9cdb5ecb-6a6e-4346-9ac4-9061bf91e535"
        },
        "item": {
          "id": "122504ca-6452-4064-b728-4179fb7d7e19",
          "name": "identifiers"
        },
        "response": {
          "id": "4c2217e7-c620-4aac-b144-c98e800ff9de",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc3cefb3-5e4b-4d3c-acc7-1ee12cb69e28",
        "cursor": {
          "ref": "9bc9cb0b-205f-440b-aa6b-e64f93cd2ff8",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "5153673f-3ae9-4619-927f-5fc93ffe2c50"
        },
        "item": {
          "id": "dc3cefb3-5e4b-4d3c-acc7-1ee12cb69e28",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f942bf91-6a33-434e-99bc-5fca2072d048",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3774dbe-486f-475c-9065-e04929267b8d",
        "cursor": {
          "ref": "d7f48423-d42d-4168-ab19-2858b2cf2a17",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3fd6b412-27ea-4fb0-8022-923bc63b7dc9"
        },
        "item": {
          "id": "b3774dbe-486f-475c-9065-e04929267b8d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "7d368b32-6aef-41a1-bc66-4fb020df434d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ddf2a35-89d1-4759-8d6e-78d4adc28bce",
        "cursor": {
          "ref": "7c0155ac-3909-410c-8a85-5b6f9c6ba137",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "36ab1b30-0e83-41d0-875f-0ecdd849d1a5"
        },
        "item": {
          "id": "8ddf2a35-89d1-4759-8d6e-78d4adc28bce",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "abdaf623-52b3-4158-beaf-df2976c7ffd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c37a2b4-d8dc-4a94-a8a0-c7c414501c6b",
        "cursor": {
          "ref": "57b57e89-2a86-4256-872e-a121c227b4db",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "35b18ab0-4e11-47be-b187-5ff651c52248"
        },
        "item": {
          "id": "3c37a2b4-d8dc-4a94-a8a0-c7c414501c6b",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "114ed802-60fe-497e-9845-beb0d14d555b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f4be521-84d2-48fd-bc97-e86b1fa51c5c",
        "cursor": {
          "ref": "c10effd6-c79d-486e-b768-10864defde6a",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "c8969d1c-6c37-4a04-b985-319a864acb0d"
        },
        "item": {
          "id": "8f4be521-84d2-48fd-bc97-e86b1fa51c5c",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "7fe3ff1d-7c19-4987-bdf0-6305f766b5df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f51666a-c8f8-41ac-b517-27bcabf92da5",
        "cursor": {
          "ref": "7b7f2c09-42b4-40ef-a274-dba2011f05c7",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "c5722527-5e6e-42d5-8638-91077d0cc1fa"
        },
        "item": {
          "id": "4f51666a-c8f8-41ac-b517-27bcabf92da5",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "1051ffd2-0fe1-422a-b821-6ada2d91ba8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e962c6c-cee3-4e6d-ba30-4574f5c55a99",
        "cursor": {
          "ref": "479cd2a7-3ffa-464b-bdd0-dd6c41cae3bc",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "2d941154-4104-4034-b76a-dd9ec844f655"
        },
        "item": {
          "id": "4e962c6c-cee3-4e6d-ba30-4574f5c55a99",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "7d55cada-1704-451f-8ebd-5c9f03b33ffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "307b0996-0446-405c-9433-f25310799187",
        "cursor": {
          "ref": "903747ae-4edf-4da6-a01c-624a4a12f23c",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "7e722b48-6f0c-4c88-8351-d7ff3dcd1c33"
        },
        "item": {
          "id": "307b0996-0446-405c-9433-f25310799187",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "d8474eef-d665-435d-9085-650522100e7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98405388-284f-405e-8939-4574c9750992",
        "cursor": {
          "ref": "3f754cd1-962f-407a-8347-6cd497aff79c",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "bccdc281-b954-4d91-aeed-6202d6c2819a"
        },
        "item": {
          "id": "98405388-284f-405e-8939-4574c9750992",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "6a2082cb-8429-4784-8494-340126c06e89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21c32f6d-4d4f-4248-8d95-c780cf51525a",
        "cursor": {
          "ref": "aeaf2350-849a-4583-aabf-13b6c64be7ac",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "18766093-a26c-40a2-b4f3-ea98e9dec89e"
        },
        "item": {
          "id": "21c32f6d-4d4f-4248-8d95-c780cf51525a",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "c5087503-d0eb-490a-ac68-c82aee2573ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1f8c5b5-42d5-4685-baea-5386dc237307",
        "cursor": {
          "ref": "eb867ae6-b8b8-476d-a56a-404abf80767f",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "0909d59a-9b61-4563-bf81-1f096a1ec2c5"
        },
        "item": {
          "id": "f1f8c5b5-42d5-4685-baea-5386dc237307",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "da657e1f-a625-499f-947d-4a35de67e641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1949529a-fd96-40c4-bcba-4a60ad497ad3",
        "cursor": {
          "ref": "7e666665-35fb-4d9c-a51a-1d4fc7bbde35",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d7d509d2-5046-46f4-be2f-b78b084b48ae"
        },
        "item": {
          "id": "1949529a-fd96-40c4-bcba-4a60ad497ad3",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "e9246897-1a04-48f4-ac48-ea213601b3a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a3fb55a-1c73-4589-8a6d-d44954658ab8",
        "cursor": {
          "ref": "a47c0a61-dff4-4152-b171-def73b0b12d4",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "57abd64d-fa73-47e5-b68b-bdb006a2c0e4"
        },
        "item": {
          "id": "6a3fb55a-1c73-4589-8a6d-d44954658ab8",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d1e45e8b-b2df-4c25-a779-b45abb74f71f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f47b8d5c-54f0-4284-9619-b60f6c9334d3",
        "cursor": {
          "ref": "8cd97703-77a4-4da0-8301-372c455fd89e",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f311db94-36a1-465b-97c6-f04297d147bf"
        },
        "item": {
          "id": "f47b8d5c-54f0-4284-9619-b60f6c9334d3",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "dbe2e26c-702b-4985-96e1-0e0b088627b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c92f6eca-24dd-483d-8abf-62946d49592e",
        "cursor": {
          "ref": "80676d14-487b-4ad2-b338-af48dc258829",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5b2e3a21-aa04-463f-b1f7-478e089a434f"
        },
        "item": {
          "id": "c92f6eca-24dd-483d-8abf-62946d49592e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "eda6aad6-749e-467c-a0ba-18808ef42877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e9ae254-30ba-4b54-9d18-c9661db6c801",
        "cursor": {
          "ref": "79cedf94-6a0b-439a-a14f-5dbfb4499130",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0f4ed84a-c825-4e45-8758-6e927f553552"
        },
        "item": {
          "id": "0e9ae254-30ba-4b54-9d18-c9661db6c801",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "51f4dccc-88f7-4eb4-a86a-2f12f6298934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "599be4d2-f91d-4af0-84ba-8fb8602dd66f",
        "cursor": {
          "ref": "dec6f8d6-c153-4496-a0dd-0987c47dd416",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "3fcaa347-1a19-4f74-870d-4cffb0ede738"
        },
        "item": {
          "id": "599be4d2-f91d-4af0-84ba-8fb8602dd66f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "4b47b504-28c1-4393-b608-76f2df5b8971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b55ad8a7-2f4f-4b60-8d69-8876a0662637",
        "cursor": {
          "ref": "bdb79301-766c-4a67-8671-bd14765cf297",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "2d96112c-a738-4092-ac01-2d3257b0edc7"
        },
        "item": {
          "id": "b55ad8a7-2f4f-4b60-8d69-8876a0662637",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "3470c800-0c77-4495-bc71-ed0386d79a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "967587f9-f87b-42fd-a041-fbe96e0f2727",
        "cursor": {
          "ref": "5fded4e6-2ffb-46ab-b112-ae2f8efeb16f",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f755cdbe-d5d8-499a-ae8c-128b77f9eded"
        },
        "item": {
          "id": "967587f9-f87b-42fd-a041-fbe96e0f2727",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c930665d-47fc-4f48-a5a4-3f04a7d229b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "715a6b18-8b81-4241-bcc4-ab0495429c24",
        "cursor": {
          "ref": "0236923b-18ea-4d98-ae49-895a6efb7e5f",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d7517538-303e-48bc-bff7-665a203fdf91"
        },
        "item": {
          "id": "715a6b18-8b81-4241-bcc4-ab0495429c24",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "678e7021-3e7a-47f3-b004-64358e5c7ae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7a8b559-26e5-414d-9468-a905004913ac",
        "cursor": {
          "ref": "a1b5f58e-5128-48f8-bb58-48ac5ff186cf",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a1e7853d-d96f-4355-9217-6f2aa5c6830b"
        },
        "item": {
          "id": "c7a8b559-26e5-414d-9468-a905004913ac",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "623c7225-57c3-4fe9-a345-e210c35c35d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abc1e026-ced8-4426-88ff-c54ad4d956ec",
        "cursor": {
          "ref": "833e2bb3-cfd7-44c8-84d4-604f6573bc8e",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "19486b8c-1c9b-485f-a72b-e7474887103f"
        },
        "item": {
          "id": "abc1e026-ced8-4426-88ff-c54ad4d956ec",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "280db845-2459-4980-8c4d-132633a27bf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae4c2603-29d4-4b90-aa53-92caf16451da",
        "cursor": {
          "ref": "2304e299-ad2c-49bc-88cd-73b2869a5a27",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "60d3e558-59b3-476b-9d61-6e9f3cb52044"
        },
        "item": {
          "id": "ae4c2603-29d4-4b90-aa53-92caf16451da",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b61d3271-528a-4722-9448-05a591ec315c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bf9a949-1a42-4cb1-9ce1-f43013253566",
        "cursor": {
          "ref": "4b1e8f36-da83-4818-816a-4980f9fec95b",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "027b92aa-8fba-424b-9a25-ee799cf03da6"
        },
        "item": {
          "id": "0bf9a949-1a42-4cb1-9ce1-f43013253566",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c83c44cb-940a-4d49-9714-c2488910df9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8368324-ff21-4785-b1af-0b5f44c1ba2f",
        "cursor": {
          "ref": "71d6b5a2-816e-442d-be97-90c464bba543",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d214acb4-dd90-4fd8-85ab-8b8656a0b68b"
        },
        "item": {
          "id": "d8368324-ff21-4785-b1af-0b5f44c1ba2f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "ce7e213b-9020-4889-849d-9b67926207d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b520731-b70f-4720-8069-1e184c9feb5e",
        "cursor": {
          "ref": "59e52ec1-7f8c-4a55-9ad0-ca01494eea7d",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "087a83fa-7b20-4048-aee3-c864541fa6a8"
        },
        "item": {
          "id": "5b520731-b70f-4720-8069-1e184c9feb5e",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "febe60c9-a80b-4da7-bbcd-c0ac742c7463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e9b5a6-dac7-455b-85e5-cd2aca1523ce",
        "cursor": {
          "ref": "603ac0d2-7718-4b1a-8019-4c803529c0e3",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "140574e2-37c6-41ac-8730-867d72b3b67f"
        },
        "item": {
          "id": "30e9b5a6-dac7-455b-85e5-cd2aca1523ce",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "78419be5-b64c-41de-813b-5f9fb4778780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0510639d-3ae8-4052-a376-657f6cbb9d25",
        "cursor": {
          "ref": "ccfc6d29-31e5-4843-94d1-839678af9ee0",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "2b20b482-0ccf-4859-bbeb-c5f6406709ab"
        },
        "item": {
          "id": "0510639d-3ae8-4052-a376-657f6cbb9d25",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "e2fc8d09-57fb-49fc-b231-149fc6114582",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69133a20-9b5b-480e-b9d1-e6e4d112ac3e",
        "cursor": {
          "ref": "8919fc23-d788-46a1-8a5e-22cbe3b78a23",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9acf63af-fa1a-48f0-a623-b6077fd91c8c"
        },
        "item": {
          "id": "69133a20-9b5b-480e-b9d1-e6e4d112ac3e",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "8f9c47e7-6e02-4fb0-9dad-9c59c2c58ba6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab0c0c10-d875-4d72-b1c4-cb3734d22d32",
        "cursor": {
          "ref": "463646f7-7b8a-42c3-b9fe-c024dadb0839",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "46c45ddb-7a60-4955-9900-d0d6268dc4c2"
        },
        "item": {
          "id": "ab0c0c10-d875-4d72-b1c4-cb3734d22d32",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "a5a713f8-7801-499e-aa04-2f403ba0d6dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e0df2b-5883-462b-a6a7-a86617d059e4",
        "cursor": {
          "ref": "cbe49744-7255-4f2f-b4e0-0f549ec543e4",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "fdc02b58-a971-470b-ab5f-da286c5d0d9f"
        },
        "item": {
          "id": "47e0df2b-5883-462b-a6a7-a86617d059e4",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "fc7f63e1-42fc-441f-b0de-f52b95cec291",
          "status": "Created",
          "code": 201,
          "responseTime": 637,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "80c35815-2a84-48a8-a97d-d5dbcead90d8",
        "cursor": {
          "ref": "627ca92b-1b50-44ce-80c3-0b9b5b0b0799",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "d381b718-1386-42e8-b04a-c966e13d2c34"
        },
        "item": {
          "id": "80c35815-2a84-48a8-a97d-d5dbcead90d8",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b3b0078b-61c2-49b0-a512-1082806d36fb",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "ac2add7d-964c-4aa7-bf77-b9011a0c3302",
        "cursor": {
          "ref": "89601fcc-d935-447e-aefa-9769d3fdb49b",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "472051f5-1ca0-4568-9d19-b792a465f875"
        },
        "item": {
          "id": "ac2add7d-964c-4aa7-bf77-b9011a0c3302",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "51afe28c-a716-43b1-adba-5d3fcfa54e19",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "59720f67-8040-4ce4-b666-dd27afadb8f8",
        "cursor": {
          "ref": "43f0eb9c-b285-49ce-b8f7-55b662a43062",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e89b4eba-2d58-4f49-9370-c7aa186e0e26"
        },
        "item": {
          "id": "59720f67-8040-4ce4-b666-dd27afadb8f8",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "e54ae518-d049-4349-b41b-2d1cc207eab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09ce5372-e917-43b1-be08-937411f98664",
        "cursor": {
          "ref": "a37ca70a-ecef-4924-8c0e-efa51cf83f90",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d3709b46-72d3-48b6-b0a3-3c981318308e"
        },
        "item": {
          "id": "09ce5372-e917-43b1-be08-937411f98664",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "68b8806f-83bd-461f-9111-0a7f139d0d13",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "82e206fd-f703-4a7e-ba54-7f59274717a8",
        "cursor": {
          "ref": "07ae1cfb-2d28-4a1a-b3e1-41013214e79c",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "8397b0fb-bea2-4483-9799-af4934826807"
        },
        "item": {
          "id": "82e206fd-f703-4a7e-ba54-7f59274717a8",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "81e8335f-28b1-40e6-a940-35a5e7084a83",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "8780c9a6-f48f-4ce0-9673-10f8a750a50d",
        "cursor": {
          "ref": "dc2ec3ce-531f-4cae-978b-b80ea1efb35f",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "7b9be8fd-7c52-4bb7-8da8-b7d0ffdc68dc"
        },
        "item": {
          "id": "8780c9a6-f48f-4ce0-9673-10f8a750a50d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c43d7b4f-7f99-4efc-8524-e28e7cfb030e",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "c7e40a7d-7ec0-441f-a7bd-21a3d3281576",
        "cursor": {
          "ref": "d452a48c-61f6-4ae7-b4ef-e113560b8378",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c9abe862-06cf-4b88-a141-c2bebd2f4d20"
        },
        "item": {
          "id": "c7e40a7d-7ec0-441f-a7bd-21a3d3281576",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "751d83e4-55c5-470f-b773-20163b77a765",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "9b7ddc1f-7db7-4a4b-a14a-69e80da6603f",
        "cursor": {
          "ref": "a6b4b2e3-b48a-42e7-b852-4ad235dfa52e",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ab3a219e-c488-4a7f-bd0b-40ce0c74361d"
        },
        "item": {
          "id": "9b7ddc1f-7db7-4a4b-a14a-69e80da6603f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "b723dfb2-1290-44e4-b49e-8fa2477489f9",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "1f92f6e8-b2e6-4777-add7-7d55af392e01",
        "cursor": {
          "ref": "a19a233c-d336-47eb-94f2-69605841addf",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b261cee5-325b-4c5a-a42d-f074c585499a"
        },
        "item": {
          "id": "1f92f6e8-b2e6-4777-add7-7d55af392e01",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "e97d2279-f864-4205-8abb-a4f50fd7df66",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "a7d20870-7900-48c1-99a1-31adbbf1dc3e",
        "cursor": {
          "ref": "eda65ef7-d7b7-4896-9c9e-0c1c0ac701aa",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6edb880e-1488-48b1-8910-1a8b82a45412"
        },
        "item": {
          "id": "a7d20870-7900-48c1-99a1-31adbbf1dc3e",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "c9fb9b5c-9066-4ee2-a2b7-0648f87b30b2",
          "status": "Created",
          "code": 201,
          "responseTime": 345,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "a8168927-0e4d-4e20-97a9-3c97af9adcdb",
        "cursor": {
          "ref": "5e2f2782-942d-434b-8d4c-db19b28ffd15",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a8223bf5-9097-4d79-a2de-6a1e69788b81"
        },
        "item": {
          "id": "a8168927-0e4d-4e20-97a9-3c97af9adcdb",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "575de2a1-4d68-417e-a73a-7cb6e0d621fe",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "cda3febc-fce9-461a-84c9-23a40c0f6991",
        "cursor": {
          "ref": "6b934cb8-e891-42bf-8ed4-dd0bdd27fbda",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "de00a2ce-0e6a-4536-bba9-0747446a9c32"
        },
        "item": {
          "id": "cda3febc-fce9-461a-84c9-23a40c0f6991",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e4dc0602-340a-4251-a95d-c063fd1d101d",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "2e367489-8a93-4337-bf69-2206e0c89f32",
        "cursor": {
          "ref": "85a76cab-edbd-43de-8f31-69a4e633c99b",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "375dd52f-1c4c-4259-b57d-0aa9af3eccce"
        },
        "item": {
          "id": "2e367489-8a93-4337-bf69-2206e0c89f32",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "914584a6-a717-4a0c-b548-cb95bb179dce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "689e7959-5edd-463c-85ba-498f36005af4",
        "cursor": {
          "ref": "0ede1bf7-20a7-4eb5-a5b4-c7f692d6c143",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "52c2cd74-8ec0-4730-bbdb-40b396b55a6c"
        },
        "item": {
          "id": "689e7959-5edd-463c-85ba-498f36005af4",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c23fe713-98ea-4869-ada6-5e161b11d09a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "658703f4-3589-4c5f-8d2a-55e0e6ee8b80",
        "cursor": {
          "ref": "99f1e016-28fc-44aa-a141-8f9aecf2457c",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d7dc833b-790e-4f36-92ce-199b6f0df51a"
        },
        "item": {
          "id": "658703f4-3589-4c5f-8d2a-55e0e6ee8b80",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "cd4a67ec-e9b6-418d-9a5e-4d3abf79f68e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2e5b466-c741-40b9-84bc-9db5c8f68d0d",
        "cursor": {
          "ref": "c793e22e-78c9-4208-b1b8-e296ebf3cb53",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "8653aaa4-fc87-41e2-bff8-84b8026f7487"
        },
        "item": {
          "id": "b2e5b466-c741-40b9-84bc-9db5c8f68d0d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "ef6878b2-f515-41eb-835a-e24633c3b62b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7edad3cb-a5f8-4626-9250-42c4a94f63b9",
        "cursor": {
          "ref": "2eed29d1-60c7-407b-8735-aadde63903cf",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "4114ecc3-b339-4103-a59f-3ee92edf8bef"
        },
        "item": {
          "id": "7edad3cb-a5f8-4626-9250-42c4a94f63b9",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "97c73645-b8c4-42f9-ade6-7ff065309bc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1215f947-221f-43b9-9d39-59fa39a0b5c7",
        "cursor": {
          "ref": "02945166-7e47-47e0-aa1d-e9401face9a2",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "7e3c7e84-ff6f-42cb-a16b-da3201831823"
        },
        "item": {
          "id": "1215f947-221f-43b9-9d39-59fa39a0b5c7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "236da0eb-af36-43da-8b5d-2c22e0ca0381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a72dad8-dd8e-4284-8c4e-f950f478e50c",
        "cursor": {
          "ref": "05148b30-dde0-4427-91f6-f09ed453f129",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f6fc492b-4c64-4ef1-9aba-f3a618beedbf"
        },
        "item": {
          "id": "0a72dad8-dd8e-4284-8c4e-f950f478e50c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "4663138e-6858-422e-8fbb-329f74b1aecb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4b40a4e-efe9-4bf1-8a47-2dcb0fb2fe66",
        "cursor": {
          "ref": "c3cacf1b-7780-434c-bda3-be0ccaff0f1d",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "06fd5951-bfca-4222-8f61-b2df3533b07c"
        },
        "item": {
          "id": "e4b40a4e-efe9-4bf1-8a47-2dcb0fb2fe66",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "9f4ee91c-6242-4a58-bcfe-44765fa98a0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d274369-d441-4d8c-b511-d96be01184a6",
        "cursor": {
          "ref": "8f58dee9-4191-46c7-ba5b-fdeb28e17824",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "167ee3e1-a854-425b-bbb3-78a8c59cced4"
        },
        "item": {
          "id": "9d274369-d441-4d8c-b511-d96be01184a6",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f432a97a-2156-44e2-b6e0-fba43626c3f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d405190b-31e6-4008-9044-5fb430092b8a",
        "cursor": {
          "ref": "5b754a22-98d6-49e2-990d-b0ec0f0015b3",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "3fdfab95-bacb-48f0-b63d-fae0afb65b82"
        },
        "item": {
          "id": "d405190b-31e6-4008-9044-5fb430092b8a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "f98c2ad8-8067-4d5b-98da-ef8277a7456b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e407e4ba-1482-4ebe-8472-b9f0cf747c2e",
        "cursor": {
          "ref": "16d288b1-82d6-4db3-be55-a3609a838101",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "3e7ee725-a758-41a0-b6c4-04a51e210916"
        },
        "item": {
          "id": "e407e4ba-1482-4ebe-8472-b9f0cf747c2e",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a72fe160-0ffa-45f6-8796-ff899724951f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b420f440-af02-4a9a-8c16-353d4455bfc0",
        "cursor": {
          "ref": "35001dc2-d0f5-4807-b300-71573aeb40cc",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "28cfe3ec-756f-4bdf-914f-7ee828f42a64"
        },
        "item": {
          "id": "b420f440-af02-4a9a-8c16-353d4455bfc0",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "9ba4dff9-d0b1-4a41-9ab6-f004c786f559",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aae44e2d-852d-4ca4-97a9-53ef16bc4ba3",
        "cursor": {
          "ref": "dd9dc140-375b-43cd-b8dd-12d5b3468cf9",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "607cb692-bc0c-466b-ac64-a7443851b4bc"
        },
        "item": {
          "id": "aae44e2d-852d-4ca4-97a9-53ef16bc4ba3",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "6c7bbeb3-4787-4171-9068-15693628d88c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41e665b6-d4b0-4b1d-92b1-71766d469a0b",
        "cursor": {
          "ref": "ef55954e-40ab-4a98-9080-a563b6d3914c",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "47a8c6f1-32f5-4a07-a904-ecb1ad6e6bf0"
        },
        "item": {
          "id": "41e665b6-d4b0-4b1d-92b1-71766d469a0b",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c81ed564-5b70-4d26-9844-5aac06398bdb",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "2a07964c-3e84-49db-a8ef-c1de6e73617d",
        "cursor": {
          "ref": "0ccd0acb-2190-4aa4-b32e-eb6d6ccc99a1",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "6f4c0927-25aa-4a8c-82b1-a3f52e8339f7"
        },
        "item": {
          "id": "2a07964c-3e84-49db-a8ef-c1de6e73617d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "c4adb699-b591-4888-8936-33ef97de833a",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "1c4b6a3a-27d2-4986-a9fb-cb5b23f9f7b6",
        "cursor": {
          "ref": "30283941-7cda-470d-b268-636cd8019536",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6ed907cb-89e3-4f38-bcbf-be396825413a"
        },
        "item": {
          "id": "1c4b6a3a-27d2-4986-a9fb-cb5b23f9f7b6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "0feffee2-61cd-4640-8320-e15a8be63f99",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "ef639955-30b3-44d2-a1f9-1f0313ac7aa1",
        "cursor": {
          "ref": "d918a197-18f9-4528-8f07-627742e81e03",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "02a07f04-a04e-4d40-9cea-20b0d705309c"
        },
        "item": {
          "id": "ef639955-30b3-44d2-a1f9-1f0313ac7aa1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "1586d130-440c-4b12-96e0-cd13a456d4b9",
          "status": "Created",
          "code": 201,
          "responseTime": 324,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "d36fc608-eae1-4d0a-a41f-c1ed28a639ad",
        "cursor": {
          "ref": "2622ad34-f9f5-4ca0-b3e4-bd660bd8cefc",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "78555d5c-ece3-435b-af29-f12bb17f2c55"
        },
        "item": {
          "id": "d36fc608-eae1-4d0a-a41f-c1ed28a639ad",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "b73d1bee-410d-44ec-9725-123835d62f7d",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "278f612b-2472-4d8b-98d8-09c200afb9f5",
        "cursor": {
          "ref": "87b261ac-d3af-415e-83c4-8ede4d2f3085",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "05293b02-951d-4405-9283-3181e8878af5"
        },
        "item": {
          "id": "278f612b-2472-4d8b-98d8-09c200afb9f5",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "fd186603-60ec-45a6-9ac2-acb59d7607d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c4dedda-cc5a-4063-bb12-f6141d268cba",
        "cursor": {
          "ref": "f69a2114-3a22-40e6-81eb-fa145a5429f6",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "e53363db-16ff-4923-a478-fb28a22bd5a7"
        },
        "item": {
          "id": "7c4dedda-cc5a-4063-bb12-f6141d268cba",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "fe45ac61-2306-4d34-a70e-658e5fd23524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9423d823-b189-4125-baa6-d9b0e1e7075d",
        "cursor": {
          "ref": "520bbb59-1f30-4fb5-9ae4-c658e56d393a",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "be285ef5-7bed-4d04-9012-b451abeb51c4"
        },
        "item": {
          "id": "9423d823-b189-4125-baa6-d9b0e1e7075d",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "f0bcde5f-a82c-47de-b88c-ae4dddf338b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "237e7dd0-0325-467f-ada7-5d013d46aa5d",
        "cursor": {
          "ref": "a178349d-e5ec-406f-b4ef-3bee1c5bf8cf",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "ad33842d-1296-494b-ac08-54bc71e58343"
        },
        "item": {
          "id": "237e7dd0-0325-467f-ada7-5d013d46aa5d",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "d8173de0-0556-4c90-bd1d-9fe240d74ea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f38e0547-5704-4213-9a0a-956b47b6fe15",
        "cursor": {
          "ref": "cc51ee78-55f9-4b6a-94db-7696d2d694d9",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "2538863e-f506-4a74-b03c-789cea5e153a"
        },
        "item": {
          "id": "f38e0547-5704-4213-9a0a-956b47b6fe15",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "c5a489cf-dfd4-4a3c-ba6f-46f5cb26ba40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9471fbc-8699-479e-9ab3-2746935acdf0",
        "cursor": {
          "ref": "7f78560c-13a2-479c-9ddf-a9a92c8584f2",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "24896194-1d08-4259-91a2-1e632d58fc31"
        },
        "item": {
          "id": "a9471fbc-8699-479e-9ab3-2746935acdf0",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "2ac3ab2e-ac78-412f-9e2f-159dfaf7ce0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1d2039e-f8c7-4858-9c66-b591fed1718c",
        "cursor": {
          "ref": "99b50320-b259-4126-b01d-925d333d93c0",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5d6d7b20-3817-4dfc-bbf2-b82f3926f4b0"
        },
        "item": {
          "id": "e1d2039e-f8c7-4858-9c66-b591fed1718c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "6c29006e-f7b4-438e-a321-e7b5715d8ec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "887de7b5-7a4f-4ecc-bc4a-ea4cb815c0a7",
        "cursor": {
          "ref": "cbe2143a-2b14-4127-9a9a-b9449b16749b",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "417e0908-1db4-4daf-b39e-fa2b023c922f"
        },
        "item": {
          "id": "887de7b5-7a4f-4ecc-bc4a-ea4cb815c0a7",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "046ce13e-83dd-48ec-b0b7-a8aa3e9f7d96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "300b7899-3ed8-4344-a548-200305d9a085",
        "cursor": {
          "ref": "444fc9b3-1a2b-4dc9-90cd-8ffea3a0dd44",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "64de9e40-65b7-479b-abe5-f60883af4efc"
        },
        "item": {
          "id": "300b7899-3ed8-4344-a548-200305d9a085",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "5f61cec5-7ba6-4ccd-9ba5-8c628574b5ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da01b6f8-fcc0-4c41-8ae9-83a08e143211",
        "cursor": {
          "ref": "e20215c4-bafe-483f-9089-d3d02af3619e",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "bea2fa13-59d6-4628-a316-2bf26100b5a9"
        },
        "item": {
          "id": "da01b6f8-fcc0-4c41-8ae9-83a08e143211",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "20505abc-0e33-4639-b693-b36e8aaf6853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5427d6d4-01c5-4007-abbc-a6f04fc10dab",
        "cursor": {
          "ref": "55b3184e-0aea-46b1-8c4f-f259d320f753",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "1eb1a9a1-73b6-4e98-915b-f1535144fccd"
        },
        "item": {
          "id": "5427d6d4-01c5-4007-abbc-a6f04fc10dab",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "e91c8b87-3959-484e-b9b6-d981d801be75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dec43e5d-a487-4c66-8012-7a80d0f5e085",
        "cursor": {
          "ref": "01be2090-130e-4999-9a39-37c5613f516e",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6aa7e8cf-74bc-46bf-8a5b-b06fd9e396d8"
        },
        "item": {
          "id": "dec43e5d-a487-4c66-8012-7a80d0f5e085",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "18085d4b-a841-4d37-ab57-3316ec425b08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1482f864-180e-48c8-8093-1a39a7e4e6e9",
        "cursor": {
          "ref": "e3aa65dc-15ca-42b7-9fd3-2aef8727ba81",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "1537a0bf-3ce5-42f2-a285-80270feaefb9"
        },
        "item": {
          "id": "1482f864-180e-48c8-8093-1a39a7e4e6e9",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "90c1bfbf-faaa-4ead-8e21-6fa7a47a66c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa4ae31e-e50d-4929-ad1e-6785159860a2",
        "cursor": {
          "ref": "31249f91-9398-45bd-9caf-d94c231b0442",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a0b305a5-1d4c-4bb4-9872-94b9c4ea415c"
        },
        "item": {
          "id": "fa4ae31e-e50d-4929-ad1e-6785159860a2",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "1e70f802-8834-4b33-9cc6-3ea509f85313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78c21f23-d0ff-4245-a266-b5107c62ff26",
        "cursor": {
          "ref": "3748d01c-c380-43c7-a41a-74135266b9b8",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "03465196-0ae8-4755-82d2-9a3e9b646999"
        },
        "item": {
          "id": "78c21f23-d0ff-4245-a266-b5107c62ff26",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "5b4a90dd-f28c-4ec1-9e9b-ef0b12df0771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7651e4a-83f1-4101-bdfc-37e6f91dc7f6",
        "cursor": {
          "ref": "72413670-7f75-440a-be7f-22df22abe0db",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c9384721-33ae-47da-9d21-07c0a6e8a9c7"
        },
        "item": {
          "id": "e7651e4a-83f1-4101-bdfc-37e6f91dc7f6",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "06934d48-ab01-4466-b332-efea47c76895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d8115cc-3b41-4550-ac1e-fe55bef3c53e",
        "cursor": {
          "ref": "f4702378-9058-45d7-a116-1709f4d0b5bd",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "9f3b1a48-56ca-489a-9bf2-d0e22e9e3dda"
        },
        "item": {
          "id": "7d8115cc-3b41-4550-ac1e-fe55bef3c53e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "623c3008-9749-4837-84d2-7955ed65938f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35ad4f43-b4c5-4f69-ba1c-9514cbe2e9ff",
        "cursor": {
          "ref": "73ef97ed-5a74-41c0-bb2d-7680afee91e9",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c60edd8a-3135-4573-97a6-b401063679f0"
        },
        "item": {
          "id": "35ad4f43-b4c5-4f69-ba1c-9514cbe2e9ff",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "be83f1ba-0af1-42e8-93e5-8040a558652b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c73ee037-c679-41c4-9485-92882adc9112",
        "cursor": {
          "ref": "1b758b77-92fd-4197-b67c-4ada1e4d3286",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "1971c4ca-eefa-4a24-b651-84b9eaa5c602"
        },
        "item": {
          "id": "c73ee037-c679-41c4-9485-92882adc9112",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "9efed009-d1bb-42a8-bc90-4bb8499c4ab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2defaf04-2d45-42d4-85e7-f6054420fe69",
        "cursor": {
          "ref": "2599b119-75f0-436f-8786-b1de53b868a4",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "63fb99dc-1e17-4bf0-b074-da498f7d3493"
        },
        "item": {
          "id": "2defaf04-2d45-42d4-85e7-f6054420fe69",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "a4a34427-6a49-4de5-a1f6-d34f0e645ceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db12c2d7-b5ed-4966-b41a-fe7d1b509d31",
        "cursor": {
          "ref": "b54f55cb-6d9c-43ed-ad5f-a6e11ef0fd5f",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "0b08df5f-e0e4-4d46-b080-0ebf6b5ed971"
        },
        "item": {
          "id": "db12c2d7-b5ed-4966-b41a-fe7d1b509d31",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "fa92ed33-0be8-426f-9cac-fea1f2d11975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e8340e-976b-4b90-8215-39165c0813e9",
        "cursor": {
          "ref": "be9e70f9-7ca6-42b7-98b7-e419a34a975b",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "81a555fb-5acd-490d-9546-92ebd360bcc7"
        },
        "item": {
          "id": "78e8340e-976b-4b90-8215-39165c0813e9",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "8b314279-b531-46b1-b76e-6080deddf521",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37f311b6-b4f7-4643-bbea-92b0be05ae02",
        "cursor": {
          "ref": "ff7955b9-6056-4eba-a236-e37cf9856889",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "eb6df005-d80c-4f7b-808a-af77bebb3833"
        },
        "item": {
          "id": "37f311b6-b4f7-4643-bbea-92b0be05ae02",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "552eb9ef-29ea-4732-b5f3-02cce0ed55e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7ff9a56-628f-4753-9193-fb2b5f5f3e87",
        "cursor": {
          "ref": "6580f4f0-921f-4de0-8851-027a17f9a9aa",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "3fe31e4a-a040-4dc1-b301-afc84530eb81"
        },
        "item": {
          "id": "a7ff9a56-628f-4753-9193-fb2b5f5f3e87",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "993556b3-e6fb-4a08-b38c-7f72e025980b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1779ee90-4068-402a-8771-29ea2f010c31",
        "cursor": {
          "ref": "7a402cea-6c76-476d-bfc5-c183c3a85178",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "28d24f83-c030-4504-9f64-d5d906c2de87"
        },
        "item": {
          "id": "1779ee90-4068-402a-8771-29ea2f010c31",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "69469b01-389d-45bd-a2fa-5a6ff7b92f2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6d5dd9f-aca7-4bdb-9140-0c4b751bb827",
        "cursor": {
          "ref": "513d09ad-c75e-4c52-b4ce-dec0ddb72c8b",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a5ad4886-2920-476a-8874-d3b00d5d8e8b"
        },
        "item": {
          "id": "e6d5dd9f-aca7-4bdb-9140-0c4b751bb827",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "7a5f6926-468e-4574-80cb-79e92a970905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49015d94-3e16-44d2-a139-bd6eabebbc6f",
        "cursor": {
          "ref": "e1096202-b132-4b94-b86b-354090a52319",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "344198f7-ef5e-46bc-b508-05048d033fc1"
        },
        "item": {
          "id": "49015d94-3e16-44d2-a139-bd6eabebbc6f",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a78dda7d-ba03-441a-a802-79b0bc8a21e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b152d37-91f9-46bb-a4ef-17775f00495a",
        "cursor": {
          "ref": "7a7d540b-6c84-4fcc-9cdd-cb50f9927087",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "632a3987-c92e-48d8-8fbb-1c8d3097c408"
        },
        "item": {
          "id": "1b152d37-91f9-46bb-a4ef-17775f00495a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "325ee296-3029-4a0f-b0ef-d11f1d79092e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "609e60f3-9530-4b34-a5e5-fe336b292956",
        "cursor": {
          "ref": "d1ff5bf5-22dc-48e7-a5ff-8a3d36abe9bf",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "5f8a532c-0a5e-49e6-b9d4-fed5db43d866"
        },
        "item": {
          "id": "609e60f3-9530-4b34-a5e5-fe336b292956",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "735a9b3e-619b-440c-b707-6d5f5a8c11f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a48a3de-c5e9-4c99-9b4c-bdb825acef14",
        "cursor": {
          "ref": "33281d93-6b0b-4826-8ca3-85a78337a355",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "bfaa73f4-b118-49c5-9e00-be3d0cf55f05"
        },
        "item": {
          "id": "7a48a3de-c5e9-4c99-9b4c-bdb825acef14",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "9e6d7f5f-8e02-4549-b91a-c56e69767a55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6180fff5-e4c1-4e84-a71f-64a131335baa",
        "cursor": {
          "ref": "0cdab411-de08-49b7-9654-be023fe24a7c",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "57fed8e2-5af7-4784-bbad-c58dd9705550"
        },
        "item": {
          "id": "6180fff5-e4c1-4e84-a71f-64a131335baa",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "810c5fe8-37b2-4276-b668-2751377d97e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84c5b4cf-2966-49a5-b696-622213f05214",
        "cursor": {
          "ref": "b9841676-14b3-4115-9278-2397e7fd97d9",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "19b4b787-ef7b-48ad-b03d-cc8e287e54d4"
        },
        "item": {
          "id": "84c5b4cf-2966-49a5-b696-622213f05214",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "bbfd5f0d-f45f-4f7c-bd68-72aa314b1a66",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c29817-5e29-4467-92fe-75bd447b2e92",
        "cursor": {
          "ref": "9f5ac44d-a343-4ee2-9563-83830d125122",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "f783524e-c081-4153-a5f7-4e3173b078d3"
        },
        "item": {
          "id": "66c29817-5e29-4467-92fe-75bd447b2e92",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "373c01d3-78b8-4f3e-a9f1-2ead32bfed3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "fae30a8e-53db-48e7-ab2e-f91302df2ff1",
        "cursor": {
          "ref": "54b1535a-3335-4e24-8650-a3d7d2a8b758",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "236cd013-3c3c-4da6-a4d3-eee258f98985"
        },
        "item": {
          "id": "fae30a8e-53db-48e7-ab2e-f91302df2ff1",
          "name": "credentials_issue"
        },
        "response": {
          "id": "200cd77b-6c33-4257-80fa-4df87ad4aff9",
          "status": "Created",
          "code": 201,
          "responseTime": 387,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1de553c-eee0-4782-bc39-14e59bc9a9e5",
        "cursor": {
          "ref": "94caee26-17be-4f14-b7b8-825b36983f03",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "78d48c78-9b84-45c3-b00d-3287088c52eb"
        },
        "item": {
          "id": "d1de553c-eee0-4782-bc39-14e59bc9a9e5",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "29f76a7c-21a1-4002-9979-50b1188f4566",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0bb266-e7c8-4729-86ed-b3cdf5101a92",
        "cursor": {
          "ref": "b80877f0-2bc3-4511-b85b-6e2df10ea36e",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "86bfa384-1b1a-453a-8f80-305d2b827b11"
        },
        "item": {
          "id": "6d0bb266-e7c8-4729-86ed-b3cdf5101a92",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "1def1383-49e0-45bf-a641-167fd7aa31d2",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6a6cbff-5a0a-4004-9d20-2929a7ac6a82",
        "cursor": {
          "ref": "e33fe68a-e200-4806-97ef-d068547d68c2",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b25b29c7-f544-4f47-a039-3e1ad0513e51"
        },
        "item": {
          "id": "b6a6cbff-5a0a-4004-9d20-2929a7ac6a82",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7a66176e-bc4f-42d6-85f0-07780919d185",
          "status": "Created",
          "code": 201,
          "responseTime": 372,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a83a574-9f22-442e-a614-56881f4a3578",
        "cursor": {
          "ref": "5261d57d-628f-450c-aa01-fbf45e466354",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "8358d04b-b5ed-4d4f-8d3c-7b05a79a802d"
        },
        "item": {
          "id": "8a83a574-9f22-442e-a614-56881f4a3578",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "789935b5-47fc-4b24-b3e3-1f2242e31a22",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-02-04T00:37:19.450Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-02-04T00:37:19.450Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "68453ed9-4448-44af-8ae3-b667f99e965d",
        "cursor": {
          "ref": "165b0a23-cf4d-4b81-a5d4-391e13c98fb0",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "3f442b63-7fe4-42e7-b6e8-a3675b744853"
        },
        "item": {
          "id": "68453ed9-4448-44af-8ae3-b667f99e965d",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b5c59c74-35a5-4f73-b6fa-01ede0c4553c",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22d2a6f7-e209-4fc4-bcc8-d058d10f3b3b",
        "cursor": {
          "ref": "4e7060bc-9649-4090-9bca-f03d0987a670",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "34c8b392-6f91-4d36-a841-5a2aa687384b"
        },
        "item": {
          "id": "22d2a6f7-e209-4fc4-bcc8-d058d10f3b3b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d0710307-b44e-45f7-b48b-1f571c6d6ca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cec99b53-f818-4c53-9d1b-f4d3eda26f37",
        "cursor": {
          "ref": "23e1661b-56fc-4619-8d38-011ee87add01",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3b5091b5-0456-4d9a-9e1d-66f5c1bff2de"
        },
        "item": {
          "id": "cec99b53-f818-4c53-9d1b-f4d3eda26f37",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ce2f2b65-2c54-4cb4-b767-4b803df2bcd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9e823d5-83b9-4abc-a8cc-b268217873e9",
        "cursor": {
          "ref": "0a98d017-9d92-467e-91d7-3cd57af50ed8",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ad0ed963-bd46-4055-8c32-2e7005be7004"
        },
        "item": {
          "id": "f9e823d5-83b9-4abc-a8cc-b268217873e9",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0815ba57-bd5a-4a5f-ad2f-205cbd4bb6c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8f14116-8aa4-4c38-bbe3-c6447bf6a5a3",
        "cursor": {
          "ref": "3ce3f5e8-0132-498e-b090-1451b6565c8e",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "419c6507-7adc-4895-8c29-c7aa82c81dd0"
        },
        "item": {
          "id": "c8f14116-8aa4-4c38-bbe3-c6447bf6a5a3",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4c550044-95e2-4582-857a-0c8275ba82ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3e7be83-6f54-45de-8127-b0197d5da009",
        "cursor": {
          "ref": "ff468e04-1023-4da9-9777-69abef71fe81",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "0e011ebb-5cfe-4ca2-9605-78cd6be0b68f"
        },
        "item": {
          "id": "b3e7be83-6f54-45de-8127-b0197d5da009",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ee40764e-bd31-4471-834c-1f2123855a8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9893630f-61d1-44dd-bac6-7507fd9179fb",
        "cursor": {
          "ref": "8523a0a1-76f3-404a-8dca-0083296ec375",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "087b327f-edb4-43f3-9c2b-499d1c5bd8aa"
        },
        "item": {
          "id": "9893630f-61d1-44dd-bac6-7507fd9179fb",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0886c9f7-633f-4709-a741-9253217c6304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bd72298-b167-4130-8507-4ee0da3b4ef0",
        "cursor": {
          "ref": "a918b869-40a9-4db5-8d49-04a7daf02bb1",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "c5b03466-86ca-49a4-8193-12f4bd397e4d"
        },
        "item": {
          "id": "3bd72298-b167-4130-8507-4ee0da3b4ef0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ae1da41a-8d62-40e3-a6d3-4ce3d3767386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad5b2fe0-4905-4d9a-8abd-2e7fc50a989c",
        "cursor": {
          "ref": "19b1a882-553c-4a0e-8bcb-053305f29d67",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "9799296b-72e4-46a3-b98f-2dd4e5a90acc"
        },
        "item": {
          "id": "ad5b2fe0-4905-4d9a-8abd-2e7fc50a989c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "fc7f4649-88a6-4380-8987-5e7f926fb449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a1d13cc-c536-4a55-9d63-85b84fec4646",
        "cursor": {
          "ref": "dce1490e-5995-4619-a616-554383f8bfaf",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "55ce1da3-f53c-4c0f-a061-76b4c7856431"
        },
        "item": {
          "id": "7a1d13cc-c536-4a55-9d63-85b84fec4646",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4dd78020-964d-4732-9e6d-c6c9ee103d0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bf15e6f-f2aa-430d-b83a-f426796fafd6",
        "cursor": {
          "ref": "894c3d4c-d7bf-4b1c-a191-6402c8a16aef",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "22f33bec-1849-493b-9bc1-93a4c6ae5953"
        },
        "item": {
          "id": "2bf15e6f-f2aa-430d-b83a-f426796fafd6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "6bc3658e-76e2-4186-9242-8a1bb0dae870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bbb2fa7-21b6-4bcf-9e19-b56099a328b6",
        "cursor": {
          "ref": "d3e25732-dc5e-4895-a1a8-f15ffbbe08e5",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d8469873-b75b-4a34-bf3f-bd81fbd95b5c"
        },
        "item": {
          "id": "6bbb2fa7-21b6-4bcf-9e19-b56099a328b6",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "2da220da-5819-4800-a631-887e97ee506e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "806ba75b-a36b-44ef-88e6-d65fbe11dfe4",
        "cursor": {
          "ref": "cf30faa9-33cd-4ea2-880d-a2d75db812d1",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "5acebc2c-c4c6-4472-a44f-7b7fbaf3bbe7"
        },
        "item": {
          "id": "806ba75b-a36b-44ef-88e6-d65fbe11dfe4",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d1b904ed-68f8-47d1-8df6-d5419648565b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66a95b6d-5375-48d0-9a16-7247b2eb0547",
        "cursor": {
          "ref": "cde78550-ceb1-4991-9000-0b8dacb616b8",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "1d1f5e9a-3f12-41fc-8c76-da0a0864e6b4"
        },
        "item": {
          "id": "66a95b6d-5375-48d0-9a16-7247b2eb0547",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "912b4442-516d-4671-bec6-94e75f719ba8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 87,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "cad70e30-273f-4361-ab32-be24910b6af2",
        "cursor": {
          "ref": "831f2ded-94a8-4b8c-877f-5eeefa0bca24",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "4a749533-e572-4b40-aa1b-7c1f1b5a973e"
        },
        "item": {
          "id": "cad70e30-273f-4361-ab32-be24910b6af2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ff785b98-f130-4248-a6df-5485e7a85261",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 81,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "025abf2c-dd04-4a95-be3e-7d240ec43735",
        "cursor": {
          "ref": "25cfc0bb-ba4b-4483-9f93-cb3b0be39e84",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "8d879f0b-cb9f-4717-89d7-d616f00a62d7"
        },
        "item": {
          "id": "025abf2c-dd04-4a95-be3e-7d240ec43735",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "af271efd-c987-46b9-bbe8-47987515a0f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c4781de-8816-45b6-acd2-700808f6f26a",
        "cursor": {
          "ref": "492945e2-e924-49eb-8698-d2705454e63d",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "47ccb0c4-54e5-4d8d-a137-7a0638ae3506"
        },
        "item": {
          "id": "4c4781de-8816-45b6-acd2-700808f6f26a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "def6f6c9-45d0-4dfb-8b83-c8bc38c68b0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c91d84b9-b29f-4c15-95cb-cf097e32ce3f",
        "cursor": {
          "ref": "b374da5d-394d-4c60-9e9f-f3ffdb5cb8e5",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "819e05cb-3ac8-4beb-9993-e345917389ca"
        },
        "item": {
          "id": "c91d84b9-b29f-4c15-95cb-cf097e32ce3f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "bd6b7071-d0e9-4bce-99ce-937ca742581c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0ba29f8-e832-43da-bc2f-0024b657137e",
        "cursor": {
          "ref": "7bbf1fbc-eff6-4323-a401-550b670c8507",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "e1654a4a-4310-4d04-8f65-cbf45d3b1418"
        },
        "item": {
          "id": "b0ba29f8-e832-43da-bc2f-0024b657137e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "cbb86768-c776-4ac0-9005-7d74cdb3ba43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bce7f81f-4613-4f32-93a3-9a0935c772fc",
        "cursor": {
          "ref": "3fd4967c-1072-4fd3-a5d5-63a7b5c02043",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "067f9df7-f8b5-4a9d-9218-d7d54266cb69"
        },
        "item": {
          "id": "bce7f81f-4613-4f32-93a3-9a0935c772fc",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "48a99ef9-d1ec-46be-bc0f-1f5ad52d074f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "018cb589-918b-4412-b7e9-429d92a7e41e",
        "cursor": {
          "ref": "0a50ba28-7b7e-459c-9e9b-60551b2ca889",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d7dd9201-03bb-4072-bc67-945f5a4ff5c0"
        },
        "item": {
          "id": "018cb589-918b-4412-b7e9-429d92a7e41e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "5b708560-51fe-4fd6-be33-081c89fc19e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6a8a615-1eb8-4745-a66f-76985b27fba1",
        "cursor": {
          "ref": "87441e72-c0b3-455d-b5ac-0d43060e4398",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "635b4b3d-9cb5-42da-9899-568ba9ead674"
        },
        "item": {
          "id": "e6a8a615-1eb8-4745-a66f-76985b27fba1",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ee78e2e2-6245-444d-8f6d-0649673c9d2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c50acb8-2868-4627-bf73-a5a9fa3bb297",
        "cursor": {
          "ref": "442fb7c8-961f-4a0a-a5e0-33f7189e3615",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "b404c3cb-6a77-4b54-bd65-a336138ae7e3"
        },
        "item": {
          "id": "3c50acb8-2868-4627-bf73-a5a9fa3bb297",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3ace84d3-5616-469c-b1b7-3849102fa47a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0227d5f-cccf-4dab-8f36-8f623a383899",
        "cursor": {
          "ref": "c60192f2-9347-419c-aab7-3af756a39b20",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "df936882-0b17-478e-900e-9a6e1fc5d401"
        },
        "item": {
          "id": "c0227d5f-cccf-4dab-8f36-8f623a383899",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "97117914-9a96-493d-ba12-b76a81d3f60c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1db49ac0-4845-4974-8860-429cdbc543a2",
        "cursor": {
          "ref": "edcc347f-8fb7-4182-b6ce-e9754e80af08",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "40e55394-6fcd-419b-802d-881beaee1de7"
        },
        "item": {
          "id": "1db49ac0-4845-4974-8860-429cdbc543a2",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "419770c1-1980-46e3-aa19-455c06e15361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2b00605-1189-4319-9178-8ab29aae5d44",
        "cursor": {
          "ref": "ae5330a2-82ab-42b3-bde0-cbe7f5bf3719",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "ad320a8e-1677-4f2c-8009-093754d9adf0"
        },
        "item": {
          "id": "b2b00605-1189-4319-9178-8ab29aae5d44",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d84fa644-b3ed-46d2-8bc9-14a1869a734b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a3183ab-7e45-4c4b-a2dc-cd6486a2cff3",
        "cursor": {
          "ref": "5951fb57-4f96-464e-ba53-2342fcc5b230",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "4266467d-42ce-4867-b372-1fe01b92ff61"
        },
        "item": {
          "id": "6a3183ab-7e45-4c4b-a2dc-cd6486a2cff3",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4b3abde6-5b72-41c1-8ed0-0c361e012c6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0bfe749-dd31-4a16-a7b6-a6d45b73ad77",
        "cursor": {
          "ref": "d18f45b1-4363-41bc-9c16-401afd577813",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "36924bb8-0570-435d-ad8b-c6151ad7a1b7"
        },
        "item": {
          "id": "e0bfe749-dd31-4a16-a7b6-a6d45b73ad77",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "bceed204-c840-4c52-a26d-dcdc2b7cc90e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af0e4891-a751-4cfd-93e7-4a9d0959e350",
        "cursor": {
          "ref": "ffea8edc-c88c-4006-b711-05a0b49e2f54",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "dafa2692-1e72-42b3-8512-505f115d01eb"
        },
        "item": {
          "id": "af0e4891-a751-4cfd-93e7-4a9d0959e350",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a9c605b8-7e32-4f9c-85ba-7921a46faa0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d35bea7a-ebb1-4240-aec0-7347210044fe",
        "cursor": {
          "ref": "b3548ce1-4c2d-46f9-ab52-006f5ed0189d",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a9f6198c-3bb6-40d1-b151-61dd2f853975"
        },
        "item": {
          "id": "d35bea7a-ebb1-4240-aec0-7347210044fe",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c22d7da6-2add-465c-b848-620965111fbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcdca71b-a467-4db8-9d3d-b19820ad9c4f",
        "cursor": {
          "ref": "b3c0223f-ef51-484a-ac89-3c9634ee94df",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "dfb59504-a00a-4b1d-a67c-b8ca6fcc284a"
        },
        "item": {
          "id": "dcdca71b-a467-4db8-9d3d-b19820ad9c4f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b21e0527-bda1-4e2a-a453-8e4a134afee9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2591385a-8f5e-41fe-938c-77e0d41fae85",
        "cursor": {
          "ref": "79acbc1f-ccb6-448a-b930-89a7c2ef0564",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "92635b43-f670-49bb-839f-1a3cc72b34af"
        },
        "item": {
          "id": "2591385a-8f5e-41fe-938c-77e0d41fae85",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1f2459f1-a437-480a-8d24-6d905391bbac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "001357cc-c831-45ef-8669-b7a6be75132d",
        "cursor": {
          "ref": "2a5f0fd1-167a-423d-b903-9ea5d4a0d3e0",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "5eff66f6-605b-4d60-baf3-4abd9c0b0a13"
        },
        "item": {
          "id": "001357cc-c831-45ef-8669-b7a6be75132d",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "60b3c7e0-3154-4e3f-b619-96c4ee61524f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 84,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "9e6c79fb-5f8f-4852-b140-4972b1c3f53b",
        "cursor": {
          "ref": "5f1d4466-71fa-4983-9662-bf1af5a7897e",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "e1cdfa29-96ac-4351-a224-4ea1cabbb89c"
        },
        "item": {
          "id": "9e6c79fb-5f8f-4852-b140-4972b1c3f53b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "276f3093-6af9-435b-9d05-050eb49f5b5e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fda3833-3647-486d-9227-5144b649b37c",
        "cursor": {
          "ref": "daf99cd4-0f96-4a4a-b815-2457ecc866b6",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "3c2c56cd-7133-4f18-b563-648f8098e830"
        },
        "item": {
          "id": "4fda3833-3647-486d-9227-5144b649b37c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "59c5d4e9-7ca0-45f2-8344-eef1d5bde3b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e95d88ac-8eec-4c26-94ba-a53474bf4a72",
        "cursor": {
          "ref": "dc94a81a-010f-476e-a25c-f91a8083fc67",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1e08c965-1f2b-483d-adff-4d13d709c4f2"
        },
        "item": {
          "id": "e95d88ac-8eec-4c26-94ba-a53474bf4a72",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "8448f637-e098-492e-b8c0-7c8df7a35f68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "790dd15f-a694-4863-b603-a15b284e60e3",
        "cursor": {
          "ref": "25b48f32-5bae-423c-887f-d36c51290da2",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e23dc93f-3e1b-4225-9f6b-2062790a5137"
        },
        "item": {
          "id": "790dd15f-a694-4863-b603-a15b284e60e3",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "65b7403d-12bc-428e-a90e-fa53fb9f42bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34b2f33c-7a71-486c-b6a9-af5fefc7ac55",
        "cursor": {
          "ref": "fe7ff0bc-d1d3-4823-a12c-479a7f5a2dac",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "abe52038-3c58-443d-816e-07666629c3d1"
        },
        "item": {
          "id": "34b2f33c-7a71-486c-b6a9-af5fefc7ac55",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c7a548d2-ab25-499c-bd2d-e3357e4833ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55497690-3459-4086-b82f-5454a1f63189",
        "cursor": {
          "ref": "eaa71632-2de2-40ac-80e2-8fd0a0520f69",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "2a78bbd2-26ba-4014-ac02-1e01ec4f0fef"
        },
        "item": {
          "id": "55497690-3459-4086-b82f-5454a1f63189",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "6789bcab-1b25-4d36-99b5-9ce429b45512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "132e68a3-f3db-42a5-a4e8-e3dc7e89119c",
        "cursor": {
          "ref": "9ee6d9f1-198a-4801-9243-1fceb8c715db",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d2b8c492-340a-4e7c-b1a7-1f2b0800d145"
        },
        "item": {
          "id": "132e68a3-f3db-42a5-a4e8-e3dc7e89119c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "5ddf2453-f674-4220-9c68-c15c89e4cce8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8332f9a4-94ef-4f88-8d18-d8f456835175",
        "cursor": {
          "ref": "2e1d77e9-a10b-4de6-b825-c3c03bd429cf",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "fd2fad00-391e-407c-90ba-64f1e2f13a41"
        },
        "item": {
          "id": "8332f9a4-94ef-4f88-8d18-d8f456835175",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "db32c6e0-5ff1-44db-930b-1fb0cadf1e13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83694fe9-3051-4656-9883-acbed639c907",
        "cursor": {
          "ref": "90ac9712-d4db-47f1-a9fb-ad6199720d79",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "5e128289-92e6-4316-9a5a-cba34708539f"
        },
        "item": {
          "id": "83694fe9-3051-4656-9883-acbed639c907",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "eaee532e-ad43-4e5c-a45b-86c360188698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dba0e1d-0408-48bf-ac78-285a822dd5c9",
        "cursor": {
          "ref": "ecfcd73a-83ed-4996-afd9-997c3950aa41",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "0b7a38d9-da69-41f9-a984-e7f1fb6c3156"
        },
        "item": {
          "id": "8dba0e1d-0408-48bf-ac78-285a822dd5c9",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9209791c-d175-471d-b3b3-5356a4e3af6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4b82e1b-de60-44aa-879b-ce3b10d4c9fa",
        "cursor": {
          "ref": "e8b758f3-9b9a-4127-a07c-1341d820a9fd",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b4f7b8e1-5e42-4ba4-8874-5a7d67a5306f"
        },
        "item": {
          "id": "e4b82e1b-de60-44aa-879b-ce3b10d4c9fa",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f4881109-f180-47dc-8019-25bbe42f251b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42c24b3e-8de3-4cc6-b733-c1f6f1c9a54a",
        "cursor": {
          "ref": "39c8977a-e2d1-470b-a856-fcd657895663",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "f4a99918-60d9-4738-84fb-ddad7a78fefb"
        },
        "item": {
          "id": "42c24b3e-8de3-4cc6-b733-c1f6f1c9a54a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "82c48d27-e326-45a5-bc48-c5bea782b84d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b75889bf-2a48-41ec-9958-cedf125f7e28",
        "cursor": {
          "ref": "1d6e60da-1d27-4f50-81b1-37e9cdf360b0",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "4c1ab99d-64a0-476b-a2b0-ec4f1bccb0cc"
        },
        "item": {
          "id": "b75889bf-2a48-41ec-9958-cedf125f7e28",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "09e1f42a-4d03-41d8-a8b7-2ea244c193cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2363d2ac-e425-4b7a-bd37-49cf38597b49",
        "cursor": {
          "ref": "84644d3b-7a58-4989-adb7-8c2f723f0035",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "450d0d25-ba70-426b-88f0-264faa1efc8f"
        },
        "item": {
          "id": "2363d2ac-e425-4b7a-bd37-49cf38597b49",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "fb073bec-c363-481c-b059-a10135eba881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19540225-f307-41e4-a31e-17383cd0b3da",
        "cursor": {
          "ref": "f712319a-f278-461a-ac55-21a99490a27a",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "30c1eb52-1050-4cdf-a7a0-c55af49bfb6a"
        },
        "item": {
          "id": "19540225-f307-41e4-a31e-17383cd0b3da",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c9d3699b-952c-4033-92ef-ab6c8842e534",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "a72ff425-f7d3-4167-8a37-2731ca6d529e",
        "cursor": {
          "ref": "877221e6-db9e-40f0-b645-cb3f709d7964",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "e4ddf3b4-22d8-47de-b816-1b53ecddf640"
        },
        "item": {
          "id": "a72ff425-f7d3-4167-8a37-2731ca6d529e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f8d63bcc-7f2e-4e2f-9983-3530867197d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "853c95d4-3166-4195-bc93-04b577b6ee82",
        "cursor": {
          "ref": "56e0448f-52a7-4c20-8f26-727ea6da4a4e",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "812fb97f-2add-4d40-ba4f-1c804b729424"
        },
        "item": {
          "id": "853c95d4-3166-4195-bc93-04b577b6ee82",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6e4af1c5-e34b-46f6-a299-3c65d450fd5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22c7515d-462a-4d4a-8fe7-7c8a39695692",
        "cursor": {
          "ref": "5c6048a0-1d25-4b4d-b466-d9220cb83ff4",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "5d314f93-044a-4c02-b163-0e6b1ed048d6"
        },
        "item": {
          "id": "22c7515d-462a-4d4a-8fe7-7c8a39695692",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b41c6136-61f1-429b-af73-8619c0611390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ef91c0f-4a8e-499a-8031-823c5d17313c",
        "cursor": {
          "ref": "5a25e69c-2b05-4aa1-bb4e-68230e93f23c",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "bbc8fbb8-7034-45f7-9d91-bbdb8624cfde"
        },
        "item": {
          "id": "3ef91c0f-4a8e-499a-8031-823c5d17313c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ae96fee0-9629-48d6-bd1a-437ee735a0ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c48ea82a-c66e-456c-bf75-bb797cbd8469",
        "cursor": {
          "ref": "9272a6d9-d593-4202-821d-1efa377adfd4",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "b6f25445-71b4-4e82-ba12-dd524ccdba85"
        },
        "item": {
          "id": "c48ea82a-c66e-456c-bf75-bb797cbd8469",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a8b1c7a2-764b-44c1-9091-81c3fa5aabbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cffc0fcf-ca9b-4343-9379-d7c897d6eebf",
        "cursor": {
          "ref": "6e4ca6be-81f7-4bfb-99fc-059629fec9ca",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "11b32dbe-32c0-43c2-affc-fe3c63da1b19"
        },
        "item": {
          "id": "cffc0fcf-ca9b-4343-9379-d7c897d6eebf",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1f1ab796-c704-4912-b3f0-f28d74fa637a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81f1ca84-c2b8-445b-b433-f15798838bca",
        "cursor": {
          "ref": "43f03c71-01e6-4b91-9bbc-557218f6af56",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "747442eb-76a9-46e9-bef5-0cf93717fff6"
        },
        "item": {
          "id": "81f1ca84-c2b8-445b-b433-f15798838bca",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "56a16859-4d41-41f6-889a-071a02deb410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c15880d-20c9-4c1c-95b5-b371463439bb",
        "cursor": {
          "ref": "6b51fc82-59f4-4a99-a68c-8901672b745f",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ba304c2f-2ca8-41d7-bb05-dbdc5e57eb27"
        },
        "item": {
          "id": "7c15880d-20c9-4c1c-95b5-b371463439bb",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "489bb5df-c9c9-431c-b6a4-532e85137a0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12d54118-5483-47eb-96c4-d4aeb3eb37d0",
        "cursor": {
          "ref": "58d83043-c04c-40fc-bc27-b33fd69a78db",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "8fc9c5cd-0a01-4d70-9a1e-aca42b13a09b"
        },
        "item": {
          "id": "12d54118-5483-47eb-96c4-d4aeb3eb37d0",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "4a871a12-b1c5-4241-a299-71c1d077491a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "535ea92e-d38f-45ad-86af-50d3453e7e49",
        "cursor": {
          "ref": "8d6e9c4e-0311-42d7-b50a-c836f3424657",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d5d3fbd1-d563-4362-bf67-1e72c6dd1366"
        },
        "item": {
          "id": "535ea92e-d38f-45ad-86af-50d3453e7e49",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "82d3bdcb-26df-4420-a99f-29d70b1cb27c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7df7f9e-f02d-4ec8-a538-e4b17e08a163",
        "cursor": {
          "ref": "c2a1b53e-619e-42dd-b220-786bc9012c73",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "96471f5d-e2a3-4f7c-a95c-41494725c9d2"
        },
        "item": {
          "id": "d7df7f9e-f02d-4ec8-a538-e4b17e08a163",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "bae0b582-85fd-468c-8b4f-7f9265d167dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09861621-c619-424d-9e63-db669751dd87",
        "cursor": {
          "ref": "9fd25f10-03b8-43ec-8267-a233c4cf1d87",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "35759f98-9783-4936-b114-91653f74be25"
        },
        "item": {
          "id": "09861621-c619-424d-9e63-db669751dd87",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ba5f85c4-8ddf-4775-9e58-a90d2b7e6f04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "279adaad-d801-426d-9c5d-212673f21938",
        "cursor": {
          "ref": "b25bba46-bcbc-4703-88cd-974a9b64bbb6",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "4f7b43cf-bcc1-46ab-9eb5-8beee25469a7"
        },
        "item": {
          "id": "279adaad-d801-426d-9c5d-212673f21938",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "282e20b5-7ae6-4844-b556-dd90769c4769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1801b6de-583a-405e-b16d-d1f7d63ae282",
        "cursor": {
          "ref": "69fd8245-c663-4384-8ade-f080f9992db9",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "3f7ad176-fee3-496a-9033-71fedada2949"
        },
        "item": {
          "id": "1801b6de-583a-405e-b16d-d1f7d63ae282",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "467fcc7b-6c54-498c-9d32-fdac4d8e0f66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44e8161c-aa73-4cbc-9ee2-bf906d00ee5a",
        "cursor": {
          "ref": "6b2b6dbd-c8b7-4b37-920e-73bb1f486629",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "9d3e9188-02b4-4f30-b2ee-03822b094051"
        },
        "item": {
          "id": "44e8161c-aa73-4cbc-9ee2-bf906d00ee5a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "bd229623-e45f-4734-bf7f-5ad8fe1abb70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d41d887a-115d-4598-8f99-3d2211902da7",
        "cursor": {
          "ref": "612b5710-bcb5-430d-bec6-3c6ec24e6627",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "7c9701e2-4036-4350-9de0-20acceeb1795"
        },
        "item": {
          "id": "d41d887a-115d-4598-8f99-3d2211902da7",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "cd7018af-897b-4cc6-b08c-0d5ed95e0511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a48b0993-6be1-4e29-a710-528e28aba07b",
        "cursor": {
          "ref": "a2921f38-48d0-46b6-8817-bffac04f6070",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "75c501c0-a2b4-4403-9849-b67f64948917"
        },
        "item": {
          "id": "a48b0993-6be1-4e29-a710-528e28aba07b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "3c5b850a-a16e-43a7-a026-7c85dd982803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af49b504-9ab5-4fcc-bf69-86ec6c3b33de",
        "cursor": {
          "ref": "e6104e31-63f1-4e7b-a445-10c61dc328d3",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "14ffa58a-111f-4e40-aef1-33588497704a"
        },
        "item": {
          "id": "af49b504-9ab5-4fcc-bf69-86ec6c3b33de",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "87595310-aa7f-4c3e-ba20-3c0c552e61ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d7651d1-a730-4478-91e3-4c90569efbeb",
        "cursor": {
          "ref": "d242e6f0-5ac9-45e3-8143-77b73d4e1661",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "24e0101d-0bdd-40b6-b173-6029b763a9c8"
        },
        "item": {
          "id": "7d7651d1-a730-4478-91e3-4c90569efbeb",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "de3e2053-17f9-4623-9586-0062570dffd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c80d24-c9d4-4a30-bd67-3b24c06d1244",
        "cursor": {
          "ref": "5bf7905e-4946-4f34-8ad5-730311292d26",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "e08148dc-29cd-4b48-bfc6-f6bf4c191df0"
        },
        "item": {
          "id": "27c80d24-c9d4-4a30-bd67-3b24c06d1244",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "03bf560b-a853-469d-984c-2e77868a70ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc1f9179-4a91-4004-bb62-368a515f27d2",
        "cursor": {
          "ref": "30d85745-a132-4fd7-8059-cb54608c4c4d",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "d7667534-61b2-4769-9b0f-ae989d89bea6"
        },
        "item": {
          "id": "cc1f9179-4a91-4004-bb62-368a515f27d2",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "2ac3bcc6-49e1-4516-88dc-d45cf87f6d25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01786dba-8587-442a-be76-e8f35a1fd64a",
        "cursor": {
          "ref": "fcbe59ce-0aa8-4727-9649-859f1ae2ffdd",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "651b1321-c66e-4e21-a110-0b31ab12979e"
        },
        "item": {
          "id": "01786dba-8587-442a-be76-e8f35a1fd64a",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "216d6cd4-bfae-4290-9b30-41886f7712be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb686ef1-436a-4d7f-a880-278a2a66c105",
        "cursor": {
          "ref": "1c83e137-6dd0-4515-a8c6-7c2447295b49",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "478b98c7-90f7-4b65-873b-0a8cd5cea39f"
        },
        "item": {
          "id": "cb686ef1-436a-4d7f-a880-278a2a66c105",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "79a4122b-6381-40f2-9394-127ac3a14bc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18e745f5-f15c-4c9d-b9b9-d4662b5e4d23",
        "cursor": {
          "ref": "d1d50149-0fec-4a7e-9014-e1d2378948bc",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "bba43472-ef93-4669-91ff-6fe56d18007b"
        },
        "item": {
          "id": "18e745f5-f15c-4c9d-b9b9-d4662b5e4d23",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "39b0d0f3-c7a3-46e5-990d-b596f7bc9c21",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "251a469e-3a40-42bd-b89f-01410c341e37",
        "cursor": {
          "ref": "8301150c-920e-4ba0-9acf-1755c05233fb",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "1474e8e9-72af-44d9-b6d4-fe273fcc933f"
        },
        "item": {
          "id": "251a469e-3a40-42bd-b89f-01410c341e37",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1b166ed0-e36e-4b75-996e-0cd0a38b787e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cc37a33-e78f-4659-8a89-18055c30b9dc",
        "cursor": {
          "ref": "2622f353-ee98-4768-a4af-d4e3b3c66468",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c681fe74-bee4-4f1e-bb8e-a5b919f95cf4"
        },
        "item": {
          "id": "6cc37a33-e78f-4659-8a89-18055c30b9dc",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "24b23f7d-b4fa-4a6f-aabd-43b56727f7be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be5c90cb-e0dc-45b5-9c56-473c9bf55b6a",
        "cursor": {
          "ref": "ffd09004-3dde-4e05-9ef3-56e99094e474",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "d244c4de-762d-4ec4-9bdc-6a7039340a37"
        },
        "item": {
          "id": "be5c90cb-e0dc-45b5-9c56-473c9bf55b6a",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "5bee5def-5426-46f3-b28e-92bf9cd30d43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22598c8a-2ca8-453c-8829-38fb4ee57814",
        "cursor": {
          "ref": "bf7c1b5d-116f-44f2-84fc-95799c324806",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "9c9ae0fc-ed19-4e72-98cb-0c07ac21000b"
        },
        "item": {
          "id": "22598c8a-2ca8-453c-8829-38fb4ee57814",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b8a85f8b-9270-4989-9730-520de6071861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "734a5cdc-8b6b-46d3-a7d5-345c5d94f766",
        "cursor": {
          "ref": "910457c3-1de4-45b8-9431-c7d663ad3f46",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "9a69c396-b5c3-4a49-a858-182f3f93cf89"
        },
        "item": {
          "id": "734a5cdc-8b6b-46d3-a7d5-345c5d94f766",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "c686b1cf-4b1c-4be2-bd31-e9d85ec86ffd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56e14d8f-16cd-4aea-9154-9208d27c8d27",
        "cursor": {
          "ref": "3b423e50-9d45-4bd9-bcce-f31d9fcbdb7f",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "735306db-e7f9-49bf-8e4b-3bb180c1b8ee"
        },
        "item": {
          "id": "56e14d8f-16cd-4aea-9154-9208d27c8d27",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c0d5312f-5a00-4cc6-8922-18c3b3ac572f",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "476dfd05-f639-45e9-b424-f445bad46990",
        "cursor": {
          "ref": "a7e20eeb-1a4b-4bb6-962c-95f0cc9a4aad",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "1247977e-5002-4a1d-89ea-5030910e046b"
        },
        "item": {
          "id": "476dfd05-f639-45e9-b424-f445bad46990",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "6086d7f8-9e03-4d2f-b1f6-0d705c502f89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f55cb8e9-ef50-425c-a63c-181d44424557",
        "cursor": {
          "ref": "0ea2b1c2-8797-41f0-91eb-09275f18eb04",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "e4cc706d-ea4e-473d-acf4-b9bc1c15f449"
        },
        "item": {
          "id": "f55cb8e9-ef50-425c-a63c-181d44424557",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "bcc66ab3-fcad-40c1-9bd4-259c3363b7d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "defcefd1-b73c-4e8b-88ee-adfdead9107f",
        "cursor": {
          "ref": "420dd250-ea55-46e5-8df2-c9a9e3199c8b",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "5240ee76-8b6f-452c-8b9b-513b3949ed17"
        },
        "item": {
          "id": "defcefd1-b73c-4e8b-88ee-adfdead9107f",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "74b28381-3040-4fe3-ad9d-1ce3d1da8113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76412179-376c-48f7-a87f-a0063f0e5857",
        "cursor": {
          "ref": "5ec25d87-4087-405d-a12e-83039367047c",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "46cde7bd-70bd-4212-aadb-69588c00dc87"
        },
        "item": {
          "id": "76412179-376c-48f7-a87f-a0063f0e5857",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a1db8dfc-1e0b-4568-a3d7-36738a29ee61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96a148c4-4c10-41ef-ac52-c6a0df39508b",
        "cursor": {
          "ref": "d78fc512-c79a-499f-967e-9341f965db01",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "e8b79a88-8a78-4afb-9a43-bf0a7683af21"
        },
        "item": {
          "id": "96a148c4-4c10-41ef-ac52-c6a0df39508b",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "c3553375-8ee5-4e8b-bdc6-98f6c4711575",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aafb92a6-5989-42c3-9f9b-e35d5ba1aa4a",
        "cursor": {
          "ref": "323c7840-4ac3-480c-8a43-0f58b4084a57",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "7f8c9d3a-80db-42f4-bbfd-ff1840420ebf"
        },
        "item": {
          "id": "aafb92a6-5989-42c3-9f9b-e35d5ba1aa4a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "bbf05dcc-8180-403e-a99d-10ff4457474b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "943e3c6b-a1be-4eb6-8743-8654f70c5ea9",
        "cursor": {
          "ref": "18ae8ae5-6392-4903-b6ee-70089bc2bfcd",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e9de1e61-646a-4ca5-a3d4-8a150a91340c"
        },
        "item": {
          "id": "943e3c6b-a1be-4eb6-8743-8654f70c5ea9",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "fb378a0a-f337-4ea8-9d38-00d7f6bc6f7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bdc697d-777c-4b3b-aa81-79956516c1d6",
        "cursor": {
          "ref": "69555e2d-ed6c-4729-8019-bd6b72418ac6",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "7c068f14-0e05-4792-94da-217ebb36bfc3"
        },
        "item": {
          "id": "1bdc697d-777c-4b3b-aa81-79956516c1d6",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "1ec90548-23f5-458d-936a-7d6fef46bbd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c6d33f8-5ce2-491d-a477-1019de7175ce",
        "cursor": {
          "ref": "e179a17b-4e95-4eb0-b38f-9e97cf64a8de",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "a09b81dc-8323-4104-bc62-c450f271dc4a"
        },
        "item": {
          "id": "4c6d33f8-5ce2-491d-a477-1019de7175ce",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "128c0c6d-7bb8-490a-bc35-0a2187b14c68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29375d64-a4bf-4dc5-ac4c-7252c1166168",
        "cursor": {
          "ref": "06f8038c-84ad-46ac-b39b-967a902dd418",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "7e5f8800-9177-45df-9b6d-de5e25ee11b8"
        },
        "item": {
          "id": "29375d64-a4bf-4dc5-ac4c-7252c1166168",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f0604cf8-0de5-4a5b-b812-26ce032f4945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5600260-f033-4ed8-8abe-978d7ee0bbe1",
        "cursor": {
          "ref": "f0a8853b-0481-40f9-be9c-4af0338717d0",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2be1f12e-1ef6-4ab7-a2dc-2ecd0260cb8b"
        },
        "item": {
          "id": "e5600260-f033-4ed8-8abe-978d7ee0bbe1",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "0c4e389e-fd06-4ca7-a9e4-317350c88ba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a9c2021-2c62-49b2-8575-227ee3c83513",
        "cursor": {
          "ref": "69981b98-24cc-41f0-ab26-cf2783b46f3e",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b9a69a48-f6b3-4485-ae6a-c8ed7c4cfe97"
        },
        "item": {
          "id": "7a9c2021-2c62-49b2-8575-227ee3c83513",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "cead0b0f-a549-46a7-afcb-fbaa68f22dd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0678cfc-ce7d-4bb8-8ec7-f4b5a864b2b2",
        "cursor": {
          "ref": "211282d8-4028-470f-b94f-155ae686fc34",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "b021666d-9be5-479c-ac3c-1cce66b29dab"
        },
        "item": {
          "id": "d0678cfc-ce7d-4bb8-8ec7-f4b5a864b2b2",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "471ea9e0-35d4-4fe6-8854-b41a32dbc60d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a73cae64-26ad-4006-b51d-6a070ed1cbb3",
        "cursor": {
          "ref": "6d1b0469-3cee-4345-9c51-02e4ba496355",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "4a3cc92e-fed9-41e3-bb9e-91057005e78b"
        },
        "item": {
          "id": "a73cae64-26ad-4006-b51d-6a070ed1cbb3",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "840e46b6-1907-4103-b756-a7d4c3eeab0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d098a41c-da0e-4e83-969c-c71d0b732b01",
        "cursor": {
          "ref": "9128877d-90b5-4798-aa7b-89b110487cde",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4be2742f-d61e-4c04-8c75-34f880d5c521"
        },
        "item": {
          "id": "d098a41c-da0e-4e83-969c-c71d0b732b01",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "92190464-fe49-4cd1-aedf-660ad86b0335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed8859f3-6416-4413-87d7-3e64c6fb0fe9",
        "cursor": {
          "ref": "474e938b-fe92-41fb-b06d-213d849e6406",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "3cb1ba1c-9095-493e-ba08-3133881708c2"
        },
        "item": {
          "id": "ed8859f3-6416-4413-87d7-3e64c6fb0fe9",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "91fa11f3-bf3f-48c6-b41f-20176f06823c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95ad813b-9156-4efd-8074-5b3d6ea58845",
        "cursor": {
          "ref": "8a4f6ea7-c43c-41ae-9fba-388e598d5021",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "16455d22-77a3-45d7-89a8-d68ad4d3215d"
        },
        "item": {
          "id": "95ad813b-9156-4efd-8074-5b3d6ea58845",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "5b95cd15-cb9f-4480-bef7-c5cce005ccf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6373242d-2ac7-460b-8ec5-5056bfddd8cb",
        "cursor": {
          "ref": "5f3e99c6-9509-42db-9588-4fc281fcbe0b",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "23979b0c-f462-451d-9c6b-50c6c76b2490"
        },
        "item": {
          "id": "6373242d-2ac7-460b-8ec5-5056bfddd8cb",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "18c01d24-0c96-4dd1-95de-c678c7a563d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b098de66-392a-48b3-8adb-d98d7e2260ef",
        "cursor": {
          "ref": "97c982a0-fecd-48bf-aeb2-f2dead2b0649",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "00d2ae9f-b735-4f95-9013-485623c86979"
        },
        "item": {
          "id": "b098de66-392a-48b3-8adb-d98d7e2260ef",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "1fc9b415-f3d1-46c4-8e4a-ff01340e466e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b854ffc-2889-43c9-ac7e-7d82476f2f5f",
        "cursor": {
          "ref": "5bd889f0-231e-4679-8ede-e3032b6a695b",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "6ffa3b52-e2d5-4262-a6f5-117e86ec0eef"
        },
        "item": {
          "id": "0b854ffc-2889-43c9-ac7e-7d82476f2f5f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "83065f2e-49c0-46c1-a5fd-be5bd5a1c719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59ce41fd-4b1e-454f-a6e7-560e26689a3c",
        "cursor": {
          "ref": "b9834b0a-9d99-42f0-ba2d-a8e988581c78",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "76cf95c0-e308-4f6b-b3cd-dd6a18a6b15b"
        },
        "item": {
          "id": "59ce41fd-4b1e-454f-a6e7-560e26689a3c",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "29fda550-1075-4daa-ba33-31bb5b2412dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3bd081f-9154-44ea-9050-77665d3861e2",
        "cursor": {
          "ref": "6b0f1b2b-601a-4d8f-8179-42baf19ef0a9",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "1b1acd0a-d4ff-452b-a885-e99fd410073c"
        },
        "item": {
          "id": "c3bd081f-9154-44ea-9050-77665d3861e2",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f95cd625-bff1-4c11-9643-7b5528bf929d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6e68943-2a80-4dc3-b220-ae8002cb5c77",
        "cursor": {
          "ref": "ec015eba-9398-4f3e-aadb-203cc32d1495",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "eeb6129c-7dcf-4af5-907c-206b7bd3ebd4"
        },
        "item": {
          "id": "b6e68943-2a80-4dc3-b220-ae8002cb5c77",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "d1e8c566-e09f-476c-bc48-a9b0d37f0fd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7837b81d-1444-48e8-b68f-a591a9bc08fe",
        "cursor": {
          "ref": "96450c98-9fa7-42ea-ad6d-e502704885d7",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d63e4fe2-2353-4d2a-9725-0c57be3d14d3"
        },
        "item": {
          "id": "7837b81d-1444-48e8-b68f-a591a9bc08fe",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "23ca182b-93a8-4ccd-877e-fca16be16905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9467d112-d2ef-4760-909c-55897d5700c9",
        "cursor": {
          "ref": "3491579d-3a15-43e2-8353-c19836f561c1",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "d582d403-21e7-4db7-912a-4c25a94d3c4e"
        },
        "item": {
          "id": "9467d112-d2ef-4760-909c-55897d5700c9",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a3210170-d540-49b8-a63d-5ca16d6786ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb3399e1-a459-400f-94a6-c482f6360cbf",
        "cursor": {
          "ref": "ac41a85e-88d5-4a3d-8a3a-04ade4218821",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b5cdf1f0-f797-45b1-a319-3f612a3b2a76"
        },
        "item": {
          "id": "bb3399e1-a459-400f-94a6-c482f6360cbf",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "3151171a-377e-41c4-b441-066a823eed46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "924fe99f-56c6-4bee-b9c6-ec866db6fa9c",
        "cursor": {
          "ref": "994481f7-de8f-4832-8adf-0af40e1e1b0d",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "1afe27ba-dc7b-43b3-bad3-dd753e1a44ef"
        },
        "item": {
          "id": "924fe99f-56c6-4bee-b9c6-ec866db6fa9c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "da3b2613-1f13-40e6-a014-4d33981379b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b3216af-c119-466a-bfd5-db9b14140edc",
        "cursor": {
          "ref": "8ddc4bfe-a47d-4fc6-bd81-574983f4b762",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "cccdbda1-7d46-4cf4-95e3-544868122348"
        },
        "item": {
          "id": "7b3216af-c119-466a-bfd5-db9b14140edc",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c044aa50-07e7-425d-9b7f-18836f8ce3d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "556afba8-9a63-4752-ae81-b24192ea97ce",
        "cursor": {
          "ref": "29c7cffa-e85b-4f15-bc0f-0341e19e7a9f",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "3f2ea88c-823e-431a-8a2b-d2c04ab3cf0b"
        },
        "item": {
          "id": "556afba8-9a63-4752-ae81-b24192ea97ce",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "e212cec6-8f9c-4275-b2af-fe4fa444d4c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfe10845-09b1-4c50-a019-8df3f497653f",
        "cursor": {
          "ref": "4b53ab59-9a71-489e-b0d9-4b4f16340853",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "97f59dab-dbb8-4e06-a8b1-00674ca69e02"
        },
        "item": {
          "id": "cfe10845-09b1-4c50-a019-8df3f497653f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "06f1ed06-d8d7-4bbc-976e-46434f5c0d92",
          "status": "OK",
          "code": 200,
          "responseTime": 207,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "75226bf3-00e0-4f9d-8185-e4a485e2692b",
        "cursor": {
          "ref": "372fe8ac-6168-4ad8-940a-e7e223d2c939",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a2dd4bff-6201-4738-a6fb-594454a19ff3"
        },
        "item": {
          "id": "75226bf3-00e0-4f9d-8185-e4a485e2692b",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "5abf5399-bca2-416d-80d8-e8f3cf7891fa",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "60fc127c-48e0-4b60-b072-42106218ec31",
        "cursor": {
          "ref": "f6fa3dd3-4ed6-4abf-8e92-e6584bd1a337",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f8e348e9-0f8c-4119-9e87-43e494ea2ad8"
        },
        "item": {
          "id": "60fc127c-48e0-4b60-b072-42106218ec31",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "2baaa7dc-d93a-4598-ba8a-df6a70e96846",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "6988ffa8-0e3e-4d3b-8fe0-638271fa5f9f",
        "cursor": {
          "ref": "dbb89577-f3ad-42c4-b6a4-a1ba5c3bad54",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "073781a6-9825-4c8d-98e0-5b79b7f6fe4a"
        },
        "item": {
          "id": "6988ffa8-0e3e-4d3b-8fe0-638271fa5f9f",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "59744bce-59b9-4d5b-b8fd-5eb8d77e1597",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03bad81a-23f3-481e-b64b-c0cc7dd9091c",
        "cursor": {
          "ref": "906ded02-413e-424a-8e97-c9a09206c04a",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "dad557b8-f621-4408-a03f-8bd2d5898b24"
        },
        "item": {
          "id": "03bad81a-23f3-481e-b64b-c0cc7dd9091c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e935fb67-3150-4aa2-b604-bf07f94cfa64",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "2f35f98a-bd85-484f-acb9-143356955e40",
        "cursor": {
          "ref": "add5ea98-41a0-47e6-9f64-c11d8549e665",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "57e707c5-d65b-4c2e-b8ab-b3cef0542819"
        },
        "item": {
          "id": "2f35f98a-bd85-484f-acb9-143356955e40",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "e76f8dd8-0d3d-4ed0-ad11-0349afde283c",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "7f6ec90f-ac19-4ef8-a84c-9d113d291918",
        "cursor": {
          "ref": "22ed5d37-ed25-413f-bd5e-ebf902865d92",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "6514c838-5a27-4958-b749-18325e845b0e"
        },
        "item": {
          "id": "7f6ec90f-ac19-4ef8-a84c-9d113d291918",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "1a89123a-1e26-4488-8c7e-7808a93b3f9c",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "d93a13bf-a08f-4c2f-aad4-f627dd100cca",
        "cursor": {
          "ref": "8dab162a-53c5-41fa-b33f-d1919c7ca9f3",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "3c80f307-7150-464b-ae4a-b297af1d39a1"
        },
        "item": {
          "id": "d93a13bf-a08f-4c2f-aad4-f627dd100cca",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "6c6f1d2e-b077-4833-8f07-64cf030ca781",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "3a8ee637-8120-4fea-83b6-1c6399206703",
        "cursor": {
          "ref": "337e40f5-c21d-4e0b-ac20-915217485998",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "2a6af06c-a820-4df3-9df1-dde0ace2df66"
        },
        "item": {
          "id": "3a8ee637-8120-4fea-83b6-1c6399206703",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "f33a6da3-ae95-4abe-b4f4-74c490357163",
          "status": "OK",
          "code": 200,
          "responseTime": 217,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "1d7cf9cf-104f-44b3-9c7e-5949028f7e63",
        "cursor": {
          "ref": "4a7a9896-cd49-445d-a1da-bf8f28423c08",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "4f1d2833-5bcb-4005-b41b-79e46aaec03d"
        },
        "item": {
          "id": "1d7cf9cf-104f-44b3-9c7e-5949028f7e63",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "34a7ff0e-a936-4ce6-bc3b-4dbcf7b5bdb8",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "e771d485-0cbb-4bef-936c-1561e48045c3",
        "cursor": {
          "ref": "b71e6610-58bf-4245-95f3-843814bb59a4",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "16b26abc-cf7a-497a-a2f3-cc79400d8741"
        },
        "item": {
          "id": "e771d485-0cbb-4bef-936c-1561e48045c3",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "6b4ea28a-2aba-42cd-bea7-759b2de864ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d994fbc-8750-4b3c-835b-5cbaa97ca077",
        "cursor": {
          "ref": "0c32027e-1332-4090-97b2-da28c90f0794",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "56f327b0-2a2f-42e7-bfc2-2556b2c39082"
        },
        "item": {
          "id": "5d994fbc-8750-4b3c-835b-5cbaa97ca077",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f2dc92f2-2f37-447f-af4b-02c9b5cc0525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5153f90-1242-4447-8163-899cc5f0622b",
        "cursor": {
          "ref": "4c31b91a-c8f3-4cbd-880f-81bbd20c113b",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "052442cd-886a-4408-b42e-d7acfa7eaaa5"
        },
        "item": {
          "id": "c5153f90-1242-4447-8163-899cc5f0622b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "05db39a1-5b94-4d73-90c7-28713d732e91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71265c2b-471e-4d22-9a88-82832f172184",
        "cursor": {
          "ref": "c0eafc21-ef3f-4ff3-9403-dc5392737bda",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7084eae7-0ea8-42a0-9db3-f4801565ddc2"
        },
        "item": {
          "id": "71265c2b-471e-4d22-9a88-82832f172184",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "8e5bf16f-bb87-4697-87e5-76de22bf5f3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee520bf3-c97e-495c-9401-6e0340822873",
        "cursor": {
          "ref": "6ecf07f7-4346-44de-8068-78250ab7d8a9",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "a60aa577-30ee-4fd2-b846-dd8b05fb65d6"
        },
        "item": {
          "id": "ee520bf3-c97e-495c-9401-6e0340822873",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "06c09f26-c365-4a39-b643-953111138b26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e62b0b87-0ab9-4f7f-80d2-30dc12a016b3",
        "cursor": {
          "ref": "b74c9515-92fb-4e62-8c6b-642d6c673403",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "4214eb18-4e5a-4c3f-a921-a33443dfe762"
        },
        "item": {
          "id": "e62b0b87-0ab9-4f7f-80d2-30dc12a016b3",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "420d77bf-cf3a-45a9-bd2d-a67d22dee9dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf695692-15b4-4033-a411-7fda5d5c9c9e",
        "cursor": {
          "ref": "6f55c97d-4aef-45eb-bcd9-1c0ebbdc1737",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "fbde4b6d-95f8-49a5-ac79-b578a9e0088e"
        },
        "item": {
          "id": "bf695692-15b4-4033-a411-7fda5d5c9c9e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "08e0f02b-7275-4677-a280-9f4dd98a506f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c498a616-be1a-4373-8d0d-81fa54ae9ce7",
        "cursor": {
          "ref": "5df8897a-e9f8-4b81-8bd6-96e6b2a8b424",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "fb627d54-6c64-4b72-ab4f-f49089ce031a"
        },
        "item": {
          "id": "c498a616-be1a-4373-8d0d-81fa54ae9ce7",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a3cf8f68-5d3b-431c-9c43-80685bd5454b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64ec8024-4b4c-44cd-b2bb-a5061d72a518",
        "cursor": {
          "ref": "53899963-e165-417e-9309-fc58156f4ce9",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "0f7ce671-fadb-462d-8a0f-5e333cf63c0f"
        },
        "item": {
          "id": "64ec8024-4b4c-44cd-b2bb-a5061d72a518",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "073cdede-ba0e-44bb-acca-7a0ab5956c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50102d9c-6e47-4d82-b09e-6a9e841d6768",
        "cursor": {
          "ref": "a313890f-ff1d-4595-9b1f-cf161831a8f6",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "b44249db-91e7-48b7-931a-2047a9d6c8ca"
        },
        "item": {
          "id": "50102d9c-6e47-4d82-b09e-6a9e841d6768",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "67400a09-ebda-45a7-bea0-d2a6e2102497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8e7a8e7-16a3-4b65-aa7f-31856cf8534b",
        "cursor": {
          "ref": "5b4dd443-3942-4d66-9b25-bd41175db7f6",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "3356edb1-d3e2-4226-9df8-812d3df304e5"
        },
        "item": {
          "id": "c8e7a8e7-16a3-4b65-aa7f-31856cf8534b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d43f3a14-3d8b-4fea-86db-cbed6d32ab54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37cd8c8d-243d-4fa8-b55b-822e9d4c25bb",
        "cursor": {
          "ref": "6b18a217-dddc-4bbd-be22-fe9454af635d",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "af274511-0647-446a-9294-607b5b05526c"
        },
        "item": {
          "id": "37cd8c8d-243d-4fa8-b55b-822e9d4c25bb",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "78bfeddb-12d9-4427-b403-67e5e001ce79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b632e4ce-4da4-4ee3-95e3-cc767e60835e",
        "cursor": {
          "ref": "06114545-1d9c-443b-9c8c-1a85c8608eb4",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "122524c7-d736-471b-b238-5db6e9900f59"
        },
        "item": {
          "id": "b632e4ce-4da4-4ee3-95e3-cc767e60835e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "2b1597a8-15f7-45e5-94c8-78bbf9542a01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "893ea934-c752-407b-9bbb-69706bcf017a",
        "cursor": {
          "ref": "21b8df7c-8adf-43fc-8db9-44e126d8a506",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "51449517-614f-4cd2-9312-9999e4a6a219"
        },
        "item": {
          "id": "893ea934-c752-407b-9bbb-69706bcf017a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f4f80af7-3404-4975-9090-403e112bb8f0",
          "status": "OK",
          "code": 200,
          "responseTime": 213,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "722ab6b6-ba59-46ae-960b-b22c20bc5790",
        "cursor": {
          "ref": "7593e17a-080c-4a33-af48-081668470eac",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "c7885065-5d76-424e-b9fd-efe9a4875ce2"
        },
        "item": {
          "id": "722ab6b6-ba59-46ae-960b-b22c20bc5790",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "288ec201-263f-48a6-b85c-9c154e8353b3",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "d846c1ed-0730-4f7a-9e25-ba141eddec32",
        "cursor": {
          "ref": "c815a0b6-6ad5-4e62-b072-851a9a393bea",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "2a41cc28-8a84-4958-bc1e-1f9d557145ac"
        },
        "item": {
          "id": "d846c1ed-0730-4f7a-9e25-ba141eddec32",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "6052d43b-40ba-4fa0-a45d-be9e0a13ec17",
          "status": "OK",
          "code": 200,
          "responseTime": 160,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "10aeec9e-eb80-4805-8c1b-01a17dfaca5a",
        "cursor": {
          "ref": "e5e6fe9c-7cf3-4196-8d68-bfd0db2a1035",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "fa8c842a-b5c3-4b18-b2b0-3babb48bab5c"
        },
        "item": {
          "id": "10aeec9e-eb80-4805-8c1b-01a17dfaca5a",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "f44b6c97-e1db-4b82-a65f-1257039d7485",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "39ea74ed-4711-483c-82f4-b77f4dedac17",
        "cursor": {
          "ref": "61ada611-0f2e-482a-aba1-4019a303cd82",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c032a5c3-89c7-447f-a5dd-ecac6ee84941"
        },
        "item": {
          "id": "39ea74ed-4711-483c-82f4-b77f4dedac17",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "64a1de63-2689-458b-8989-1c851b5aaadc",
          "status": "OK",
          "code": 200,
          "responseTime": 203,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "2fb84a92-a50b-4462-8666-9f8f91262cb1",
        "cursor": {
          "ref": "074d1728-2486-48d0-a7ea-88b381a15843",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "72b0ff64-e186-4710-9f76-47478a97afca"
        },
        "item": {
          "id": "2fb84a92-a50b-4462-8666-9f8f91262cb1",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "4bbf1dd6-2749-4542-90ec-820ed867c289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fa33d6b-bd38-40a3-b9d5-3e44a9dde9f6",
        "cursor": {
          "ref": "ac7641a3-e949-4ede-a843-ac26e2e2dc81",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "24b53112-753f-4cd9-9445-31ece84350e7"
        },
        "item": {
          "id": "9fa33d6b-bd38-40a3-b9d5-3e44a9dde9f6",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "e44ebc0f-4ccb-4b11-aaee-4f508f25e698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b72ee9f-716a-46e8-a042-072d2f9b1f43",
        "cursor": {
          "ref": "6699898a-bde2-4b60-9ad5-b64e3f1f42b7",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "db570bbe-c658-4f58-83ff-5ee5a65f309a"
        },
        "item": {
          "id": "5b72ee9f-716a-46e8-a042-072d2f9b1f43",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "9d61dae6-0c2e-46d3-bf91-e6480be0e33a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7970e65-543f-497f-8cfb-4a52603ed72a",
        "cursor": {
          "ref": "60448d18-e7b0-42fc-82e1-f69c411af04b",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e18da586-0862-4fa6-9a78-57af2b8d0523"
        },
        "item": {
          "id": "e7970e65-543f-497f-8cfb-4a52603ed72a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "d59c9690-10f2-499c-9fd2-dad91241cb4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58ba43ea-b2d8-4a7f-96a5-37dd16149061",
        "cursor": {
          "ref": "8c69ecfe-2d2c-4ed4-9369-fcebd10377b4",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a52cf313-ddd3-44de-a4df-6e2480f9dcfc"
        },
        "item": {
          "id": "58ba43ea-b2d8-4a7f-96a5-37dd16149061",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "5e350ab1-4abe-40e8-8ae4-09e417564c14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cc237a5-eee8-49a8-b184-413cc29f6b18",
        "cursor": {
          "ref": "943d4e87-3745-4afb-9d30-f3fe1b6064fe",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d08a4aed-a3c3-4722-a219-e2fe47058084"
        },
        "item": {
          "id": "3cc237a5-eee8-49a8-b184-413cc29f6b18",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "fb1fce13-0491-4b72-9417-ed0f2009b111",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87297761-d224-48c1-89fe-0738b6ab274c",
        "cursor": {
          "ref": "8e4b3477-ebb5-49d7-aebb-eebf62f9f575",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "ec578151-e423-4008-9f7b-2e5a1eb42493"
        },
        "item": {
          "id": "87297761-d224-48c1-89fe-0738b6ab274c",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "bcd86bf1-0c58-4c51-b219-153007be7764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c7d6cec-249a-400a-9ba7-b6db88ea111f",
        "cursor": {
          "ref": "ed2dfaaa-3671-412a-ab2d-65850b408128",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "d9751f04-fe3e-43ab-aeb5-f438624dc4de"
        },
        "item": {
          "id": "3c7d6cec-249a-400a-9ba7-b6db88ea111f",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "88b455df-04be-43f6-8310-f785db7ac674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fa317a7-4022-4e94-b03f-0c966879de75",
        "cursor": {
          "ref": "ab5a9652-149d-4072-ba71-13f5f9d5b09a",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "65d56bb1-7cef-40a5-8f9d-1899c3e7f318"
        },
        "item": {
          "id": "6fa317a7-4022-4e94-b03f-0c966879de75",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "46227db1-172a-48fb-8087-b8c86b5a3f60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc096d81-63b1-4d34-a04f-897dea46718c",
        "cursor": {
          "ref": "1f9d4426-ed96-483e-8a75-36e80f2c0d78",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "588ce58b-fde7-479d-964d-5bf24fcbfcc6"
        },
        "item": {
          "id": "fc096d81-63b1-4d34-a04f-897dea46718c",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "eab2c26f-18b5-449e-8ccf-624aef90c009",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9906b7dc-1f55-4823-b8af-91223bc47238",
        "cursor": {
          "ref": "b1cc1d53-1f32-4c29-8559-5eb9d3378adb",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "d05f46e8-22a0-4662-8620-4e47be2e6836"
        },
        "item": {
          "id": "9906b7dc-1f55-4823-b8af-91223bc47238",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c98fbd41-edb9-4cea-ac21-8e3df1c97b13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09994f28-d4ec-4d3e-a54e-3e23347e6ecc",
        "cursor": {
          "ref": "e009ec90-5163-4ff6-9b10-2e8383360c02",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "f02132c3-267a-436e-b139-6b9f0ffa40a1"
        },
        "item": {
          "id": "09994f28-d4ec-4d3e-a54e-3e23347e6ecc",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9cd1b06a-080b-4ba7-9fc4-b13fc25e6517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36cd0c34-dcee-466e-9d2c-c2798264f424",
        "cursor": {
          "ref": "82e61ead-0fc5-465e-80bc-1977328f0808",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "63fb0095-077e-4b6b-bd43-8588cd99698b"
        },
        "item": {
          "id": "36cd0c34-dcee-466e-9d2c-c2798264f424",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "437fc0f3-84f0-4410-bd00-f6b138161feb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7283c17-fc41-4812-b4a3-68220f75f6a9",
        "cursor": {
          "ref": "7dbe91ea-8a17-486f-b3f2-0e826d873c55",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "5323c2cb-b563-4423-ac84-16e39ea1843d"
        },
        "item": {
          "id": "c7283c17-fc41-4812-b4a3-68220f75f6a9",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "92d9e4f0-40af-4b75-b86b-d4fa41a7c2ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab2df5ae-b77b-4675-b218-c1e2b85352a6",
        "cursor": {
          "ref": "78774368-e549-4de5-96b8-67f609fe9d05",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "c3c8afa9-fe17-4105-b4a5-756a0eaaad93"
        },
        "item": {
          "id": "ab2df5ae-b77b-4675-b218-c1e2b85352a6",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "e5ad2955-4c02-4866-8ad9-da118f98a09d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c7acca6-e2b6-42d2-94dc-feb0354e4e34",
        "cursor": {
          "ref": "3d6f2932-69a7-47d5-ac76-d43fae622794",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "d0dad050-9ceb-460b-858b-b89f650c6842"
        },
        "item": {
          "id": "9c7acca6-e2b6-42d2-94dc-feb0354e4e34",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "db2bad0f-adf4-4415-bb74-f6db20167ef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc308307-84c3-4832-ad26-2a94ca205a1f",
        "cursor": {
          "ref": "25226c13-f4fb-4850-ade3-bbd64df6a2e6",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "cc5c8044-9eba-48fc-a472-f2872f2c961b"
        },
        "item": {
          "id": "cc308307-84c3-4832-ad26-2a94ca205a1f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "60a5d1ae-84ef-4a48-a3f0-440378401e95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06bb9cad-2269-4373-b2a1-bc01a49ba61c",
        "cursor": {
          "ref": "95685b6a-1706-46a6-90b9-d8454e23f455",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "138b307d-ccd5-4ef5-b565-ebb1b03948c6"
        },
        "item": {
          "id": "06bb9cad-2269-4373-b2a1-bc01a49ba61c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "739d76cb-53a3-4a9b-9074-8cce02723460",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52cae151-6238-456c-baad-5217ba4f41ee",
        "cursor": {
          "ref": "b4837275-b03d-4b2f-900c-4acbfe82efc0",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "d7a5f7e5-f4e5-4b2c-8327-a4529fa10f3a"
        },
        "item": {
          "id": "52cae151-6238-456c-baad-5217ba4f41ee",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "dcf21595-4b07-4231-9208-150567da4f5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8764253c-3d2c-4d82-a226-a7805afeb430",
        "cursor": {
          "ref": "dc899e37-bc32-4ea0-a2d8-3051dde12ba5",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "ecfd31ee-69ea-49f5-82e9-d2a77ae1fd1b"
        },
        "item": {
          "id": "8764253c-3d2c-4d82-a226-a7805afeb430",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c5949860-c61b-4547-9778-24e9b49e6b49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a51c5607-749a-4262-a0a8-b341d62b9883",
        "cursor": {
          "ref": "db15befb-f107-45b5-9d9e-4ffe3cbb38c7",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "47831c88-d56c-4dc4-9664-d769c45b7351"
        },
        "item": {
          "id": "a51c5607-749a-4262-a0a8-b341d62b9883",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "01d633b0-eb9a-4087-9959-3a7f925a5b37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "304d1f3e-b587-47ba-84b8-2ad5a2a5e3d8",
        "cursor": {
          "ref": "c8f11252-c8d6-4b62-a4f5-cdb865dd017d",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "1df57d9e-396f-4f25-be2f-ed74a5e0923d"
        },
        "item": {
          "id": "304d1f3e-b587-47ba-84b8-2ad5a2a5e3d8",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "cbae5cd4-bce9-4241-ba12-5bc0b6b90da3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee3328c-bcf9-46af-a76b-088247f0e2f2",
        "cursor": {
          "ref": "ad23356e-f32b-4e06-b62e-4e0ff8048f0b",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "9a6b10e0-b3ef-47f2-bf14-d4c5bdb302f5"
        },
        "item": {
          "id": "fee3328c-bcf9-46af-a76b-088247f0e2f2",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "1fd45ad1-dc2a-4182-94c4-347b2709d80f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ec24350-c826-4ff0-ab3f-7ea4f059384f",
        "cursor": {
          "ref": "6c7e6f6b-778b-4e05-b356-b2be14721b28",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "6a919425-7c9c-4f60-a680-407c332929c5"
        },
        "item": {
          "id": "2ec24350-c826-4ff0-ab3f-7ea4f059384f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9301dcb9-b63f-4654-b9f6-08bc46ce05b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81b817af-24f3-420a-953b-545c70b39bad",
        "cursor": {
          "ref": "4ec7ed9b-7c81-4a65-91b7-5ad7dc6bc586",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "ce215ead-3bdf-4044-b80f-363fa19df91f"
        },
        "item": {
          "id": "81b817af-24f3-420a-953b-545c70b39bad",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "3bb66024-ec27-4f26-995a-728f3eefd61a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75a3b110-6504-452e-a5f2-d273643b8344",
        "cursor": {
          "ref": "e82d3415-feb5-4ce7-9322-5c41cf07b14a",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "8312b1b6-cde0-41f0-8339-9582569216ae"
        },
        "item": {
          "id": "75a3b110-6504-452e-a5f2-d273643b8344",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "3c525d51-d57b-45b8-abea-a175d3d4e150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d96bbcbc-c792-4df3-a642-18d00a1809d9",
        "cursor": {
          "ref": "5f14aafe-0434-456d-bd9a-f1d2a1fdb669",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "10bfa5b9-b61c-4c5a-8c22-93e4df3267a8"
        },
        "item": {
          "id": "d96bbcbc-c792-4df3-a642-18d00a1809d9",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "b7a05872-c3ec-41fb-9cb1-3004375aaf98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7795819c-2381-4801-8a40-209521ac2d61",
        "cursor": {
          "ref": "28e2d4d6-2406-43e6-aae5-875cac244677",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "443ea906-81a4-4b20-b1a9-4ea1b9772c9e"
        },
        "item": {
          "id": "7795819c-2381-4801-8a40-209521ac2d61",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "cde70c0b-0fb9-42bf-8e9d-cc8c5020ab83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf3213a7-44e8-468f-8470-96738a0a7ef7",
        "cursor": {
          "ref": "ccae167e-201e-4b16-aa25-8e3c3d6eec00",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "f22d8c4e-d264-4870-8392-9c8d9a4fd5bd"
        },
        "item": {
          "id": "cf3213a7-44e8-468f-8470-96738a0a7ef7",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a13990dd-6cfe-4169-9101-ca248db18947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c687d8-0454-41b8-b5cc-8b9172baa565",
        "cursor": {
          "ref": "f5e0e929-060d-45cd-84c3-ad5e46d49f2c",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "be61d7c1-1550-4aa9-af2a-ff1480b6e270"
        },
        "item": {
          "id": "e8c687d8-0454-41b8-b5cc-8b9172baa565",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d92b765c-d6aa-4727-9721-4b3a0c762599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08c63618-4c53-4653-a404-c34bae428ac7",
        "cursor": {
          "ref": "3e91d70e-c396-4bf4-addc-c506a4cf7b75",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "05e275f2-dd27-4329-b69d-3e5edc2b65ae"
        },
        "item": {
          "id": "08c63618-4c53-4653-a404-c34bae428ac7",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3f717176-deac-416a-b193-95ffc914bdc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2628d609-7ba8-4696-a565-f9f9fe07efb0",
        "cursor": {
          "ref": "0f8ab1c8-5396-4017-b814-f9b8c98b0039",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "cd299e33-6358-44ea-80de-e910ed7374d9"
        },
        "item": {
          "id": "2628d609-7ba8-4696-a565-f9f9fe07efb0",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "6a57ccfd-5ecd-4b27-813a-e6d44531447d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1feceeb4-f756-4de7-9600-b4ad1dc3ad8e",
        "cursor": {
          "ref": "6470b5ac-f554-4277-8f67-6cc707fc5b33",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "3ccf4198-c98f-4104-9669-523343053752"
        },
        "item": {
          "id": "1feceeb4-f756-4de7-9600-b4ad1dc3ad8e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "4667e047-4823-4228-b065-73f5bc720872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47a3a46b-98ba-4bc3-816b-603c91add892",
        "cursor": {
          "ref": "e5ca51f1-a351-419e-a6fc-bb386a9250f2",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "aeaca59f-0eb8-4f4c-a357-d7a132af5ea4"
        },
        "item": {
          "id": "47a3a46b-98ba-4bc3-816b-603c91add892",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "5ef6b018-dc1b-4625-91a3-fbd263e701f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11c05827-a8f7-4e02-b5f9-2d43da12e788",
        "cursor": {
          "ref": "9d72f920-09a7-4dd8-9002-3e8fd90ca73f",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "8a0de9b1-ef1f-44d5-ad79-078dc58d1a09"
        },
        "item": {
          "id": "11c05827-a8f7-4e02-b5f9-2d43da12e788",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b72a3253-f7ef-4d30-a246-087e0aa01088",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "630a8e79-d5a3-4a92-8105-3ff48fa82ad6",
        "cursor": {
          "ref": "36080555-dae0-4433-84f7-17c0555c9dec",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "8591136a-5d1b-41dc-bf82-5d26f9c44ff4"
        },
        "item": {
          "id": "630a8e79-d5a3-4a92-8105-3ff48fa82ad6",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "2bb90846-618d-4701-8179-fbcf23bef64d",
          "status": "OK",
          "code": 200,
          "responseTime": 210,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "21845c63-69ad-4af4-9a34-30b48fbc79a7",
        "cursor": {
          "ref": "b85d5544-5c50-427b-b122-37fba362e4f8",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "2493727c-917b-4639-8011-265f4dad1b1d"
        },
        "item": {
          "id": "21845c63-69ad-4af4-9a34-30b48fbc79a7",
          "name": "credentials_verify"
        },
        "response": {
          "id": "5e0489c8-6556-448d-99a4-a43fddad3732",
          "status": "OK",
          "code": 200,
          "responseTime": 208,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "598013cb-f50b-4351-8c9c-6943acf67569",
        "cursor": {
          "ref": "0277c741-8b0e-4fec-8fd9-413c9488debf",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "c5464855-32b5-4164-b718-39ce4ba5b70c"
        },
        "item": {
          "id": "598013cb-f50b-4351-8c9c-6943acf67569",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "082a400e-6bed-4538-a072-3872dc247180",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed776845-5656-4dae-bacd-6cfa6ca2de9e",
        "cursor": {
          "ref": "8f0e5ad8-dfac-4ec9-9bfe-13f06877ae6e",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "395d7f87-34e4-4723-88b0-be393ddd1853"
        },
        "item": {
          "id": "ed776845-5656-4dae-bacd-6cfa6ca2de9e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "854577e5-71a0-43f0-9ccf-da7425f9e9dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed776845-5656-4dae-bacd-6cfa6ca2de9e",
        "cursor": {
          "ref": "8f0e5ad8-dfac-4ec9-9bfe-13f06877ae6e",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "395d7f87-34e4-4723-88b0-be393ddd1853"
        },
        "item": {
          "id": "ed776845-5656-4dae-bacd-6cfa6ca2de9e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "854577e5-71a0-43f0-9ccf-da7425f9e9dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78de6697-1fad-46b0-8382-c1f4a3fcb6d3",
        "cursor": {
          "ref": "d47daf3f-7ba6-41e0-a83b-3036d4ae5de7",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "ef970113-7f75-44aa-907c-91096a69f31b"
        },
        "item": {
          "id": "78de6697-1fad-46b0-8382-c1f4a3fcb6d3",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "40f2f088-6443-4e00-9dc1-7967d99e5c1e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fca4924-85ed-4a77-b5c8-33ff91bf0768",
        "cursor": {
          "ref": "0fb10a4b-f416-4356-9034-07f7f4950f0e",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "c170d1bb-89f6-4ac1-a90d-353966cfbd69"
        },
        "item": {
          "id": "1fca4924-85ed-4a77-b5c8-33ff91bf0768",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "8f9f5d6c-ca70-4f49-b5a0-d3d80e9a8c94",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}