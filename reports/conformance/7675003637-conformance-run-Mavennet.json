{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "13bfeb0f-d5c6-4594-90aa-8f11154acd38",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ff102e26-362a-434f-9125-11a19a01ce99",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ff06d194-a57a-4cfd-8f5e-08d0aeff289e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "61e93911-8420-4f7b-8a5c-5d4eddd407ba"
                }
              }
            ]
          },
          {
            "id": "f095ff83-40fb-4305-82fa-9d23e31ae49b",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "08118a95-45d3-42e4-9164-3be30b7ba4c0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "db18e7cb-edc3-4223-bdc3-7491ba838daf"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "94e3c39f-1dec-4202-b96e-adfbac500bb8",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "97fc8ff9-8f6c-425e-9958-316fbabcf96f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c6a4db1b-ab82-48d8-89fe-e87aca072c7c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "13f57f66-51ee-4463-b9d9-ffdedfc5d9a7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bbeb358e-bc5d-4b6e-b3af-5c3298df56bf"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "39db0654-efa8-437a-93e9-9db00338822d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "52939bfc-a96a-41ed-a1c6-8ba6084f483a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cf7ec1e9-009a-4442-a340-27286efe1125",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9bc6cfba-edc5-4ab3-bd1e-ec289cbcce11"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a784f279-2ae3-42f1-915a-0425dcd5a6be",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "6a02b8c4-3a8f-4774-8112-dc2dcac3156d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "69968059-0067-47c9-a87f-f63f3f3a2a0b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "65fd3f06-f39d-477b-b3b4-e5aa6307e6d6"
            }
          }
        ]
      },
      {
        "id": "400d7861-a273-46be-a9d3-f999ee5ac44c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "f723ce48-d3f7-47c8-a1ea-5e091df10b73",
            "name": "Negative Testing",
            "item": [
              {
                "id": "78ddac34-fa54-4189-b3e5-fb6a43b1cfb1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5be59673-c3d5-4a45-9c5d-d4da0bec883e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bbecd4f-a378-4ef9-9724-b8ccff201816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e331d34f-e3e2-47ca-9b50-ba0dd8e6f005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f401cb3e-e7cf-45b6-b6bd-776220485cb4",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92f6ac86-7f03-4ba8-b546-9f5193f86834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "94d540d7-976d-4553-a635-8b066237007a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "189a1b3e-6a58-4c7b-ae0c-f220357b0005",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1d1b455-9c09-4482-a23a-95722f9a5014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d17d9948-5cf8-4c0f-91be-1f36a9111647"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8207d4f4-7f18-4717-8752-a78c74855586",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "25a75d69-feaf-4f10-a200-9fe442fa4808",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "135fd5d7-2d26-4a11-9b08-480d18548288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7db95300-abb4-4ebe-8b43-9b7fb5079c72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a2e4b6-df4e-48aa-9647-ce37e5c7d094",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17eb6fa1-d194-4a79-9d71-3fc605ad349f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a5e0d1a6-85b2-47e4-ba25-e0764e376512",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0872a0b8-51e5-4d64-a0ee-9ae62609cabe",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a6da182-694a-4090-a17b-938a24f5dfd6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "6f39536e-1b33-4f28-a8a2-0cca23063efe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "27394761-1a9f-49cf-a6ac-5b635fe5f5ec",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "66c38c53-b362-4d7a-88d8-5dbaf3c8371f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4aff5589-a6d8-4831-967e-367c1ab817af",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "59496c8b-6781-4e27-ab36-0284a44fa1f6"
            }
          }
        ]
      },
      {
        "id": "08f98b27-5260-4496-9209-4cf450be0d86",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "4cec3676-b964-4791-9342-6212491e21cc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6a0d7de9-e194-41e4-8381-d138601225ce",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "eb635d51-ea7c-462f-83ee-7c2af49ad435",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e2ec6e3-f5f0-4b73-a90a-16a5a0b6d92b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26a6008b-d1a5-4592-8220-990ea5404fd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29c990a1-6b8d-43d1-8467-6b311d023bc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "967f36d8-d2d2-44d7-9c78-cd8f8c152c68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0e81241-1776-48a1-a7d5-cd26977e695c",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ce2b228-9e43-4d11-8c0e-a0537b7a52f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e7c1363-02b4-487e-bba2-04c96742d4ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dae14fb3-e724-4d90-8a8e-0bede6d5fe5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b5f71aa9-eee4-4072-b4ab-300e5d0d4be0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "016f75d0-c3e9-424a-be70-9c8e0953d757",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a9c705-510c-4a06-b351-3135ae258fcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ccc6adf-4bca-484d-926c-7431ce3cc69a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f594e5ef-5f59-4c28-88ab-d5c3440ac667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "92caa56b-04e8-496f-8400-b0eb0f135a34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb6cb0c1-5207-4e98-8e3b-5b41dc937053",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9cde0a3-4457-41b6-ac32-c78713a3bf3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19f6d418-d34d-43c4-b33e-53e4a53ac555"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d556f5f4-130b-4027-84f7-e3ddec22505a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d6aad0f-8abd-450c-85bb-3d1410d4a48d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f4d860-b9af-4ce4-8142-54f75541060e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8af37c73-0f66-4de5-bb92-a1a1c5ab5479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a959af22-d5ce-4974-887c-750abda6413a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ee53fd2-3f8c-4296-9453-0db4704d99ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "32e0b2fa-5db6-4bb3-bdbb-f10a7cbb5fa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfbd8229-0601-4bb1-98f3-f72ff99ec5f4",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb161e4-6daf-4f43-a544-9a48c7302b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf9b3122-e67c-4df7-82fb-d4cb47f28e9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e266b49-1304-4155-9baa-493f1523c035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ecc81788-0b24-4d94-a525-5430f44e1267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3fe5bf2-6de7-4c78-8fa0-663658a47166",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1993694-fef4-42bc-8c8f-5daf29de5e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e58c031-4431-4f76-b420-71ce4c101499"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9278fbe2-b973-4181-9185-e390bc4b03a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "61a5949d-fdbc-48a6-bb93-c9fa3fc4e75c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbb16c1b-86de-4bd5-a098-2975a189bbc1",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "424c73fc-274b-460e-9bf1-79dd8c23a9dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9057f888-888e-4c6e-91a9-c681e183e907"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1447588-d591-4b83-af4e-fd6a6d516c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0b8e42c7-0887-4e60-b2ac-da2b0bd7f10c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f514f10-28a5-41f6-a8f1-e6ab648b145a",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e209351d-58ad-41d5-94de-0f3a839f8efd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c008dfeb-0f1e-48da-a3ac-3c267eefe729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f27b5c8-e85f-4d99-9535-4d863410aaf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9dd78066-4aac-462f-9b67-fef1e0c6ebc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d39e5c7-5c86-45ad-843a-799f4935887e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "896de613-5e0b-45d4-a675-0fea9f4cd0c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77b02ac5-3cc8-42d4-b128-839a7690cec7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f47591d-dddb-4732-9514-cc4332b9e0c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae39d194-9a0c-4281-aa86-e453a6bb2f29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf2aba3f-847a-4ae4-8c59-caa889181b52",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6d11ef4-4fc4-42e0-b559-c1cc4fcb0502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59302597-238f-41c6-855d-57165f112a84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "781e6bbf-3fa7-44d3-914c-3f3463a8298b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8e2aff03-178f-41e5-af9b-bf2b85782a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf6e5f36-e0e4-48be-8a40-4aa8eb286a8e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b5f0e2-a269-4e9d-b4e0-acd5e9d37eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb81e223-f7ce-420e-abf9-67d9c032adb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a677d21-8a59-4467-97ab-7d14dc28a5cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea9ad763-853b-4b57-8c69-9fe6420399eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f279ef7-2af5-45c1-b62f-3ee23340010c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46427d20-9502-47bb-a15c-2374bd438a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9768e74-6bc4-406f-9a64-f0f60bed5eae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0737a685-af65-4fcd-98b3-13335a49edf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "44a7cefd-146f-4fe2-9270-3149623cf47c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "622f20a5-a6b5-49ee-8e30-5cfbff71a189",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c69a23df-661f-4571-9571-1c8a21b73b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f509013-e225-42d7-b3db-704bac63b2a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8395ecce-e1b4-430c-9b46-add7e34ff706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ba5beb0-44eb-4d66-a085-cc262e01a8ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f132192d-feb5-461c-8568-726c46024893",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79d2b7c3-841d-4c25-b453-32b85adccee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a0eb608-5c8b-4633-a99e-27ebba245cec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88cf493e-e8b4-432b-a5a0-4571f0d66cdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7311597-0988-42f1-8524-693ebb5ec2d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c33e1c7-052e-42e9-b44e-39168f8022c3",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c75ce7d-10b9-441b-ac66-aa31602779cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "347d546b-5dbd-4776-8874-50e34b034646"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22bc3341-6137-4634-80d5-4b8844e6b3c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "32ca97d0-7a4e-40a4-8221-be78a454c2f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe150388-0c03-48a4-901c-88f39130018b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14afc5bd-9a9d-4342-8b51-f9b5a36cd509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5d065a9-0718-4aa1-b887-dfbd2004cef7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53d038fb-6b61-4575-865d-7938d109f53d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "deaafef6-2e9f-47d8-bcba-0695e67d1308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf27433d-8853-4ddc-bbd7-729d2ca204fd",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b1520b2-d4ac-490e-951b-29d66a4638cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b47e8ca-0166-4a08-8aaa-c230d60fb164"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c63a97b1-da68-4dd2-8c0b-78df7b563e16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a28fcdac-fdef-4c05-ab94-0554210962bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2984c52-c31f-40c4-b5c3-98df95ef2b87",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b0d7c94-e542-43e6-9130-66f40d9e9a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a08683a1-3a7f-485c-aacc-02ef7fb6e0d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "597320f6-4744-4e05-9ff6-d159808fb5d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b9e7206-e201-40ac-af87-9b0850b894db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b0e5f45-0e1a-450b-b21d-bf18f92ceba1",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a3092dd-b562-40a5-adc8-f6c275746ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1456a20-122b-4b0d-b2de-5af8d2cd2e03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe11f010-8f4e-4041-8735-80d18cf3f9e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eaa75ea5-867c-4354-9735-bd4951257fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "016dce22-cd5e-49e6-90bc-932966f1fb19",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6291f3dd-2b09-485e-9b5f-2dcc7f541cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7851741d-976a-46f8-bb4c-e8d482aff698"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69585472-fe4f-4f10-975d-ce7d23d73746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a98f292c-97f7-42ed-8fc8-3a6c616c18b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f065532a-b010-4c7c-92df-0a951250a7bc",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa622db-9385-4b9e-93b6-eb99849c11e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e157ac42-2154-4284-8b2b-20d3bcb3f5ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56601b0f-3069-45f8-8846-1eb50e0353d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6eff788f-1d02-4b8a-ac50-98bb73a06a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "831583f8-40e9-48a2-a5b1-f1e86461fa6c",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fceaa85-2671-49ae-8821-7fad22988c84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f280da2-4e49-4176-b6fd-332a176fbd06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdcf51f0-56d0-45f4-b56c-e66e1559eca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e0f4e9d0-d1e2-44af-af18-27056eca52db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f860a32f-14f0-4e56-973f-74f9cb9d49ee",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5086c93-4033-4d2e-ab15-1afabf91bc7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2df133a8-6ecd-44a2-8206-446763ab0d92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "630f68a5-134f-427a-ac85-0f4a44f45654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ca87f4c-40e8-46c1-95f8-ecd468098038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a8c0cff-4af5-4def-b838-bb3111761cd1",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce0afdc-31ba-413c-9255-15cae3f196dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "819ac176-fb4e-4f17-8102-61ee039d8298"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd36b39-d7f7-48ba-aeb8-fff3c4b8fefd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c633bfc8-de78-480f-beb5-98ef352dbe28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a85949c-cf1f-40a2-b6ef-885a0a9a412f",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ea0adfc-845c-4771-aab8-7c6f12ef3745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43058151-4314-4787-be73-62d7c351dfeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "251f8006-5b49-476f-b2fa-3cc84ccf66a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2459cebd-75d3-4a53-a475-e2ca24831170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5042c39-87b7-45c9-a6f2-6fcb0cb75ecc",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21fcadff-d95a-48e7-85c2-9f6958366f58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01ac6f3e-0742-47da-8bec-b1533f0dda8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81f11a45-6c1a-4ea8-a125-eb75849439bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcb7e955-bbf6-492c-8f1a-972408ae94ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e026ae3-cc4f-4057-a537-b7482fcc52c8",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c9aea4-f561-467d-92e7-193ea46a8002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cd954cf-1c89-4d48-b99b-243d37eca5ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b4c14bf-cb2e-495a-8352-20aabf1e2640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "24ca8cf0-b560-4a57-b9cb-ed8ccaa1f7ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a590e0f3-95d6-42d4-9dbe-348dc2aa262b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "537c3438-5ec4-4331-8029-a6d8de154c69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36406297-0c5f-4f00-b50a-29118a95f193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32253bfb-4d81-49d0-b657-35f88c5b654a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "00dc35a8-79d5-44a8-a483-ac85cf271a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1695c87f-ff7b-4512-ab21-0b0415efea65",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3feb04a6-43d7-421a-992a-be5ad1ad5f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bd89f92-8f7a-4e42-9bc2-452c560681cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc380f7-d54e-49f5-bfb0-7db896cf9b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cdf86dd-99d0-48c5-bddc-4b0e899994c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7351b5c-0693-4215-9b85-c183ce952a49",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a0af11-9db4-47b2-8870-71c6e233e397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37a22bf0-a47c-4dd3-821f-58065bbeeb20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6360c3f-ae46-4fc4-8547-cca764a80dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fe5bd79-1be0-4337-ab59-725c2826a8b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a22fed51-8fec-4b40-a35a-a13725dc39bb",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a9b268a-a7a1-415a-ba0c-ec2ce9a442a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89e109c5-262c-4fbe-96b9-6181452b7cac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef84a0f-f036-42cb-9623-2ad252f61cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "87f6ec55-e8c6-4cfe-8e64-8d565defab01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a023705-377f-49e8-9e55-85c4a6cdca92",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0076330-0f09-4381-b54f-6082410d98b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1912c45-cf1e-4fdc-a98c-89dff4c265b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b28ba75-1101-4b9c-bbd2-aa1e5d68df4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "63ae8dd7-a5ca-4912-a630-c708edd18a10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a8ce15b-19fc-42fe-8480-814133f17b01",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46def6a3-09e6-463a-8cab-7e634463a645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9750d4f0-910a-49c3-915a-d89bc349599a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6080bf3-4d9d-4d0c-bb6b-62f7234a621e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "42ecfbad-4784-46c0-a126-8940b4f465a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f24899f-7632-4718-b6f1-9592e48019bd",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2d9eaef-886b-4076-ba25-e02ed388ad29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54c196c3-5757-41e6-a4b4-37f51f82c1f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77916b5a-c502-4306-a213-0909f0013925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ccd368f2-85fc-4cf5-8679-23177eacc70d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c91df0f-7933-459c-a87c-05c8bfa47b1f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baae98fd-ec6c-44bc-97d5-40ffe7a099a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d4577a53-de3f-4d9d-b578-b4ef25e06466"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2af4b8ae-21f1-48fe-b3d0-12e5984c80c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0416f3d8-3782-4df1-abfb-62b1c2927e12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0a1c1c5-20e3-427b-baff-d759867283f7",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d0d1368-2944-4904-9fe9-5cef8e6c5b47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e85e7cc-cd26-4ea3-a6a7-664052732cbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c26b49dc-5147-4240-81ed-b009c913cbc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eab5ba9d-8699-4fe5-b344-6439a61114ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45832917-6b71-4d19-b81a-087a17cbec27",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faa86eba-0ec0-40f4-bbce-69a2a1a8e113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccb0a857-cfb5-4547-ac5e-93fc7f4a3a49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f1d6d31-00b7-4b1e-8638-4a3335fcab1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f325d812-f761-4dbe-bf3c-cd34fb629372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ad5cf3d-947c-47ff-a8b2-ce343f3bf9db",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b231dd56-e3f3-4e58-a2b7-dd84b5380a14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "478f239d-54bf-40a0-b0e5-4b04fe373098"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "793f9f47-aa81-4bdd-9191-decaee0f086f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "22c38799-5db8-414b-a6ae-026e30743e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d12821-c535-4f61-b1af-3eba940ab47d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0edea7fc-1c22-4d0a-93c3-cd0c2cc67fba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7b153c3-6d9a-4b26-ba43-30effa604a85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7eac8b6-889c-44b8-a7f2-ad9ff9ec96a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "13d1cf5f-4be3-45cb-b891-e92bd69a6bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ed851c1-ad86-4d1b-ab90-bf732d1f2473",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12fd43d0-cde6-4560-8f4b-326463580660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88fdbcdf-d7c8-466c-94f3-101cd0ca41fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d665d16-9bf1-464c-a318-dae06970595b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "58fedef5-e593-4d3c-9b6c-680f9c25401a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34cdc22d-eb25-4df1-ae9e-19094044cd7c",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd1fccc6-1daf-4464-a117-c7a7b642d80b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2860a59f-ba9f-4d07-8b6f-e32148553ac9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4995cd4e-1033-4ac6-b541-4a0204ec7a89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "ade739f7-e6a5-4807-9776-cc5e50ca14b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac18126e-7e41-44fe-ada3-0a333a5b0007",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af71ec15-e680-4ec8-ba17-11fec93ca745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f38d6546-7705-4d01-8d58-1c83a9b83ff3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eaa7d41-c286-47fa-a796-2c1d0674bf52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5bd757d5-1336-4944-b949-070bf45a232f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6d4f8f8-09d0-47ac-9375-bcb3d9ad62ab",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95586291-c9a8-49be-9185-76b3d11388ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5947df8d-d946-4466-9630-de995abe50f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac92745b-e2de-49a3-afaa-396b68f4503d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1185ed6-8401-4703-9c63-2935f23970bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04cf15d9-c352-4637-8258-200058a2b106",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4e0ed8a-c731-405c-887b-42a212cb5410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5f49bb8-5332-4a36-9020-ba01ffcdcad3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd8ffa8c-208a-4444-8298-ace0f4ca3373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9657d125-ffb6-4438-aa23-c36487326104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f114063-1c8c-4ba4-a941-f1a20b439fdb",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e283c76b-bf8b-4a03-89af-e2aa80bf15f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df59dbde-e5f3-4eb2-b127-d3e4bc831cd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05aa786c-750f-4450-becc-80974bf1c492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0db51d4-229c-4f0b-9f75-5948dd284fc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "099d2b02-76e0-4ccb-8719-13594f7fa778",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fe65a1f-940f-4393-a60a-b87ec5c7d80e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b2446bf-c95e-4d66-b330-f52ca0a658af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e5ebd20-a8ee-4166-af7f-b873ae9e4d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "76ab4f4a-5f06-4838-88cf-9d9688e996cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dedc6b11-2dbf-4fe7-aa15-b1ed784ee97a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bcaefd7-7171-402d-9ac5-dfdde0c75914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f2db215-ad40-48db-ad05-10e6b1715f29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a24b6e33-11d4-4a37-af96-1b64949f592e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "178db1b1-8687-436f-b6d3-7d66dabc5981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d655d4f-451c-4c91-ad1b-ee0424f1b257",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e900a58a-4c8d-4f4d-b586-45b7b1bb54db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4487c27b-b265-482f-82f8-76386c335a42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eacaa26e-3eff-466e-98ce-3500b5669513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "17820c3b-6f7f-4540-8438-54c4e6edf632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52a8bd83-9510-450c-b4a3-119e93ec7181",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eb7bcf5-0e06-4e86-a4b7-de13938096ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beb6c47e-f292-407c-9d0b-8f621161e534"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ab8d185-c04a-4213-a8d8-6aaed7e727e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fc037cad-1aca-495e-a5b7-14a426559716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "508248e4-124e-46c7-bb6e-9ffcb5f2877d",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07df186e-af5e-4015-8ece-1bf48e5891e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "575acaa8-6397-4e63-a5f9-cd11258b59f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "885c9363-d2b8-469c-b832-58ab17dfd7e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bc53f5e-f5aa-48d3-b931-e35c251c7d77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e86b37e-35ac-483e-959f-c912cb13f44f",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32655fe7-2284-4d7a-9177-6d6f795910cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25581cb8-5fae-493c-a952-2a01d91611d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b99d9756-544d-43a0-bf5d-af7ef1ee1181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb791615-8e9e-4bc0-bdec-4c408dfecec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e7fd0b2-a6f8-4531-b12a-6358efa5c859",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f36863e7-199b-405f-8dfc-13c8f263227f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ebd3fac-0559-45b9-83b9-faad4751b040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "654655d9-7c1f-4268-b780-3bb9662ae226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "822e3012-e225-4cb3-907a-bbb162310a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2073be02-9a2f-4f3a-bdfc-bb51afb0d486",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50fde8ed-e127-4221-8d7d-53dc7220bce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55fd4b85-0b73-44c9-a559-93a3080c4137"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "102cd204-2591-48eb-b3c1-eceffcd39159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ae2c8ea-e14e-4883-b9c9-cfa616dc13f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f165a04-6fb1-4266-8665-267b30ff36af",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49bba794-ece2-4ebf-a3a0-bd4a4b558a6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "506c89b5-6e5d-470a-aac2-91659fcebe5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45e3600c-a2d0-4e6b-8845-9c2c9121283b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "064beaed-8cde-435e-8601-9eecda0e4cb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06e3ceb0-4142-4a13-9132-7c7f43ddbad2",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e1fd74-5176-4f04-af8b-de03452f1110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9ab0a52-b585-44a3-b868-337a77e6e717"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37724170-7427-4205-814b-babbff312027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "12cf79af-534d-4382-845f-a672545f736a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99107027-095c-4845-91fa-81e913b72557",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1ebbc74-74fb-4904-8d49-72c61186d813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09e496d2-e2dd-475a-a05b-199b35b0c686"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "639bd8be-241b-4c2e-8101-d47e5c0b4dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa93e51c-d14d-497e-b012-2b237e6ca38f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "639b7e8e-eb06-4873-8a2a-f5052e998c76",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f8cffce-3702-4e92-9281-967169106e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0860a7f-52e1-4d1f-b835-7ed235b30116"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92ff19ee-cb02-4249-b98a-763b53646b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf632f95-fa37-4032-9fba-7420f59003cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ded5504-f68a-420f-9ce2-c48fdf73c8b4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34528bc0-969b-482e-88ec-d0dbab0d70b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3f61831-3958-472f-9f3d-9a69d5ccc643"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9cabbb0-fa62-4e12-8d4f-8258878fdff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ee55f25-4b54-4018-8dd3-38dd8e3a6c72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54bdde48-d08c-4906-92fa-71dab4faf239",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "299ca20d-9347-4aa6-b494-daa4f7ebb535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cc856cf-e53b-410d-9d71-812ab92234b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d8cff02-248d-4e62-89ed-2d2a291b45ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "40de7d5d-1593-4636-9f6e-a87e2265355c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b2ef950-535c-4b9c-b41a-1eb5a09dcbe6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7693b653-11e4-4e48-8d9c-40a4b62eeed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8643fc1b-11cd-41a1-8f2d-78a28e03be65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adb8d644-f34c-4a95-98ca-b084190acfd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7fd4321d-5ca6-4e43-a6e7-b634d59aca3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b66f7a7-092e-4cde-8624-686e04d77aaa",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ca199af-056b-4a44-b193-434794b2908a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "439d64dc-3f6f-4f79-93b6-d45106377593"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb43279a-88d7-40e6-b123-d60345a76a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "85397918-b733-42a2-9861-445599579570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "949cc8e5-d12e-4277-a9d3-a21d0fffa542",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9760004d-3ba9-48db-9c66-619e02bd485c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3abdab2a-a42f-4ee9-b427-238dabfb76f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c2b0c2f-631d-4f29-8bb2-7de9a2a02463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "deb405c3-6477-4db4-b6ac-e0083038692c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "799addec-4983-455e-8288-a6122cc94c6f",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b6a2e80-e285-4489-8240-3d5d0e37edb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce6ac25e-6a2e-40dd-94e3-baa76ae5c9a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b56bbc74-4b4d-4967-8029-1b2b7acd400e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "54a6d5e1-d754-4f52-8984-7d6b6114fbe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc8e5dba-cee9-4a6d-9bca-2b1527a24ad1",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59ab36eb-85f5-48be-aa21-d351f814a011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2721f73-a190-451e-ade0-9378af094a13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae9aeb99-0cc8-4a39-9dd1-4f8f4b6588a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0da85d90-656f-4637-9aa6-a1079ade799c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea43f27a-a8e5-47d5-a9ea-a77c70cfef73",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "436ad9d8-9199-4948-bb00-b6991a347532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7014cad5-7174-4832-81b7-9bb6e8ee7823"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a914cc2b-6358-4682-baba-31d8db1f61ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1c7ec85-401e-4902-90a7-9685c1ba8296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48094fa9-f318-440b-a75e-31a8266ddd4e",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "858c04ac-1ff9-4b52-96b2-bc723889fdf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25ebc4af-5e30-4c87-b091-dedfc0c92e85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e51668-6325-432a-9984-ec5fc329bc8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6060e9ce-7efb-4616-b2fd-9b9e16aa0fe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5ec4676-034d-40f0-8539-bfa6ccef6127",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d5a464d-d178-44d3-8140-9a7c79f21beb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ec093a5-faa0-455b-ad33-ca101eb4a1a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c256be8-f3f6-48bb-b659-408bed6af473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cf73fc6-1ed7-48bc-a8f2-d26ca2bd196f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afa54497-2cc4-4aed-bbc3-bfb3119c8874",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb13985-9345-46cf-b6d3-92407d8aac0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be36b09a-f2ef-4429-b4bd-b0c8da07e7d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f900e885-b976-425d-a90c-8c50a7a05b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "641310a0-e378-4046-a01a-df7f1f55cff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac34fa55-f40e-45f7-ad5e-200507ca1c68",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0800a3ad-0c92-436f-acb0-af09a3d33028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "833bfb0a-aad6-4fdd-9876-d212376f93eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2cbf98c-6c8b-405d-a3f7-464651a3568b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "20f60674-c91d-4f74-ab4e-4ee55b2ad228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1f74b3f-f0e1-45b6-9ea6-7a56887c0da5",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e481960-ea9f-46ab-957b-5a32f68657fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbd1dece-24ac-4730-b129-dc63cad6d6dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bf682e5-ce5d-42fa-afc9-f5eaafa96981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b331a8f-f572-4e9a-bd35-f22f7793b246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48d069ee-8705-4084-b992-2033fe37d8a5",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb26e5b2-d757-4c80-9b93-76cd857ec434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f73e531c-0ae0-4a0a-b4e6-bb8c23840473"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52419d0a-760d-4d08-84da-d4b8a64edd8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "07033219-0839-406b-ad9b-0cecaf7fb7ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "848d6276-a12d-4722-ab0d-539cc0fcab52",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "562da0d7-2f39-45c5-b3f1-ee8c717017fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a90f85ac-085f-4df1-930c-b4424084c2ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd1e2a9d-b4ce-4179-b85d-2aa8b2332efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1ee45c2-393e-4cc7-900f-5400f668a296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c276712-89bb-43f1-9e5a-3ae372157080",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a68a148-1a26-4937-af0b-0a2bed967952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c98b7e6f-ca51-4cb0-9179-38dd5e50fd36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6658ea0d-80b9-4efd-b4bc-1d905810c872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "95366343-5a1a-4ad8-b8e9-d2312c4e6d95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e87b49f7-5f54-429b-97be-81a01a830b39",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "240b3467-fdc6-4ec3-a904-539858ca8994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "206188b9-2601-45c0-9673-89c0ed332b61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "874ba5f4-6ae1-48ad-856f-79ee3ec6d704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "04ac2aa8-51ac-4eee-8c7e-aa13522739fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b69dce09-3d7a-4893-9195-ff12df62d071",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e8e6ce9-b577-4538-b45a-b7124d068d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea1e6d8e-066c-463e-9c59-ee8dbf7765b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da3f1efd-4ace-4fc9-8f54-5aad8d1715e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d81c3c2b-0957-42e2-b7b9-70320296d55a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba389943-5a68-460d-b9ce-0e46bab9835f",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71e5b916-aca5-42a7-8829-f26e7533f02b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "485d81ef-8859-4b11-9b6a-4eea875f2482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28d39d77-866c-4b66-b148-e13b708eaee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2796be1-2c48-468b-9562-21232ff4ea10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "476eb98d-2903-4655-ba54-4d36dcfa14a1",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3376ed87-9bf0-4ecf-ae1f-a06f0249199f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60bbcf68-7f4d-4fcd-b0e4-f07afa4a7237"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40bd6bee-7f6e-49b2-910c-f12b128c0f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a5aae42-90d0-4f0c-b6a0-22ff59335f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5130a256-f1db-423f-a5e2-559352bba787",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e209118f-0898-4ccd-bea0-2c2e3c047568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6600f299-71c9-45df-9ad7-ee50e2a6b3bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68528a0e-5128-4c9a-8f69-fec334ff4d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a9926646-0806-42f4-8868-b2a859d641ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce9329cb-b282-452a-94e4-4de30af6f127",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad934b9-727c-4a9e-a039-8e26cc2fb924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a26c7364-b423-4ae9-8abf-1864b6a81c55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b9498d6-11fa-4b75-bb92-ba17650ba9c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a85862d0-8460-4b59-9d38-2cba885dbbca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f3937b8-4098-4d32-8c08-c32b39bb6bfd",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab3bba38-40f9-4b87-904d-8e8a8e5e3d59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "326b5339-1a4d-44de-af76-41bbc4c0016d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeeef171-8da8-4db5-817b-3ba994f452fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bee5206-f646-4c62-acc9-054421401e5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14065ff4-00b3-4426-8ae5-7f29f3a9254c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8aea284-9b5c-4948-b3e7-967d6a37ba4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e805367-a996-4edc-9d56-ebf8b083296b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bd0d2dc-131e-40ab-8711-4c8b1829139a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce483710-006e-45dc-bc1a-64877b80e54b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "426e37ae-a5b5-4b47-bf39-68c82b02ea48",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2166f1eb-1bc6-4e59-8796-7736acd59570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c1a67da-008c-4d0c-b5b0-dda478ae4216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c1ad32-6a5a-4930-bf84-d45f6e692408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8456e466-1236-4bd6-be19-372d6f9df001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d903f174-3b7f-46ab-8949-e27a4b263762",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a906b098-c5fd-4270-a090-2997ac67a70a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97375679-9e80-4fa2-9515-f53433120dc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd6fbaa-f3c9-4b87-9cf6-39bb94229b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "17de4932-2ee3-49f0-92b9-7cc1db211c69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7ca936a-609a-48de-af60-f12188d26f57",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e15bc6e0-6704-4db8-9e4a-aabd43048483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db4f7fe6-0411-40d9-8d7e-e89deae5c478"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67c1bfd6-02f5-4ebd-b238-9b64ae56113e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ea93e782-c99a-4782-a7e6-6722478a73be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61ecec62-c815-4642-80d5-4e912ac0a129",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82e957c5-943e-4938-ac31-4081f105f4ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eec04e97-0bd4-472a-b474-89b3c84b346f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b034f77-fe34-42f1-aa7a-a3dfd0b060f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "06a0f735-794c-49d1-9700-3aef6abd4c42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0b30778-470c-4330-83f9-a731d7ec81d1",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f68bf805-d17b-4e67-bdde-374df7bfb014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d810231-fd3f-4572-a7ee-16240b958105"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b99d1e17-c7b9-448a-a217-0f407d50c786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "185a92e7-ff04-4b3a-ab46-407045fde714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07bc3da3-fabb-4472-aee1-9fb0709766da",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34d470ac-dd81-493e-b45d-be62643ed691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a222a0e7-ea61-49e3-b44d-d803dfa0013e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3ddd46e-fc77-41e7-96e2-2b62fcfe3763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "30e7915b-d1dd-435b-98ef-0d3c902e2916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a9b797-56d4-425c-8119-fb90452aed93",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5966b329-2950-4d6e-a30c-78cc3eb1ffff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f24a0b99-34b7-4cf4-a04f-0c088e693c99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "570f136b-0807-42a5-82f4-07a166bc260a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "faf555ac-c06e-4706-85a9-14e696fdac2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eccc3b55-7e23-4bbb-9811-9f20798ff193",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c05e4faf-e1ab-45c4-84a3-0a994c9e4dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3554667c-fd1a-4106-ab22-b84b1f3bdf58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b2297a1-39d1-40d0-8a61-fcf307906e23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f5cdc55f-dc36-4063-9e91-bd48a1748a8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fb7dbb0-7ba4-46a4-a294-25ebc5a43325",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b6c2dfb-c569-41a9-ab7c-2db8d6c10dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80950e45-64d5-4f0f-9ba6-eb099e493ac9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4363546-5e97-4e73-b3e5-ccc52b96e78b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "16c94c8b-77b6-47d0-82c1-519953d4cd46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebb5d44d-816a-49a5-837b-25c9bc9467e5",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e85b902-5202-4b48-8c78-a80e59ffdfb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "787eed45-cb59-486d-8b50-5f866d95b2da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcb88fdc-17a4-4355-a9fa-0bf4f81351a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f78d47dd-d836-4a43-9778-d20cd21df44c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "646e7535-ac45-4af9-96a1-57fe7d99a76b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2120fe78-e738-4228-ae46-4cc156f05ae7",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14a27e44-038e-49f4-b3eb-9db68810ae57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "94f7af0e-3ee3-4711-ad73-a97c8cbd6cc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32567476-ded5-421d-9ccd-322329ceb613",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c12851e-ce6a-4765-807f-405b048ddd85"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8c15befc-6475-417d-8046-dfa07cf3d240",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41d2020d-e55c-4bbf-8026-6e5c669884ee"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a252dce8-3f0a-4117-8dc3-911e50e1bbd3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "37d6d3ac-7c06-4cc6-bcdc-3f8b8466b489"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "348ac23b-2951-4265-b4f0-6fa5eabe1eca",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a690d4ab-4c04-42af-9aee-0fff52042539"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3d2fe440-3f1f-4cc6-adbf-b5cc8eb93df3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "adc91b14-0f47-4bbe-83a1-2aa88d2dfc4c"
                }
              }
            ]
          },
          {
            "id": "03031735-561f-4551-b26c-e6e90fbce68a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "73d095bf-b883-4e14-8e95-1cc1941ce584",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "8f90f8e1-00f5-4051-a8ea-623a093fab00",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "023bca6f-ae6f-4709-99ee-88b2496485e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "3d022e98-6612-4d81-8bc0-a9a299ee28fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "090eb746-8cd7-453f-8c13-a411f8fc5f4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de71596a-8e76-41fb-80b0-e392955976e7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "15873708-0f2a-493d-991f-b0a02f43d4ec",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "befb8fb6-9f3a-4f5d-84dc-1c175a291b2e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b671ff28-a1fe-4e1b-9217-2b568c5ce499"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75c630d2-5cec-4925-b803-269820196abc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ae4e4c90-7f59-4af1-9b3d-e6fccc214d4f"
                    }
                  }
                ]
              },
              {
                "id": "723627d9-080f-4a3d-b863-3cfed9f60a8d",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b2f5133-f731-4942-8782-c8e59667efca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4eb2557f-9335-449a-b788-edfe75dc1633"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f401e7f2-8d23-4582-92c7-65b01a11a5e6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "954036c3-a872-4c45-81d2-7e8d3c96d6db"
                    }
                  }
                ]
              },
              {
                "id": "7b1d4dc2-dd38-4ad8-b020-82f9b601249c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4020c953-34f2-49f9-b917-2e66e24a7aa6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "471d0406-068b-4a21-a318-847779b60b2e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "45395b63-0a27-4cf4-9984-a074bf707430",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "538747d7-71ae-4ec4-a53d-9c0f2bc87b1f"
                    }
                  }
                ]
              },
              {
                "id": "8d331b4c-7374-4b89-a48c-86971bec4ff2",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a2d4eb01-cb38-4191-add9-40fbcc934cd6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e382e8a7-6d2b-4b34-b5cc-ea0b863e7fb7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dfb408a0-b240-4f14-90c0-e10415026abf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "3590dbf0-0070-474c-acdd-548e9b9cace4"
                    }
                  }
                ]
              },
              {
                "id": "40c13518-82e3-4ba7-9630-aefccc98f91f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0d63f0f-63a8-4b59-bf36-5a84b43333e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "86cf3e67-2f95-4674-85fa-f7f75a0f3f3b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8349c899-7ed8-4cbe-939f-e71a489810ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "54df8bb8-fef2-4a0c-a7ad-6238d4f000d8"
                    }
                  }
                ]
              },
              {
                "id": "9166efb8-d861-499b-ae2e-5b11e85529c6",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "62df3967-6883-48ed-a1ed-ea85d7033762",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "70090b8d-25d8-4b73-a36e-376a5e92937e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f1950878-b153-4de6-868f-61100e4d607f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b3d627fa-2361-4512-b199-55049e75fefd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2f193c37-81a1-4ce4-8def-3f6a54e2d244",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fb89011b-e06d-4ca4-987b-ad631981d82b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b60bbd07-96f4-4ce8-a855-372ae9012d93",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c25152b8-e080-4208-8da4-3ac0cec879f5"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e1544cf4-9858-460e-a4f7-627170ac6620",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "a3723fed-516f-4963-84bd-fff933d951b2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ff8fb2d7-1858-4bca-b37e-1b70a4d145b6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d5da04b9-3cdf-45c3-b346-932d7fd479b3"
            }
          }
        ]
      },
      {
        "id": "9b30ba78-6f7f-4477-aa85-6b8615b7fcaa",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "7b9a9b90-ea9d-40ef-a1b7-1475eebe7500",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0fd4df23-ee54-4cd3-81be-c18ca83d90f7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a67f8c69-e2df-48d1-a22b-0f365c11972b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "823d24ce-8709-4120-adbf-c5ac0b0937de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f4b6e77-d202-4915-8091-5cabf042e04b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb0ef41b-5d34-418b-9eec-6a72786539a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc680973-dfb4-4d15-8ae7-a9da1da69d6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a15b66-4940-455a-b9cf-3d981e8ab4c9",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e86c340d-76c3-4730-a59c-7a1bc1fd438b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3653b11b-aced-49ea-96c8-e3c3fdce3c33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65790247-cbe0-4fa1-b292-d36bd32acace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b945343-1abd-40b5-be23-53cae986d3b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "206e0910-8eef-4cd4-b073-079f70386c57",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16d09410-98fb-42a2-8218-d7d742f132ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1a895f6-59dd-43f5-bfc9-d04d049b401d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5819ddd9-d140-43b9-9355-9e1a8ee37786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ab469d6-4949-4c26-b4c1-134f8d93ec17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92943d1a-51ae-4b67-adb1-4caf2a84c5b3",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a58a3ac-b8bd-4418-8878-abdcbcf49bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7512ebc6-abba-40a0-984f-0622b32680f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8d3bbad-53cc-46c8-8706-855cf3971724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1473fdd3-6b09-4b73-9f19-0dddef02b1ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05733a04-3a5b-4a7a-82f7-899475bf84df",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a0c151-ea1e-44d4-b2d7-b0e551bf05a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9e56a42-d59c-4fdf-9536-eccedec30128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5879e8f-a429-4ed5-9a21-fdabe76cf374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6e653bc-6087-4eed-a3b7-f02951bbb2ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "128c485d-4b03-4361-93ec-fcf6d18f8b9a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65548f1e-9249-4b62-8796-4eb27733c29d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd3c2f9e-a0a8-4258-aac2-994c79c6a710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82738d99-ac14-4110-b1e5-34e60cca1b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0adb7437-b718-46b9-9c0b-e85f2694ffbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38655c68-cf72-47d3-bb5f-b50f64555523",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ebc46a-6b1d-48fe-92ea-a56ddeb1c25c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3827d538-0097-4dae-8325-230285783823"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad2e97a0-41cd-4f74-9cc3-93d590336c84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6822d301-6284-440e-9a58-b7308f249b76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a85ca91-bc08-4318-9997-52c5ffbf116b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46e48f8a-287f-403d-9020-19657d393adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c59eb079-f263-465c-90bd-c2a7d7b596fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fa2e813-d3ac-41c6-84e9-c7f8686fd884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2dd770d5-9a46-4d06-8730-7cdea48a59e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93b22ce0-3f35-4878-ab75-a286d0da7353",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f20e9e83-6d9f-4d23-97db-54148d29cc77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "804d0931-f09c-44b8-bf16-64fe5a2cafcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "918e0c03-8de1-4725-9885-45da93ff1ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "08064b56-6e80-407f-b75f-933350fdaadd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e9b45fb-ddc9-44f9-9f59-13a17a531c56",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88059b60-58ab-4183-a00a-14dfbc160dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "108eac7c-f22e-4168-bb5d-71f4ab09d65c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d01ca3b7-82c1-48ba-aa4a-b93ef86d2021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "71618547-41c1-448c-8bf9-4a48ac4188e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf0824e3-924f-4aad-846e-107f5db40e22",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ccbd09-9e52-41f1-9704-43d22991bdb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "834497e2-77bb-4d0e-9825-58126e3c13ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ad3d19-52c4-4df1-910e-d184762fcb9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "26cd0004-4c6d-4055-b381-418badfd04c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f30b8ed-7030-47f4-a8fc-7db7daf4d698",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c56bbaf4-23ea-4aab-b2ed-6b189667e88f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9a954ad-2830-462a-b6be-185c136a9396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae7abae-6a8b-49f1-802d-88dfa1299106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1c18f716-b7a7-42ad-aad1-54e53a6163b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a63c22a-f014-4c37-aa32-16b6a450a62b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c1f26bc-0825-4616-b73e-f090b0a77edb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de79fafe-e034-4d72-af11-973b05787a7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d569eb6e-74c4-4b34-8913-5e51773efd94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5638dc99-d136-4eb0-90ad-0c1c0e59d0b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8f2447c-0630-426a-93d2-063c8f975514",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f648d451-f4de-4602-a15c-aa30448ea9d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03447e2e-b839-4d85-81aa-f9e6215d60f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66c92595-dee4-4ca4-a705-5048a4cac864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdba67b2-6270-4914-b1db-e0c6d90a7bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "197fdf2a-7a5d-4b70-acfa-255307cc49e3",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69108a1d-258d-4075-9dec-b9f27dcc9ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eb71a50-9cc8-4cff-a752-c1cf8a139a54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e1da9f0-72f1-4d6e-923b-a0891a75e4a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "24591b30-99fb-4311-b76f-cc64ffaed02d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c89a9d5-5763-4ca9-843b-14068a89d284",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be5e57b9-8fa7-496c-94bd-62e7350b486d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53e41a15-f169-40aa-ba37-f57a11d1add3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "330665c4-9aa2-4593-84c7-edd8c0c147d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "1718d540-0c6b-4999-bcff-2f914d60c781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "028327ca-2768-4caf-bfee-f2668f561a43",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79206d0c-8924-41d0-9058-1b62c451b8c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "383e58d2-f03b-47cc-a619-f976673f97c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b064260-7a67-490f-a1c7-030718f039ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e35955d-3fd4-4e2a-8bfa-05d584be37ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d827d1-c273-4265-a683-aab734a8ccf1",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a583759-7935-49e3-952c-c0f2754f00fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7374a6bd-1eef-4118-80d7-5197e6280f8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c00bc5b0-5fb3-4bad-9723-66f5a43d2d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0efe143e-2ccc-4982-bc16-35b5a55c9666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c46d5452-198b-4857-a2d1-c65f62ad4dd9",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fc0b7b6-7d00-489d-9d19-ff56be722340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fc4ac46-32ac-4a41-b82e-571452cce10b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b26e682-6f68-4dab-bc20-5dec16773ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1732b776-b66a-42ca-8a30-514ec6494147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab4bc86-d5ec-48a4-b854-f4e51b29a5bf",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbc9cd48-0cbb-4a13-a227-a4219a5f17d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16befb60-3833-4cff-9b16-bc9657b2ebf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58c3aeea-0350-4381-9543-55f7dad2fcfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a1e6965-e753-46de-8218-3d18490b3c01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47627742-e3a5-459e-bb6b-81e02ab52681",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37ecb626-9eb7-4303-815e-e3cdbd931ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8ebcedd-7898-401d-848c-f8f4476db18d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b2d9b8-710c-46c4-b97a-b10d7d52d792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fe53ae2-ade3-4446-b13e-94547d109d36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ac987ae-1527-493e-a239-1e058f31375c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea10387-4eb9-47e4-aa1f-7700f1675f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26d5d3fb-e098-4896-b656-8c259c5c5e3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16155e33-9571-4dea-8619-703f09a364de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e7d58a2-59a2-4bc6-8586-2f93d863a11e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "790001c4-9e99-44be-82cf-39e20c4b673c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af8cf268-a099-4647-b1e9-b9cde597912d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f9b4fdf-1228-42a1-9587-782ee00c35e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad714565-e4e3-4ca5-82cd-82a8c9c91ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a518a13b-bd10-45ee-a926-430792e6d2ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d9d537-6378-4773-a729-9c5c85b9f97b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e773fc4b-bd5d-4d62-acf9-ef2a4e3c9d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99444123-3e79-4e40-a3df-ca17c3579608"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd601eb-f39f-4477-b8ec-0ddd2c605c0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d20123ab-f97b-440d-90b8-74a6634cb414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72920c5e-eda5-4607-982d-b25b2a0e618f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb1e8c1c-267f-4e7d-a604-5cc6f40b7be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "361f3e71-30e5-48fa-8de2-2909c18d437f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4a04a0d-4872-454d-9d10-bc03ca1751f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4265008-6871-4227-bcb5-138617ce79cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d385d88a-2ac3-42a6-b5b1-7a7c0732df92",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8701584-30a0-4a0e-8340-874847ecbe92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8df3d93-fff9-4ff9-b1f4-bd363f851201"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c9a6bd-55b4-4a14-904b-d381536738c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b73ace5b-f47c-43c7-a7bb-736424c440c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f8fa333-fa68-40e2-a5fe-7b7f13854d3d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f126181-7dc2-48c2-aa3e-29451aaea7af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9656077-f896-4480-ad7f-3618107892b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bbecf71-7232-4fcf-a4a5-173cb1979dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d76d581-3372-4646-b3aa-ebab287ee2fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cc19dda-247b-45bf-a9fe-c50d91560592",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54dc69fa-64e2-44d7-9b13-f464b8201a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f4990d1-c725-450e-8068-207eb445b9c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "913b2732-c1d8-47e7-b22f-ae058e2f3f52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "659adaa6-6c46-4681-a459-65d2e5d2eedc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ab62f8c-2cfe-4d34-bc00-24a6f287fdc1",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49af8c06-8561-4e49-8587-0481410bf335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "793a5964-149c-4307-bbd6-dcaba76c71d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9383059-89aa-488c-8453-99421a27cfe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c905288b-b8bb-43fd-94fe-cdab3e0feb78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04587083-1780-4d75-b57d-1eea4660e8d9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40feede8-5e9e-4737-a339-e38e847d48f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1be7ed1f-7830-4e9f-ad0d-2af9cb989926"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df7e6cc6-1461-4a99-9bac-528353274c80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "218163d5-d894-4749-99f9-ec81c6d4490b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c770b9d5-85f2-4701-97cf-901664901ead",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11adc58c-a0c0-44e0-8229-679eb2ee6ea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f4f4138-f720-4055-870b-c331e1710a5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ac08549-abbb-4c8b-9789-9e1bdbd4415d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5143fa5a-02c7-432a-8492-f4766eb9cc66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81b6f960-6ec5-4595-a56d-15351cad334f",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75caae72-b7de-4f90-bb9e-4b857ed9c3e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a88576f3-c5ab-49b0-b58f-85972e871354"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c07185f2-5c16-4517-bce0-d8482b195a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bfd91d6-ef34-4d10-9d68-f24964b907fa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "924f1243-dd4c-4a21-9736-a41d3d668107",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7331b094-5eeb-4df5-ad1e-9a17ca1e328f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ba0a4e5-3645-491b-a854-d4415fbf6838",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d53fcb44-b60e-4e8c-b15e-1d5f377a1126"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f20ddc3e-f08b-4723-b59a-4f635d3ee939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d96d0a30-9b17-48ef-ba9c-1e21affd4284"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8a9fa9f3-58ea-4b45-9f3c-771c87811bf2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9e26499f-739b-4a93-bc44-ea154c28b898"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "74928a5c-c242-4af4-9f96-b61599f09a41",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c5c3fa52-8138-454d-bb4b-09aa7133fe4f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8e4836d7-152e-4321-bd5a-71e45661d5e3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ebf181d5-3b4e-47d8-9e86-4881e8a05097"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a7fff6a0-56b0-4edb-96f2-09ec546e2ad5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "65ac2734-66a4-425f-927f-c3ddc7eada92"
            }
          }
        ]
      },
      {
        "id": "57302948-970e-4106-8621-35f57a4a5803",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "44a5fcf7-3f61-4237-9fba-53f8733fb334",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c27fbff5-8016-4ca8-a01d-69b098c4e8f8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "869c5a7c-8650-403c-9398-833494d6bf73",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5101d702-88ba-4a3c-9bbd-94c30636bd63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcd71787-12e9-49fb-aa6a-7abaf34e8b74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25fc9eb9-1fc7-4e7b-aac1-5f6c9def149f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba21886f-9875-420a-932b-dfae2564e5b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c94d87-2013-4e5c-b683-c4e49fefac24",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cf886de-f1da-475c-adb3-bb24f0980ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f111a207-48da-4073-a828-493072adad59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ba73b25-adc7-4952-832d-a6e1096517ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "25f255ca-7dc2-4b69-be9b-5ff9e7730b47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "196a8684-ccec-4973-ae70-483a1cdaae9c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b63eee8-2051-461f-a93e-fbb2d35cc4c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11078c53-4186-40e6-bc52-a7cbf46e85da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7b8756e-f8ad-4c6a-a64d-c57762c532c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "61cf9ab1-6b4b-4e67-931d-4495f9a6d741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc162208-2e22-4c88-901c-6b4458a16b11",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc9e6026-7862-4608-8400-041ef99d96e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19de817c-71f7-4943-8ad1-9206c521f6a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "122dce63-2b09-4357-8135-2d5d6f8ca08e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "798dda00-a6b4-471d-9db6-96e3d2220dac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e3687d4-b27a-4058-81e0-5069ac035707",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e0dc5bd-f608-4c75-acdc-f3db80bf1407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d1be54a-4e9f-4387-9da2-a136af085841"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea32fa9f-e7e5-4bc0-ba88-320bf5af4388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "130fac2c-05dc-41ec-a14e-8730929b38db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e468aa80-4d15-40b2-b94e-826ac37840e0",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1723a1-b689-4858-b7c7-cdd067766999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3b805a4-8c5a-4103-a0f6-f1d2d4a5e964"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f3a0cad-f104-4ea5-99f1-0f045e87c5e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "afec32b4-38f2-423e-bb8d-cb6238d45bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26877c64-b23c-433c-b4dc-90839df368dc",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87611ca1-ab79-4e18-9458-07c2f4332951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2468b47-399b-4900-a3e5-1ad675722d0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d252dbf1-6767-462a-9c44-ad45c0392797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "68d49a9c-6644-4ced-a919-2a03dab96fe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "026c97b2-5896-42ef-ba84-d542441b4526",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a424453-62a2-4c30-8771-7fd508981c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "823b4ab3-6240-44f5-b26a-5704703f2041"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb91f7b9-6514-4104-abb4-34ed1bbc6137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d3d4e65-1054-4b1b-895f-aeacc0c1bbee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f1cc6bb-a5be-40f9-9e8d-aa0989c49e12",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55657588-1370-4990-aa63-5263cfa6cc25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33458576-dc92-4cc4-a9d3-fced0c0c01eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae75b0f8-815d-4cc5-b2b4-baa574be0467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "790f60af-0b99-4463-aefb-2cc9e0a83480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c5381ed-b88d-45e0-924c-8e8ea3612739",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e0ff940-dd78-4d0d-92d1-0b424ef9d20c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43791c79-2720-4d51-a7fd-7517edec106a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "868fe229-644c-431f-acfd-2f4c1fd3ba53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "85879979-44ef-412a-ac10-470608966c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8b0498b-3d52-4095-a884-a86978301179",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1da3557-106b-4966-9b6d-6233dac8bc09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c4be0ca-94bd-420f-ac4a-7c123bd720f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea0b972d-a744-4dd0-ac84-9584715789f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "cdfa4ac0-5630-45f0-afe8-80863bf68ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "962c5169-fcca-4cad-b770-d4754ea9882c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "042f316e-1d07-4d53-9c8a-2c5d44dae023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77cdaf10-ab8e-439e-8e3d-4168bfccb25d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0beaa35-bea9-43d9-bc28-31d46bbd268d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7fbc2932-0dd4-4108-be33-b907749fc139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d6b16e7-747d-4054-a9e5-64a4d9d1de64",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57f07a75-a074-41c6-9be4-acf311fbeff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db713e04-273d-470e-b433-68ad8ab6868f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3b3b1f8-f9f0-477f-bfa4-ebf77bfc93c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "97f4e0a9-3e67-42b0-8f69-0ef1badd0775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd09c3f5-7ba6-4694-b8cc-24e49f102c53",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9c040c8-1c83-403e-8f95-343b59298388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3e136a5-0e3f-458e-8abe-34e5170ea5c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "938b8f70-c162-4065-bd00-5c78a80d3db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c3901fc-92ab-4767-84a0-0f571d4feb66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db3ba63-72ad-454a-a7a9-1e2c1dcc9d5e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6c17dec-a26c-4425-b3ed-5444909f0957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67406588-bf36-46b1-b3a2-36f7eb358e54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f754a6c-1324-4e7e-ac5b-b9ba30380965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5515c9b-5b5a-44a9-b6c1-ae087cb88a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17bb3a60-e2cd-4a21-aded-51b8e2c69fdc",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46fb3e93-a2bd-4cc7-91cb-b5af622a1989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fedff0ed-735a-434c-bb49-1cf40b2f101d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2363743e-0bcf-4395-b12a-ffbaa1d9c890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a1c2528-6c30-4a4b-8adb-f5db4f564fe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dd4d553-768e-468c-9a57-b21a913eef97",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f4c4b6-a200-4500-bf32-f2e521b65206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0174623e-9f72-4ae4-bccd-9b237888b6d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac3eaaf-83cd-446d-a09e-cb10108e5ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a6cbada-ace0-4ab7-bc65-f08fef626a23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e345ddf2-ec1d-49f6-9708-1289fc726edd",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7684d2ce-493f-40f0-b212-72d3c788c9ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ec1755c-8757-4eaa-8c61-f382cc633638"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8985db96-f415-41d8-ad9c-e6413a45aa23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f9fd15a-00c9-4650-a097-a4ff2f4f0d96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d95a933d-10d6-40e2-8dd1-b15bb1310750",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bec17801-f3c7-40e6-872a-4ebac5e6d874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7512bc2d-7ba2-4f8f-a007-87195e2b5c09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ceec9f-4085-4c6b-8f14-3a6f8512b8b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a026a5b1-599b-418b-90ac-5f87f89aee20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "470d4e91-3d98-4885-851b-8ba943ed96bd",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81480f23-a779-418f-a47b-e0da9cddaf81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04610c8d-69d1-4126-ab1d-6fe148fad4f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea6af86c-2c81-4ac4-97e7-57accacd38a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7369263-2929-4f96-8972-3029073e01bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81c98375-2696-4180-95ab-d584035e50f3",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c19fce-8d4a-4c73-a572-85a09e511ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c44ee46-3a75-4059-80d1-4fc4c16e4198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1d86a0c-e3ba-4e6a-b402-de52f26e0e79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3ee690f-2ecd-465e-84a7-e2440337488b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "093a4d96-210f-449b-bd54-8c5cde3acf6d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cc01974-fea9-448e-8d54-41ac0052f595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca51e5d4-e414-4b21-946f-bfb6f07f7be8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "916f9709-dd4d-4932-a5df-07355ee79f52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b703d17-2d9c-4c02-96e8-a5237c1b193b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb1daf0c-3f96-4b84-a854-bc9b04cca98d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beab45c9-185b-4c1e-817c-70476e00ad23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c5c3ab7-8270-4a38-a39e-b8b2dc1dd045"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e54f372c-1090-4e9e-85b3-760b19562261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a94007d4-9fb4-47a5-b5d3-dea343af510a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca6c4bc3-11e9-4bbb-af73-54b0e77dec8a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a977b747-f14b-471d-ab50-07eacd0f5a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b695ff72-5a43-4051-9d02-49b80b15ed1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a0ae06d-e844-419b-887f-f49d9634af02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4078ea29-006c-400d-a824-0f65038705b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3c857a7-ec2c-4c80-a8aa-d8f1701ee606",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2046c13e-6445-4282-879b-f99af4281383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95a1fd1b-f284-4fdd-9037-2f6f1bdec65c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b38cfae8-5323-401e-8693-9c301382376a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd34a534-6a71-4f7e-af86-3e80b244a5a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99272b3c-2515-4fb2-aa68-1c6d4e1f5e34",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ced5186d-5e24-4da6-8675-603a732a0cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6680e15b-e7d9-48d4-8530-f2d5141c4ba5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "321c6b31-b784-408c-8f11-379446688949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8af3c2a2-f69a-4337-811d-54c92838d018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5381b69f-54d6-4d82-b572-4f1b837db723",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a905ab12-f0f3-4df2-b0c8-969c9c4e3774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27d45df3-c07e-41eb-9f37-bab49c3e4f7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3454e73-d9bf-4e04-a0a5-f86c6021eb46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e2bef79-d6b0-4371-916f-a1e7194f37ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "741ad890-80fa-4eea-856a-9969183a0ba9",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c966b86a-ce7d-4846-a465-06b99c1b5877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b585470-4735-4866-af2f-2f2e4fc7a76b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c513a70-e122-4f58-8d1f-10dd107348ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d96abefc-dd00-4c76-a8a3-60669dba46c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f4ae571-1b77-456f-acca-d67b740b03c2",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "787c7109-d94f-458b-ba11-1281fd95d090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e29cbe85-ec6c-4979-af0d-1cb71ffef72b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "746b99ec-d873-4215-98a9-224f65cb4d58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32ae71a4-210d-4678-90fe-f967718a5ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa2d453e-a40b-4fb6-8c04-96b114976732",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab51c49-5db5-4214-8652-fdf0a6f21315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42f36ae0-b2d8-480c-8026-fcc11011b29d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba59900-98a9-4625-99f3-d48b649b3e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9a3f826-4c6b-4f00-8aba-2b911ba0ef11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0227316-ff7c-4377-bc08-4f87d77a0954",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d180d137-630e-489a-82b2-0f2804f5a515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6f6333d-05c8-4abe-a899-d8e95e10d97b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e557997-7934-4c44-9b7c-deb1fd89e7e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "031b1a4e-3977-475a-9257-f535c693233c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c057492-c975-454e-823f-be70eab19e90",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "255d70af-ff41-4409-99f5-61786dab436f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "833b50b7-7a30-48fb-8575-d2f284cac51d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6333ce4-c3b6-4a20-ba11-5abccfe406fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c53055c-ff6f-48e8-92fc-e59814c3f2ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bc4167c-c7d9-45ca-8b3a-050a4f920986",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d28e8bd2-7abd-4eef-9a38-636e861e2a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66039405-ab81-48de-b284-f8bad6df6627"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d22ef01e-9c5d-4755-b37d-b27ab223c531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6529b842-4be2-4e3c-a424-108299527348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1806e11-f121-4b48-ab68-3752b0179803",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ae68e0-d050-49bb-8916-f006729dc899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "143af1a4-6873-4973-8020-1f9662ba4411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92071f7c-da8a-4a0b-bed0-b2458b4adedb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5484651f-0a34-448d-88b2-fbcfc68b6b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8700f78-180b-4d04-a759-18ab6be7d6b3",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cb7db9-325b-424b-9d9e-fd2d9bb4f840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59a4dc1c-319e-46da-a284-7615fff6deb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1b91c16-11bf-4ae6-ad68-ac24bd42e618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "85ef36f3-ee6c-4182-94af-60831c0b149a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c21e3d73-b714-4ee8-aedc-520c006f3676",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f96e79b-c322-459c-a46d-f7ab78697a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6023631e-8d18-4ed0-acbc-22960c8e8af0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72dbbc0f-8fb9-4927-9336-f6efae322fe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba985dea-6c51-44f7-bb82-150d1fc44e41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "268b2bf7-8a9d-47cd-a412-950afbeffff8",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e4f6ffb-57f2-418b-b461-1668a1ced9bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5a4aeff-8c5f-4a58-80f1-c87900f4d86c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa6d5268-6605-4ba8-b7f9-f595f4f955f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "404162b3-00ef-482b-b55b-f36f1b225cc8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c881d11f-8b63-423a-a1d6-594a102b4a86",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a7349e97-f756-470e-8c35-e63218857242",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6a7110c-9c46-4f4d-ba00-c9980f43bc92",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8aae2c91-22c5-452f-bd0d-06b7d76dee2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7613933-bd36-4150-bc0e-502f1676c6e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9973ec0b-d8aa-45f0-84cf-a1b884909631"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ed0189cb-d1d5-4f58-b02f-f6cc4f80b124",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8c5f23eb-703f-4d39-be33-aad0c724a911"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5ed18c2-d944-4f55-9063-6b80b8fdac1e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3ebcc19b-3652-4751-8e2f-e805f22ca2aa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a583a745-8720-4399-b1a9-33a4ab2bb378",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "846381d8-8b2f-400d-b2f0-ac7a60e46d95"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1334c3ab-e1a3-4c7f-90ca-3639c2b04379",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cb0004be-8d50-4da7-9943-6eb3a0fd9997"
            }
          }
        ]
      },
      {
        "id": "47173b92-7552-4e0a-ab0a-eb2232e28714",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "6634342a-d656-4e51-a5c8-fe495a3a48e3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "43dbe517-a176-40ec-8137-b3950b1ff39a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1c21992d-2f6d-4ad1-a92a-0ea20bf046a4",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4257a9d-0bf9-4a21-bbc6-65c714045043",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "343cc083-9dab-4c6c-9a3e-6474656a18fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "add2454a-0632-40dc-9a9c-6d46668f418a",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a7ffd1b-203b-441c-b8e9-24f544f88fed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63a277ef-c01a-4ecf-b737-0fee345ace9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e07da576-0e8b-4f25-b9db-475db1726d17",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0685f7c9-d9b6-417f-84d7-70016f67d5f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "832035f2-45c7-4fa9-aa5e-103fd620a4e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b25ece-98bd-444d-8438-3347f3e04924",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d7fc2c7-181b-4d19-af5a-44561cd83a1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cd43ce3-cbea-4179-b360-0dc21fbcd93f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3047cd5b-1457-4d4d-8aae-92dca3a55af1",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8cf4c00-2108-4546-b7d2-c5f737299bd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8e732e0-53a7-44dc-8e4a-685b384c29b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30dd92b2-8f64-4219-b843-869023db1382",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abbe90ce-ab64-48dc-89c4-0f368541fe7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f73cbf96-b5ac-45d0-a449-1fc41e9b9bfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdea2b2b-fa44-4574-827c-9e7fd40e06a0",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da11b12d-30cc-43da-9c7e-47b0417b62fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad63cfb4-a3bf-49bb-a43b-19e3bc28c400"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92b247d4-20e0-4d38-804f-b7b54be2490b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ff51eb9-9f3f-4d7b-8bc9-9c178607e739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f97cc8cf-0b14-4763-9b33-da6b2fbf2d97",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb96150f-52a8-4483-8bc3-b20ca6657dca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8efb0b38-95d2-494c-92e6-ee3c96ff3cfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba5a436-365d-4438-9d91-fec28992b1cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9fe29c3-a7a2-4b95-980a-9b1306fdfe14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "937a9ee9-18ab-4ede-9e87-fa5179542fa2",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "835cdc11-53c2-4a98-9636-8314e95cb986",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4633fcf6-6fa8-4aea-93dc-b95e5768e68f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9da58f2-f2d6-44bc-91ea-8200a6adf7cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "799f8b23-d7ad-42e1-9a21-43d06bbaaca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cc0b027-a48f-4c71-bd40-8c2d8651a7a1",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f077d4d-f5ec-47b9-b2d2-b62b0c26c3e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c2e2a9e-637c-4f74-8e2a-6eec5e370891"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ca03b9-05e9-4036-8f47-e2d4c7bbbe83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bac796ee-9868-46bd-932f-bcc0d2b58819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c44c569-1185-473b-8d36-2692f7973498",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34767cad-f919-43f7-a463-4e998ef51085",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "640f69a3-3d24-4171-82a9-1ba3bb96ba82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2856243a-cafe-431e-8512-20ce051ffa07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a9b7374-7e70-4e99-866b-d411ede5558e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59189c61-75a7-4909-a268-0041aa7c2297",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91472de2-e87b-40aa-bec9-fa386cff4ff6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc6697bb-343b-41fd-a42a-7f06b9d2c4d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30e5f640-49b8-4fd2-9af1-0a7daf41ed67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b3c42c0-0e1c-4f01-b5ae-035ebd8f14ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4cd652a-d273-4ce0-87f7-1aa2390cf54a",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac82523a-9263-4eb0-b6dc-2b2db612d33d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd2c594c-5d02-4a1f-9135-ed3a57035077"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04fee8ee-5d54-498b-9310-18e4114f8880",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64d42ad7-105e-434e-a784-7723b664b4d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f39317d-e551-4474-9388-211cfee3236e",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87783560-8840-4c64-8a25-9524af79d70a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb7a2e1b-194a-4514-a579-caef16a3a3be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cf01448-69f6-41dc-be16-8691bdc58031",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a66d94c-7cdc-4674-ae7c-ac0c9be5eb24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba993e6f-4cd6-40da-9bfb-37dc9f0640af",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bb04b25-55ee-4b4b-a757-7c409534c8fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c9fc44b-6dd0-4493-a0fa-99a94e9587d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52abda31-28f9-4a3f-b446-35d563f0553d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e429f849-228a-4e39-8c7d-e9c787aaaa6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dc44e7f-e7a5-41de-940a-4b07958eba58",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e639d3-0769-46e9-9329-d8a7a49150c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ebddc0b-263a-4b78-9fa7-f6c4364b044a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b60de25f-8feb-4e78-bbdf-3fa1841b6ecf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f957e2e-26a7-4dee-b35d-38f6e648832d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef2d145-f8d9-4af5-ab61-e41a75357c76",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fa78171-313a-4351-b821-ceb61626ea93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a428a14-3dfb-4d05-976f-e99eadc0c090"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5631cdf4-c88a-4a3b-8e3f-a167c6481421",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b6914c1-8132-426d-ab66-2679cee3f2e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1a6acdf-640e-4f4c-9630-d7b772bb0997",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1525f62-a0d3-46ce-a741-62940760b928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5db66285-4bec-40fa-ad32-4981f92e44a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c63efc2e-04cf-4dbf-a3c1-876df2c3fce7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e327d820-ae59-4779-b646-a10ffde83571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a7c85fb-9899-4e16-a5bc-72c908a47a60",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "365689be-f42b-4556-b0a7-8929f39ca455",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea141dab-bad9-4c25-b5fd-c41347981e86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3244c682-7557-4231-b8cb-d6b3fedd3c10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f32689ca-4fe7-40f2-a7dd-60ef135c0654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b22243fc-b3c8-419b-9f8f-9a31451959b3",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7812366a-a929-478b-8f6e-c0951815b349",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f1c63e9-9c43-4146-9bb3-b8f1ea5b7b54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef83a68-5c58-40e8-b654-b76d53e0bc89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3454d1ba-e9c2-4332-84b4-f3f64f582d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e135ad06-70aa-4379-bdd0-710c41d1d6c1",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6082aa5c-49d0-404a-9537-9fa72acf1242",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ac09aa3-b759-46cb-9583-efdc39290323"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c204135a-1ff2-4c11-8b81-3a7914ca41e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c15389e6-430e-4ce3-9404-0a843e8c9efa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b26431f5-59de-4296-9261-4a1873b8da22",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e330773-71ed-4b11-b348-df2bf3f38c47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3cf31e0-4bdc-4527-b286-3abc62bfcf3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b239c8a7-9470-4af8-bfe5-544edbbc01e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c13a799-b463-495f-9278-b77c84ecaf0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbc3c6c3-ae01-4347-8eb1-fc50b85cc37a",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66a8edf0-74bc-4daf-8031-f82cea83c631",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcc5d761-6c13-462d-abc8-646e088372ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9ad7c1f-eb3e-4ff7-8158-495169312fa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71742b05-9e30-463c-9ca0-feb4a1ce7ca0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f09a52f3-ccfc-440b-b0a3-bbde3ce18aad",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98769f79-d47d-466f-bcd5-7c925594006f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49c0f4ad-27ee-4915-b149-8d88bfaa9fc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "046366b7-0f6e-4fdf-919b-a09e4e4fb227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64a55c69-831f-45a6-b78c-e8b94f62f459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fb5927d-ac3b-4bda-8c7e-12ae77e1387a",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec38aaee-dab6-429d-b525-3e0047e4769e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c6ce350-3a54-4b66-8cec-a1731cdcff71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e79f3d5-d8c2-4026-9953-a0b7e4c1be96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9a34dc8-389e-4a5d-82e2-71d8ad0b8ac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "028a904c-a983-454a-81be-6379fa4ccc99",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "566fc0a7-9553-4e51-8c8b-07cd6f51a82c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "751a1c73-ce77-48b1-a3c2-2878027f18e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "806ada29-4b4b-42ea-a8c2-c5be8d2ef584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7bfcbb6-4027-4c87-aed6-3239cb9bfdda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "685e9b67-fab7-4792-9198-cedc223a39b6",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c02c03-c4a1-4cef-8ec8-cb15b8dcc0f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f986c5d-9d54-4db4-996e-54f21d7377fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a62e4a36-5d0c-4b9f-95b8-a2ad2b10d76c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a71ce930-cdbd-4902-847f-9b8822e1f6d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0725b760-9c37-4a41-a8bf-8ebc2a836192",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3364162-41b9-457c-ac47-609196700bfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d28b89c0-1a1a-4a9d-8fda-e6439bf09aee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a79760-25e9-4e05-aaea-f355fcbf7f38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e199416-5fb1-4b0b-82be-0363f8a09a16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9d81264-06ee-4681-b823-862f2bd6332d",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c14aa920-d191-4c1a-bc38-f43036017beb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71d0058e-230a-48ae-9c8f-e870b7cffad0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "784141b6-98bc-4eec-a2ef-ca2fc85869af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b0ca31c-9a16-444f-ac62-91c294573d05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0af31ef4-057d-44bf-8b2f-e4124c28e6d0",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d184288f-786e-484d-a435-7ed91fe15ddc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "230fbb8d-ef56-452a-8f6f-69976f0c4ada"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ef25c1-f4b5-46ea-9a78-d906023ae2e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e230c69b-a33b-48c5-98e0-d10888ff18a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a9e7943-005f-43ad-80b0-5fd93c5d5261",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88b008b6-ecb6-46a2-b361-e695fcc2024e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c999df0-c06a-4072-bd0b-4296d79c8fca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf788137-c371-46eb-a35f-0ed7385eabe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b45550ef-10ee-4415-a02f-b7c8b76025f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da8d94e4-a554-4356-a015-092d679a9530",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79336bcf-acc9-404e-95c6-73af434b80f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f4dfc92-35bd-4baf-9059-c3dd9882896d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cca570e-8465-4744-8848-3a3664c5de08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ae64efc-1657-4b80-b88e-3ec52d9d871d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c97fde83-75e8-4318-9782-591df1d50c43",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "012b60f9-188f-4f44-af95-92a9eef7d0aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "369f0bea-28f0-4878-9f0c-7eb6d0df8e6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27d003a0-3563-4c94-a86f-0d7520f66a35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "692a72ce-9093-4c0f-9873-99852a88c60b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "234883f1-1138-4700-8911-0d10fc3f2f68",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba9e4fde-b199-4ab7-8279-56f504332ba7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "140ba5b3-7ca8-455a-a71c-f9489da79dcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56dc5177-4547-4c5c-b81a-e12486534692",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dab1272e-c1cc-466d-9019-99274aed3c1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a539b75-86f9-4f7f-86af-85c11465d181",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3d50fb9-682f-4406-b072-32b12ac7f593",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57b8f2b6-82b9-46be-969f-4e6079f26bfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4164143a-6d20-4c03-81fb-a7878b76a317",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c9f05ad-557a-49ef-beab-02c70cc6c33e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88980d26-5211-4517-a9d9-a0b96e861cf6",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41979de6-de9e-443e-af9d-16305e8491b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78a01b8b-c5ea-4ce3-940a-0380c53e4a92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af0db96-0e9f-4ea1-a708-667d6a475294",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33e69f75-4b9b-4bdc-929c-19c046a30483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02c4e41c-aeef-4ec9-8db9-86803a122d68",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f681d1ce-d70a-4083-80cc-42ac2daf0fab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3bbb89d-994c-4da0-a0ac-1627f7c61584"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84e78b32-b745-4c2f-88d1-ef88caaeef34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d79f9334-761c-4d01-91b4-14ba44fca34c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c2a6e62-128c-4761-a9d2-6c01705e3445",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b9fb1a1-0c03-4d98-9b5d-ce809509de0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06065980-8781-4e98-a8f2-5a7119f834a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5de457d-9cf6-417b-bf55-df3fa80cbac2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfaa645f-b0cf-49ef-b8a4-09e091d170c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2050bb75-cd37-4e2e-ba29-d119c4f464de",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa89ba18-26dd-4cdc-8bc8-bf3f74648b94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7d6c1c4-8594-44c3-8779-2005d4faf969"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e558153-3043-491c-bdbb-a003b3133d59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "576b7db3-8174-4c8c-854e-7e8afa395924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a68c55-e4da-4038-bfaa-0496ad05d0b5",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84de3d28-16d0-4261-9571-12e4148212bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38ea1ced-f957-465a-baed-fc2efe5fc03d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "797d434b-c85f-4b94-a3e9-3ad983654a3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01d38995-ccee-4a25-8452-734b96f25344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eda95a5e-a447-4463-87b3-a79ff4ee5977",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b519666-1a84-4a08-bbd1-aa46b392f5d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb6b86eb-8af3-46b7-914d-5583c537c6a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22692c90-4dde-4fec-bef3-734dfe843fb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19976420-0d76-4553-8925-2dfbd4e282d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31315932-6834-47dc-92dc-2781adb0762c",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83d8497f-6db4-4460-b589-4eb74c73311c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b4a2dc9-a7b6-42e7-8924-cad8151cb688"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f26f5f0-3a5e-4d95-9512-920fe817500a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7092f7cf-7552-43aa-8bfe-96beaf2f394d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afb61523-2bc5-4908-83a8-53cb927b3326",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01355e03-1383-4118-8432-f23369504000",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e4f5820-088a-4bdb-a60d-e469c3feacac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f5d946-7786-4178-bded-16cef6a27a11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdb09860-0e00-4b07-8936-d8f9fd1c5537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5052c141-5dc8-4646-9f2c-362a922eaddf",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e44ab337-fffb-4206-b066-75131050cfda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9de5fb55-ba67-4dc0-97c1-164a7e85f4a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a72dfa0e-8269-4a13-9e50-e85d239a0d6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b795472-1ef5-4ff8-b0a9-eb0c7ef9ba3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a7bdb50-3092-4f46-95b6-f4743b947965",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac9fd81-64d1-40f1-8463-980a5452ff3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08a22b8c-109b-4789-a265-c213267d5439"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fe20779-2495-4b55-8118-f45de962d3fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97803e1d-4f74-44b3-b147-1f8ab03bf8e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b900090-db97-4390-8f2e-191fefaebbed",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fa1ea90-3de3-4164-91e9-09c6ee1cb179",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f1e2ec1-39e4-4a78-98b4-bb7a46d4a089"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73124f0c-2e8c-44d8-841b-3e2e8eabd71b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fce3851-7de0-4c42-b821-03100f0d884a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bfe9032-8d8a-40ab-8483-f510f21f9e89",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b50a4a3-b8da-40ef-986c-d2341cdce305",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fd9eafa-450f-4cb4-a37a-6d446a6cefa7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4920bcef-40c1-40d0-a533-1aeeaf133349",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7e1ce87-6f44-4e34-9a7b-251f58352ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "264126f7-701a-4491-aec9-5cff4ae86c84",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "876c9a98-8c4e-4700-9f72-36170330304b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9566defb-ef8f-4ec5-8991-9409216112ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a88ddc-a104-4ec7-858e-d0359f332dc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "495209aa-598f-4c8e-a65d-f53c5dd73e0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69a86f52-82ac-4627-b775-d095c4990cb6",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7dfa8a4-6078-4e7b-8597-f277661450bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cb60716-117b-40cb-84a0-82eab32028ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3eda9d4-2a80-4ca2-a242-d40e2e94d419",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6568b160-367d-478a-8cba-408685b55de8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ffd921-95b9-475c-aeae-60930e44e68b",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76948e05-f29d-42bd-a027-126e5eccf300",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "234ec1c7-5d8d-460d-a2dd-45d989e520df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1e66f5-9cb7-4829-ab2a-ca74354aa1ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed7d128d-b8df-4ec6-b8cc-589c2658dd05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ade19256-dd37-4b62-b33d-31d331ec04ea",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb4ac3e-c4f2-4f55-9a71-592e13525e46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "562a2a06-a598-4aff-83de-314572199cc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "add9c4fb-850f-41b2-b1b2-1c88b24766fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6322de9b-c9dd-45b2-8086-0e13f779bc56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b0fe18c-978b-4878-8371-3b46a8c4b6a3",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9611fdea-cbe0-4b3c-8e7a-90b612025ce0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dc45853-c102-48a6-a6c9-9aff360f37d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c5c63f-a163-424c-8592-7026964e30a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab4e62f0-3a01-4425-8400-69a7b4f47379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d948d654-66ff-40d3-8fbf-439c645884fd",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3756bcaf-9ee8-4caa-b1fd-241c3aa2ea7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48b3adb3-0a34-4d39-a344-34c1adecad17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86b376b8-9485-47f6-ac9f-4903005fa4a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3343bf82-059a-49ae-8848-74613839e3bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c162bd6-836c-421f-b750-d6765cb9d267",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e8a0a50-c8b3-4e30-8b43-208366ce605d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "466bcf2e-64da-4391-ae36-90574d8b5118"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9edc84b-efc9-4546-9540-4cdb68583da8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "357ec270-f168-4c74-b735-3a0b9862b07a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c42cabf-0864-41a4-acf6-693d04e34cac",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43922679-239f-4b96-82ab-493b845fbef6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9228b4a8-a08c-4714-9e52-24a1abb8b398"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff3dc29-9a9c-4b57-8734-fb1035e31c98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3f671b5-4854-4916-8ee9-791a8cfd7c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "774bc0b2-4cb6-426a-917a-66c24524054d",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce0aad7-6799-4af7-b6d0-eaa14ee17c1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2662c22-0f21-4035-9edb-cd380d7ee762"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd29f49-c42f-4e70-8d03-4bdf148d38cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "457a1dde-5343-4029-9027-16a076a85a68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95fe5511-9678-44ec-ad98-5a50ebb1ad08",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9440fed4-67eb-4f57-9f3b-03435c5ae284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0141e6ad-d43a-4dbf-b345-f0301f6f6a19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f9895e0-c223-47dd-a497-25b2395e6694",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bd41618-35d4-4d46-805b-7bd8359235b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0b6cbfd-9dbe-4397-ad71-9ed9afc46a82",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05945fb3-57cc-4ad1-b6f4-bde6e28d9d9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c67cb137-2346-4d1f-bb2a-be1da8ae8da9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db5057cf-8b21-41da-92c2-227fcf895e84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8482bf7-70f1-481d-8b46-0e23f931ce11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c7ebff6-f287-4c38-995e-911149688d75",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f41d5cab-e49d-4359-be6e-a17766d0b0c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7c726a8-98db-4e71-bf4b-ba56a4e44c45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e099c4b8-3871-484b-802f-67a607178af5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce7f00fe-c01c-4eb1-b7d5-6bba2497a745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "404f59c9-0f5c-459f-83f7-a6e7213a8ed8",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0febea0f-7a2c-4dc8-a30a-cf7c3a1c2f54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c07968c-a844-4317-a238-eab7ca5c8d64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c07e21-9eb9-4a9f-8c98-366a1a342baa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f9bbe27-acac-47bd-90e2-452c089e7925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bf7f457-4ec7-4025-9106-74d819218fc5",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "608084e3-d77d-4d4a-b7dc-28c451807969",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b5be02e-c63c-434c-befa-6085b66bb921"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "915c93a2-58b9-4cc7-985f-9c4ea11b5bf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "515e8c7d-7488-44ec-8fb1-8e7f6eaa9d78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f77c661a-5dd5-4ba0-983b-1c9ea8f4e675",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c1073a2-d50b-4a44-a6b6-b838c14b5767",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6159d9d-5abb-49e5-9b38-60b57998d576"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3611c7bb-55c9-4238-89eb-1992ae9226d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0676fa7-3258-4ad2-bc26-30c60f2ec2de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "146e4706-5ac3-495f-9340-5e6b49a28257",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a5a40d1-b499-470f-b905-25f8d4f08aab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f35b0965-d29f-4ce0-8884-9a9129999e65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b6bee43-5a07-402b-a9b8-82cf261308b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84007974-94e6-438f-b1a6-c2c471e329cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66119895-7483-4fbe-b532-634c9d478197",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e23a82d4-1aca-4c06-ac96-a16ac3d4dd2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3abcfef6-3ce6-4a05-87a7-c8c3ab744c04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b3a125-f61a-4a52-bbb8-237b52f40962",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31d04a35-4ec6-456d-9523-279cf4a26fc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c6b8362-9df0-4ded-ac57-03be4d5358d9",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee257d42-405e-4a7e-ae3d-5ee47c4f7b5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e9c6c18-f9bb-4a0a-8b0c-8ff6a2c2cbdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "350e1567-06f4-4205-b357-b4ad6c925188",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "284b917a-82e6-48a3-90bf-229c05a8ad86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f8f0f35-4552-4890-a6d9-62adcf35779f",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "847f10c7-9317-4c15-b7d5-d92ac2a49a83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3a5065e-0b08-485e-91c5-b127596843bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d18d0d-9f13-43b2-9a53-86db1a17bc6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b5ca685-278e-411d-8a4f-ce6455468ae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5c9f57a-5d29-43d4-bd4e-a021082d955a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b6407a5-d3fc-4d8d-a995-8ecaacffa4f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "758823bf-322d-4bdd-bd0e-63ffa4049277"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74cc22e6-b0d6-4002-8b2d-16dd7f770bd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0a5f5bf-6130-4bbc-90d0-7c482540aca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "009d40ed-f35e-4c64-9bf7-38abf0f03b42",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a21d8b6-cc6b-4a82-ae05-d4233d35cd2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46a4e4b0-9106-47c1-b4cf-799d1ff9864b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f36bea1e-7721-4d41-87bc-38f1f52776d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f7708c2-46de-4989-80b6-a9fc25be9863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a37df2e7-6b98-4125-8dba-45c300ad253c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5906d15e-0d53-4464-affd-28c4d8abc131",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "396035c4-0949-457e-b67a-1e124b058495"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc44c2a-06dc-4354-b287-bcac31c8a63d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fc57620-354e-40be-b264-18cee77b5302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9464b5b-5abd-4e8d-9a64-7c7ef2513613",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6fe680a-81bc-4e81-8635-5cf0eae17250",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71001820-0f1c-4051-903b-42798132bdfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b2ffff-7520-4c86-bc36-12ae6b01a9f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "305e51d8-e228-4665-94b8-a51a069c4a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "026250a1-4ead-4574-8549-40cb2519dfa9",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03e059e8-62e4-49c6-aa2b-ec988d164318",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4b7518b-5aab-41d1-91bf-3134dc79977d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7d85b0d-acac-47cc-acb5-357b0c8f6bd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b90c5d8b-9b9d-4c19-97dd-aa4d027b9f9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54160814-e55a-4c79-b9b6-e417a844259b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c30d6860-9514-47fa-a6b6-6ba4ac5e1887",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "805d6d43-dd58-4232-a42b-3ac4766ce6bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dad80ee-3424-4e41-8c67-737dbe4c5c3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28bb0cfa-f9de-47ad-9ba1-7021b4bb9214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44246f2e-8cf8-474b-8626-423b0995f6b1",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb3d08b4-a473-4b19-9171-80b2a3d9f45d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c103f64a-be74-4b2f-9032-a638ff29fed9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a16276a5-df07-409c-a800-96f2b59cb189",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0b4446d-d8a5-4a41-ad53-fa7ebb78f9c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "add5c47d-3945-4721-a934-3c8727b5566c",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eea4571f-d41d-4db7-9dcc-8692021c15e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdeb122f-ee46-4a93-acb3-2382fd58975f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c3f039f-81a9-41ea-a80e-9c0420afa6d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8337ddc4-5a8a-4167-947b-07b9b3c02409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f89f627-508d-466a-8546-ead32be8fc20",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cd35916-94c1-4044-b858-b0e6192eb0d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74bbdcfa-6366-490e-8f17-08fb34b8ab11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b056ad02-adc0-4eb0-80fd-467f278e84ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d11214d9-f2a6-4e48-8104-df034b000540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39275af9-f90e-4c9e-b23a-a588f9705ba0",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "743e4af7-f265-4dcc-af9d-bf3e581be3d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bce8b82b-8224-458d-9821-1d0b8a729c5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8634c04b-4ebd-4db4-b0dd-e1f9cb8d6a0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16e391dc-4da7-4801-a408-6ec6800cabd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d102346-a453-4046-8e09-2262aa27f4f0",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97b7cb1f-4924-4f51-8056-c9fc0fe96ccc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdfbbf9d-ccf9-43d4-95b1-2cca8d00b951"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93f1daad-6f54-410b-bc31-8a0816635f33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e85e7b79-6d41-4dac-be8f-e35d0237f4fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0c84b19-e9f4-4d94-bf6b-ed8293f71418",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e603e871-0ba4-4970-90e5-9050f40b938a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "489d602a-accb-45c7-9411-0a2d5ec7a9f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a61b4556-90e3-4d3c-81d9-81741b38fc5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "800fe2ef-17f8-47a9-b211-af370ea62fb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "559065fd-fb42-488e-ae10-c7b9ff232658",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2006fbf6-c5d7-4490-834d-342e94310db2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5b800b2-bf58-4114-8acb-16dba6c94812"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "538f2b2e-c083-4c8f-8a24-e5db82691762",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fd03b4c-41cf-44c7-9fa7-e835c8e36f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "708c5134-53ad-4c75-85d4-650b529ea611",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "648f1d94-92b9-48cb-aeab-ccd1c68fe8f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11fa47a7-90f1-4cd5-80c8-a93522d62d1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18db8200-4773-4bf1-9d9a-61ff0175a164",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "beba42af-c502-40f6-9907-43b3b3f48c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c434d321-dd6a-48f5-bf98-cf0243cf306c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49e4de44-2c39-4140-bdc4-a9ca4719065b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "180eb77c-5c6d-4c0d-81f6-536976b18b64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c67e7d0a-6cce-48c5-bcc9-a8f30ec54f97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b32e3b5c-b1c7-4ed9-97b4-9e472da4271f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "818337a6-adfa-4a12-bda7-64b53ffdd445",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "651af4d0-29fc-456b-9258-da92c4e6cfb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcd52e5a-83d3-42fd-8781-64aabfd8154f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a20b86ef-9b52-479c-9ca3-3904a9d6a024",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed804b6f-025a-457e-93ca-94ec8b75b3df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7824fc19-f2e7-4fc9-bb29-7bddc2d86269",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "275e2e7b-ba4c-4499-a9f5-5b5256e189bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a5bd127-1d8b-401c-955d-3840d7b080b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2209bd1d-288d-44d6-a5c3-5b9f3d0c3fcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47babe61-ed4a-4cac-8a6f-80ec513f7512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f25113-5c85-47f4-a8f2-cdb4a0aaa806",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4e8c147-a34f-46e9-9bd9-4e3c528f5134",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44351f98-c210-46c5-a46d-0b3bac38b558"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91c9be4a-173b-4660-a5d6-95522c66fc46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d954baa7-1d2b-45ce-aa31-d6fc343d9f52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7dbbbf2-bd4b-4db5-867e-1cdb28cbabb4",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3850585a-9ea1-4e87-bfa3-bf3448f87809",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfd86147-57fb-4b56-9c25-3576103f0a30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74faaab5-2ba2-422a-968e-b8039d248a5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3b6fb1f-12b8-4ff1-8caf-261c7bf83660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdab8676-894a-4564-a13b-04fc52ce03c3",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74f9b08e-db8e-4117-a38a-148a7d021214",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7154cdf0-615c-40ef-93ef-93b7849e1d0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e63e4cbc-47c7-4dd9-9f89-82d0b0fc4450",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eeee333a-f65b-4332-8a34-68b852fafe05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "564532d6-21ac-4d60-886e-ff9249982dc2",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6093d0a2-f4ee-4022-aef3-e411a95b5b04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c49c7f21-1b8a-4404-97ca-79edad5487b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "effa5e8a-2010-4dd9-afbd-a47b0502f9cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6bf9eef-af0d-4c37-8f13-062b1104e257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "586fd78a-7174-488d-ab65-1c2b34a6d9c8",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e9a2fdd-476e-46c9-afa3-0dd5da432783",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9eaec902-7a9e-4f84-b68d-6770ebce5c78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d97fdb24-9f19-49a9-8b41-a7796f94ba19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c492c182-8da6-48fd-91d2-27f32e0ee522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b172a17f-1f00-40ab-a6df-38db8770f93c",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3da876b-25b6-45af-af39-6437d0ccde68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f38200d2-6fab-4815-8490-205f08027676"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b4da9c-78c2-4818-9e09-d05fe1bad87c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8eb0d5e-f37c-4cfb-bb31-cc2dfd014f59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c960a5e9-532a-42a9-98af-533eeb5905f1",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec781a7f-9491-4344-87ce-cc9c21fd6d98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b87a9f5-f24c-4abd-8b59-7087319ec6b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ffd176c-6fac-42bf-bc91-b13e34e57858",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ece10b0b-17f4-44dd-9ac2-64720e9dc96d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc7cd3a4-58b6-4763-b8a3-bf85f11570a3",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13142016-6ff6-4d3b-a8ab-41565466d92b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38ea9599-df4d-4373-b6d9-3ba28a4d1a81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91a0b37b-417c-4963-b840-a186cc0769c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "411f80e3-8b23-4612-9dae-3860a1bf7068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f43dc2d8-0ea7-49f6-a212-6d6fd2d7b49c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7108bab5-1a17-4c88-936f-3a428630882d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d9e3cf1-14d4-4490-a607-d94346597e20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca1176c5-d463-4bf0-909c-772da59a5cf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e75c37f-3897-4b6c-97c4-ae2eaee50244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf4d3a56-79ca-4755-9ab9-a041c99fa723",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d58a3b65-d0d8-4dc6-b06f-f377c4db9905",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c3439a0-3dfd-449b-b530-779a61df8cd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ca1b56-0275-4b5b-b9e6-fc4298bf25f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45d6073e-f695-450d-ade3-33f1f9820287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0962babf-e755-4b77-a097-7ebc746922da",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72083f99-2007-4a50-bfec-f0982cdf25b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bea8f2b9-af9f-4094-9724-ea7fca8fddf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac4ef34c-99a3-40a4-bb23-fd0ac33658ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3217e7b3-48cd-40bb-a632-b87c704ef6cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87c1256e-05fd-42ba-8c6b-dbd689181a32",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e83e276-34bc-4599-9cab-1dffef345714",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f0b2127-a61e-4895-89a6-3fb458791ab3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc745fad-33b8-43a3-8ed4-b2938ff29e2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "524a6641-c940-4e87-bf7b-598aefbaecf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b4a0ca3-054e-4018-9193-5e5b27afad85",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e716b3e-034a-47b6-bf43-b36daa22c14f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be689055-2457-4796-be8e-52275761a6d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bf38ee6-8dba-412e-b10c-5cc99a0049bf",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b2cf0e7-557d-4c4c-987e-70f7a66d39c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cd37aba-ea5a-4f1e-a45b-6ca72e662484",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24fa044c-b0a4-4621-8f00-e2632e3d28c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05538c54-8207-45e3-8842-8a04b6adaf74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4092eb3b-eefc-43ad-b6af-51cddc0ee2d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "466d7496-717c-404b-844f-beecdf0e9dfe"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f3b401d8-0a24-4af1-98f6-76327e7152b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bc5189e5-1a96-432f-a08e-552eb53e9a03"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "add440c2-a866-4936-b62f-892f13ac20ff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2f832adc-4807-429c-97c0-21386e3ca592"
                    }
                  }
                ]
              },
              {
                "id": "db271b82-fa00-43b2-ad30-d40627565c38",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0124a27e-5e0e-42bb-955a-c4462a214193",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7c9eee4-e392-443f-a9ef-6123ed8768c5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "171cd8ea-a7c7-4e65-b796-d2e867d619b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aca8240a-8e9b-4211-b200-e5db9535c798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3375cad1-d521-4b84-ab5d-431b29ea4b6b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63feeb67-bb26-48a6-94da-4d584dbe16e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6639f373-7dd8-4f42-aa80-252bb172f582"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "52606533-9e58-42bc-b115-07f0c640a93f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "84bb1122-8599-452d-a204-4375545d7b02"
                    }
                  }
                ]
              },
              {
                "id": "dcde54b4-c0f9-44fe-8759-1db08ef85867",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "d5016c47-6ad0-4316-87be-89409132e857",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "634134a0-22f0-4685-a364-987c4e421c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "adc3b19e-da6a-4d06-9e2f-daccdbac6301"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26c192c8-3439-4658-92b6-6a05c59640f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "969ac93a-dc51-4154-874a-8f3a3974b081"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4a2f8d57-caf2-4b62-84d6-ca241d0fc560",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4bc41e9f-c047-404b-bee2-20c13116739e",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d7c9c91-4621-4fb9-bf62-30104b80d65e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "71fbd471-fae8-40d9-a938-b90716958a03"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fc1f0869-afa7-4e5e-8267-e348e1d9cd7b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "84c71260-6c30-4ed0-9c03-0b6dd3571273"
                    }
                  }
                ]
              },
              {
                "id": "fb59dc54-9b4c-46ad-a978-96c0b71d0d12",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f00e32eb-4692-496d-90ca-a0035a6d440d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a5cdc547-9e7c-4503-aeca-4ba3ef6001c8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19a2774f-d71e-4d53-a902-9b1fb8103722",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "48949f96-c8e8-415f-8d37-b4cacc362adf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "512d3e20-7321-457a-897d-423b65c28613",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "618cf8d0-bb08-4463-af57-1a27779376d8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "72fa6118-d18a-4aef-b5aa-b99a720db10a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "13d96553-f69f-40d1-a186-c4b4cec863dc"
            }
          }
        ]
      },
      {
        "id": "b27a03a4-933e-4f41-929c-b1c89320605d",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c9900dfb-a1ec-4c2d-8511-d82bdcd1fd7c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c92189c9-0992-4d47-8f34-a7fb19a0d1bd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "69c5dd87-90b8-4dce-9f62-73294abea754",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3ca9ec8-8717-4fa8-9222-e9bd6d10c906",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "50292987-3523-4a34-81b3-8f29261abf6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be8f9f91-f8f9-4db4-b049-72c4ef62a724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "509aa9bc-b8d5-4f13-a006-7c7bc724d934"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb2e9509-e60f-403c-9ffe-aca654891bca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4fccc421-ef0a-4fa8-83f3-bef82b8152cc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a57e1abc-3199-44ff-8953-071ca8dfa6f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e3d0dd64-8517-4f03-aa8a-a15ad2f2a8b8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7ffb60d5-ee66-49fa-9156-eda1964b29f0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "69f11b24-71e6-4da0-b108-3627422abb59"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2749fffc-bcfe-4563-9a3a-bed93209fc8f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bb520951-8979-4fe6-8ccb-ccb92de0d9c0"
            }
          }
        ]
      },
      {
        "id": "f18d6fce-ced0-47af-8b3a-e28dd31721bd",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c549f294-b5cf-47d5-985a-db6683357e31",
            "name": "Negative Testing",
            "item": [
              {
                "id": "79d56998-2de7-4231-834a-e443bb40ae0a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2ad17690-49e1-4cad-8005-97b1d0354913",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a60b631a-8083-4bb2-8065-f19827f5c40d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3eed12b2-2364-4575-a82c-bb6fee55df97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "072bd7fc-b5cd-433e-a637-e209fc5a618a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d3366cb4-1046-4cb7-a340-6831d82f0700"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f0eecda-808a-417a-8c4d-cc722d713ef9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c17201cf-019f-4e0c-8d44-394c0148aeaa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "33ff68f2-0f77-46da-b9e0-b146d9ff0931",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f350f5ac-a566-4c89-ad37-b8e30ebf60fa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8cb592ca-1626-415b-bde3-e60e7ff396f9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8c11c7a8-9e90-4136-986c-57790c2fd535"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9c7ad770-fec7-4549-87c8-54e1a5c57789",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fc74ca38-630d-49da-a91d-f437e2ad7bd2"
            }
          }
        ]
      },
      {
        "id": "c937af89-d11a-4f48-9bdb-0a53d62d5d24",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "6bde0b23-e457-402b-a1c8-b72ab446abdc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "de79cdba-a674-4825-8151-49b82bd3dd58",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "14df3912-9571-42b3-b721-265eff1a8e70",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0240818c-1e80-4c9a-adcc-975d4ae0524a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7f9412e1-6c16-46bf-b722-860999d2d6d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc1297f5-3053-4bd1-85c1-d3f2b853a188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a749f9b-7eec-4b2e-883c-5677d4c3886a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "28317cb2-c47a-4737-a7c0-95202faa3ede",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "609b903a-f79a-48af-a975-eb5f5f2eef72"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e6e3e189-2a3d-4b81-af99-04fdf8a9220f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3367f752-0a23-4d32-b130-749fe6b278af"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a127b6ac-5a71-4fb2-bcf9-1537785a6dfb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e9944bd2-6913-442e-bef6-b769f71310e7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a8a55dfe-4793-4b93-a703-5e3cfa862e4e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b0167699-24a1-4821-a4a8-c756d878652c"
            }
          }
        ]
      },
      {
        "id": "b1f7ddc6-c3a8-4333-9697-c8b69dcc939a",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1c11d50d-1287-428b-b4d3-a70440e17ba8",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1a81a1d4-1b2a-48a9-a4e7-72e97fb9960c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "f34e43ee-18dd-475b-9a5b-b90603049264",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d49247eb-d1f9-4f6a-85a0-1a5c7ff60fe7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cb9e0ecd-3984-49f4-a383-e122664766bf",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 63.54736842105258,
      "responseMin": 6,
      "responseMax": 539,
      "responseSd": 70.43689749103456,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1706315656650,
      "completed": 1706315683991
    },
    "executions": [
      {
        "id": "ff102e26-362a-434f-9125-11a19a01ce99",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "7a97f8fc-830f-4132-9dd4-2d7f47a526ac",
          "httpRequestId": "49564249-2437-4d53-b651-b2cad79f30e7"
        },
        "item": {
          "id": "ff102e26-362a-434f-9125-11a19a01ce99",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "03f98e9d-e2a4-4cc2-96ab-1259275bbe98",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 0
        }
      },
      {
        "id": "f095ff83-40fb-4305-82fa-9d23e31ae49b",
        "cursor": {
          "ref": "64c1b5b5-440f-4d65-86c6-cfcf1119ef7e",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e61bfce1-04bf-4bd9-bec0-8f7213d3d806"
        },
        "item": {
          "id": "f095ff83-40fb-4305-82fa-9d23e31ae49b",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "b74cba5e-d5f8-4218-ae34-fb10370d46ff",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "c6a4db1b-ab82-48d8-89fe-e87aca072c7c",
        "cursor": {
          "ref": "9f8eea35-c815-44d8-bab5-44b1e9f8ea25",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ca3125af-931d-4a4c-a133-734656f05745"
        },
        "item": {
          "id": "c6a4db1b-ab82-48d8-89fe-e87aca072c7c",
          "name": "did_json"
        },
        "response": {
          "id": "489ddd16-db39-4d9e-a171-1a80fc96c33c",
          "status": "OK",
          "code": 200,
          "responseTime": 468,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5be59673-c3d5-4a45-9c5d-d4da0bec883e",
        "cursor": {
          "ref": "d8893794-725c-4cbc-8269-dd4e857573d7",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "cf9570b2-b5d0-4ee9-aa4a-a86e8ad9b399"
        },
        "item": {
          "id": "5be59673-c3d5-4a45-9c5d-d4da0bec883e",
          "name": "did:invalid"
        },
        "response": {
          "id": "0fc96070-27a2-44ba-8073-2aba6b7e94d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5be59673-c3d5-4a45-9c5d-d4da0bec883e",
        "cursor": {
          "ref": "d8893794-725c-4cbc-8269-dd4e857573d7",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "cf9570b2-b5d0-4ee9-aa4a-a86e8ad9b399"
        },
        "item": {
          "id": "5be59673-c3d5-4a45-9c5d-d4da0bec883e",
          "name": "did:invalid"
        },
        "response": {
          "id": "0fc96070-27a2-44ba-8073-2aba6b7e94d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f401cb3e-e7cf-45b6-b6bd-776220485cb4",
        "cursor": {
          "ref": "ad18100f-18bb-4193-b844-9b5b79579767",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "262dca1c-3512-4c07-a388-c2c01c79465d"
        },
        "item": {
          "id": "f401cb3e-e7cf-45b6-b6bd-776220485cb4",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ca2e74f9-ce1d-4ab5-ae0f-54209ed776fb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 99,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "189a1b3e-6a58-4c7b-ae0c-f220357b0005",
        "cursor": {
          "ref": "abe7fae8-0617-48a3-9065-28eead38da40",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "79d69170-c887-4cc8-9cea-f5b66255e179"
        },
        "item": {
          "id": "189a1b3e-6a58-4c7b-ae0c-f220357b0005",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "775f9bc0-73e4-45fd-abdf-7ca5fe4693e9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 53,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25a75d69-feaf-4f10-a200-9fe442fa4808",
        "cursor": {
          "ref": "6ddc681a-6c18-42bb-910c-d85530a562e8",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8db9ad7c-8390-4d32-88ff-beb136e117d0"
        },
        "item": {
          "id": "25a75d69-feaf-4f10-a200-9fe442fa4808",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "9b02a67f-31d3-4107-89aa-d89e6b38ae25",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0872a0b8-51e5-4d64-a0ee-9ae62609cabe",
        "cursor": {
          "ref": "a0082ac3-f039-4054-8538-e5915eaca923",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6581aca7-dae0-41f9-8299-777793f57494"
        },
        "item": {
          "id": "0872a0b8-51e5-4d64-a0ee-9ae62609cabe",
          "name": "identifiers"
        },
        "response": {
          "id": "af159636-bf90-4207-92cd-b1b31a6c8691",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb635d51-ea7c-462f-83ee-7c2af49ad435",
        "cursor": {
          "ref": "6adaa426-5f39-4702-b15c-7b1ba335aaf6",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "5690f523-5c03-4c31-87ac-72f5b73a27d3"
        },
        "item": {
          "id": "eb635d51-ea7c-462f-83ee-7c2af49ad435",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d08f6a97-f2e8-4d32-81ca-d2231b707130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e81241-1776-48a1-a7d5-cd26977e695c",
        "cursor": {
          "ref": "127a3f3d-ccd8-411c-a3a4-f5beeb5e9667",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "64910685-a9ce-42f2-b6ef-1abc5043ccde"
        },
        "item": {
          "id": "a0e81241-1776-48a1-a7d5-cd26977e695c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "22ad85ab-06d4-4e9d-a787-26c227933cbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "016f75d0-c3e9-424a-be70-9c8e0953d757",
        "cursor": {
          "ref": "2da63b10-434c-416a-873e-3f273bb9a444",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "f1b02d92-65ad-4339-80d1-e4caa5c7b083"
        },
        "item": {
          "id": "016f75d0-c3e9-424a-be70-9c8e0953d757",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7eaeb87e-c32e-4521-a1dc-7c839182527d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb6cb0c1-5207-4e98-8e3b-5b41dc937053",
        "cursor": {
          "ref": "c10dd2ef-a4de-469c-987b-bfb677fcffca",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "6ff00066-7300-43e7-af19-5a5f9a78754e"
        },
        "item": {
          "id": "bb6cb0c1-5207-4e98-8e3b-5b41dc937053",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "11d5d026-11a5-40c7-a545-24ae5d533496",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f4d860-b9af-4ce4-8142-54f75541060e",
        "cursor": {
          "ref": "d378dafa-b8bd-4b75-9044-4e5516d9a5bc",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a20752b6-087c-4b07-a279-7f90648c265c"
        },
        "item": {
          "id": "36f4d860-b9af-4ce4-8142-54f75541060e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d993a1f0-d361-41dc-9d33-8ee66c37d40e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfbd8229-0601-4bb1-98f3-f72ff99ec5f4",
        "cursor": {
          "ref": "c58c89ed-b41b-4413-a6be-9cd1f0e24d34",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "778eb05b-2fc5-46ee-b1fb-857bb478c5d3"
        },
        "item": {
          "id": "dfbd8229-0601-4bb1-98f3-f72ff99ec5f4",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "9cf4f5a2-89d4-4942-8eb7-c2cdedaa4523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3fe5bf2-6de7-4c78-8fa0-663658a47166",
        "cursor": {
          "ref": "a4a0a4b0-a6a3-449e-9654-9745d6abdb9a",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c91429d1-acf8-40fa-9810-75590fa829ca"
        },
        "item": {
          "id": "a3fe5bf2-6de7-4c78-8fa0-663658a47166",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "17ec0d7e-3602-49fb-9fd9-9e3538fae59f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbb16c1b-86de-4bd5-a098-2975a189bbc1",
        "cursor": {
          "ref": "cf9d18ec-a859-427b-aa71-262e1b0ed118",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b018b1f2-364c-445b-ab51-6eb0cd7e24f6"
        },
        "item": {
          "id": "cbb16c1b-86de-4bd5-a098-2975a189bbc1",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "93ef1c5f-a3ac-46cf-bc93-a154b6945138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f514f10-28a5-41f6-a8f1-e6ab648b145a",
        "cursor": {
          "ref": "44e90770-65e6-4b7e-8d55-3a20ed191a08",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d0f0f0f0-38e0-4287-8c02-9caca8901ee7"
        },
        "item": {
          "id": "7f514f10-28a5-41f6-a8f1-e6ab648b145a",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "7051c0dc-1ec1-4f95-b93d-b5e2e22c29f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d39e5c7-5c86-45ad-843a-799f4935887e",
        "cursor": {
          "ref": "16b25635-119f-4ec3-b4a1-32709a3b5609",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "5bce8517-3c52-44d5-b03a-313f2f09c5dd"
        },
        "item": {
          "id": "1d39e5c7-5c86-45ad-843a-799f4935887e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "0d757420-7917-46aa-a6dc-8282af2cede7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf2aba3f-847a-4ae4-8c59-caa889181b52",
        "cursor": {
          "ref": "0bbde4c5-1c4c-43e7-bebd-6209aa80582a",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2b2b5c15-45bb-4930-8a11-7e0432b0f594"
        },
        "item": {
          "id": "cf2aba3f-847a-4ae4-8c59-caa889181b52",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "7ff3abcd-6651-4acc-b11f-d7263eab7df3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf6e5f36-e0e4-48be-8a40-4aa8eb286a8e",
        "cursor": {
          "ref": "f40edd2b-1789-4e83-9cfa-af7251bb69b0",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "9a7b4dce-3495-4d8f-ad0c-f0e415f5da7d"
        },
        "item": {
          "id": "cf6e5f36-e0e4-48be-8a40-4aa8eb286a8e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "fd25c75f-65a4-416f-be8b-8b03808ff152",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f279ef7-2af5-45c1-b62f-3ee23340010c",
        "cursor": {
          "ref": "a46e21ea-77f2-4991-95e0-443e37dc12e2",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "e9c9c431-8156-4e78-9738-1d28c11fc4cd"
        },
        "item": {
          "id": "6f279ef7-2af5-45c1-b62f-3ee23340010c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "980af371-c8f0-4033-9b33-346ec5f52496",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "622f20a5-a6b5-49ee-8e30-5cfbff71a189",
        "cursor": {
          "ref": "ec64484b-77c2-4666-870b-c558a4223a91",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d07bb628-059a-415b-9ca5-de960f7a8799"
        },
        "item": {
          "id": "622f20a5-a6b5-49ee-8e30-5cfbff71a189",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "0df9de53-b7d3-4942-a859-f0fd157a600c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f132192d-feb5-461c-8568-726c46024893",
        "cursor": {
          "ref": "57e3e590-3183-4f18-abe9-4f6cbe4225fa",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "88a87ef3-9de3-4864-9f5a-205677f9958e"
        },
        "item": {
          "id": "f132192d-feb5-461c-8568-726c46024893",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "71f8406a-1d98-4e7e-8ac3-be8d6712f0e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c33e1c7-052e-42e9-b44e-39168f8022c3",
        "cursor": {
          "ref": "17f80d58-3d52-4b31-bb2f-f899dc3523c2",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "3617e8c9-3f96-4ae7-ad0d-037dc4f697a1"
        },
        "item": {
          "id": "1c33e1c7-052e-42e9-b44e-39168f8022c3",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "69d2eae4-31e1-4ceb-bf58-3b175a118e8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe150388-0c03-48a4-901c-88f39130018b",
        "cursor": {
          "ref": "4b64d914-f192-4531-b9c0-266cdfaa2b66",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "237d4aa7-0e1a-463a-b2fd-a4524bfab5f8"
        },
        "item": {
          "id": "fe150388-0c03-48a4-901c-88f39130018b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "3e202bb7-17af-4197-892f-678a7e214ccc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf27433d-8853-4ddc-bbd7-729d2ca204fd",
        "cursor": {
          "ref": "53d96a18-0778-4f18-8d88-35ae13972b95",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "59a1a831-9854-4af2-9760-074b2436b233"
        },
        "item": {
          "id": "cf27433d-8853-4ddc-bbd7-729d2ca204fd",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "d9d48b4e-0829-438a-bd10-2ccfd1344b68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2984c52-c31f-40c4-b5c3-98df95ef2b87",
        "cursor": {
          "ref": "3f70579d-e268-4de8-963d-e703c0b80ad0",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "7d5cd27b-786e-44af-9cd0-b4350671f8d8"
        },
        "item": {
          "id": "c2984c52-c31f-40c4-b5c3-98df95ef2b87",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ca4293a0-ae83-4581-ae3d-35847f5f49a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b0e5f45-0e1a-450b-b21d-bf18f92ceba1",
        "cursor": {
          "ref": "0749a6bd-0143-4e58-8d26-8b08f7720e1a",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "eb1a0641-e70d-4d74-ac3a-b5b422b0414d"
        },
        "item": {
          "id": "0b0e5f45-0e1a-450b-b21d-bf18f92ceba1",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b5cadf50-ab4a-4e0d-96c7-791a4bb30ae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "016dce22-cd5e-49e6-90bc-932966f1fb19",
        "cursor": {
          "ref": "f4626f39-d2a6-4b1e-8a6b-0b516eaf713f",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "2298c6af-f191-4fd9-80d4-5cd1d77a9be7"
        },
        "item": {
          "id": "016dce22-cd5e-49e6-90bc-932966f1fb19",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "d5515ed6-35ed-4fd8-9603-5d863a5c7547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f065532a-b010-4c7c-92df-0a951250a7bc",
        "cursor": {
          "ref": "e4749301-9d7b-4d8e-bf94-3d8c51e26599",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "55174cd2-6daa-4a05-bebb-8e4020c67051"
        },
        "item": {
          "id": "f065532a-b010-4c7c-92df-0a951250a7bc",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "2cd9eceb-17b0-4078-ba86-621395420e0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "831583f8-40e9-48a2-a5b1-f1e86461fa6c",
        "cursor": {
          "ref": "1eb263da-45b2-46a1-83ad-592f8665a706",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2d443dfe-7659-47e0-a917-cb4b66d0e298"
        },
        "item": {
          "id": "831583f8-40e9-48a2-a5b1-f1e86461fa6c",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "bb0b1970-c674-4227-8fa3-ba249595d8be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f860a32f-14f0-4e56-973f-74f9cb9d49ee",
        "cursor": {
          "ref": "feb51103-8d70-4925-8594-03a6a4735019",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "07338129-c79a-4d96-8d40-776b9d6083eb"
        },
        "item": {
          "id": "f860a32f-14f0-4e56-973f-74f9cb9d49ee",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "43fc9680-bb63-4893-8100-cf40d0817e59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a8c0cff-4af5-4def-b838-bb3111761cd1",
        "cursor": {
          "ref": "19fbc585-da63-4967-8ba6-797dc7b97cbe",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "e603a48d-43a4-45da-a042-eb5199ac49fd"
        },
        "item": {
          "id": "0a8c0cff-4af5-4def-b838-bb3111761cd1",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "6b0e1eb6-cd0f-4ec8-a9a0-294ee4da95bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a85949c-cf1f-40a2-b6ef-885a0a9a412f",
        "cursor": {
          "ref": "303e5575-9753-49c1-a8f9-0bbd009fd712",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "92b79c10-dde2-4450-b1b4-5676e2678d18"
        },
        "item": {
          "id": "9a85949c-cf1f-40a2-b6ef-885a0a9a412f",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "535c0f30-4ae5-41dd-9178-c1a85bf69ebd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5042c39-87b7-45c9-a6f2-6fcb0cb75ecc",
        "cursor": {
          "ref": "22559420-8e48-49e2-9638-5e1dbde9132c",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b53a15ac-eb8b-4f91-b04d-6280514ab930"
        },
        "item": {
          "id": "a5042c39-87b7-45c9-a6f2-6fcb0cb75ecc",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "78918c09-7a10-446a-a144-a18afe6bf55e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e026ae3-cc4f-4057-a537-b7482fcc52c8",
        "cursor": {
          "ref": "ec8a98be-ee76-45ca-b816-14a682151c57",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f3b0467e-97b8-4623-8a7d-10a3d26a89f4"
        },
        "item": {
          "id": "2e026ae3-cc4f-4057-a537-b7482fcc52c8",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "62ebf169-73ac-4c1b-86e3-fc676558351c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a590e0f3-95d6-42d4-9dbe-348dc2aa262b",
        "cursor": {
          "ref": "acf7857d-5641-4ef3-9bc1-dfb12a930bbf",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a07a0fd6-6250-4da6-b3fd-ff8d275ea748"
        },
        "item": {
          "id": "a590e0f3-95d6-42d4-9dbe-348dc2aa262b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "63eae26b-3073-49d5-b367-099f3e630606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1695c87f-ff7b-4512-ab21-0b0415efea65",
        "cursor": {
          "ref": "d1955f2d-a2c0-44ba-926e-50ab9185617b",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "db28c571-c307-4be6-96f2-c10e5ebdc669"
        },
        "item": {
          "id": "1695c87f-ff7b-4512-ab21-0b0415efea65",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "cbf4c06a-1d8b-4ef6-b49c-6f1d03debf1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7351b5c-0693-4215-9b85-c183ce952a49",
        "cursor": {
          "ref": "af582368-cca3-44a1-8a64-6e7b79491510",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "523a1c5b-5b69-44d0-9a48-6091b60a4e2f"
        },
        "item": {
          "id": "a7351b5c-0693-4215-9b85-c183ce952a49",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "ca10540a-ffc9-4d34-91bc-7573203eab20",
          "status": "Created",
          "code": 201,
          "responseTime": 539,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "a22fed51-8fec-4b40-a35a-a13725dc39bb",
        "cursor": {
          "ref": "e1479fb5-da35-48c7-9d17-bc2ea1cbfc4d",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "7035cc54-8b29-4609-8e0e-17136a39ff25"
        },
        "item": {
          "id": "a22fed51-8fec-4b40-a35a-a13725dc39bb",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "5402ac16-e127-4afb-843c-495aac7c7ee9",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "4a023705-377f-49e8-9e55-85c4a6cdca92",
        "cursor": {
          "ref": "b7db2554-f499-4367-8844-cd14d2efc8e0",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "47afb902-6816-4fe8-bf16-53835559d3dc"
        },
        "item": {
          "id": "4a023705-377f-49e8-9e55-85c4a6cdca92",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "3e4bd518-e4fd-4176-b9cf-534f1be2a106",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "1a8ce15b-19fc-42fe-8480-814133f17b01",
        "cursor": {
          "ref": "7d45f5f6-147c-4c0f-a255-41debfc0df68",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "3f78a24d-f0f7-43a6-b955-1fef396cc186"
        },
        "item": {
          "id": "1a8ce15b-19fc-42fe-8480-814133f17b01",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "0845037f-fa1e-4873-897f-830db7574238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f24899f-7632-4718-b6f1-9592e48019bd",
        "cursor": {
          "ref": "03e85f83-82dd-4903-8219-740ddb121246",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "34462260-557e-4f8b-910c-750ea18618f8"
        },
        "item": {
          "id": "6f24899f-7632-4718-b6f1-9592e48019bd",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "5254e365-3d90-41cf-bbba-77195f65e2a3",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "1c91df0f-7933-459c-a87c-05c8bfa47b1f",
        "cursor": {
          "ref": "8a97ea1e-e39d-47ce-9a1c-45696b27f230",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "2bb00fda-0149-462d-bb17-da54595679b9"
        },
        "item": {
          "id": "1c91df0f-7933-459c-a87c-05c8bfa47b1f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "8e75b19c-0db8-42b6-9d65-c3e052323060",
          "status": "Created",
          "code": 201,
          "responseTime": 226,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "c0a1c1c5-20e3-427b-baff-d759867283f7",
        "cursor": {
          "ref": "5453236d-115f-4b29-bcca-93150369189d",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a7dbb938-756b-4789-85e1-b0779fd9d337"
        },
        "item": {
          "id": "c0a1c1c5-20e3-427b-baff-d759867283f7",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "0dc0f1f4-0879-4ef2-ab1b-1f4319dd3918",
          "status": "Created",
          "code": 201,
          "responseTime": 229,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "45832917-6b71-4d19-b81a-087a17cbec27",
        "cursor": {
          "ref": "a4369690-705b-4514-9f3d-960b390492b0",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6efa55a2-7a18-482c-804d-a7e1b05cceac"
        },
        "item": {
          "id": "45832917-6b71-4d19-b81a-087a17cbec27",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "fb35359c-7384-4348-bc2c-8f913a654bec",
          "status": "Created",
          "code": 201,
          "responseTime": 222,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "4ad5cf3d-947c-47ff-a8b2-ce343f3bf9db",
        "cursor": {
          "ref": "1fba8619-e5b4-4b59-aa9b-eb64207f53b0",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "aad346f5-fd2c-4d00-809d-9bd616d0c7b2"
        },
        "item": {
          "id": "4ad5cf3d-947c-47ff-a8b2-ce343f3bf9db",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e35f38da-743b-4a55-83ff-0fe0e8a8d565",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "a8d12821-c535-4f61-b1af-3eba940ab47d",
        "cursor": {
          "ref": "5af5956a-b01f-4722-b51e-54499bd367d9",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "7412c34d-5808-43b8-ba1b-4639abff383c"
        },
        "item": {
          "id": "a8d12821-c535-4f61-b1af-3eba940ab47d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "fa20c285-b0b8-41d4-9498-c3e6aead6e15",
          "status": "Created",
          "code": 201,
          "responseTime": 231,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "1ed851c1-ad86-4d1b-ab90-bf732d1f2473",
        "cursor": {
          "ref": "6a96a53b-41a2-4a53-bfd8-6e5332751325",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "04d825b8-c8fa-4a97-8486-9685e6faff04"
        },
        "item": {
          "id": "1ed851c1-ad86-4d1b-ab90-bf732d1f2473",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "9820e203-1b47-49ce-b4f7-d62a1453da31",
          "status": "Created",
          "code": 201,
          "responseTime": 216,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "34cdc22d-eb25-4df1-ae9e-19094044cd7c",
        "cursor": {
          "ref": "5c832058-c3f0-40fb-ba90-40eec917c390",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b2e42d60-0009-4d79-ae40-12d7446da913"
        },
        "item": {
          "id": "34cdc22d-eb25-4df1-ae9e-19094044cd7c",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "be4791c5-161a-41a7-8e78-e6d76f260b56",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "ac18126e-7e41-44fe-ada3-0a333a5b0007",
        "cursor": {
          "ref": "0d8f78fe-b198-47e6-9a60-8f1eb4ab2211",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "eb1b83cf-e412-4d3c-819e-d79993338a22"
        },
        "item": {
          "id": "ac18126e-7e41-44fe-ada3-0a333a5b0007",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "6de2d922-b802-4302-8f94-94c4db0a4d92",
          "status": "Created",
          "code": 201,
          "responseTime": 361,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "e6d4f8f8-09d0-47ac-9375-bcb3d9ad62ab",
        "cursor": {
          "ref": "1d55b46b-cd0f-4237-8e23-4c87adb4e124",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "915f29ea-30b5-48b8-9d86-7a40efc880e5"
        },
        "item": {
          "id": "e6d4f8f8-09d0-47ac-9375-bcb3d9ad62ab",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "cfe0bb0d-6ec2-4664-944a-2b1f8a10b09c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04cf15d9-c352-4637-8258-200058a2b106",
        "cursor": {
          "ref": "04c06628-a8df-4401-921e-de6c0bfcb9b7",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "213594a3-fa74-4018-862b-02978a42ad22"
        },
        "item": {
          "id": "04cf15d9-c352-4637-8258-200058a2b106",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "e113df56-15fd-48e1-abe9-768b7af84933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f114063-1c8c-4ba4-a941-f1a20b439fdb",
        "cursor": {
          "ref": "2f3aee74-1021-4038-b01b-de771b31dbef",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "dc1ccad0-8d54-43e6-9dc0-d6cd45f62e89"
        },
        "item": {
          "id": "8f114063-1c8c-4ba4-a941-f1a20b439fdb",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "dc901cb5-3329-4dec-af5a-79839a0c2e88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "099d2b02-76e0-4ccb-8719-13594f7fa778",
        "cursor": {
          "ref": "d2a395d5-26cd-43c3-ad07-98c7f102098c",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "c6423209-400c-45aa-8862-203a73c6ffca"
        },
        "item": {
          "id": "099d2b02-76e0-4ccb-8719-13594f7fa778",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "abf5562d-f49b-4602-8365-bef6b3fd3e2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dedc6b11-2dbf-4fe7-aa15-b1ed784ee97a",
        "cursor": {
          "ref": "6f8b6b95-eadf-4eb8-91b2-5cce63193a64",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "49de0350-211f-4e55-be37-4af413b35e49"
        },
        "item": {
          "id": "dedc6b11-2dbf-4fe7-aa15-b1ed784ee97a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "cb023471-b4b3-464c-afe2-3feca65a7cf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d655d4f-451c-4c91-ad1b-ee0424f1b257",
        "cursor": {
          "ref": "e604fc96-b862-4a5b-ab7d-8e34b630b727",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "2fd487d4-8d42-4563-89c8-aa962c2cdcbb"
        },
        "item": {
          "id": "4d655d4f-451c-4c91-ad1b-ee0424f1b257",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "2c5b09c0-98c8-4b0a-8e95-bcec632908f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52a8bd83-9510-450c-b4a3-119e93ec7181",
        "cursor": {
          "ref": "b4b048e0-1262-4b98-91d3-bad9446df2ac",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8a0fa64d-ef37-477b-b4ef-031703da0d61"
        },
        "item": {
          "id": "52a8bd83-9510-450c-b4a3-119e93ec7181",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f5527f2e-f82e-4d5e-b3da-b571ba39964d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "508248e4-124e-46c7-bb6e-9ffcb5f2877d",
        "cursor": {
          "ref": "53d26071-427a-4110-9034-e2cba34f2fef",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f1b9e080-f152-4bb5-a69b-2d6dc4117c9e"
        },
        "item": {
          "id": "508248e4-124e-46c7-bb6e-9ffcb5f2877d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f1ca1a7d-69ff-4178-ba57-db4237754f3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e86b37e-35ac-483e-959f-c912cb13f44f",
        "cursor": {
          "ref": "b13521cb-0e16-409a-aae0-64b9c507e76b",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "8246e59d-b689-437c-b4de-0961003f2349"
        },
        "item": {
          "id": "2e86b37e-35ac-483e-959f-c912cb13f44f",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "e3bee0dd-cb08-40d3-8f08-d2d02f587c27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e7fd0b2-a6f8-4531-b12a-6358efa5c859",
        "cursor": {
          "ref": "f16a377e-b225-4d27-9e96-e9e07cdbf56f",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "7c18809f-3555-44d4-9ade-0bef206e31e5"
        },
        "item": {
          "id": "1e7fd0b2-a6f8-4531-b12a-6358efa5c859",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "8946d57e-ea33-4c49-8550-35133cea8727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2073be02-9a2f-4f3a-bdfc-bb51afb0d486",
        "cursor": {
          "ref": "da5841cd-c025-4d4d-be89-ced2029a8b02",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "3243d894-2564-42ed-81da-d551786e606b"
        },
        "item": {
          "id": "2073be02-9a2f-4f3a-bdfc-bb51afb0d486",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "8c3bef24-9491-4037-8700-20757c67b53c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f165a04-6fb1-4266-8665-267b30ff36af",
        "cursor": {
          "ref": "8aedeab0-7bc9-44e9-87a0-e66845545f9a",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "9a946472-7d15-4b8a-84b2-b834ae7fbdab"
        },
        "item": {
          "id": "9f165a04-6fb1-4266-8665-267b30ff36af",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "f5c6ac91-251d-4836-b870-c27405179172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06e3ceb0-4142-4a13-9132-7c7f43ddbad2",
        "cursor": {
          "ref": "ced96356-9ae5-4cc3-ac21-4a7db1de4735",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "367899f6-134d-490c-b5f5-abca45797216"
        },
        "item": {
          "id": "06e3ceb0-4142-4a13-9132-7c7f43ddbad2",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "ec4b556f-3de7-4dc0-91dc-b7ccb39d4544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99107027-095c-4845-91fa-81e913b72557",
        "cursor": {
          "ref": "887b7c6f-8caf-4945-858e-29afbd5a7329",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "a09b9c56-de10-420a-b732-18e421f98532"
        },
        "item": {
          "id": "99107027-095c-4845-91fa-81e913b72557",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "73a48def-245d-46bd-abc4-6269471db786",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "639b7e8e-eb06-4873-8a2a-f5052e998c76",
        "cursor": {
          "ref": "b67ac3aa-5ee1-462e-8172-332994965cbc",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "479bd519-1826-424e-8c69-bb6c595445a4"
        },
        "item": {
          "id": "639b7e8e-eb06-4873-8a2a-f5052e998c76",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "111e72e1-73c3-457b-b04f-2706c7e040c5",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "8ded5504-f68a-420f-9ce2-c48fdf73c8b4",
        "cursor": {
          "ref": "473b56db-7612-49b7-8716-fb13d596ae0e",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e61b24d4-ca4b-480d-94fc-6f2bc1545f54"
        },
        "item": {
          "id": "8ded5504-f68a-420f-9ce2-c48fdf73c8b4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "fa7b7f4d-a39a-436a-a69a-f80bd7c1285b",
          "status": "Created",
          "code": 201,
          "responseTime": 239,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "54bdde48-d08c-4906-92fa-71dab4faf239",
        "cursor": {
          "ref": "ce4fb1f0-ab2d-420e-903a-4b6c8039a64c",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2ed01511-78b9-4078-904b-caa7683f2b4a"
        },
        "item": {
          "id": "54bdde48-d08c-4906-92fa-71dab4faf239",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c09a5e43-7dba-4cb5-950c-b08b579c3a28",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "1b2ef950-535c-4b9c-b41a-1eb5a09dcbe6",
        "cursor": {
          "ref": "06fb89f7-39f9-4534-a46f-6733c34a6b9e",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d252575f-8acc-4ceb-b96e-a4c71066cd15"
        },
        "item": {
          "id": "1b2ef950-535c-4b9c-b41a-1eb5a09dcbe6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "5f4be398-f5de-4a27-aabd-382b6f55b5eb",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "0b66f7a7-092e-4cde-8624-686e04d77aaa",
        "cursor": {
          "ref": "a234e2b2-d655-4e16-a323-a1313a019209",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "841b3dfd-8468-434f-b1b0-1da553395338"
        },
        "item": {
          "id": "0b66f7a7-092e-4cde-8624-686e04d77aaa",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "b385b124-9390-4e54-a71e-4a763f61aacb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "949cc8e5-d12e-4277-a9d3-a21d0fffa542",
        "cursor": {
          "ref": "413418bf-70c7-44f5-872a-d8cbce8a6cd6",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f7cb329c-3c8e-433f-a8cc-3d89d5db1f9f"
        },
        "item": {
          "id": "949cc8e5-d12e-4277-a9d3-a21d0fffa542",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "68d2acf9-f8af-4501-8248-8702e9a6130d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "799addec-4983-455e-8288-a6122cc94c6f",
        "cursor": {
          "ref": "60941fb4-331e-4c93-b223-a5f8706c3de2",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "60c34c83-241a-4da9-ae54-f42b201f8976"
        },
        "item": {
          "id": "799addec-4983-455e-8288-a6122cc94c6f",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "cf2599cc-edf2-4f76-a8b9-3e18d15a8c2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc8e5dba-cee9-4a6d-9bca-2b1527a24ad1",
        "cursor": {
          "ref": "02d5fbcb-9897-4d49-afe2-4da251bf87c9",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "08278b77-9cc6-4d6e-bbb3-d297f9737123"
        },
        "item": {
          "id": "cc8e5dba-cee9-4a6d-9bca-2b1527a24ad1",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "7bee4074-b219-4b9b-af9d-28a653a52e75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea43f27a-a8e5-47d5-a9ea-a77c70cfef73",
        "cursor": {
          "ref": "7dbe2241-4d3d-42e3-addf-95fe1ed2de7c",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "ad4037a4-3471-4aa0-99ee-6ec75f0f949f"
        },
        "item": {
          "id": "ea43f27a-a8e5-47d5-a9ea-a77c70cfef73",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "c46f8344-be98-416c-bcfd-24c7bc404b05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48094fa9-f318-440b-a75e-31a8266ddd4e",
        "cursor": {
          "ref": "d5adc047-5296-48a4-9c6e-1c4490015f9c",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "d0fb3476-19ea-45e2-9d6a-d3cbd4aa5714"
        },
        "item": {
          "id": "48094fa9-f318-440b-a75e-31a8266ddd4e",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d2ea5271-845e-4707-9243-823de4eb4d8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5ec4676-034d-40f0-8539-bfa6ccef6127",
        "cursor": {
          "ref": "884238b4-9c35-429f-9a51-56287740eac6",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "40f7091f-6152-42fc-ad51-be9ce108d348"
        },
        "item": {
          "id": "c5ec4676-034d-40f0-8539-bfa6ccef6127",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d84cd195-6db2-4e2f-beb5-5ceedd185a67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afa54497-2cc4-4aed-bbc3-bfb3119c8874",
        "cursor": {
          "ref": "bf873518-8329-4195-bcad-888da266e835",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c840fce4-71e5-4665-96b7-f1cf1b8c91dd"
        },
        "item": {
          "id": "afa54497-2cc4-4aed-bbc3-bfb3119c8874",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f11509bc-4d8b-4e4c-9dc4-12e49f2d2a5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac34fa55-f40e-45f7-ad5e-200507ca1c68",
        "cursor": {
          "ref": "975fa6c3-e3af-4b4d-bf6e-e4f466592f5f",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "65429412-fef6-4b7e-9ae3-7657f3245c69"
        },
        "item": {
          "id": "ac34fa55-f40e-45f7-ad5e-200507ca1c68",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "ea32b0c2-d3cf-473b-b8a5-8bcf26451d37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1f74b3f-f0e1-45b6-9ea6-7a56887c0da5",
        "cursor": {
          "ref": "f5e49330-d7bd-4fa0-a361-a8c2f59b4046",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "558ab25a-ed32-47b7-ac37-005927982ed6"
        },
        "item": {
          "id": "e1f74b3f-f0e1-45b6-9ea6-7a56887c0da5",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "34bf43ba-92df-4b8e-95b4-d2bb96ea36aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48d069ee-8705-4084-b992-2033fe37d8a5",
        "cursor": {
          "ref": "a1272482-dbd8-4253-85d2-e7b4b79499bb",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "2f5aec95-389e-4310-b249-6040eba11435"
        },
        "item": {
          "id": "48d069ee-8705-4084-b992-2033fe37d8a5",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "60f55fa5-74c6-478b-b4d8-6d9b909f2a03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "848d6276-a12d-4722-ab0d-539cc0fcab52",
        "cursor": {
          "ref": "41c5b92e-27b8-463d-aef8-8f5e46ff8cbb",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f4a19127-7343-4c2b-a93e-df26d547e964"
        },
        "item": {
          "id": "848d6276-a12d-4722-ab0d-539cc0fcab52",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ca2b4f21-da94-4b17-a2d9-d6d4099c1497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c276712-89bb-43f1-9e5a-3ae372157080",
        "cursor": {
          "ref": "c78e8e88-7cf5-46e7-834c-15bd957db0a0",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "fa72de6b-52cd-4bc8-a8d5-5307f24b7c98"
        },
        "item": {
          "id": "8c276712-89bb-43f1-9e5a-3ae372157080",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "abf8404c-3239-472d-a87c-c527b158bb69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e87b49f7-5f54-429b-97be-81a01a830b39",
        "cursor": {
          "ref": "c4b14399-e3ad-4692-bbb7-026c15af243b",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "f78bafee-890d-4a0e-a839-67845548dc29"
        },
        "item": {
          "id": "e87b49f7-5f54-429b-97be-81a01a830b39",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a9a7cfac-0af7-4726-8ea7-6dbc300519db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b69dce09-3d7a-4893-9195-ff12df62d071",
        "cursor": {
          "ref": "7232f337-26de-4ff4-85cf-57f1ab8e9f92",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "291e18cd-cf91-4236-8564-03d897dc59b9"
        },
        "item": {
          "id": "b69dce09-3d7a-4893-9195-ff12df62d071",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "325c678f-75d9-4171-9f25-d01067117f0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba389943-5a68-460d-b9ce-0e46bab9835f",
        "cursor": {
          "ref": "8fec6efe-6155-4a2d-8436-abb364e3c21e",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "79c2ac54-143c-441b-8773-565a2df2e016"
        },
        "item": {
          "id": "ba389943-5a68-460d-b9ce-0e46bab9835f",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "73a368f1-d15c-4a16-873e-c65e58714917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "476eb98d-2903-4655-ba54-4d36dcfa14a1",
        "cursor": {
          "ref": "4c9a37bf-e3f8-4489-88d5-01b5f352ba5e",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "871d3d7b-092a-4297-a7c5-76271ba63b8e"
        },
        "item": {
          "id": "476eb98d-2903-4655-ba54-4d36dcfa14a1",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "062c5cb4-4062-439d-83d9-e78e6a186599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5130a256-f1db-423f-a5e2-559352bba787",
        "cursor": {
          "ref": "a4b738e8-33b7-46af-96ab-c19105a0c276",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "5e76141f-ff44-4d04-902e-5393dc649737"
        },
        "item": {
          "id": "5130a256-f1db-423f-a5e2-559352bba787",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "76099455-0646-4bb8-a090-817a86115ac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce9329cb-b282-452a-94e4-4de30af6f127",
        "cursor": {
          "ref": "064138bf-205d-4efb-82c4-079ff569241e",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "0fc4cfeb-5d5d-4eef-a5fc-cb078adb85c4"
        },
        "item": {
          "id": "ce9329cb-b282-452a-94e4-4de30af6f127",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "ada72743-1fcd-447d-bdc3-536cb9570378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f3937b8-4098-4d32-8c08-c32b39bb6bfd",
        "cursor": {
          "ref": "714fff9e-cc3e-4e83-8b58-450f2e8c8a7b",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "7e6b5ec8-755b-444a-baa1-ae73524c96e2"
        },
        "item": {
          "id": "2f3937b8-4098-4d32-8c08-c32b39bb6bfd",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "f80f0e3d-d703-4767-ab0e-f7e4f1f7a38e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14065ff4-00b3-4426-8ae5-7f29f3a9254c",
        "cursor": {
          "ref": "dee99d29-6cd8-4b1f-b006-11e3cd9161c4",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ab5f8f94-8f03-4eec-8009-10c4e4270e70"
        },
        "item": {
          "id": "14065ff4-00b3-4426-8ae5-7f29f3a9254c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "6ebecb3d-2098-4f2a-808c-fb2735c78c12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "426e37ae-a5b5-4b47-bf39-68c82b02ea48",
        "cursor": {
          "ref": "6f7f5fcf-40c4-4989-ac4d-4869b353d967",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "73c9898c-60aa-4a67-84db-a0e0338f94d3"
        },
        "item": {
          "id": "426e37ae-a5b5-4b47-bf39-68c82b02ea48",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "7ae04bba-63dd-4af2-9d40-d65eca9aad4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d903f174-3b7f-46ab-8949-e27a4b263762",
        "cursor": {
          "ref": "f7365c44-8ae0-430b-90e7-4d3ea192825c",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "8aaf6fcd-f7b8-4d98-bb4b-195965fb38f9"
        },
        "item": {
          "id": "d903f174-3b7f-46ab-8949-e27a4b263762",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "8391e883-3918-4e41-a79e-44dc09274599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7ca936a-609a-48de-af60-f12188d26f57",
        "cursor": {
          "ref": "aa2880ba-07aa-4961-94bb-4ee8b8a1f1a2",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "af4eecf1-39b9-4c24-9bb3-2058d65cccb6"
        },
        "item": {
          "id": "b7ca936a-609a-48de-af60-f12188d26f57",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d794a356-ba5c-49c8-9e8c-591d44883a06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61ecec62-c815-4642-80d5-4e912ac0a129",
        "cursor": {
          "ref": "9b411671-786b-4538-9464-9a3b14be9153",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "2597cecb-5a1c-42be-ad6a-144500e7ffbc"
        },
        "item": {
          "id": "61ecec62-c815-4642-80d5-4e912ac0a129",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "45e9c7f0-ed43-4269-9a98-cf279174a26d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0b30778-470c-4330-83f9-a731d7ec81d1",
        "cursor": {
          "ref": "780688b4-675f-466f-8445-42949049d8b6",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "b9976ec8-9e0f-4cce-8346-807b518f51b2"
        },
        "item": {
          "id": "f0b30778-470c-4330-83f9-a731d7ec81d1",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e539c4c4-6434-4600-8236-2ad46412fd34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07bc3da3-fabb-4472-aee1-9fb0709766da",
        "cursor": {
          "ref": "c27826f0-c707-4b97-82a9-7457c2f66b93",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "28831c1c-d099-4c8b-9750-5c77bdd70806"
        },
        "item": {
          "id": "07bc3da3-fabb-4472-aee1-9fb0709766da",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "956afbe7-e159-40d3-80d6-452536b6bced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45a9b797-56d4-425c-8119-fb90452aed93",
        "cursor": {
          "ref": "dfcff068-040d-4743-bc1b-36a0a25bfa2a",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "83ca1498-d54f-4956-a0fa-b692766579c3"
        },
        "item": {
          "id": "45a9b797-56d4-425c-8119-fb90452aed93",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "efae69ea-3580-4a19-8337-5d378d25bcb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eccc3b55-7e23-4bbb-9811-9f20798ff193",
        "cursor": {
          "ref": "76586a4c-ff44-4d72-8629-daae57bbb2f1",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "c20c0187-b9df-495c-90ee-0d0f4a526a44"
        },
        "item": {
          "id": "eccc3b55-7e23-4bbb-9811-9f20798ff193",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "f7fc5159-3abf-4d43-896c-b4da62160a30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fb7dbb0-7ba4-46a4-a294-25ebc5a43325",
        "cursor": {
          "ref": "236e6170-aac8-45eb-838a-0da9ea504ae2",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "8b5beffc-7ee3-489c-be2d-93ad3824bf56"
        },
        "item": {
          "id": "7fb7dbb0-7ba4-46a4-a294-25ebc5a43325",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "9928a1ad-01ca-4c64-a87d-b5ff89e8f20c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebb5d44d-816a-49a5-837b-25c9bc9467e5",
        "cursor": {
          "ref": "0052341b-aecf-4f93-8bc1-20054accf897",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "bba2489f-b778-4e39-bebd-7af783be321b"
        },
        "item": {
          "id": "ebb5d44d-816a-49a5-837b-25c9bc9467e5",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "adc6ae83-df65-4dcb-98e4-e36fbddc8205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2120fe78-e738-4228-ae46-4cc156f05ae7",
        "cursor": {
          "ref": "4de4775a-0bf9-4d86-b16a-d4c2588eac70",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "835604d8-5f3b-436d-ad2f-53783d8f65fd"
        },
        "item": {
          "id": "2120fe78-e738-4228-ae46-4cc156f05ae7",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "b8d50cf5-80c1-4d12-b37b-c196b3599da9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f90f8e1-00f5-4051-a8ea-623a093fab00",
        "cursor": {
          "ref": "61706db9-1775-4533-ae98-df79cb925940",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "a74dbafc-601c-4ef6-8259-0e84ba66ea28"
        },
        "item": {
          "id": "8f90f8e1-00f5-4051-a8ea-623a093fab00",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "84583f8f-f996-4049-ac79-4882ea041ded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "15873708-0f2a-493d-991f-b0a02f43d4ec",
        "cursor": {
          "ref": "96f15f35-49b7-42c7-87c2-07028b4d0f07",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f5e803d8-5107-44b0-adf4-018995c60002"
        },
        "item": {
          "id": "15873708-0f2a-493d-991f-b0a02f43d4ec",
          "name": "credentials_issue"
        },
        "response": {
          "id": "694a8aea-1a51-4438-a56f-b9c75e246ab4",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "723627d9-080f-4a3d-b863-3cfed9f60a8d",
        "cursor": {
          "ref": "2d285990-d4c8-446a-b558-278c03e9c688",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "f4a481e1-51f6-495e-9881-85df5af7025e"
        },
        "item": {
          "id": "723627d9-080f-4a3d-b863-3cfed9f60a8d",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "05ea3f56-c837-4388-ad3b-30c4b6732e65",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b1d4dc2-dd38-4ad8-b020-82f9b601249c",
        "cursor": {
          "ref": "170b6103-da73-49f5-93ac-a0122f08b8c8",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "b5fb6761-8f1f-40c4-a80c-e0e92921fcb6"
        },
        "item": {
          "id": "7b1d4dc2-dd38-4ad8-b020-82f9b601249c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "cff5cbd5-26d7-40fd-afd8-5238c4e57496",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d331b4c-7374-4b89-a48c-86971bec4ff2",
        "cursor": {
          "ref": "30e2c714-1641-4012-87ca-a66d2e29921e",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "d1e0047d-c523-41ec-8be5-d5d7f245e762"
        },
        "item": {
          "id": "8d331b4c-7374-4b89-a48c-86971bec4ff2",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "65f0c6c8-8a32-453b-bfa4-465e9389cc88",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "40c13518-82e3-4ba7-9630-aefccc98f91f",
        "cursor": {
          "ref": "1471474c-d3ba-4b10-b674-d2df2d220d9d",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "6fe979e0-210a-4199-9d1d-a934e13cb4c3"
        },
        "item": {
          "id": "40c13518-82e3-4ba7-9630-aefccc98f91f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "38e684e0-d611-4099-9582-c78ce2d86d7f",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-01-27T00:34:30.264Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-01-27T00:34:30.264Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "9166efb8-d861-499b-ae2e-5b11e85529c6",
        "cursor": {
          "ref": "b13157d7-4943-4b14-928b-758dfaa7b926",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "22e19d36-59dc-4efd-bc4c-cd3e4be4597e"
        },
        "item": {
          "id": "9166efb8-d861-499b-ae2e-5b11e85529c6",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6b16a2ef-e9ea-4cce-82e1-f0fc09c81146",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a67f8c69-e2df-48d1-a22b-0f365c11972b",
        "cursor": {
          "ref": "bbce71e3-e07f-4cf6-ab1e-e84e0b89ae1c",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a0d134ce-0e2c-4965-b904-7890a4288974"
        },
        "item": {
          "id": "a67f8c69-e2df-48d1-a22b-0f365c11972b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c0cf60c5-25a3-4802-a7e0-10f4d453bbbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2a15b66-4940-455a-b9cf-3d981e8ab4c9",
        "cursor": {
          "ref": "a8af728b-b9c1-46e8-bd18-168a8da6fdb6",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "4fe7ec04-41c7-4b12-851a-7186fd53052f"
        },
        "item": {
          "id": "c2a15b66-4940-455a-b9cf-3d981e8ab4c9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "32eacefe-4dff-4b26-87af-049f153d4d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "206e0910-8eef-4cd4-b073-079f70386c57",
        "cursor": {
          "ref": "fb3a7bb5-11fa-42ef-a701-688d45a2fa91",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "72a68239-3fdf-4947-b176-b33b1c97182f"
        },
        "item": {
          "id": "206e0910-8eef-4cd4-b073-079f70386c57",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "81caa1dd-eabb-433c-8dfa-9be9e326a148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92943d1a-51ae-4b67-adb1-4caf2a84c5b3",
        "cursor": {
          "ref": "39488957-ab1b-4cc3-8110-2238fa011515",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "42acdf89-f053-4f27-9bea-d0baa8ce1272"
        },
        "item": {
          "id": "92943d1a-51ae-4b67-adb1-4caf2a84c5b3",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "bf16c084-b5f4-4d46-8ded-f33aad26335c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05733a04-3a5b-4a7a-82f7-899475bf84df",
        "cursor": {
          "ref": "8cce6573-61d9-48e8-bd4a-85658eaf6bd1",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "81d81bd9-cdb7-4169-a40b-781ef7c331b8"
        },
        "item": {
          "id": "05733a04-3a5b-4a7a-82f7-899475bf84df",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a5d17d29-b5b3-464a-a15e-57e392a1d9a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "128c485d-4b03-4361-93ec-fcf6d18f8b9a",
        "cursor": {
          "ref": "9d98d3a7-c5b3-49b7-a6c6-6026cba80b75",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "299559fd-3872-4d76-b4f3-f55a54799aad"
        },
        "item": {
          "id": "128c485d-4b03-4361-93ec-fcf6d18f8b9a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9f4a4553-fc2a-4bf1-876e-82837b7f3f74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38655c68-cf72-47d3-bb5f-b50f64555523",
        "cursor": {
          "ref": "a4a7c7bc-c73d-4027-96e2-f6e5c3e692a1",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "be0f1ca0-c498-495b-9ca5-11ac4eaeb44e"
        },
        "item": {
          "id": "38655c68-cf72-47d3-bb5f-b50f64555523",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "01d5431c-3d5d-433c-8063-2a4571181660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a85ca91-bc08-4318-9997-52c5ffbf116b",
        "cursor": {
          "ref": "a666ca9a-32ed-4ab2-b74f-fecc7ce6c188",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "11ecbc1d-47d0-4cf7-986a-0080d5bfa31b"
        },
        "item": {
          "id": "3a85ca91-bc08-4318-9997-52c5ffbf116b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7f630e7c-99f0-466c-bc7d-eb3be75332c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93b22ce0-3f35-4878-ab75-a286d0da7353",
        "cursor": {
          "ref": "7926fdb5-7507-4c13-85ea-a3bf468b206e",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "6b992d6b-2f8c-4e66-844e-f2e011241436"
        },
        "item": {
          "id": "93b22ce0-3f35-4878-ab75-a286d0da7353",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "426964fc-a900-4d28-818b-5356047c6cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e9b45fb-ddc9-44f9-9f59-13a17a531c56",
        "cursor": {
          "ref": "2d9d1ec7-658e-49da-93cf-ef63735e12bf",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "0380c218-e9b5-4d76-8399-acb8d92c5424"
        },
        "item": {
          "id": "4e9b45fb-ddc9-44f9-9f59-13a17a531c56",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8cf0acfe-09dc-4f9b-ae07-fcf444ee58ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf0824e3-924f-4aad-846e-107f5db40e22",
        "cursor": {
          "ref": "cf8d5ec6-97ab-4597-8e43-fee100e36813",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "c09a3b8d-26e1-4ab1-980e-7e117b31df0c"
        },
        "item": {
          "id": "cf0824e3-924f-4aad-846e-107f5db40e22",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f7198cf4-e96c-4709-9869-aa446ab68370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f30b8ed-7030-47f4-a8fc-7db7daf4d698",
        "cursor": {
          "ref": "5b7f002b-7c75-43a3-819b-35a803cdbd8b",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "c1c8a999-a7ce-4086-acde-ea3b714ee7db"
        },
        "item": {
          "id": "5f30b8ed-7030-47f4-a8fc-7db7daf4d698",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b6c4f9c4-5fae-49db-ba77-be13bc3e5d96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a63c22a-f014-4c37-aa32-16b6a450a62b",
        "cursor": {
          "ref": "d86595a0-7658-4e50-8b03-bc1896c56230",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a8c45ca9-2e83-4641-8874-8d1ae2265984"
        },
        "item": {
          "id": "0a63c22a-f014-4c37-aa32-16b6a450a62b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "96f23f90-6a1a-4c16-95ae-ea503a55866b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 88,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "a8f2447c-0630-426a-93d2-063c8f975514",
        "cursor": {
          "ref": "075ce63f-2631-4209-84d2-380abf9a524b",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "3f14c4d3-25b6-4da8-98f1-8a8f05356af1"
        },
        "item": {
          "id": "a8f2447c-0630-426a-93d2-063c8f975514",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "812a69cb-df62-4656-9ba4-291066a4e60e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 89,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "197fdf2a-7a5d-4b70-acfa-255307cc49e3",
        "cursor": {
          "ref": "e93600f4-381a-4411-8f40-cf15466f4475",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "4245d2ad-0a2b-4924-8baf-1d69545934d5"
        },
        "item": {
          "id": "197fdf2a-7a5d-4b70-acfa-255307cc49e3",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2ac79e56-d7c6-4d40-8409-413fb9a6e8ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c89a9d5-5763-4ca9-843b-14068a89d284",
        "cursor": {
          "ref": "ec0cfddc-d4c7-4fc4-aaf5-02e764eded61",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "954d1eb8-2aa0-46dc-8a34-fbfeb182e312"
        },
        "item": {
          "id": "0c89a9d5-5763-4ca9-843b-14068a89d284",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "825ce3fe-788c-4d06-8dbf-73a9ac658444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "028327ca-2768-4caf-bfee-f2668f561a43",
        "cursor": {
          "ref": "d679d73f-8f7c-4620-b563-a84ec6963fb0",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "4f2dbfb1-3596-4b1a-8f5e-d58dd300e605"
        },
        "item": {
          "id": "028327ca-2768-4caf-bfee-f2668f561a43",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "58c9516d-eb33-40f8-8e39-6611bd018b15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d827d1-c273-4265-a683-aab734a8ccf1",
        "cursor": {
          "ref": "214f6849-ada9-4575-9a7e-98090acf59a6",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "69d4fbdb-9841-47a6-a7cc-996ca98fba28"
        },
        "item": {
          "id": "62d827d1-c273-4265-a683-aab734a8ccf1",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ec968dc6-6ec1-41d0-9f30-9fbb96413296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c46d5452-198b-4857-a2d1-c65f62ad4dd9",
        "cursor": {
          "ref": "0af5cbed-bc1f-4106-b137-b364e48ac9be",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "565ba856-aaf5-4f36-96f9-7fbb522086ca"
        },
        "item": {
          "id": "c46d5452-198b-4857-a2d1-c65f62ad4dd9",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "8bad5229-16e2-4ca3-a4cc-01dd9b91fed2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dab4bc86-d5ec-48a4-b854-f4e51b29a5bf",
        "cursor": {
          "ref": "688e23bd-811b-4fbb-a5aa-d9f425fe4b2e",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "9ebceb59-5926-4875-a274-7d4a0c8d44a8"
        },
        "item": {
          "id": "dab4bc86-d5ec-48a4-b854-f4e51b29a5bf",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b6c5058f-0add-455c-9a4e-8c30ec080664",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47627742-e3a5-459e-bb6b-81e02ab52681",
        "cursor": {
          "ref": "df34e903-3166-4996-ade8-b9e7be8e6682",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8571533c-843f-4428-b00d-fd4e1187832a"
        },
        "item": {
          "id": "47627742-e3a5-459e-bb6b-81e02ab52681",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "65b3af2f-eb7d-4754-b259-fc302756b482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ac987ae-1527-493e-a239-1e058f31375c",
        "cursor": {
          "ref": "808ee381-69b3-4770-964b-8666b7271f0a",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "f43afe77-4075-4bd8-bf82-71841ca75ded"
        },
        "item": {
          "id": "2ac987ae-1527-493e-a239-1e058f31375c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8be95131-6e51-4988-b3ff-fbc9d34632a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "790001c4-9e99-44be-82cf-39e20c4b673c",
        "cursor": {
          "ref": "6ebcc9bb-4fe8-4c3e-8775-cbb192b2fe03",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "032d61c2-3092-44ad-ac84-52da90a4c46c"
        },
        "item": {
          "id": "790001c4-9e99-44be-82cf-39e20c4b673c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d9e2cea8-cf48-455b-8475-330b7db93abe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9d9d537-6378-4773-a729-9c5c85b9f97b",
        "cursor": {
          "ref": "bff1869c-5012-47e9-afb0-bcf3c5441349",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d91e8ccb-d550-4a9f-b676-8ebcf2a2f9c5"
        },
        "item": {
          "id": "a9d9d537-6378-4773-a729-9c5c85b9f97b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "cbe982c5-1dbe-4332-b6ff-ecfa3a42c333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72920c5e-eda5-4607-982d-b25b2a0e618f",
        "cursor": {
          "ref": "2e36d14f-4353-4ce2-85a9-b44cbd3f98fc",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "21fcb172-58a5-4282-8256-e915ecc20d18"
        },
        "item": {
          "id": "72920c5e-eda5-4607-982d-b25b2a0e618f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "8ed1cd65-dfe5-4554-921f-78255c827b32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d385d88a-2ac3-42a6-b5b1-7a7c0732df92",
        "cursor": {
          "ref": "92d5e5bf-8151-4490-8234-e7b4efa37612",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "bf7c2a28-1ec5-46d7-b580-f90f2ec72625"
        },
        "item": {
          "id": "d385d88a-2ac3-42a6-b5b1-7a7c0732df92",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "9cf1462e-4ca4-4d24-b560-db7c6241b2b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f8fa333-fa68-40e2-a5fe-7b7f13854d3d",
        "cursor": {
          "ref": "41d70b47-b510-470b-a2d7-de23120b0721",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "f4f640cd-75a1-49d1-bf0e-c6ab4cdc4daa"
        },
        "item": {
          "id": "5f8fa333-fa68-40e2-a5fe-7b7f13854d3d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d895213b-ea99-4147-833d-3ff71c0dda03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cc19dda-247b-45bf-a9fe-c50d91560592",
        "cursor": {
          "ref": "10568d25-4d9f-4421-a5b1-97def062a279",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "6bc5e8ea-0a27-4387-aaa4-20fba8e49816"
        },
        "item": {
          "id": "2cc19dda-247b-45bf-a9fe-c50d91560592",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "25041077-5e16-440f-aadb-683d1a38a128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ab62f8c-2cfe-4d34-bc00-24a6f287fdc1",
        "cursor": {
          "ref": "b299b9af-53ac-470f-8ba5-ae38dad201c9",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "501018bd-0e36-44e5-bcf7-4e0d993455d1"
        },
        "item": {
          "id": "9ab62f8c-2cfe-4d34-bc00-24a6f287fdc1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ec547114-c1b5-4899-9e8c-4d2f28c1469f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04587083-1780-4d75-b57d-1eea4660e8d9",
        "cursor": {
          "ref": "d8f097ee-712e-459b-9d99-a82911040970",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "c7dcafde-593c-4aec-8735-c8f0f48ef925"
        },
        "item": {
          "id": "04587083-1780-4d75-b57d-1eea4660e8d9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5eb5fd5b-4fe4-4bbd-a383-1edc596dd1ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c770b9d5-85f2-4701-97cf-901664901ead",
        "cursor": {
          "ref": "98f08065-cbad-49a2-b341-f4473a1d1a0e",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "84cdccf6-d4de-40c4-8bfd-183768c03e67"
        },
        "item": {
          "id": "c770b9d5-85f2-4701-97cf-901664901ead",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2d986588-af54-482e-9c2e-0cb3453388ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81b6f960-6ec5-4595-a56d-15351cad334f",
        "cursor": {
          "ref": "2861303a-3bd0-4942-a983-501e92bce291",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "2a60a66c-e227-478d-84fa-46abbdb6adbb"
        },
        "item": {
          "id": "81b6f960-6ec5-4595-a56d-15351cad334f",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "77c7f88d-27f9-4d84-a99b-f3d9b2ad4bfb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 87,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "7331b094-5eeb-4df5-ad1e-9a17ca1e328f",
        "cursor": {
          "ref": "312c510d-5e24-4ab0-a76a-556feb1a751c",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "3b01ebc9-2831-4ad9-b8ec-4afb4fe0e845"
        },
        "item": {
          "id": "7331b094-5eeb-4df5-ad1e-9a17ca1e328f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "964eda0c-344a-4853-ba0d-5aaa9584d4fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "869c5a7c-8650-403c-9398-833494d6bf73",
        "cursor": {
          "ref": "ed958bf6-e187-4bdd-9a70-b09c6cac4f63",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "0c8f376a-4364-4456-84d2-b34e63b46a77"
        },
        "item": {
          "id": "869c5a7c-8650-403c-9398-833494d6bf73",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3ff6effb-92b7-47cf-9d81-e52a56e60b20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c94d87-2013-4e5c-b683-c4e49fefac24",
        "cursor": {
          "ref": "cfcd8f82-bde5-4063-9309-0b3b9904ae4e",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "190f289d-fed9-443e-a0fc-a2e5d76b665e"
        },
        "item": {
          "id": "d5c94d87-2013-4e5c-b683-c4e49fefac24",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ecf4387b-874a-4d3d-ac4f-603ea70f692f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "196a8684-ccec-4973-ae70-483a1cdaae9c",
        "cursor": {
          "ref": "431426e1-4306-4991-8b98-2fa20491ef90",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "6d59fd05-b7db-4118-afe2-881384c764c7"
        },
        "item": {
          "id": "196a8684-ccec-4973-ae70-483a1cdaae9c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "22f63437-440b-4c1b-8bfb-01c658970192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc162208-2e22-4c88-901c-6b4458a16b11",
        "cursor": {
          "ref": "51b639ab-b22c-40ac-aafa-cf7b15fd73ae",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "8b8c528d-9282-44ae-ae31-1fc805d56e66"
        },
        "item": {
          "id": "bc162208-2e22-4c88-901c-6b4458a16b11",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a04f7797-2597-45fa-b153-61499090bbb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e3687d4-b27a-4058-81e0-5069ac035707",
        "cursor": {
          "ref": "f110163e-fc9e-4b31-ac6f-426b98718193",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "0d8385b3-28ef-4199-93e2-b3aa1a6e8999"
        },
        "item": {
          "id": "8e3687d4-b27a-4058-81e0-5069ac035707",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "6e3d67fd-2c2b-4a76-bc5d-5acffa00d67d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e468aa80-4d15-40b2-b94e-826ac37840e0",
        "cursor": {
          "ref": "0f02cd4c-c56b-4662-a9de-46a332a76d28",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "bcdde70d-e9bf-466a-8087-42cd01cfe133"
        },
        "item": {
          "id": "e468aa80-4d15-40b2-b94e-826ac37840e0",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "cf954f84-1ef9-44f3-9ba1-e49951bbeb13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26877c64-b23c-433c-b4dc-90839df368dc",
        "cursor": {
          "ref": "d2e52cc5-2068-4b21-ad8a-3c3111dcd962",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "676afff2-dee6-440d-b938-9bcbe5b3ed49"
        },
        "item": {
          "id": "26877c64-b23c-433c-b4dc-90839df368dc",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2410e736-c175-481c-9c96-b92a79f6ce0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "026c97b2-5896-42ef-ba84-d542441b4526",
        "cursor": {
          "ref": "dd116758-575c-47b6-a3cb-a681abeb5d91",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "51c50442-982d-4b08-ad70-4d01f67b20f9"
        },
        "item": {
          "id": "026c97b2-5896-42ef-ba84-d542441b4526",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e371598d-1e10-4977-83fd-4f655f1d9617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f1cc6bb-a5be-40f9-9e8d-aa0989c49e12",
        "cursor": {
          "ref": "c11cd2f2-1839-4ce0-a447-57566162bd2a",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "ed2e20dd-c7c2-4112-9f95-610e2e02a7a1"
        },
        "item": {
          "id": "7f1cc6bb-a5be-40f9-9e8d-aa0989c49e12",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "32cbc5ed-4e87-4b04-9c94-2d627b6b5542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c5381ed-b88d-45e0-924c-8e8ea3612739",
        "cursor": {
          "ref": "b6414ba1-519f-4629-9966-2fb70375954b",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "2c1536d4-7342-455f-b3ef-a77226d85b59"
        },
        "item": {
          "id": "8c5381ed-b88d-45e0-924c-8e8ea3612739",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "51253bc6-3a57-407a-8cac-c153b7cfbc93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8b0498b-3d52-4095-a884-a86978301179",
        "cursor": {
          "ref": "b2486524-d713-4d44-95d3-59e65375e158",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "082a64c6-634c-43fa-a927-6def748502ad"
        },
        "item": {
          "id": "b8b0498b-3d52-4095-a884-a86978301179",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "42f79673-4448-4291-9ad1-b38bab21e2f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "962c5169-fcca-4cad-b770-d4754ea9882c",
        "cursor": {
          "ref": "d3a6a3a2-a56d-4c6c-85fa-ffd0fa8aa90f",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b437745a-c0ab-43bd-b74a-76552e311ec0"
        },
        "item": {
          "id": "962c5169-fcca-4cad-b770-d4754ea9882c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "9a73aef4-805e-40a2-8e01-f7c0b0895752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d6b16e7-747d-4054-a9e5-64a4d9d1de64",
        "cursor": {
          "ref": "cdbf3a65-45d1-475c-b59f-509cff8698d3",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "026c7818-5980-4553-b299-40fcdd1c2b0b"
        },
        "item": {
          "id": "7d6b16e7-747d-4054-a9e5-64a4d9d1de64",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "59877a4a-d6b2-410c-8e64-55b3f12e9faf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd09c3f5-7ba6-4694-b8cc-24e49f102c53",
        "cursor": {
          "ref": "ce1f0acb-7bec-4c71-b97a-227cd6083147",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "64504dd3-965c-483f-bb3b-bd4d380614b1"
        },
        "item": {
          "id": "dd09c3f5-7ba6-4694-b8cc-24e49f102c53",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "24536cc6-dcd0-4e56-95b4-64380d6f6fad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 85,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "7db3ba63-72ad-454a-a7a9-1e2c1dcc9d5e",
        "cursor": {
          "ref": "36f0faeb-9be1-4b34-b510-5c464f03eda6",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "9e9363bb-0b78-4532-9ddf-2a8e41a98e07"
        },
        "item": {
          "id": "7db3ba63-72ad-454a-a7a9-1e2c1dcc9d5e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ce3d277e-2ded-402e-b766-d96d20924357",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17bb3a60-e2cd-4a21-aded-51b8e2c69fdc",
        "cursor": {
          "ref": "211d8216-76e9-4710-adf6-e5edc293ffe5",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "0ce7b928-c5a9-444e-823e-3f7cdb9c31f0"
        },
        "item": {
          "id": "17bb3a60-e2cd-4a21-aded-51b8e2c69fdc",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a0bb68b0-6a1f-49e1-a8f9-bc7859d3665e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dd4d553-768e-468c-9a57-b21a913eef97",
        "cursor": {
          "ref": "19f6e00f-0446-40b7-af80-aa2ac027c67a",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "12d80252-9676-4fdb-acce-63f883bf1cd2"
        },
        "item": {
          "id": "2dd4d553-768e-468c-9a57-b21a913eef97",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8ffc81f0-283d-4ce1-8d08-7ee421bb26cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e345ddf2-ec1d-49f6-9708-1289fc726edd",
        "cursor": {
          "ref": "58c9fde4-86ff-4b96-b7a7-a996035d9152",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "4a2267f9-c8a6-46ed-8965-18037bcc2277"
        },
        "item": {
          "id": "e345ddf2-ec1d-49f6-9708-1289fc726edd",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a8ad5a69-0689-479c-9747-b4407197eeee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d95a933d-10d6-40e2-8dd1-b15bb1310750",
        "cursor": {
          "ref": "f47a1120-dac8-4be4-994d-dc67858f2a9c",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "1bffb0ea-1a12-4654-b1f2-f94790b7baea"
        },
        "item": {
          "id": "d95a933d-10d6-40e2-8dd1-b15bb1310750",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3cfd99c5-6c51-4b96-afb2-e7a3051fa17f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "470d4e91-3d98-4885-851b-8ba943ed96bd",
        "cursor": {
          "ref": "7a1b7983-9e84-42ea-aca6-d49ef50b3dcb",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "bc0c4059-83a1-44dd-a7a1-a3e39dda92b7"
        },
        "item": {
          "id": "470d4e91-3d98-4885-851b-8ba943ed96bd",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "90e24818-f7bc-4148-9424-aa4757090adf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81c98375-2696-4180-95ab-d584035e50f3",
        "cursor": {
          "ref": "45840289-655a-49f0-bc06-54292bc6f346",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "17e18cff-f1ad-489f-b894-71bd736ec514"
        },
        "item": {
          "id": "81c98375-2696-4180-95ab-d584035e50f3",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ed0b8025-6ed2-4b45-85ab-4daa412a0631",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "093a4d96-210f-449b-bd54-8c5cde3acf6d",
        "cursor": {
          "ref": "f005b233-03b7-4c38-be45-7f782c912d18",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "cb7b6f84-5af1-4712-a8e2-bb99d7ea4e66"
        },
        "item": {
          "id": "093a4d96-210f-449b-bd54-8c5cde3acf6d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4d8e3ce8-8bb6-41c6-8ea9-41ef444ea7d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb1daf0c-3f96-4b84-a854-bc9b04cca98d",
        "cursor": {
          "ref": "7a23de40-5c28-4e99-af7f-bd037cc3f5cf",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "3f79c6d2-c781-4cb6-9fda-5095851bfbf3"
        },
        "item": {
          "id": "bb1daf0c-3f96-4b84-a854-bc9b04cca98d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b8cabcca-d4d4-4f8d-bbf3-868d54e4bea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca6c4bc3-11e9-4bbb-af73-54b0e77dec8a",
        "cursor": {
          "ref": "1b422df1-e21f-4a20-a8b6-27a18eca6737",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "3c4d6bcb-9c0a-4fd0-8c7d-dfa045ea6f7b"
        },
        "item": {
          "id": "ca6c4bc3-11e9-4bbb-af73-54b0e77dec8a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f6456438-96db-4d2a-bd5c-b5bbaa1d15da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3c857a7-ec2c-4c80-a8aa-d8f1701ee606",
        "cursor": {
          "ref": "0d8f2f9d-8a1f-4d77-a711-6a792feb7d7d",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "3c6560bd-3e04-4c12-9c05-fd78cf0fd4fe"
        },
        "item": {
          "id": "f3c857a7-ec2c-4c80-a8aa-d8f1701ee606",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3e9500e9-7367-43ad-838b-b5a84f37b17f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99272b3c-2515-4fb2-aa68-1c6d4e1f5e34",
        "cursor": {
          "ref": "c9367f69-45b2-48cf-8f57-5e02a8a1e258",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "8293e229-f571-4425-b3b8-4f16e8ca6f86"
        },
        "item": {
          "id": "99272b3c-2515-4fb2-aa68-1c6d4e1f5e34",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c33884eb-2718-4999-a123-c4254444fcae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5381b69f-54d6-4d82-b572-4f1b837db723",
        "cursor": {
          "ref": "717c1724-3796-4bbe-83aa-f0585a226398",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "5b5360e0-827a-449f-a89e-95d33630d8e0"
        },
        "item": {
          "id": "5381b69f-54d6-4d82-b572-4f1b837db723",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a07559c7-6a13-42ce-b817-0266d5291b8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "741ad890-80fa-4eea-856a-9969183a0ba9",
        "cursor": {
          "ref": "037cf361-de49-42c1-b32f-3344172f0530",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "e4918b73-455a-44f2-a99f-cbb5517c593b"
        },
        "item": {
          "id": "741ad890-80fa-4eea-856a-9969183a0ba9",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "574b3fd1-861f-4cb1-8fa7-bcdc318c1269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f4ae571-1b77-456f-acca-d67b740b03c2",
        "cursor": {
          "ref": "04a5d9fe-0645-4a4f-803a-ade5a84284c7",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "305225a3-3477-422f-a654-ad36e5de66ce"
        },
        "item": {
          "id": "9f4ae571-1b77-456f-acca-d67b740b03c2",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c0bddb1c-cb1f-493f-a20f-1cb93c33c95a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa2d453e-a40b-4fb6-8c04-96b114976732",
        "cursor": {
          "ref": "99750e64-665b-4ac6-aab5-99dc7f0b0372",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "0e08e707-fbda-42fe-b6de-d0789ee7a08b"
        },
        "item": {
          "id": "fa2d453e-a40b-4fb6-8c04-96b114976732",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "460884ba-f028-45ea-a631-c0a7615aa79b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0227316-ff7c-4377-bc08-4f87d77a0954",
        "cursor": {
          "ref": "af865192-0b88-4ff4-bb47-6d728de8a212",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "68be3199-cefe-4f4c-ac36-19e3bac5cac7"
        },
        "item": {
          "id": "d0227316-ff7c-4377-bc08-4f87d77a0954",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ee01f4b6-d22a-4ff6-a56d-7a675810596d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c057492-c975-454e-823f-be70eab19e90",
        "cursor": {
          "ref": "4b4b26e8-129e-4d23-8b8c-5aa0e89fa1f8",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "4fc817d8-4644-4b3b-87ab-52281275d2e1"
        },
        "item": {
          "id": "6c057492-c975-454e-823f-be70eab19e90",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "a84deb37-e0ad-4ef5-83a4-38253d637c26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bc4167c-c7d9-45ca-8b3a-050a4f920986",
        "cursor": {
          "ref": "1db6a358-bd10-4abc-96d2-4a242f5eb225",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "0bb3a3cd-c298-41b5-a941-d5588471abf4"
        },
        "item": {
          "id": "2bc4167c-c7d9-45ca-8b3a-050a4f920986",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "e491ef4d-f7ef-4775-a70e-aa5021cfc011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1806e11-f121-4b48-ab68-3752b0179803",
        "cursor": {
          "ref": "7c5f396b-c722-4f93-a677-f4278f502fec",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "b9639e80-7093-4a16-92e9-11b7afa4aa86"
        },
        "item": {
          "id": "e1806e11-f121-4b48-ab68-3752b0179803",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "b22ed525-41f3-4379-8701-b13cdaf6b475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8700f78-180b-4d04-a759-18ab6be7d6b3",
        "cursor": {
          "ref": "d29d2e46-95d7-43e3-95af-ecb4cf695af5",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "3690f806-c68c-4877-b86c-80ae7d425348"
        },
        "item": {
          "id": "d8700f78-180b-4d04-a759-18ab6be7d6b3",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "6c9a158f-e76b-43b3-a09c-ac3104a3553a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c21e3d73-b714-4ee8-aedc-520c006f3676",
        "cursor": {
          "ref": "7f25a971-1f65-4bdd-9d61-346529e6dc24",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "892c19bf-565e-4531-b4a5-6a16c3be363d"
        },
        "item": {
          "id": "c21e3d73-b714-4ee8-aedc-520c006f3676",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "866d7133-f3b4-4856-b593-5b41c91c800f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "268b2bf7-8a9d-47cd-a412-950afbeffff8",
        "cursor": {
          "ref": "1dd512ca-ca1b-4bb6-a283-221538af5537",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "790ad529-9c08-40bf-a3bd-0c531cba5b47"
        },
        "item": {
          "id": "268b2bf7-8a9d-47cd-a412-950afbeffff8",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "91cbad07-fb20-4c6f-ab53-1f38a9ebac1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7349e97-f756-470e-8c35-e63218857242",
        "cursor": {
          "ref": "669d8b66-1b9a-4c2c-b813-c7c5d7fb84c3",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f04887ae-d65b-4550-8699-6790787b5900"
        },
        "item": {
          "id": "a7349e97-f756-470e-8c35-e63218857242",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e95072c0-93ab-459f-90ef-a693983a4977",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c21992d-2f6d-4ad1-a92a-0ea20bf046a4",
        "cursor": {
          "ref": "014fd267-344a-413a-b8c1-76d6e7de1016",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "3dd8ee35-9869-4142-8a4d-e39b671155b6"
        },
        "item": {
          "id": "1c21992d-2f6d-4ad1-a92a-0ea20bf046a4",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "2a0c1acb-2a6f-4a47-8085-62d98a87e7a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "add2454a-0632-40dc-9a9c-6d46668f418a",
        "cursor": {
          "ref": "a45695f3-0345-4339-b17b-bb9ec9b88b0d",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e5f3b22a-e341-4996-8e5c-9238255565af"
        },
        "item": {
          "id": "add2454a-0632-40dc-9a9c-6d46668f418a",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "e156768f-921f-4abb-9640-0eb7a9285e29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e07da576-0e8b-4f25-b9db-475db1726d17",
        "cursor": {
          "ref": "624f3db1-7181-4887-9606-5ec6c1ce9a97",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "b363ef3c-0afe-44ce-ba21-6ceda5b1fd13"
        },
        "item": {
          "id": "e07da576-0e8b-4f25-b9db-475db1726d17",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "72334a71-40b6-438e-905a-2142db5399c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43b25ece-98bd-444d-8438-3347f3e04924",
        "cursor": {
          "ref": "57f19dae-425a-4817-b50a-75a53d353f8e",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "0a602909-23f6-483a-8d52-d9dcf16564ad"
        },
        "item": {
          "id": "43b25ece-98bd-444d-8438-3347f3e04924",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c2531f27-9c35-4ff6-9b9a-0803482f5829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3047cd5b-1457-4d4d-8aae-92dca3a55af1",
        "cursor": {
          "ref": "05363e7a-365f-4731-9ab3-dea121df6e3c",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "47611cbb-d8df-403a-8823-8f0af05bc0f5"
        },
        "item": {
          "id": "3047cd5b-1457-4d4d-8aae-92dca3a55af1",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "80416259-7742-4c30-8dc4-32dc33643fec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30dd92b2-8f64-4219-b843-869023db1382",
        "cursor": {
          "ref": "3dc36afd-6984-4b54-98b8-10dee03e54be",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "16433d26-84e1-457a-95d7-1f8870f887b6"
        },
        "item": {
          "id": "30dd92b2-8f64-4219-b843-869023db1382",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "d06dcd71-de81-4609-9b27-973e29123cbf",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "cdea2b2b-fa44-4574-827c-9e7fd40e06a0",
        "cursor": {
          "ref": "273a3ea8-eb2d-468a-a8a8-eb2eec4bf352",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d2778048-3863-4540-bb01-432f26d80e64"
        },
        "item": {
          "id": "cdea2b2b-fa44-4574-827c-9e7fd40e06a0",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "504b89e0-012a-49b5-8b25-06a01f45ece4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f97cc8cf-0b14-4763-9b33-da6b2fbf2d97",
        "cursor": {
          "ref": "b176e323-e857-486a-b62b-79e1b1a110aa",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "5ca79776-dd1c-4a77-a94c-bfeed48ec329"
        },
        "item": {
          "id": "f97cc8cf-0b14-4763-9b33-da6b2fbf2d97",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "1efddca1-4407-4505-bf53-c7c052b0e196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "937a9ee9-18ab-4ede-9e87-fa5179542fa2",
        "cursor": {
          "ref": "d08a8797-7e6e-4359-bff4-f6fe8e9275d7",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "76aaa099-1376-42c9-8a3f-18f22816ea0a"
        },
        "item": {
          "id": "937a9ee9-18ab-4ede-9e87-fa5179542fa2",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "7c84fa6d-0a91-4c09-b7e5-6b78fb3bea2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cc0b027-a48f-4c71-bd40-8c2d8651a7a1",
        "cursor": {
          "ref": "5e4cb13e-4161-4a43-a5d5-fda7a37c6d27",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "3c74fe81-7cf0-4e8b-aad7-2eb6e00b9968"
        },
        "item": {
          "id": "8cc0b027-a48f-4c71-bd40-8c2d8651a7a1",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "0b031bb0-a128-4434-a78b-f4f8f48ba44c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c44c569-1185-473b-8d36-2692f7973498",
        "cursor": {
          "ref": "4c7d56c4-3ddc-4762-bbad-c325b5a88c53",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ed684d0a-0183-420f-9561-ab9f03110882"
        },
        "item": {
          "id": "8c44c569-1185-473b-8d36-2692f7973498",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "9231bbe9-28b4-43ff-b14c-dc3ff3abe6e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59189c61-75a7-4909-a268-0041aa7c2297",
        "cursor": {
          "ref": "038a6cb4-3888-41dc-b99a-06f3ce2a4362",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b94bfd98-e96d-4796-bade-cf318f9d3f9f"
        },
        "item": {
          "id": "59189c61-75a7-4909-a268-0041aa7c2297",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "218a391c-60db-490b-8820-0e5cb913f24e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4cd652a-d273-4ce0-87f7-1aa2390cf54a",
        "cursor": {
          "ref": "97aec77e-c832-472b-bdd9-63a42aca5d83",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "97907253-4a1b-4e54-9e07-314cb0f7ef97"
        },
        "item": {
          "id": "e4cd652a-d273-4ce0-87f7-1aa2390cf54a",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "80350d64-dd9a-4214-854c-d0d3cdca8d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f39317d-e551-4474-9388-211cfee3236e",
        "cursor": {
          "ref": "d507161e-a9c9-461f-96c3-3ffa43013328",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "bc78bc25-8bb1-4d78-b2a1-446744f4dc0a"
        },
        "item": {
          "id": "5f39317d-e551-4474-9388-211cfee3236e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "247d678a-ebc2-4530-98a3-9aac75ccbf05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba993e6f-4cd6-40da-9bfb-37dc9f0640af",
        "cursor": {
          "ref": "a22a2694-2ce2-4a5d-833b-d0955f5a922d",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "f2172939-02d9-496f-984b-641a37859149"
        },
        "item": {
          "id": "ba993e6f-4cd6-40da-9bfb-37dc9f0640af",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "215921a8-fca7-49cf-8c4d-d9781c17035a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dc44e7f-e7a5-41de-940a-4b07958eba58",
        "cursor": {
          "ref": "c8127755-7950-4006-9bbe-565b5a0e93c6",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "635b8976-65d1-4051-a1de-4e55f8d2ca2f"
        },
        "item": {
          "id": "3dc44e7f-e7a5-41de-940a-4b07958eba58",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "9df3b2e4-88cb-48f6-a3ce-b9a59622aac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef2d145-f8d9-4af5-ab61-e41a75357c76",
        "cursor": {
          "ref": "7dca986d-e578-4438-975c-eedfec3ad396",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "01e8a4d9-0046-4442-ac77-48cf66ca26cc"
        },
        "item": {
          "id": "cef2d145-f8d9-4af5-ab61-e41a75357c76",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e502ffed-b1d2-4630-803b-bc9e9093366d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1a6acdf-640e-4f4c-9630-d7b772bb0997",
        "cursor": {
          "ref": "175e82bf-74e9-4330-b584-6cdbf2515057",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "82648dc1-dce5-4cf4-9e6e-18871d680c8e"
        },
        "item": {
          "id": "b1a6acdf-640e-4f4c-9630-d7b772bb0997",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "5fc2228d-4e2a-4ebe-a75c-25a4e4f0efea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a7c85fb-9899-4e16-a5bc-72c908a47a60",
        "cursor": {
          "ref": "76e09370-a086-4797-b777-aa2d4527c8ee",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "471e94e7-76ba-4af5-b231-e0dcce77d281"
        },
        "item": {
          "id": "7a7c85fb-9899-4e16-a5bc-72c908a47a60",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "0ced771a-a8c5-4c1c-b3ad-daa13a793046",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b22243fc-b3c8-419b-9f8f-9a31451959b3",
        "cursor": {
          "ref": "3db0bdba-9f53-4f0f-9419-a36f245091af",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "4a4a2031-d42f-4d8e-b17a-8ae24e433df5"
        },
        "item": {
          "id": "b22243fc-b3c8-419b-9f8f-9a31451959b3",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "d429cd67-b314-4ea3-a4a5-5769fda16c33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e135ad06-70aa-4379-bdd0-710c41d1d6c1",
        "cursor": {
          "ref": "120c6773-935c-474b-bd41-744948466536",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "32e12b0b-ae3c-4d8b-be49-f613e245198d"
        },
        "item": {
          "id": "e135ad06-70aa-4379-bdd0-710c41d1d6c1",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "da3f1309-01ee-40df-a262-a998c3e24114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b26431f5-59de-4296-9261-4a1873b8da22",
        "cursor": {
          "ref": "623f19a2-cfe0-49a6-99f2-5b659f0096c5",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "065f213d-fd73-485e-b613-19040685d4e2"
        },
        "item": {
          "id": "b26431f5-59de-4296-9261-4a1873b8da22",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "8f7caadf-dbf3-42a2-a875-0d2e09fc8e78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbc3c6c3-ae01-4347-8eb1-fc50b85cc37a",
        "cursor": {
          "ref": "e1b3bfc3-5351-42fa-9525-3652abbfa8ab",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "7805b796-14cc-4974-92ac-8686b38b9da7"
        },
        "item": {
          "id": "fbc3c6c3-ae01-4347-8eb1-fc50b85cc37a",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "6de5c240-c14d-4d26-9f80-83a3b2f34c23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f09a52f3-ccfc-440b-b0a3-bbde3ce18aad",
        "cursor": {
          "ref": "0abd75a4-69c1-4a40-b1db-4b4db13f0fec",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "b05e260d-0131-46f3-a9e8-02ecf2a1dcab"
        },
        "item": {
          "id": "f09a52f3-ccfc-440b-b0a3-bbde3ce18aad",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f92b8b76-61dc-481f-80e2-bbc01cba1d2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fb5927d-ac3b-4bda-8c7e-12ae77e1387a",
        "cursor": {
          "ref": "0df05965-d931-454f-b29a-7a6fad2dc698",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "1cc3edc6-9000-4d2e-b478-8cc90a016dd2"
        },
        "item": {
          "id": "6fb5927d-ac3b-4bda-8c7e-12ae77e1387a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e37b7acd-e319-4850-859b-80f7fdfba123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "028a904c-a983-454a-81be-6379fa4ccc99",
        "cursor": {
          "ref": "d3172e70-7d43-4f63-8019-e30dedb78f40",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "506f0701-58e9-4756-a9d3-4ff020a0127c"
        },
        "item": {
          "id": "028a904c-a983-454a-81be-6379fa4ccc99",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "84373659-d9b5-4230-ab94-4fd032a2296f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "685e9b67-fab7-4792-9198-cedc223a39b6",
        "cursor": {
          "ref": "647c78fb-5b9b-4da4-9850-5a88b6a75171",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "6839e3b4-d50e-4aa3-9fd9-a03c08c538a6"
        },
        "item": {
          "id": "685e9b67-fab7-4792-9198-cedc223a39b6",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "81bf7f36-dc24-44f7-a521-a4553c165e9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0725b760-9c37-4a41-a8bf-8ebc2a836192",
        "cursor": {
          "ref": "203650df-81df-4cfb-b679-72af1f7254d5",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "d61831a4-d953-460b-bfb4-19c3858800f0"
        },
        "item": {
          "id": "0725b760-9c37-4a41-a8bf-8ebc2a836192",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "39fa6998-38c7-49c7-9f11-f79cf55c1121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9d81264-06ee-4681-b823-862f2bd6332d",
        "cursor": {
          "ref": "e32ba559-cb5e-45f1-848f-87cd00ea80c7",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "3401e31b-9899-44e9-8bc2-d63690f19fd6"
        },
        "item": {
          "id": "d9d81264-06ee-4681-b823-862f2bd6332d",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f741843a-846b-45e7-b9dd-0d467aa22f85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0af31ef4-057d-44bf-8b2f-e4124c28e6d0",
        "cursor": {
          "ref": "2db8cd7c-887b-4550-b36b-ef968dc4df09",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "5a60f07d-06c2-4b69-8794-a211fa166dfa"
        },
        "item": {
          "id": "0af31ef4-057d-44bf-8b2f-e4124c28e6d0",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "47a3fb0d-cd3c-4751-aa4a-e1950ee6f6ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a9e7943-005f-43ad-80b0-5fd93c5d5261",
        "cursor": {
          "ref": "c3cecba5-c939-46a1-8b01-461c57dd021f",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "029567a4-fac3-4d44-a8b4-8c5ecac91162"
        },
        "item": {
          "id": "2a9e7943-005f-43ad-80b0-5fd93c5d5261",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e973ddcf-ff3a-4b4a-983f-59f5a36c7e48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da8d94e4-a554-4356-a015-092d679a9530",
        "cursor": {
          "ref": "49c66a67-906f-43cc-a481-520ee4c66fea",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "bb5b34e3-d840-4552-af85-7c9aef4073d0"
        },
        "item": {
          "id": "da8d94e4-a554-4356-a015-092d679a9530",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "d17e2aee-121d-4344-b893-4801121405c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c97fde83-75e8-4318-9782-591df1d50c43",
        "cursor": {
          "ref": "8f023fbb-27db-4434-911a-b702c1cdf294",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "1ac54c72-e1a1-4bef-b15e-efa4461e7649"
        },
        "item": {
          "id": "c97fde83-75e8-4318-9782-591df1d50c43",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "6f944096-5d64-4303-a3bd-54951b27ba82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "234883f1-1138-4700-8911-0d10fc3f2f68",
        "cursor": {
          "ref": "99b5b2c3-e07a-4ddf-9e7d-564c0a470f35",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d55d01aa-4cec-4537-86cc-8e8d31f28341"
        },
        "item": {
          "id": "234883f1-1138-4700-8911-0d10fc3f2f68",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "666a0f02-00db-4b44-b962-d72643ee671a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a539b75-86f9-4f7f-86af-85c11465d181",
        "cursor": {
          "ref": "7e0298e5-fb97-48c6-a93b-f4530dc44f3f",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "5b70a836-fa74-4b5c-b376-ebfe8372f91a"
        },
        "item": {
          "id": "9a539b75-86f9-4f7f-86af-85c11465d181",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "e65873b0-2748-4d40-ac44-fdbfe9307aa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88980d26-5211-4517-a9d9-a0b96e861cf6",
        "cursor": {
          "ref": "48a08537-368f-47b1-9227-cd189bcf4f7a",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "129d3c94-7f94-482a-ba52-bcfd6f5590d7"
        },
        "item": {
          "id": "88980d26-5211-4517-a9d9-a0b96e861cf6",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "d7663ff0-77af-45a2-9fc1-7cc3019056e3",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "02c4e41c-aeef-4ec9-8db9-86803a122d68",
        "cursor": {
          "ref": "0bf69d99-7b70-4e07-9f59-614b875c5e0d",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "92e22aaf-0bc2-4ff6-8a14-8e35b9aa9d0d"
        },
        "item": {
          "id": "02c4e41c-aeef-4ec9-8db9-86803a122d68",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "575fddac-3e00-4821-abd2-989be4b69858",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "4c2a6e62-128c-4761-a9d2-6c01705e3445",
        "cursor": {
          "ref": "b647afe8-5922-45c7-be1f-e91183657df6",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "48bc052a-cc4b-4602-9d20-3f7a90c4a93a"
        },
        "item": {
          "id": "4c2a6e62-128c-4761-a9d2-6c01705e3445",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "513f4eba-79d5-4e81-87da-fc5238f1aa08",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "2050bb75-cd37-4e2e-ba29-d119c4f464de",
        "cursor": {
          "ref": "37325388-ba7a-4f9e-b5cb-ff203428f3e3",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "b78b0953-a027-452b-9e91-494f48ca22ee"
        },
        "item": {
          "id": "2050bb75-cd37-4e2e-ba29-d119c4f464de",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "bb75a4fa-bbca-4d8e-99b0-a885d2355b3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49a68c55-e4da-4038-bfaa-0496ad05d0b5",
        "cursor": {
          "ref": "5aff7f1a-6ee4-4db0-85d0-1e4738319385",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "9cf25352-35bb-4463-a3c3-c675424f2540"
        },
        "item": {
          "id": "49a68c55-e4da-4038-bfaa-0496ad05d0b5",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "afe89b65-de6b-4d13-b035-5171eb519859",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "eda95a5e-a447-4463-87b3-a79ff4ee5977",
        "cursor": {
          "ref": "4f35d503-ce68-40ef-9c13-83263b7bfe8d",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "5dee9c61-e0f3-4677-8bfa-89a9c260350a"
        },
        "item": {
          "id": "eda95a5e-a447-4463-87b3-a79ff4ee5977",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "65ad8e97-1b6c-4e39-a0a4-423e5901b40c",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "31315932-6834-47dc-92dc-2781adb0762c",
        "cursor": {
          "ref": "f76e5b07-2c86-4638-a1db-89548d28badf",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "da888f23-b1ae-433d-964e-a687431a3b49"
        },
        "item": {
          "id": "31315932-6834-47dc-92dc-2781adb0762c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "aa1248cc-9299-45e2-911a-751c74747988",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "afb61523-2bc5-4908-83a8-53cb927b3326",
        "cursor": {
          "ref": "ce55928e-8130-4e48-b016-f7997d00ae7a",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "f7d122ef-1d8e-4fa6-86ad-2a97db831f5a"
        },
        "item": {
          "id": "afb61523-2bc5-4908-83a8-53cb927b3326",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "8fa1c83a-3471-4b09-a0ff-fa5c0ffcae1b",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "5052c141-5dc8-4646-9f2c-362a922eaddf",
        "cursor": {
          "ref": "ed8afa11-9cda-428f-9657-2b765a1d88d0",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a68b1bac-c77b-4de1-9414-cdd5598392cb"
        },
        "item": {
          "id": "5052c141-5dc8-4646-9f2c-362a922eaddf",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "16d42a84-1362-4a14-a558-e1c88b03846c",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "6a7bdb50-3092-4f46-95b6-f4743b947965",
        "cursor": {
          "ref": "678ff5a9-eaa8-4405-b521-65e1b90f6f67",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "659f21b6-cfeb-4d06-afd4-9615b79062f2"
        },
        "item": {
          "id": "6a7bdb50-3092-4f46-95b6-f4743b947965",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "85adaa2f-8163-4ec2-aaff-00464dd25abc",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "6b900090-db97-4390-8f2e-191fefaebbed",
        "cursor": {
          "ref": "cb57384a-6e7f-4913-957c-0ab049987834",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "838ddf76-3595-457f-a108-a651f79acd7a"
        },
        "item": {
          "id": "6b900090-db97-4390-8f2e-191fefaebbed",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "9f80a380-ad5c-43de-a02b-22fcf237bf8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bfe9032-8d8a-40ab-8483-f510f21f9e89",
        "cursor": {
          "ref": "711df8f5-06d1-415f-8241-fc14c5b8c127",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "fc83c625-c5e5-4416-8972-3775e9652979"
        },
        "item": {
          "id": "1bfe9032-8d8a-40ab-8483-f510f21f9e89",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "2ae5868e-acc5-4b0b-a24d-1ff2a1242b01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "264126f7-701a-4491-aec9-5cff4ae86c84",
        "cursor": {
          "ref": "abeace07-9d30-4669-a2f7-8d09ac7632d4",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "996ced59-8f6d-4589-9d56-10056f31c99b"
        },
        "item": {
          "id": "264126f7-701a-4491-aec9-5cff4ae86c84",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "6632be8b-6609-475c-bc60-4b08c39c2779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69a86f52-82ac-4627-b775-d095c4990cb6",
        "cursor": {
          "ref": "98f76be7-0b7d-41da-a074-de554dfaccbf",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "92d68a2d-0005-49eb-9405-636e41af184b"
        },
        "item": {
          "id": "69a86f52-82ac-4627-b775-d095c4990cb6",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "15b79728-98b7-4ab7-84f1-3c784ba4fb32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10ffd921-95b9-475c-aeae-60930e44e68b",
        "cursor": {
          "ref": "72268930-fde3-48e4-a2ec-25034eb453d3",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "e63d1da5-f31f-43cc-85e0-ee915818bb38"
        },
        "item": {
          "id": "10ffd921-95b9-475c-aeae-60930e44e68b",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "cd6f03b7-9466-4207-9d30-b18e36c20157",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ade19256-dd37-4b62-b33d-31d331ec04ea",
        "cursor": {
          "ref": "d49eb454-0ce6-4635-90df-746bf26b2336",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "d5020856-6163-47c0-9b46-f1b48e1fb3d1"
        },
        "item": {
          "id": "ade19256-dd37-4b62-b33d-31d331ec04ea",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "d794f5e6-93cc-4f6c-b0a3-5182d5f6374f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b0fe18c-978b-4878-8371-3b46a8c4b6a3",
        "cursor": {
          "ref": "f551f235-0cc2-475e-9f3b-7efa5c17b667",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "657b0931-9359-48a5-aa19-5be7af59f3c7"
        },
        "item": {
          "id": "2b0fe18c-978b-4878-8371-3b46a8c4b6a3",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "0d5bddf4-c2f9-4f07-8d6e-c461540ce853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d948d654-66ff-40d3-8fbf-439c645884fd",
        "cursor": {
          "ref": "eee1ac06-a100-44cc-8857-511479fb6b9d",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "85c6dd15-86fb-424c-a47f-4114ebe2a9eb"
        },
        "item": {
          "id": "d948d654-66ff-40d3-8fbf-439c645884fd",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "aeec2191-7e50-4c5b-b14c-9eaf9a92cfe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c162bd6-836c-421f-b750-d6765cb9d267",
        "cursor": {
          "ref": "eb8e479a-ec42-4e60-a149-5031384dedc6",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "67f17c71-20b4-4f6e-b94c-fa0d127731f6"
        },
        "item": {
          "id": "4c162bd6-836c-421f-b750-d6765cb9d267",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "20f16787-0980-4983-bda1-6e5ebc2fb30e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c42cabf-0864-41a4-acf6-693d04e34cac",
        "cursor": {
          "ref": "5ee2845f-0dff-4029-a148-a2904fc3eb76",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "28da1f5a-3777-4507-aae5-6c15bdc5dd1e"
        },
        "item": {
          "id": "5c42cabf-0864-41a4-acf6-693d04e34cac",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "cb0fa936-2b2a-47f0-aa35-2c8008763c03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "774bc0b2-4cb6-426a-917a-66c24524054d",
        "cursor": {
          "ref": "0829c858-2544-485e-8a83-a78b4e3c1e27",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "8fffa6ca-17d0-43f6-8835-04cc0f6040a4"
        },
        "item": {
          "id": "774bc0b2-4cb6-426a-917a-66c24524054d",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "08087a4c-4d79-4d71-9331-5a425d250ffb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95fe5511-9678-44ec-ad98-5a50ebb1ad08",
        "cursor": {
          "ref": "3fc514d7-4a81-44c5-b977-dfd1b032ef01",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "36011f05-87aa-419d-9734-9a8352be3852"
        },
        "item": {
          "id": "95fe5511-9678-44ec-ad98-5a50ebb1ad08",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "413fc1b2-7af6-4edc-b3b0-33d6e5a9705a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0b6cbfd-9dbe-4397-ad71-9ed9afc46a82",
        "cursor": {
          "ref": "10782618-ec97-4bcc-bef0-20865f58ebd1",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "54a4e6c0-3a73-4024-92a0-89d8aba07cd3"
        },
        "item": {
          "id": "b0b6cbfd-9dbe-4397-ad71-9ed9afc46a82",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "54ac316c-0d92-4a42-9ba7-4f8df1793982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c7ebff6-f287-4c38-995e-911149688d75",
        "cursor": {
          "ref": "291645e9-e975-46d4-8373-896112133ae2",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "94bd7c93-2f27-42b2-b063-aac51c4ae07f"
        },
        "item": {
          "id": "6c7ebff6-f287-4c38-995e-911149688d75",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "6f2d6bc8-7682-4c10-aec5-57d51b7df273",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "404f59c9-0f5c-459f-83f7-a6e7213a8ed8",
        "cursor": {
          "ref": "d3033b02-ca89-4622-b7e1-287641d36ddd",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "09120d22-2fb7-4b91-af32-259e66a729b0"
        },
        "item": {
          "id": "404f59c9-0f5c-459f-83f7-a6e7213a8ed8",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8a34b99b-3f60-487a-bcd8-1b0aea32c2b8",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "8bf7f457-4ec7-4025-9106-74d819218fc5",
        "cursor": {
          "ref": "6c72dbf6-4c6d-4943-a663-0be8f2d0431e",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "81e2c48e-0148-4269-b67c-da34dedd06e3"
        },
        "item": {
          "id": "8bf7f457-4ec7-4025-9106-74d819218fc5",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "238aeed2-e773-4056-a668-08a7a64c0350",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "f77c661a-5dd5-4ba0-983b-1c9ea8f4e675",
        "cursor": {
          "ref": "e16775b3-ea2e-445f-b6d8-715d6ea250c5",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "5c97d992-2119-45df-ab18-d9b1b462eac7"
        },
        "item": {
          "id": "f77c661a-5dd5-4ba0-983b-1c9ea8f4e675",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "cdd1b0a0-dd3c-4c07-bb7f-c9c8a05b7e51",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "146e4706-5ac3-495f-9340-5e6b49a28257",
        "cursor": {
          "ref": "3ca743a3-1ffc-412e-9cfc-dfee908bf046",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "54a2937d-022a-4b6d-a6ec-515304ad4cf3"
        },
        "item": {
          "id": "146e4706-5ac3-495f-9340-5e6b49a28257",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "2c9faa52-cbd9-41d5-888b-f2e4770d7cfc",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "66119895-7483-4fbe-b532-634c9d478197",
        "cursor": {
          "ref": "7bb98a17-1a53-4c4d-bcbd-5e7a6252356b",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "0698a805-18ad-4d58-a46d-2e30ac4c226a"
        },
        "item": {
          "id": "66119895-7483-4fbe-b532-634c9d478197",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "c1f1e825-947c-4214-8df8-956dfc1a02c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c6b8362-9df0-4ded-ac57-03be4d5358d9",
        "cursor": {
          "ref": "0c5b5157-4382-463d-9fac-5043bb6ec05c",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "bf35f531-06a2-411a-b854-2c25ea307d90"
        },
        "item": {
          "id": "6c6b8362-9df0-4ded-ac57-03be4d5358d9",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "b102facd-18b5-42eb-8cf3-6f5f8ef9a949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f8f0f35-4552-4890-a6d9-62adcf35779f",
        "cursor": {
          "ref": "3b18f00f-f76c-4940-a4f6-33aaf0a74fe4",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5474825d-8223-414b-a3b5-e4a236ad2262"
        },
        "item": {
          "id": "4f8f0f35-4552-4890-a6d9-62adcf35779f",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ac950755-d86c-494c-9939-80a76dc58752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5c9f57a-5d29-43d4-bd4e-a021082d955a",
        "cursor": {
          "ref": "c684df97-429b-427e-a537-8ffcd02ba14e",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "760edae8-0e0e-4a13-9f95-b391366e6ce9"
        },
        "item": {
          "id": "c5c9f57a-5d29-43d4-bd4e-a021082d955a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "a0ab805e-de9b-4751-b894-e0bf8cb7c636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "009d40ed-f35e-4c64-9bf7-38abf0f03b42",
        "cursor": {
          "ref": "73f1227b-8829-4002-b512-016546c667ae",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ee794941-b197-4a46-b4a3-6589002c0cdd"
        },
        "item": {
          "id": "009d40ed-f35e-4c64-9bf7-38abf0f03b42",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b6572e9c-b3db-4472-8a4b-12068cb6cb06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a37df2e7-6b98-4125-8dba-45c300ad253c",
        "cursor": {
          "ref": "5b730024-5d72-4be0-bcc2-31f42a758d6b",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "53c4ceb1-efcf-4e29-b92e-ba8ad18f1d46"
        },
        "item": {
          "id": "a37df2e7-6b98-4125-8dba-45c300ad253c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "f02c6c57-b51d-4619-ad53-dd6f9a3bf04a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9464b5b-5abd-4e8d-9a64-7c7ef2513613",
        "cursor": {
          "ref": "cc3c62a6-269a-40a5-a221-7ae42c041d5f",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "282db468-f560-45d8-a8ce-6eedd4dd8497"
        },
        "item": {
          "id": "a9464b5b-5abd-4e8d-9a64-7c7ef2513613",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "669a928a-aa8c-4fed-bfef-ff7018cff2f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "026250a1-4ead-4574-8549-40cb2519dfa9",
        "cursor": {
          "ref": "6ff5676c-b10a-49f6-ab6d-700ef2c790d2",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "0ac07cda-f8cc-4ede-af2d-14a9901389db"
        },
        "item": {
          "id": "026250a1-4ead-4574-8549-40cb2519dfa9",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "b3c081aa-e321-4d90-965e-729b0bf5e611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54160814-e55a-4c79-b9b6-e417a844259b",
        "cursor": {
          "ref": "fd2711b4-9072-49b9-bc5f-744cb2c1f85f",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "e6fc11c4-d407-4c70-878b-6844285f1fc6"
        },
        "item": {
          "id": "54160814-e55a-4c79-b9b6-e417a844259b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "88b8d7ae-99a2-41e1-8c7e-11e84b3946c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44246f2e-8cf8-474b-8626-423b0995f6b1",
        "cursor": {
          "ref": "2c15b32a-d219-4ca8-a695-025bd529a9d0",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "d87cda96-e59f-4982-b55c-50a165db0813"
        },
        "item": {
          "id": "44246f2e-8cf8-474b-8626-423b0995f6b1",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "fa8b0538-e070-4445-9815-9f2edac841dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "add5c47d-3945-4721-a934-3c8727b5566c",
        "cursor": {
          "ref": "a0e8f870-dc5d-433b-99e0-f105d0c110a0",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "6bf4c85d-9223-41d6-8e52-881328f55e49"
        },
        "item": {
          "id": "add5c47d-3945-4721-a934-3c8727b5566c",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a7653ecd-773c-44ba-b13e-cbd9cac02e6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f89f627-508d-466a-8546-ead32be8fc20",
        "cursor": {
          "ref": "8d2ae29f-717f-4dc6-8c5f-56df23d15a37",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "5ac3b36a-ab80-4d98-a850-4399236024ab"
        },
        "item": {
          "id": "0f89f627-508d-466a-8546-ead32be8fc20",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "555c336d-c348-476b-90d9-2671710915c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39275af9-f90e-4c9e-b23a-a588f9705ba0",
        "cursor": {
          "ref": "28fd0487-82ac-4bd3-ab0f-4bee8b06164b",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "b79f31d0-4781-4ebe-8f77-7c4ae34bd793"
        },
        "item": {
          "id": "39275af9-f90e-4c9e-b23a-a588f9705ba0",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "a22a5ac5-ee0c-4d11-add1-a070a649547b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d102346-a453-4046-8e09-2262aa27f4f0",
        "cursor": {
          "ref": "96fd71ab-bb38-4899-a3a6-43fe701866ff",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "3902895f-eee0-4f22-94d3-ca814757fe85"
        },
        "item": {
          "id": "4d102346-a453-4046-8e09-2262aa27f4f0",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "9ff72155-810d-469c-8a7a-44fd2f8c4685",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0c84b19-e9f4-4d94-bf6b-ed8293f71418",
        "cursor": {
          "ref": "ce3eb1c8-98e4-410e-9841-9ffb60a63586",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "b56a18df-00c6-4139-b699-7d54797f0b55"
        },
        "item": {
          "id": "e0c84b19-e9f4-4d94-bf6b-ed8293f71418",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "34e45c03-7635-45e4-9adb-d3b699552415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "559065fd-fb42-488e-ae10-c7b9ff232658",
        "cursor": {
          "ref": "fd18c97e-e1be-43f7-a0c9-bacaaf1a391d",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "355a0aa6-2c29-4bf3-a356-765e1015cbd2"
        },
        "item": {
          "id": "559065fd-fb42-488e-ae10-c7b9ff232658",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "421c67cc-4259-4992-82ca-bf5d51705038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "708c5134-53ad-4c75-85d4-650b529ea611",
        "cursor": {
          "ref": "fb1b3391-cefa-4f59-83f3-9fd8287f5420",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "8422fa05-f68c-4458-9340-80cc8f39a968"
        },
        "item": {
          "id": "708c5134-53ad-4c75-85d4-650b529ea611",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "a82d5566-100c-4729-afef-c2a8de1058c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c434d321-dd6a-48f5-bf98-cf0243cf306c",
        "cursor": {
          "ref": "1368482a-a48e-4301-88f9-894fd637b118",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "11d719e4-d38b-4028-b59e-34f9797ac689"
        },
        "item": {
          "id": "c434d321-dd6a-48f5-bf98-cf0243cf306c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "61688ceb-e7d2-4374-a9e0-70fb0612b4dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "818337a6-adfa-4a12-bda7-64b53ffdd445",
        "cursor": {
          "ref": "b816f898-62b8-426d-be68-60adbad68d42",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "9e475907-e272-4ce4-982a-0ec006f897f0"
        },
        "item": {
          "id": "818337a6-adfa-4a12-bda7-64b53ffdd445",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "b51e0f32-cefd-485b-92e6-13ba953b7782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7824fc19-f2e7-4fc9-bb29-7bddc2d86269",
        "cursor": {
          "ref": "e0bd26d7-631d-4e25-9149-e6b054c58a08",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "04fd8f2d-451e-4334-8b69-6c0e640579a9"
        },
        "item": {
          "id": "7824fc19-f2e7-4fc9-bb29-7bddc2d86269",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "996b5378-1ffe-49af-873c-72a6a314bdb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16f25113-5c85-47f4-a8f2-cdb4a0aaa806",
        "cursor": {
          "ref": "34a3da42-173a-45a5-ac23-4712e0c0f958",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "16eeea22-7a35-406e-9d80-cace81ef88e2"
        },
        "item": {
          "id": "16f25113-5c85-47f4-a8f2-cdb4a0aaa806",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "b967c74a-9634-475b-a64a-e5c27957df68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7dbbbf2-bd4b-4db5-867e-1cdb28cbabb4",
        "cursor": {
          "ref": "1ae5c25b-58e6-429e-9293-8a13eca6a068",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "60dc3fc3-d9e9-4999-8e5a-c5140e5cf3e0"
        },
        "item": {
          "id": "e7dbbbf2-bd4b-4db5-867e-1cdb28cbabb4",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "67559f52-7270-4d9e-bcd1-6f3c01639437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdab8676-894a-4564-a13b-04fc52ce03c3",
        "cursor": {
          "ref": "96581149-99e7-45c2-9307-76fb8180008b",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "a4b904ad-16b2-4878-b749-ed117f25c0e4"
        },
        "item": {
          "id": "fdab8676-894a-4564-a13b-04fc52ce03c3",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "97cc76aa-ff38-45c6-b377-805e40f1d3e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "564532d6-21ac-4d60-886e-ff9249982dc2",
        "cursor": {
          "ref": "78205058-72c8-4da0-ae4b-a3cbfa203189",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "3700ed83-5e6a-4411-8f9d-b7d3e83e4695"
        },
        "item": {
          "id": "564532d6-21ac-4d60-886e-ff9249982dc2",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "1ae86d02-0c65-45de-8058-aa6dba37a3f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "586fd78a-7174-488d-ab65-1c2b34a6d9c8",
        "cursor": {
          "ref": "0e706c37-b56d-4a87-80c5-7414f767d49d",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "606ac977-f329-495a-bce8-2e9086a85007"
        },
        "item": {
          "id": "586fd78a-7174-488d-ab65-1c2b34a6d9c8",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "07f71007-f9b9-4dae-b301-12f6cd052594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b172a17f-1f00-40ab-a6df-38db8770f93c",
        "cursor": {
          "ref": "d3472d84-af4f-4fba-b8ce-2f63f0de5740",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "af08b8e8-5bcb-4908-bdd5-617dff0377df"
        },
        "item": {
          "id": "b172a17f-1f00-40ab-a6df-38db8770f93c",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6c5fbe37-291b-4a71-9df0-2149893d342b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c960a5e9-532a-42a9-98af-533eeb5905f1",
        "cursor": {
          "ref": "f623f6d8-3fdc-46a7-995f-f74e21b71e70",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "c51ed136-51f8-4cd3-beb3-d496623bef2f"
        },
        "item": {
          "id": "c960a5e9-532a-42a9-98af-533eeb5905f1",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "863429e0-48c3-4302-ad47-8ac3b573b9ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc7cd3a4-58b6-4763-b8a3-bf85f11570a3",
        "cursor": {
          "ref": "d6410c7f-3a3f-41b9-a5dc-cc6bec94ce47",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "b880ba98-f0f6-463f-8d08-b59d7f99f84a"
        },
        "item": {
          "id": "bc7cd3a4-58b6-4763-b8a3-bf85f11570a3",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "64242286-cb31-478d-be1b-3057ef347009",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f43dc2d8-0ea7-49f6-a212-6d6fd2d7b49c",
        "cursor": {
          "ref": "d1ebb81e-8398-49d5-b24e-cd6ffa503a2f",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "ce8c46fc-fd4b-4a6e-95ab-a3f5b281bfdb"
        },
        "item": {
          "id": "f43dc2d8-0ea7-49f6-a212-6d6fd2d7b49c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "1e110622-14b6-475a-beaa-fc2f85954828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf4d3a56-79ca-4755-9ab9-a041c99fa723",
        "cursor": {
          "ref": "0854f231-b107-4a7b-a518-e9845284c18c",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "819b169e-0db1-49d7-85a8-f346d6960af4"
        },
        "item": {
          "id": "cf4d3a56-79ca-4755-9ab9-a041c99fa723",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "40152a5d-6255-4fbb-bd3d-a6b66f7cc528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0962babf-e755-4b77-a097-7ebc746922da",
        "cursor": {
          "ref": "8c407169-87c4-4968-8000-a65cd4095d8f",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "6115c541-cc02-488f-93b9-49547a7e43dd"
        },
        "item": {
          "id": "0962babf-e755-4b77-a097-7ebc746922da",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e96bf564-1ad0-4b7d-9d5e-84814af01f3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87c1256e-05fd-42ba-8c6b-dbd689181a32",
        "cursor": {
          "ref": "fe81a577-313b-4a22-93a0-ae4facba1f67",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "a37b5f5b-ef5f-43d0-8282-445cb4b3e356"
        },
        "item": {
          "id": "87c1256e-05fd-42ba-8c6b-dbd689181a32",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "6844de6f-1abf-40cd-97be-315f042e1894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b4a0ca3-054e-4018-9193-5e5b27afad85",
        "cursor": {
          "ref": "2b2ad5ea-1007-48c2-b64e-2878adcc9827",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "3109b633-f3cf-45e9-b9a5-baf907202be7"
        },
        "item": {
          "id": "4b4a0ca3-054e-4018-9193-5e5b27afad85",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "039c2aef-ee73-4c72-ae0b-5367ce4c0530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cd37aba-ea5a-4f1e-a45b-6ca72e662484",
        "cursor": {
          "ref": "ab94c7bc-1550-47cd-a804-758a7d18ebbe",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "7c77331b-f38b-4511-915b-eef7c17f21f5"
        },
        "item": {
          "id": "9cd37aba-ea5a-4f1e-a45b-6ca72e662484",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "a3442b2e-134a-4b26-8df7-5a0daf1c5977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0124a27e-5e0e-42bb-955a-c4462a214193",
        "cursor": {
          "ref": "9504a1c3-1856-4309-95ee-bd4d880f7f4c",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "55c437f5-733e-47cc-bbb8-948ec45046f9"
        },
        "item": {
          "id": "0124a27e-5e0e-42bb-955a-c4462a214193",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a0ed93ba-5319-4210-b188-657f3b32f18e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5016c47-6ad0-4316-87be-89409132e857",
        "cursor": {
          "ref": "c6b684a2-5528-48c8-a7b1-6e6bd74e7a81",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "52a66329-f876-47aa-be3b-8609cb1fa071"
        },
        "item": {
          "id": "d5016c47-6ad0-4316-87be-89409132e857",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "107dcdd9-7bc6-4066-ba8c-b6a8741c64fc",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "4bc41e9f-c047-404b-bee2-20c13116739e",
        "cursor": {
          "ref": "c5f63f8f-f62f-4101-98a3-b3f602abbfa8",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "ce1996e4-67bc-47ce-905f-b4bb5ca6908a"
        },
        "item": {
          "id": "4bc41e9f-c047-404b-bee2-20c13116739e",
          "name": "credentials_verify"
        },
        "response": {
          "id": "8ac2ab2d-49ba-4901-b13f-aa571d94a6a8",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb59dc54-9b4c-46ad-a978-96c0b71d0d12",
        "cursor": {
          "ref": "d648b482-3556-437a-b52a-bdc8ab578444",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "ded9604b-be81-436d-ac6e-fd3f14ae02b7"
        },
        "item": {
          "id": "fb59dc54-9b4c-46ad-a978-96c0b71d0d12",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "eff5853c-d273-4d2c-8414-472c44be5176",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "69c5dd87-90b8-4dce-9f62-73294abea754",
        "cursor": {
          "ref": "8e88ff52-1d68-46dc-82cc-cdae487e456f",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "afbfaa31-0a49-4018-bb4c-0f204d85a6d6"
        },
        "item": {
          "id": "69c5dd87-90b8-4dce-9f62-73294abea754",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3c0e8754-639c-4e88-be83-8b70a3f59084",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69c5dd87-90b8-4dce-9f62-73294abea754",
        "cursor": {
          "ref": "8e88ff52-1d68-46dc-82cc-cdae487e456f",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "afbfaa31-0a49-4018-bb4c-0f204d85a6d6"
        },
        "item": {
          "id": "69c5dd87-90b8-4dce-9f62-73294abea754",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3c0e8754-639c-4e88-be83-8b70a3f59084",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ad17690-49e1-4cad-8005-97b1d0354913",
        "cursor": {
          "ref": "ba76c522-16b8-4c91-b6ac-bde5202684aa",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "687bc6bb-e231-49b0-9868-5ae2cfb895c2"
        },
        "item": {
          "id": "2ad17690-49e1-4cad-8005-97b1d0354913",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b79e0615-bbac-4c71-bfbd-03d45d376617",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14df3912-9571-42b3-b721-265eff1a8e70",
        "cursor": {
          "ref": "4ad0ec5b-a9e0-4704-b43f-0fc6ae6d51c4",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "e05dddef-b124-4960-aabe-07920ff40db1"
        },
        "item": {
          "id": "14df3912-9571-42b3-b721-265eff1a8e70",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "272f9bc1-f6d5-4afe-8112-0046946783b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}